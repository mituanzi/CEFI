
syringe_NonSecure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049a0  080401f8  080401f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f8  08044b98  08044b98  00014b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08045090  08045090  000181f0  2**0
                  CONTENTS
  4 .ARM          00000008  08045090  08045090  00015090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08045098  08045098  000181f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08045098  08045098  00015098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0804509c  0804509c  0001509c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20018000  080450a0  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  200181f0  08045290  000181f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20018334  08045290  00018334  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000181f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ddac  00000000  00000000  00018226  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002048  00000000  00000000  00025fd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a20  00000000  00000000  00028020  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000948  00000000  00000000  00028a40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a036  00000000  00000000  00029388  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a19a  00000000  00000000  000533be  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00104628  00000000  00000000  0005d558  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00161b80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003038  00000000  00000000  00161bfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000024  00000000  00000000  00164c34  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  00164c58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080401f8 <__do_global_dtors_aux>:
 80401f8:	b510      	push	{r4, lr}
 80401fa:	4c05      	ldr	r4, [pc, #20]	; (8040210 <__do_global_dtors_aux+0x18>)
 80401fc:	7823      	ldrb	r3, [r4, #0]
 80401fe:	b933      	cbnz	r3, 804020e <__do_global_dtors_aux+0x16>
 8040200:	4b04      	ldr	r3, [pc, #16]	; (8040214 <__do_global_dtors_aux+0x1c>)
 8040202:	b113      	cbz	r3, 804020a <__do_global_dtors_aux+0x12>
 8040204:	4804      	ldr	r0, [pc, #16]	; (8040218 <__do_global_dtors_aux+0x20>)
 8040206:	e000      	b.n	804020a <__do_global_dtors_aux+0x12>
 8040208:	bf00      	nop
 804020a:	2301      	movs	r3, #1
 804020c:	7023      	strb	r3, [r4, #0]
 804020e:	bd10      	pop	{r4, pc}
 8040210:	200181f0 	.word	0x200181f0
 8040214:	00000000 	.word	0x00000000
 8040218:	08044b70 	.word	0x08044b70

0804021c <frame_dummy>:
 804021c:	b508      	push	{r3, lr}
 804021e:	4b03      	ldr	r3, [pc, #12]	; (804022c <frame_dummy+0x10>)
 8040220:	b11b      	cbz	r3, 804022a <frame_dummy+0xe>
 8040222:	4903      	ldr	r1, [pc, #12]	; (8040230 <frame_dummy+0x14>)
 8040224:	4803      	ldr	r0, [pc, #12]	; (8040234 <frame_dummy+0x18>)
 8040226:	e000      	b.n	804022a <frame_dummy+0xe>
 8040228:	bf00      	nop
 804022a:	bd08      	pop	{r3, pc}
 804022c:	00000000 	.word	0x00000000
 8040230:	200181f4 	.word	0x200181f4
 8040234:	08044b70 	.word	0x08044b70

08040238 <__aeabi_drsub>:
 8040238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 804023c:	e002      	b.n	8040244 <__adddf3>
 804023e:	bf00      	nop

08040240 <__aeabi_dsub>:
 8040240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08040244 <__adddf3>:
 8040244:	b530      	push	{r4, r5, lr}
 8040246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 804024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 804024e:	ea94 0f05 	teq	r4, r5
 8040252:	bf08      	it	eq
 8040254:	ea90 0f02 	teqeq	r0, r2
 8040258:	bf1f      	itttt	ne
 804025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 804025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8040262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8040266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 804026a:	f000 80e2 	beq.w	8040432 <__adddf3+0x1ee>
 804026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8040272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8040276:	bfb8      	it	lt
 8040278:	426d      	neglt	r5, r5
 804027a:	dd0c      	ble.n	8040296 <__adddf3+0x52>
 804027c:	442c      	add	r4, r5
 804027e:	ea80 0202 	eor.w	r2, r0, r2
 8040282:	ea81 0303 	eor.w	r3, r1, r3
 8040286:	ea82 0000 	eor.w	r0, r2, r0
 804028a:	ea83 0101 	eor.w	r1, r3, r1
 804028e:	ea80 0202 	eor.w	r2, r0, r2
 8040292:	ea81 0303 	eor.w	r3, r1, r3
 8040296:	2d36      	cmp	r5, #54	; 0x36
 8040298:	bf88      	it	hi
 804029a:	bd30      	pophi	{r4, r5, pc}
 804029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80402a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80402a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80402a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80402ac:	d002      	beq.n	80402b4 <__adddf3+0x70>
 80402ae:	4240      	negs	r0, r0
 80402b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80402b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80402b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80402bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80402c0:	d002      	beq.n	80402c8 <__adddf3+0x84>
 80402c2:	4252      	negs	r2, r2
 80402c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80402c8:	ea94 0f05 	teq	r4, r5
 80402cc:	f000 80a7 	beq.w	804041e <__adddf3+0x1da>
 80402d0:	f1a4 0401 	sub.w	r4, r4, #1
 80402d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80402d8:	db0d      	blt.n	80402f6 <__adddf3+0xb2>
 80402da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80402de:	fa22 f205 	lsr.w	r2, r2, r5
 80402e2:	1880      	adds	r0, r0, r2
 80402e4:	f141 0100 	adc.w	r1, r1, #0
 80402e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80402ec:	1880      	adds	r0, r0, r2
 80402ee:	fa43 f305 	asr.w	r3, r3, r5
 80402f2:	4159      	adcs	r1, r3
 80402f4:	e00e      	b.n	8040314 <__adddf3+0xd0>
 80402f6:	f1a5 0520 	sub.w	r5, r5, #32
 80402fa:	f10e 0e20 	add.w	lr, lr, #32
 80402fe:	2a01      	cmp	r2, #1
 8040300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8040304:	bf28      	it	cs
 8040306:	f04c 0c02 	orrcs.w	ip, ip, #2
 804030a:	fa43 f305 	asr.w	r3, r3, r5
 804030e:	18c0      	adds	r0, r0, r3
 8040310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8040314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8040318:	d507      	bpl.n	804032a <__adddf3+0xe6>
 804031a:	f04f 0e00 	mov.w	lr, #0
 804031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8040322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8040326:	eb6e 0101 	sbc.w	r1, lr, r1
 804032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 804032e:	d31b      	bcc.n	8040368 <__adddf3+0x124>
 8040330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8040334:	d30c      	bcc.n	8040350 <__adddf3+0x10c>
 8040336:	0849      	lsrs	r1, r1, #1
 8040338:	ea5f 0030 	movs.w	r0, r0, rrx
 804033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8040340:	f104 0401 	add.w	r4, r4, #1
 8040344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8040348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 804034c:	f080 809a 	bcs.w	8040484 <__adddf3+0x240>
 8040350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8040354:	bf08      	it	eq
 8040356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 804035a:	f150 0000 	adcs.w	r0, r0, #0
 804035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8040362:	ea41 0105 	orr.w	r1, r1, r5
 8040366:	bd30      	pop	{r4, r5, pc}
 8040368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 804036c:	4140      	adcs	r0, r0
 804036e:	eb41 0101 	adc.w	r1, r1, r1
 8040372:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8040376:	f1a4 0401 	sub.w	r4, r4, #1
 804037a:	d1e9      	bne.n	8040350 <__adddf3+0x10c>
 804037c:	f091 0f00 	teq	r1, #0
 8040380:	bf04      	itt	eq
 8040382:	4601      	moveq	r1, r0
 8040384:	2000      	moveq	r0, #0
 8040386:	fab1 f381 	clz	r3, r1
 804038a:	bf08      	it	eq
 804038c:	3320      	addeq	r3, #32
 804038e:	f1a3 030b 	sub.w	r3, r3, #11
 8040392:	f1b3 0220 	subs.w	r2, r3, #32
 8040396:	da0c      	bge.n	80403b2 <__adddf3+0x16e>
 8040398:	320c      	adds	r2, #12
 804039a:	dd08      	ble.n	80403ae <__adddf3+0x16a>
 804039c:	f102 0c14 	add.w	ip, r2, #20
 80403a0:	f1c2 020c 	rsb	r2, r2, #12
 80403a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80403a8:	fa21 f102 	lsr.w	r1, r1, r2
 80403ac:	e00c      	b.n	80403c8 <__adddf3+0x184>
 80403ae:	f102 0214 	add.w	r2, r2, #20
 80403b2:	bfd8      	it	le
 80403b4:	f1c2 0c20 	rsble	ip, r2, #32
 80403b8:	fa01 f102 	lsl.w	r1, r1, r2
 80403bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80403c0:	bfdc      	itt	le
 80403c2:	ea41 010c 	orrle.w	r1, r1, ip
 80403c6:	4090      	lslle	r0, r2
 80403c8:	1ae4      	subs	r4, r4, r3
 80403ca:	bfa2      	ittt	ge
 80403cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80403d0:	4329      	orrge	r1, r5
 80403d2:	bd30      	popge	{r4, r5, pc}
 80403d4:	ea6f 0404 	mvn.w	r4, r4
 80403d8:	3c1f      	subs	r4, #31
 80403da:	da1c      	bge.n	8040416 <__adddf3+0x1d2>
 80403dc:	340c      	adds	r4, #12
 80403de:	dc0e      	bgt.n	80403fe <__adddf3+0x1ba>
 80403e0:	f104 0414 	add.w	r4, r4, #20
 80403e4:	f1c4 0220 	rsb	r2, r4, #32
 80403e8:	fa20 f004 	lsr.w	r0, r0, r4
 80403ec:	fa01 f302 	lsl.w	r3, r1, r2
 80403f0:	ea40 0003 	orr.w	r0, r0, r3
 80403f4:	fa21 f304 	lsr.w	r3, r1, r4
 80403f8:	ea45 0103 	orr.w	r1, r5, r3
 80403fc:	bd30      	pop	{r4, r5, pc}
 80403fe:	f1c4 040c 	rsb	r4, r4, #12
 8040402:	f1c4 0220 	rsb	r2, r4, #32
 8040406:	fa20 f002 	lsr.w	r0, r0, r2
 804040a:	fa01 f304 	lsl.w	r3, r1, r4
 804040e:	ea40 0003 	orr.w	r0, r0, r3
 8040412:	4629      	mov	r1, r5
 8040414:	bd30      	pop	{r4, r5, pc}
 8040416:	fa21 f004 	lsr.w	r0, r1, r4
 804041a:	4629      	mov	r1, r5
 804041c:	bd30      	pop	{r4, r5, pc}
 804041e:	f094 0f00 	teq	r4, #0
 8040422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8040426:	bf06      	itte	eq
 8040428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 804042c:	3401      	addeq	r4, #1
 804042e:	3d01      	subne	r5, #1
 8040430:	e74e      	b.n	80402d0 <__adddf3+0x8c>
 8040432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8040436:	bf18      	it	ne
 8040438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 804043c:	d029      	beq.n	8040492 <__adddf3+0x24e>
 804043e:	ea94 0f05 	teq	r4, r5
 8040442:	bf08      	it	eq
 8040444:	ea90 0f02 	teqeq	r0, r2
 8040448:	d005      	beq.n	8040456 <__adddf3+0x212>
 804044a:	ea54 0c00 	orrs.w	ip, r4, r0
 804044e:	bf04      	itt	eq
 8040450:	4619      	moveq	r1, r3
 8040452:	4610      	moveq	r0, r2
 8040454:	bd30      	pop	{r4, r5, pc}
 8040456:	ea91 0f03 	teq	r1, r3
 804045a:	bf1e      	ittt	ne
 804045c:	2100      	movne	r1, #0
 804045e:	2000      	movne	r0, #0
 8040460:	bd30      	popne	{r4, r5, pc}
 8040462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8040466:	d105      	bne.n	8040474 <__adddf3+0x230>
 8040468:	0040      	lsls	r0, r0, #1
 804046a:	4149      	adcs	r1, r1
 804046c:	bf28      	it	cs
 804046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8040472:	bd30      	pop	{r4, r5, pc}
 8040474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8040478:	bf3c      	itt	cc
 804047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 804047e:	bd30      	popcc	{r4, r5, pc}
 8040480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8040484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8040488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 804048c:	f04f 0000 	mov.w	r0, #0
 8040490:	bd30      	pop	{r4, r5, pc}
 8040492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8040496:	bf1a      	itte	ne
 8040498:	4619      	movne	r1, r3
 804049a:	4610      	movne	r0, r2
 804049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80404a0:	bf1c      	itt	ne
 80404a2:	460b      	movne	r3, r1
 80404a4:	4602      	movne	r2, r0
 80404a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80404aa:	bf06      	itte	eq
 80404ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80404b0:	ea91 0f03 	teqeq	r1, r3
 80404b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80404b8:	bd30      	pop	{r4, r5, pc}
 80404ba:	bf00      	nop

080404bc <__aeabi_ui2d>:
 80404bc:	f090 0f00 	teq	r0, #0
 80404c0:	bf04      	itt	eq
 80404c2:	2100      	moveq	r1, #0
 80404c4:	4770      	bxeq	lr
 80404c6:	b530      	push	{r4, r5, lr}
 80404c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80404cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80404d0:	f04f 0500 	mov.w	r5, #0
 80404d4:	f04f 0100 	mov.w	r1, #0
 80404d8:	e750      	b.n	804037c <__adddf3+0x138>
 80404da:	bf00      	nop

080404dc <__aeabi_i2d>:
 80404dc:	f090 0f00 	teq	r0, #0
 80404e0:	bf04      	itt	eq
 80404e2:	2100      	moveq	r1, #0
 80404e4:	4770      	bxeq	lr
 80404e6:	b530      	push	{r4, r5, lr}
 80404e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80404ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80404f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80404f4:	bf48      	it	mi
 80404f6:	4240      	negmi	r0, r0
 80404f8:	f04f 0100 	mov.w	r1, #0
 80404fc:	e73e      	b.n	804037c <__adddf3+0x138>
 80404fe:	bf00      	nop

08040500 <__aeabi_f2d>:
 8040500:	0042      	lsls	r2, r0, #1
 8040502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8040506:	ea4f 0131 	mov.w	r1, r1, rrx
 804050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 804050e:	bf1f      	itttt	ne
 8040510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8040514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8040518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 804051c:	4770      	bxne	lr
 804051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8040522:	bf08      	it	eq
 8040524:	4770      	bxeq	lr
 8040526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 804052a:	bf04      	itt	eq
 804052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8040530:	4770      	bxeq	lr
 8040532:	b530      	push	{r4, r5, lr}
 8040534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8040538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 804053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8040540:	e71c      	b.n	804037c <__adddf3+0x138>
 8040542:	bf00      	nop

08040544 <__aeabi_ul2d>:
 8040544:	ea50 0201 	orrs.w	r2, r0, r1
 8040548:	bf08      	it	eq
 804054a:	4770      	bxeq	lr
 804054c:	b530      	push	{r4, r5, lr}
 804054e:	f04f 0500 	mov.w	r5, #0
 8040552:	e00a      	b.n	804056a <__aeabi_l2d+0x16>

08040554 <__aeabi_l2d>:
 8040554:	ea50 0201 	orrs.w	r2, r0, r1
 8040558:	bf08      	it	eq
 804055a:	4770      	bxeq	lr
 804055c:	b530      	push	{r4, r5, lr}
 804055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8040562:	d502      	bpl.n	804056a <__aeabi_l2d+0x16>
 8040564:	4240      	negs	r0, r0
 8040566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 804056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 804056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8040572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8040576:	f43f aed8 	beq.w	804032a <__adddf3+0xe6>
 804057a:	f04f 0203 	mov.w	r2, #3
 804057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8040582:	bf18      	it	ne
 8040584:	3203      	addne	r2, #3
 8040586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 804058a:	bf18      	it	ne
 804058c:	3203      	addne	r2, #3
 804058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8040592:	f1c2 0320 	rsb	r3, r2, #32
 8040596:	fa00 fc03 	lsl.w	ip, r0, r3
 804059a:	fa20 f002 	lsr.w	r0, r0, r2
 804059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80405a2:	ea40 000e 	orr.w	r0, r0, lr
 80405a6:	fa21 f102 	lsr.w	r1, r1, r2
 80405aa:	4414      	add	r4, r2
 80405ac:	e6bd      	b.n	804032a <__adddf3+0xe6>
 80405ae:	bf00      	nop

080405b0 <__aeabi_dmul>:
 80405b0:	b570      	push	{r4, r5, r6, lr}
 80405b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80405b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80405ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80405be:	bf1d      	ittte	ne
 80405c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80405c4:	ea94 0f0c 	teqne	r4, ip
 80405c8:	ea95 0f0c 	teqne	r5, ip
 80405cc:	f000 f8de 	bleq	804078c <__aeabi_dmul+0x1dc>
 80405d0:	442c      	add	r4, r5
 80405d2:	ea81 0603 	eor.w	r6, r1, r3
 80405d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80405da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80405de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80405e2:	bf18      	it	ne
 80405e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80405e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80405ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80405f0:	d038      	beq.n	8040664 <__aeabi_dmul+0xb4>
 80405f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80405f6:	f04f 0500 	mov.w	r5, #0
 80405fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80405fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8040602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8040606:	f04f 0600 	mov.w	r6, #0
 804060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 804060e:	f09c 0f00 	teq	ip, #0
 8040612:	bf18      	it	ne
 8040614:	f04e 0e01 	orrne.w	lr, lr, #1
 8040618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 804061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8040620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8040624:	d204      	bcs.n	8040630 <__aeabi_dmul+0x80>
 8040626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 804062a:	416d      	adcs	r5, r5
 804062c:	eb46 0606 	adc.w	r6, r6, r6
 8040630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8040634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8040638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 804063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8040640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8040644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8040648:	bf88      	it	hi
 804064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 804064e:	d81e      	bhi.n	804068e <__aeabi_dmul+0xde>
 8040650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8040654:	bf08      	it	eq
 8040656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 804065a:	f150 0000 	adcs.w	r0, r0, #0
 804065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8040662:	bd70      	pop	{r4, r5, r6, pc}
 8040664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8040668:	ea46 0101 	orr.w	r1, r6, r1
 804066c:	ea40 0002 	orr.w	r0, r0, r2
 8040670:	ea81 0103 	eor.w	r1, r1, r3
 8040674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8040678:	bfc2      	ittt	gt
 804067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 804067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8040682:	bd70      	popgt	{r4, r5, r6, pc}
 8040684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8040688:	f04f 0e00 	mov.w	lr, #0
 804068c:	3c01      	subs	r4, #1
 804068e:	f300 80ab 	bgt.w	80407e8 <__aeabi_dmul+0x238>
 8040692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8040696:	bfde      	ittt	le
 8040698:	2000      	movle	r0, #0
 804069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 804069e:	bd70      	pople	{r4, r5, r6, pc}
 80406a0:	f1c4 0400 	rsb	r4, r4, #0
 80406a4:	3c20      	subs	r4, #32
 80406a6:	da35      	bge.n	8040714 <__aeabi_dmul+0x164>
 80406a8:	340c      	adds	r4, #12
 80406aa:	dc1b      	bgt.n	80406e4 <__aeabi_dmul+0x134>
 80406ac:	f104 0414 	add.w	r4, r4, #20
 80406b0:	f1c4 0520 	rsb	r5, r4, #32
 80406b4:	fa00 f305 	lsl.w	r3, r0, r5
 80406b8:	fa20 f004 	lsr.w	r0, r0, r4
 80406bc:	fa01 f205 	lsl.w	r2, r1, r5
 80406c0:	ea40 0002 	orr.w	r0, r0, r2
 80406c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80406c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80406cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80406d0:	fa21 f604 	lsr.w	r6, r1, r4
 80406d4:	eb42 0106 	adc.w	r1, r2, r6
 80406d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80406dc:	bf08      	it	eq
 80406de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80406e2:	bd70      	pop	{r4, r5, r6, pc}
 80406e4:	f1c4 040c 	rsb	r4, r4, #12
 80406e8:	f1c4 0520 	rsb	r5, r4, #32
 80406ec:	fa00 f304 	lsl.w	r3, r0, r4
 80406f0:	fa20 f005 	lsr.w	r0, r0, r5
 80406f4:	fa01 f204 	lsl.w	r2, r1, r4
 80406f8:	ea40 0002 	orr.w	r0, r0, r2
 80406fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8040700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8040704:	f141 0100 	adc.w	r1, r1, #0
 8040708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 804070c:	bf08      	it	eq
 804070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8040712:	bd70      	pop	{r4, r5, r6, pc}
 8040714:	f1c4 0520 	rsb	r5, r4, #32
 8040718:	fa00 f205 	lsl.w	r2, r0, r5
 804071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8040720:	fa20 f304 	lsr.w	r3, r0, r4
 8040724:	fa01 f205 	lsl.w	r2, r1, r5
 8040728:	ea43 0302 	orr.w	r3, r3, r2
 804072c:	fa21 f004 	lsr.w	r0, r1, r4
 8040730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8040734:	fa21 f204 	lsr.w	r2, r1, r4
 8040738:	ea20 0002 	bic.w	r0, r0, r2
 804073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8040740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8040744:	bf08      	it	eq
 8040746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 804074a:	bd70      	pop	{r4, r5, r6, pc}
 804074c:	f094 0f00 	teq	r4, #0
 8040750:	d10f      	bne.n	8040772 <__aeabi_dmul+0x1c2>
 8040752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8040756:	0040      	lsls	r0, r0, #1
 8040758:	eb41 0101 	adc.w	r1, r1, r1
 804075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8040760:	bf08      	it	eq
 8040762:	3c01      	subeq	r4, #1
 8040764:	d0f7      	beq.n	8040756 <__aeabi_dmul+0x1a6>
 8040766:	ea41 0106 	orr.w	r1, r1, r6
 804076a:	f095 0f00 	teq	r5, #0
 804076e:	bf18      	it	ne
 8040770:	4770      	bxne	lr
 8040772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8040776:	0052      	lsls	r2, r2, #1
 8040778:	eb43 0303 	adc.w	r3, r3, r3
 804077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8040780:	bf08      	it	eq
 8040782:	3d01      	subeq	r5, #1
 8040784:	d0f7      	beq.n	8040776 <__aeabi_dmul+0x1c6>
 8040786:	ea43 0306 	orr.w	r3, r3, r6
 804078a:	4770      	bx	lr
 804078c:	ea94 0f0c 	teq	r4, ip
 8040790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8040794:	bf18      	it	ne
 8040796:	ea95 0f0c 	teqne	r5, ip
 804079a:	d00c      	beq.n	80407b6 <__aeabi_dmul+0x206>
 804079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80407a0:	bf18      	it	ne
 80407a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80407a6:	d1d1      	bne.n	804074c <__aeabi_dmul+0x19c>
 80407a8:	ea81 0103 	eor.w	r1, r1, r3
 80407ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80407b0:	f04f 0000 	mov.w	r0, #0
 80407b4:	bd70      	pop	{r4, r5, r6, pc}
 80407b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80407ba:	bf06      	itte	eq
 80407bc:	4610      	moveq	r0, r2
 80407be:	4619      	moveq	r1, r3
 80407c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80407c4:	d019      	beq.n	80407fa <__aeabi_dmul+0x24a>
 80407c6:	ea94 0f0c 	teq	r4, ip
 80407ca:	d102      	bne.n	80407d2 <__aeabi_dmul+0x222>
 80407cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80407d0:	d113      	bne.n	80407fa <__aeabi_dmul+0x24a>
 80407d2:	ea95 0f0c 	teq	r5, ip
 80407d6:	d105      	bne.n	80407e4 <__aeabi_dmul+0x234>
 80407d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80407dc:	bf1c      	itt	ne
 80407de:	4610      	movne	r0, r2
 80407e0:	4619      	movne	r1, r3
 80407e2:	d10a      	bne.n	80407fa <__aeabi_dmul+0x24a>
 80407e4:	ea81 0103 	eor.w	r1, r1, r3
 80407e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80407ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80407f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80407f4:	f04f 0000 	mov.w	r0, #0
 80407f8:	bd70      	pop	{r4, r5, r6, pc}
 80407fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80407fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8040802:	bd70      	pop	{r4, r5, r6, pc}

08040804 <__aeabi_ddiv>:
 8040804:	b570      	push	{r4, r5, r6, lr}
 8040806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 804080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 804080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8040812:	bf1d      	ittte	ne
 8040814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8040818:	ea94 0f0c 	teqne	r4, ip
 804081c:	ea95 0f0c 	teqne	r5, ip
 8040820:	f000 f8a7 	bleq	8040972 <__aeabi_ddiv+0x16e>
 8040824:	eba4 0405 	sub.w	r4, r4, r5
 8040828:	ea81 0e03 	eor.w	lr, r1, r3
 804082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8040830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8040834:	f000 8088 	beq.w	8040948 <__aeabi_ddiv+0x144>
 8040838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 804083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8040840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8040844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8040848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 804084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8040850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8040854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8040858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 804085c:	429d      	cmp	r5, r3
 804085e:	bf08      	it	eq
 8040860:	4296      	cmpeq	r6, r2
 8040862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8040866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 804086a:	d202      	bcs.n	8040872 <__aeabi_ddiv+0x6e>
 804086c:	085b      	lsrs	r3, r3, #1
 804086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8040872:	1ab6      	subs	r6, r6, r2
 8040874:	eb65 0503 	sbc.w	r5, r5, r3
 8040878:	085b      	lsrs	r3, r3, #1
 804087a:	ea4f 0232 	mov.w	r2, r2, rrx
 804087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8040882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8040886:	ebb6 0e02 	subs.w	lr, r6, r2
 804088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 804088e:	bf22      	ittt	cs
 8040890:	1ab6      	subcs	r6, r6, r2
 8040892:	4675      	movcs	r5, lr
 8040894:	ea40 000c 	orrcs.w	r0, r0, ip
 8040898:	085b      	lsrs	r3, r3, #1
 804089a:	ea4f 0232 	mov.w	r2, r2, rrx
 804089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80408a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80408a6:	bf22      	ittt	cs
 80408a8:	1ab6      	subcs	r6, r6, r2
 80408aa:	4675      	movcs	r5, lr
 80408ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80408b0:	085b      	lsrs	r3, r3, #1
 80408b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80408b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80408ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80408be:	bf22      	ittt	cs
 80408c0:	1ab6      	subcs	r6, r6, r2
 80408c2:	4675      	movcs	r5, lr
 80408c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80408c8:	085b      	lsrs	r3, r3, #1
 80408ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80408ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80408d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80408d6:	bf22      	ittt	cs
 80408d8:	1ab6      	subcs	r6, r6, r2
 80408da:	4675      	movcs	r5, lr
 80408dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80408e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80408e4:	d018      	beq.n	8040918 <__aeabi_ddiv+0x114>
 80408e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80408ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80408ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80408f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80408f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80408fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80408fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8040902:	d1c0      	bne.n	8040886 <__aeabi_ddiv+0x82>
 8040904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8040908:	d10b      	bne.n	8040922 <__aeabi_ddiv+0x11e>
 804090a:	ea41 0100 	orr.w	r1, r1, r0
 804090e:	f04f 0000 	mov.w	r0, #0
 8040912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8040916:	e7b6      	b.n	8040886 <__aeabi_ddiv+0x82>
 8040918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 804091c:	bf04      	itt	eq
 804091e:	4301      	orreq	r1, r0
 8040920:	2000      	moveq	r0, #0
 8040922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8040926:	bf88      	it	hi
 8040928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 804092c:	f63f aeaf 	bhi.w	804068e <__aeabi_dmul+0xde>
 8040930:	ebb5 0c03 	subs.w	ip, r5, r3
 8040934:	bf04      	itt	eq
 8040936:	ebb6 0c02 	subseq.w	ip, r6, r2
 804093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 804093e:	f150 0000 	adcs.w	r0, r0, #0
 8040942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8040946:	bd70      	pop	{r4, r5, r6, pc}
 8040948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 804094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8040950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8040954:	bfc2      	ittt	gt
 8040956:	ebd4 050c 	rsbsgt	r5, r4, ip
 804095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 804095e:	bd70      	popgt	{r4, r5, r6, pc}
 8040960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8040964:	f04f 0e00 	mov.w	lr, #0
 8040968:	3c01      	subs	r4, #1
 804096a:	e690      	b.n	804068e <__aeabi_dmul+0xde>
 804096c:	ea45 0e06 	orr.w	lr, r5, r6
 8040970:	e68d      	b.n	804068e <__aeabi_dmul+0xde>
 8040972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8040976:	ea94 0f0c 	teq	r4, ip
 804097a:	bf08      	it	eq
 804097c:	ea95 0f0c 	teqeq	r5, ip
 8040980:	f43f af3b 	beq.w	80407fa <__aeabi_dmul+0x24a>
 8040984:	ea94 0f0c 	teq	r4, ip
 8040988:	d10a      	bne.n	80409a0 <__aeabi_ddiv+0x19c>
 804098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 804098e:	f47f af34 	bne.w	80407fa <__aeabi_dmul+0x24a>
 8040992:	ea95 0f0c 	teq	r5, ip
 8040996:	f47f af25 	bne.w	80407e4 <__aeabi_dmul+0x234>
 804099a:	4610      	mov	r0, r2
 804099c:	4619      	mov	r1, r3
 804099e:	e72c      	b.n	80407fa <__aeabi_dmul+0x24a>
 80409a0:	ea95 0f0c 	teq	r5, ip
 80409a4:	d106      	bne.n	80409b4 <__aeabi_ddiv+0x1b0>
 80409a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80409aa:	f43f aefd 	beq.w	80407a8 <__aeabi_dmul+0x1f8>
 80409ae:	4610      	mov	r0, r2
 80409b0:	4619      	mov	r1, r3
 80409b2:	e722      	b.n	80407fa <__aeabi_dmul+0x24a>
 80409b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80409b8:	bf18      	it	ne
 80409ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80409be:	f47f aec5 	bne.w	804074c <__aeabi_dmul+0x19c>
 80409c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80409c6:	f47f af0d 	bne.w	80407e4 <__aeabi_dmul+0x234>
 80409ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80409ce:	f47f aeeb 	bne.w	80407a8 <__aeabi_dmul+0x1f8>
 80409d2:	e712      	b.n	80407fa <__aeabi_dmul+0x24a>

080409d4 <__aeabi_d2iz>:
 80409d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80409d8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80409dc:	d215      	bcs.n	8040a0a <__aeabi_d2iz+0x36>
 80409de:	d511      	bpl.n	8040a04 <__aeabi_d2iz+0x30>
 80409e0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80409e4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80409e8:	d912      	bls.n	8040a10 <__aeabi_d2iz+0x3c>
 80409ea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80409ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80409f2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80409f6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80409fa:	fa23 f002 	lsr.w	r0, r3, r2
 80409fe:	bf18      	it	ne
 8040a00:	4240      	negne	r0, r0
 8040a02:	4770      	bx	lr
 8040a04:	f04f 0000 	mov.w	r0, #0
 8040a08:	4770      	bx	lr
 8040a0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8040a0e:	d105      	bne.n	8040a1c <__aeabi_d2iz+0x48>
 8040a10:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8040a14:	bf08      	it	eq
 8040a16:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8040a1a:	4770      	bx	lr
 8040a1c:	f04f 0000 	mov.w	r0, #0
 8040a20:	4770      	bx	lr
 8040a22:	bf00      	nop

08040a24 <__aeabi_d2f>:
 8040a24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8040a28:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8040a2c:	bf24      	itt	cs
 8040a2e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8040a32:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8040a36:	d90d      	bls.n	8040a54 <__aeabi_d2f+0x30>
 8040a38:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8040a3c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8040a40:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8040a44:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8040a48:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8040a4c:	bf08      	it	eq
 8040a4e:	f020 0001 	biceq.w	r0, r0, #1
 8040a52:	4770      	bx	lr
 8040a54:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8040a58:	d121      	bne.n	8040a9e <__aeabi_d2f+0x7a>
 8040a5a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8040a5e:	bfbc      	itt	lt
 8040a60:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8040a64:	4770      	bxlt	lr
 8040a66:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8040a6a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8040a6e:	f1c2 0218 	rsb	r2, r2, #24
 8040a72:	f1c2 0c20 	rsb	ip, r2, #32
 8040a76:	fa10 f30c 	lsls.w	r3, r0, ip
 8040a7a:	fa20 f002 	lsr.w	r0, r0, r2
 8040a7e:	bf18      	it	ne
 8040a80:	f040 0001 	orrne.w	r0, r0, #1
 8040a84:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8040a88:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8040a8c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8040a90:	ea40 000c 	orr.w	r0, r0, ip
 8040a94:	fa23 f302 	lsr.w	r3, r3, r2
 8040a98:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8040a9c:	e7cc      	b.n	8040a38 <__aeabi_d2f+0x14>
 8040a9e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8040aa2:	d107      	bne.n	8040ab4 <__aeabi_d2f+0x90>
 8040aa4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8040aa8:	bf1e      	ittt	ne
 8040aaa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8040aae:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8040ab2:	4770      	bxne	lr
 8040ab4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8040ab8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8040abc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8040ac0:	4770      	bx	lr
 8040ac2:	bf00      	nop

08040ac4 <__aeabi_uldivmod>:
 8040ac4:	b953      	cbnz	r3, 8040adc <__aeabi_uldivmod+0x18>
 8040ac6:	b94a      	cbnz	r2, 8040adc <__aeabi_uldivmod+0x18>
 8040ac8:	2900      	cmp	r1, #0
 8040aca:	bf08      	it	eq
 8040acc:	2800      	cmpeq	r0, #0
 8040ace:	bf1c      	itt	ne
 8040ad0:	f04f 31ff 	movne.w	r1, #4294967295
 8040ad4:	f04f 30ff 	movne.w	r0, #4294967295
 8040ad8:	f000 b97c 	b.w	8040dd4 <__aeabi_idiv0>
 8040adc:	f1ad 0c08 	sub.w	ip, sp, #8
 8040ae0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8040ae4:	f000 f806 	bl	8040af4 <__udivmoddi4>
 8040ae8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040aec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8040af0:	b004      	add	sp, #16
 8040af2:	4770      	bx	lr

08040af4 <__udivmoddi4>:
 8040af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8040af8:	468c      	mov	ip, r1
 8040afa:	9d08      	ldr	r5, [sp, #32]
 8040afc:	4604      	mov	r4, r0
 8040afe:	468a      	mov	sl, r1
 8040b00:	2b00      	cmp	r3, #0
 8040b02:	d14a      	bne.n	8040b9a <__udivmoddi4+0xa6>
 8040b04:	428a      	cmp	r2, r1
 8040b06:	4617      	mov	r7, r2
 8040b08:	d962      	bls.n	8040bd0 <__udivmoddi4+0xdc>
 8040b0a:	fab2 f682 	clz	r6, r2
 8040b0e:	b14e      	cbz	r6, 8040b24 <__udivmoddi4+0x30>
 8040b10:	f1c6 0e20 	rsb	lr, r6, #32
 8040b14:	fa01 f306 	lsl.w	r3, r1, r6
 8040b18:	40b7      	lsls	r7, r6
 8040b1a:	40b4      	lsls	r4, r6
 8040b1c:	fa20 fe0e 	lsr.w	lr, r0, lr
 8040b20:	ea4e 0a03 	orr.w	sl, lr, r3
 8040b24:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8040b28:	0c23      	lsrs	r3, r4, #16
 8040b2a:	fa1f f987 	uxth.w	r9, r7
 8040b2e:	fbba fef8 	udiv	lr, sl, r8
 8040b32:	fb08 aa1e 	mls	sl, r8, lr, sl
 8040b36:	fb0e f209 	mul.w	r2, lr, r9
 8040b3a:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8040b3e:	429a      	cmp	r2, r3
 8040b40:	d90b      	bls.n	8040b5a <__udivmoddi4+0x66>
 8040b42:	18fb      	adds	r3, r7, r3
 8040b44:	f10e 31ff 	add.w	r1, lr, #4294967295
 8040b48:	bf2c      	ite	cs
 8040b4a:	2001      	movcs	r0, #1
 8040b4c:	2000      	movcc	r0, #0
 8040b4e:	429a      	cmp	r2, r3
 8040b50:	d902      	bls.n	8040b58 <__udivmoddi4+0x64>
 8040b52:	2800      	cmp	r0, #0
 8040b54:	f000 812a 	beq.w	8040dac <__udivmoddi4+0x2b8>
 8040b58:	468e      	mov	lr, r1
 8040b5a:	1a9a      	subs	r2, r3, r2
 8040b5c:	b2a3      	uxth	r3, r4
 8040b5e:	fbb2 f0f8 	udiv	r0, r2, r8
 8040b62:	fb08 2210 	mls	r2, r8, r0, r2
 8040b66:	fb00 f909 	mul.w	r9, r0, r9
 8040b6a:	ea43 4402 	orr.w	r4, r3, r2, lsl #16
 8040b6e:	45a1      	cmp	r9, r4
 8040b70:	d907      	bls.n	8040b82 <__udivmoddi4+0x8e>
 8040b72:	193c      	adds	r4, r7, r4
 8040b74:	f100 33ff 	add.w	r3, r0, #4294967295
 8040b78:	d202      	bcs.n	8040b80 <__udivmoddi4+0x8c>
 8040b7a:	45a1      	cmp	r9, r4
 8040b7c:	f200 8110 	bhi.w	8040da0 <__udivmoddi4+0x2ac>
 8040b80:	4618      	mov	r0, r3
 8040b82:	eba4 0409 	sub.w	r4, r4, r9
 8040b86:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8040b8a:	2100      	movs	r1, #0
 8040b8c:	b11d      	cbz	r5, 8040b96 <__udivmoddi4+0xa2>
 8040b8e:	40f4      	lsrs	r4, r6
 8040b90:	2300      	movs	r3, #0
 8040b92:	e9c5 4300 	strd	r4, r3, [r5]
 8040b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040b9a:	428b      	cmp	r3, r1
 8040b9c:	d908      	bls.n	8040bb0 <__udivmoddi4+0xbc>
 8040b9e:	2d00      	cmp	r5, #0
 8040ba0:	f000 80f2 	beq.w	8040d88 <__udivmoddi4+0x294>
 8040ba4:	2100      	movs	r1, #0
 8040ba6:	e9c5 0c00 	strd	r0, ip, [r5]
 8040baa:	4608      	mov	r0, r1
 8040bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040bb0:	fab3 f183 	clz	r1, r3
 8040bb4:	2900      	cmp	r1, #0
 8040bb6:	d14e      	bne.n	8040c56 <__udivmoddi4+0x162>
 8040bb8:	4563      	cmp	r3, ip
 8040bba:	f0c0 80e8 	bcc.w	8040d8e <__udivmoddi4+0x29a>
 8040bbe:	4282      	cmp	r2, r0
 8040bc0:	f240 80e5 	bls.w	8040d8e <__udivmoddi4+0x29a>
 8040bc4:	4608      	mov	r0, r1
 8040bc6:	2d00      	cmp	r5, #0
 8040bc8:	d0e5      	beq.n	8040b96 <__udivmoddi4+0xa2>
 8040bca:	e9c5 4a00 	strd	r4, sl, [r5]
 8040bce:	e7e2      	b.n	8040b96 <__udivmoddi4+0xa2>
 8040bd0:	b902      	cbnz	r2, 8040bd4 <__udivmoddi4+0xe0>
 8040bd2:	deff      	udf	#255	; 0xff
 8040bd4:	fab2 f682 	clz	r6, r2
 8040bd8:	2e00      	cmp	r6, #0
 8040bda:	f040 8099 	bne.w	8040d10 <__udivmoddi4+0x21c>
 8040bde:	1a8b      	subs	r3, r1, r2
 8040be0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8040be4:	fa1f f882 	uxth.w	r8, r2
 8040be8:	2101      	movs	r1, #1
 8040bea:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8040bee:	fbb3 f2fe 	udiv	r2, r3, lr
 8040bf2:	fb0e 3012 	mls	r0, lr, r2, r3
 8040bf6:	fb08 f902 	mul.w	r9, r8, r2
 8040bfa:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
 8040bfe:	45e1      	cmp	r9, ip
 8040c00:	d908      	bls.n	8040c14 <__udivmoddi4+0x120>
 8040c02:	eb17 0c0c 	adds.w	ip, r7, ip
 8040c06:	f102 33ff 	add.w	r3, r2, #4294967295
 8040c0a:	d202      	bcs.n	8040c12 <__udivmoddi4+0x11e>
 8040c0c:	45e1      	cmp	r9, ip
 8040c0e:	f200 80ca 	bhi.w	8040da6 <__udivmoddi4+0x2b2>
 8040c12:	461a      	mov	r2, r3
 8040c14:	ebac 0c09 	sub.w	ip, ip, r9
 8040c18:	b2a3      	uxth	r3, r4
 8040c1a:	fbbc f0fe 	udiv	r0, ip, lr
 8040c1e:	fb0e cc10 	mls	ip, lr, r0, ip
 8040c22:	fb08 f800 	mul.w	r8, r8, r0
 8040c26:	ea43 440c 	orr.w	r4, r3, ip, lsl #16
 8040c2a:	45a0      	cmp	r8, r4
 8040c2c:	d90e      	bls.n	8040c4c <__udivmoddi4+0x158>
 8040c2e:	193c      	adds	r4, r7, r4
 8040c30:	f100 33ff 	add.w	r3, r0, #4294967295
 8040c34:	bf2c      	ite	cs
 8040c36:	f04f 0c01 	movcs.w	ip, #1
 8040c3a:	f04f 0c00 	movcc.w	ip, #0
 8040c3e:	45a0      	cmp	r8, r4
 8040c40:	d903      	bls.n	8040c4a <__udivmoddi4+0x156>
 8040c42:	f1bc 0f00 	cmp.w	ip, #0
 8040c46:	f000 80a8 	beq.w	8040d9a <__udivmoddi4+0x2a6>
 8040c4a:	4618      	mov	r0, r3
 8040c4c:	eba4 0408 	sub.w	r4, r4, r8
 8040c50:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8040c54:	e79a      	b.n	8040b8c <__udivmoddi4+0x98>
 8040c56:	f1c1 0420 	rsb	r4, r1, #32
 8040c5a:	408b      	lsls	r3, r1
 8040c5c:	fa02 fe01 	lsl.w	lr, r2, r1
 8040c60:	fa0c f601 	lsl.w	r6, ip, r1
 8040c64:	40e2      	lsrs	r2, r4
 8040c66:	fa20 f704 	lsr.w	r7, r0, r4
 8040c6a:	fa2c fc04 	lsr.w	ip, ip, r4
 8040c6e:	fa00 f801 	lsl.w	r8, r0, r1
 8040c72:	4313      	orrs	r3, r2
 8040c74:	433e      	orrs	r6, r7
 8040c76:	0c1f      	lsrs	r7, r3, #16
 8040c78:	0c32      	lsrs	r2, r6, #16
 8040c7a:	fa1f f983 	uxth.w	r9, r3
 8040c7e:	fbbc f0f7 	udiv	r0, ip, r7
 8040c82:	fb07 cc10 	mls	ip, r7, r0, ip
 8040c86:	fb00 fa09 	mul.w	sl, r0, r9
 8040c8a:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
 8040c8e:	45e2      	cmp	sl, ip
 8040c90:	d908      	bls.n	8040ca4 <__udivmoddi4+0x1b0>
 8040c92:	eb13 0c0c 	adds.w	ip, r3, ip
 8040c96:	f100 32ff 	add.w	r2, r0, #4294967295
 8040c9a:	d202      	bcs.n	8040ca2 <__udivmoddi4+0x1ae>
 8040c9c:	45e2      	cmp	sl, ip
 8040c9e:	f200 8089 	bhi.w	8040db4 <__udivmoddi4+0x2c0>
 8040ca2:	4610      	mov	r0, r2
 8040ca4:	ebac 0c0a 	sub.w	ip, ip, sl
 8040ca8:	b2b6      	uxth	r6, r6
 8040caa:	fbbc faf7 	udiv	sl, ip, r7
 8040cae:	fb07 cc1a 	mls	ip, r7, sl, ip
 8040cb2:	fb0a f909 	mul.w	r9, sl, r9
 8040cb6:	ea46 420c 	orr.w	r2, r6, ip, lsl #16
 8040cba:	4591      	cmp	r9, r2
 8040cbc:	d906      	bls.n	8040ccc <__udivmoddi4+0x1d8>
 8040cbe:	189a      	adds	r2, r3, r2
 8040cc0:	f10a 36ff 	add.w	r6, sl, #4294967295
 8040cc4:	d201      	bcs.n	8040cca <__udivmoddi4+0x1d6>
 8040cc6:	4591      	cmp	r9, r2
 8040cc8:	d87a      	bhi.n	8040dc0 <__udivmoddi4+0x2cc>
 8040cca:	46b2      	mov	sl, r6
 8040ccc:	ea4a 4000 	orr.w	r0, sl, r0, lsl #16
 8040cd0:	eba2 0209 	sub.w	r2, r2, r9
 8040cd4:	fba0 670e 	umull	r6, r7, r0, lr
 8040cd8:	42ba      	cmp	r2, r7
 8040cda:	46b4      	mov	ip, r6
 8040cdc:	46b9      	mov	r9, r7
 8040cde:	d302      	bcc.n	8040ce6 <__udivmoddi4+0x1f2>
 8040ce0:	d107      	bne.n	8040cf2 <__udivmoddi4+0x1fe>
 8040ce2:	45b0      	cmp	r8, r6
 8040ce4:	d205      	bcs.n	8040cf2 <__udivmoddi4+0x1fe>
 8040ce6:	ebb6 0c0e 	subs.w	ip, r6, lr
 8040cea:	eb67 0303 	sbc.w	r3, r7, r3
 8040cee:	3801      	subs	r0, #1
 8040cf0:	4699      	mov	r9, r3
 8040cf2:	2d00      	cmp	r5, #0
 8040cf4:	d06b      	beq.n	8040dce <__udivmoddi4+0x2da>
 8040cf6:	ebb8 030c 	subs.w	r3, r8, ip
 8040cfa:	eb62 0209 	sbc.w	r2, r2, r9
 8040cfe:	fa02 f404 	lsl.w	r4, r2, r4
 8040d02:	40cb      	lsrs	r3, r1
 8040d04:	40ca      	lsrs	r2, r1
 8040d06:	2100      	movs	r1, #0
 8040d08:	431c      	orrs	r4, r3
 8040d0a:	e9c5 4200 	strd	r4, r2, [r5]
 8040d0e:	e742      	b.n	8040b96 <__udivmoddi4+0xa2>
 8040d10:	40b7      	lsls	r7, r6
 8040d12:	f1c6 0220 	rsb	r2, r6, #32
 8040d16:	fa01 f306 	lsl.w	r3, r1, r6
 8040d1a:	40b4      	lsls	r4, r6
 8040d1c:	fa21 fc02 	lsr.w	ip, r1, r2
 8040d20:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8040d24:	fa20 f202 	lsr.w	r2, r0, r2
 8040d28:	fa1f f887 	uxth.w	r8, r7
 8040d2c:	fbbc f1fe 	udiv	r1, ip, lr
 8040d30:	431a      	orrs	r2, r3
 8040d32:	fb0e cc11 	mls	ip, lr, r1, ip
 8040d36:	fb01 f008 	mul.w	r0, r1, r8
 8040d3a:	0c13      	lsrs	r3, r2, #16
 8040d3c:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
 8040d40:	4560      	cmp	r0, ip
 8040d42:	d907      	bls.n	8040d54 <__udivmoddi4+0x260>
 8040d44:	eb17 0c0c 	adds.w	ip, r7, ip
 8040d48:	f101 33ff 	add.w	r3, r1, #4294967295
 8040d4c:	d201      	bcs.n	8040d52 <__udivmoddi4+0x25e>
 8040d4e:	4560      	cmp	r0, ip
 8040d50:	d833      	bhi.n	8040dba <__udivmoddi4+0x2c6>
 8040d52:	4619      	mov	r1, r3
 8040d54:	ebac 0c00 	sub.w	ip, ip, r0
 8040d58:	b292      	uxth	r2, r2
 8040d5a:	fbbc f0fe 	udiv	r0, ip, lr
 8040d5e:	fb0e cc10 	mls	ip, lr, r0, ip
 8040d62:	fb00 f308 	mul.w	r3, r0, r8
 8040d66:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
 8040d6a:	4563      	cmp	r3, ip
 8040d6c:	d907      	bls.n	8040d7e <__udivmoddi4+0x28a>
 8040d6e:	eb17 0c0c 	adds.w	ip, r7, ip
 8040d72:	f100 32ff 	add.w	r2, r0, #4294967295
 8040d76:	d201      	bcs.n	8040d7c <__udivmoddi4+0x288>
 8040d78:	4563      	cmp	r3, ip
 8040d7a:	d825      	bhi.n	8040dc8 <__udivmoddi4+0x2d4>
 8040d7c:	4610      	mov	r0, r2
 8040d7e:	ebac 0303 	sub.w	r3, ip, r3
 8040d82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8040d86:	e730      	b.n	8040bea <__udivmoddi4+0xf6>
 8040d88:	4629      	mov	r1, r5
 8040d8a:	4628      	mov	r0, r5
 8040d8c:	e703      	b.n	8040b96 <__udivmoddi4+0xa2>
 8040d8e:	1a84      	subs	r4, r0, r2
 8040d90:	eb6c 0303 	sbc.w	r3, ip, r3
 8040d94:	2001      	movs	r0, #1
 8040d96:	469a      	mov	sl, r3
 8040d98:	e715      	b.n	8040bc6 <__udivmoddi4+0xd2>
 8040d9a:	3802      	subs	r0, #2
 8040d9c:	443c      	add	r4, r7
 8040d9e:	e755      	b.n	8040c4c <__udivmoddi4+0x158>
 8040da0:	3802      	subs	r0, #2
 8040da2:	443c      	add	r4, r7
 8040da4:	e6ed      	b.n	8040b82 <__udivmoddi4+0x8e>
 8040da6:	3a02      	subs	r2, #2
 8040da8:	44bc      	add	ip, r7
 8040daa:	e733      	b.n	8040c14 <__udivmoddi4+0x120>
 8040dac:	f1ae 0e02 	sub.w	lr, lr, #2
 8040db0:	443b      	add	r3, r7
 8040db2:	e6d2      	b.n	8040b5a <__udivmoddi4+0x66>
 8040db4:	3802      	subs	r0, #2
 8040db6:	449c      	add	ip, r3
 8040db8:	e774      	b.n	8040ca4 <__udivmoddi4+0x1b0>
 8040dba:	3902      	subs	r1, #2
 8040dbc:	44bc      	add	ip, r7
 8040dbe:	e7c9      	b.n	8040d54 <__udivmoddi4+0x260>
 8040dc0:	f1aa 0a02 	sub.w	sl, sl, #2
 8040dc4:	441a      	add	r2, r3
 8040dc6:	e781      	b.n	8040ccc <__udivmoddi4+0x1d8>
 8040dc8:	3802      	subs	r0, #2
 8040dca:	44bc      	add	ip, r7
 8040dcc:	e7d7      	b.n	8040d7e <__udivmoddi4+0x28a>
 8040dce:	4629      	mov	r1, r5
 8040dd0:	e6e1      	b.n	8040b96 <__udivmoddi4+0xa2>
 8040dd2:	bf00      	nop

08040dd4 <__aeabi_idiv0>:
 8040dd4:	4770      	bx	lr
 8040dd6:	bf00      	nop

08040dd8 <lcd_begin>:
#include "LiquidCrystal.h"
#include "main.h"
#include <stdio.h>


void lcd_begin(LiquidCrystal* lcd, unsigned int cols, unsigned int rows) {
 8040dd8:	b580      	push	{r7, lr}
 8040dda:	b0a0      	sub	sp, #128	; 0x80
 8040ddc:	af02      	add	r7, sp, #8
 8040dde:	60f8      	str	r0, [r7, #12]
 8040de0:	60b9      	str	r1, [r7, #8]
 8040de2:	607a      	str	r2, [r7, #4]
//	printf("%s (LiquidCrystal * lcd = 0x%x, unsigned int cols = %u, unsigned int rows = %u)\n", __func__, lcd, cols, rows);

	unsigned char string[100] = {0};
 8040de4:	f107 0314 	add.w	r3, r7, #20
 8040de8:	2264      	movs	r2, #100	; 0x64
 8040dea:	2100      	movs	r1, #0
 8040dec:	4618      	mov	r0, r3
 8040dee:	f003 f9c9 	bl	8044184 <memset>
	sprintf(string, "%s (LiquidCrystal * lcd = 0x%x, unsigned int cols = %u, unsigned int rows = %u)\r\n", __func__, lcd, cols, rows);
 8040df2:	f107 0014 	add.w	r0, r7, #20
 8040df6:	687b      	ldr	r3, [r7, #4]
 8040df8:	9301      	str	r3, [sp, #4]
 8040dfa:	68bb      	ldr	r3, [r7, #8]
 8040dfc:	9300      	str	r3, [sp, #0]
 8040dfe:	68fb      	ldr	r3, [r7, #12]
 8040e00:	4a06      	ldr	r2, [pc, #24]	; (8040e1c <lcd_begin+0x44>)
 8040e02:	4907      	ldr	r1, [pc, #28]	; (8040e20 <lcd_begin+0x48>)
 8040e04:	f003 f9c6 	bl	8044194 <siprintf>
	print(string, sizeof(string));
 8040e08:	f107 0314 	add.w	r3, r7, #20
 8040e0c:	2164      	movs	r1, #100	; 0x64
 8040e0e:	4618      	mov	r0, r3
 8040e10:	f000 f8aa 	bl	8040f68 <print>

	return;
 8040e14:	bf00      	nop
}
 8040e16:	3778      	adds	r7, #120	; 0x78
 8040e18:	46bd      	mov	sp, r7
 8040e1a:	bd80      	pop	{r7, pc}
 8040e1c:	08044e04 	.word	0x08044e04
 8040e20:	08044b98 	.word	0x08044b98

08040e24 <lcd_clear>:

void lcd_clear(LiquidCrystal* lcd) {
 8040e24:	b580      	push	{r7, lr}
 8040e26:	b090      	sub	sp, #64	; 0x40
 8040e28:	af00      	add	r7, sp, #0
 8040e2a:	6078      	str	r0, [r7, #4]
//	printf("%s (LiquidCrystal * lcd = 0x%x\n", __func__);

	unsigned char string[50] = {0};
 8040e2c:	f107 030c 	add.w	r3, r7, #12
 8040e30:	2232      	movs	r2, #50	; 0x32
 8040e32:	2100      	movs	r1, #0
 8040e34:	4618      	mov	r0, r3
 8040e36:	f003 f9a5 	bl	8044184 <memset>
	sprintf(string, "%s (LiquidCrystal * lcd = 0x%x\r\n", __func__);
 8040e3a:	f107 030c 	add.w	r3, r7, #12
 8040e3e:	4a07      	ldr	r2, [pc, #28]	; (8040e5c <lcd_clear+0x38>)
 8040e40:	4907      	ldr	r1, [pc, #28]	; (8040e60 <lcd_clear+0x3c>)
 8040e42:	4618      	mov	r0, r3
 8040e44:	f003 f9a6 	bl	8044194 <siprintf>
	print(string, sizeof(string));
 8040e48:	f107 030c 	add.w	r3, r7, #12
 8040e4c:	2132      	movs	r1, #50	; 0x32
 8040e4e:	4618      	mov	r0, r3
 8040e50:	f000 f88a 	bl	8040f68 <print>

	return; //http://stackoverflow.com/questions/10105666/clearing-the-terminal-screen
 8040e54:	bf00      	nop
}
 8040e56:	3740      	adds	r7, #64	; 0x40
 8040e58:	46bd      	mov	sp, r7
 8040e5a:	bd80      	pop	{r7, pc}
 8040e5c:	08044e10 	.word	0x08044e10
 8040e60:	08044bec 	.word	0x08044bec

08040e64 <lcd_print>:

void lcd_print(LiquidCrystal* lcd, char* output, int len) {
 8040e64:	b580      	push	{r7, lr}
 8040e66:	b0b8      	sub	sp, #224	; 0xe0
 8040e68:	af02      	add	r7, sp, #8
 8040e6a:	60f8      	str	r0, [r7, #12]
 8040e6c:	60b9      	str	r1, [r7, #8]
 8040e6e:	607a      	str	r2, [r7, #4]
//	printf("%s (LiquidCrystal * lcd = 0x%x, char* output = %s, int len = %d)\n", __func__, lcd, output, len);

	unsigned char string[200] = {0};
 8040e70:	f107 0310 	add.w	r3, r7, #16
 8040e74:	22c8      	movs	r2, #200	; 0xc8
 8040e76:	2100      	movs	r1, #0
 8040e78:	4618      	mov	r0, r3
 8040e7a:	f003 f983 	bl	8044184 <memset>
	sprintf(string, "%s (LiquidCrystal * lcd = 0x%x, char* output = %s, int len = %d)\r\n", __func__, lcd, output, len);
 8040e7e:	f107 0010 	add.w	r0, r7, #16
 8040e82:	687b      	ldr	r3, [r7, #4]
 8040e84:	9301      	str	r3, [sp, #4]
 8040e86:	68bb      	ldr	r3, [r7, #8]
 8040e88:	9300      	str	r3, [sp, #0]
 8040e8a:	68fb      	ldr	r3, [r7, #12]
 8040e8c:	4a06      	ldr	r2, [pc, #24]	; (8040ea8 <lcd_print+0x44>)
 8040e8e:	4907      	ldr	r1, [pc, #28]	; (8040eac <lcd_print+0x48>)
 8040e90:	f003 f980 	bl	8044194 <siprintf>
	print(string, sizeof(string));
 8040e94:	f107 0310 	add.w	r3, r7, #16
 8040e98:	21c8      	movs	r1, #200	; 0xc8
 8040e9a:	4618      	mov	r0, r3
 8040e9c:	f000 f864 	bl	8040f68 <print>

	return;
 8040ea0:	bf00      	nop
}
 8040ea2:	37d8      	adds	r7, #216	; 0xd8
 8040ea4:	46bd      	mov	sp, r7
 8040ea6:	bd80      	pop	{r7, pc}
 8040ea8:	08044e1c 	.word	0x08044e1c
 8040eac:	08044c10 	.word	0x08044c10

08040eb0 <lcd_setCursor>:

void lcd_setCursor(LiquidCrystal* lcd, int x, int y) { //http://stackoverflow.com/questions/10105666/clearing-the-terminal-screen
 8040eb0:	b580      	push	{r7, lr}
 8040eb2:	b0a0      	sub	sp, #128	; 0x80
 8040eb4:	af02      	add	r7, sp, #8
 8040eb6:	60f8      	str	r0, [r7, #12]
 8040eb8:	60b9      	str	r1, [r7, #8]
 8040eba:	607a      	str	r2, [r7, #4]
//	printf("%s (LiquidCrystal * lcd = 0x%x, int x = %d, int y = %d\n", __func__, x, y);

	unsigned char string[100] = {0};
 8040ebc:	f107 0314 	add.w	r3, r7, #20
 8040ec0:	2264      	movs	r2, #100	; 0x64
 8040ec2:	2100      	movs	r1, #0
 8040ec4:	4618      	mov	r0, r3
 8040ec6:	f003 f95d 	bl	8044184 <memset>
	sprintf(string, "%s (LiquidCrystal * lcd = 0x%x, int x = %d, int y = %d\r\n", __func__, x, y);
 8040eca:	f107 0014 	add.w	r0, r7, #20
 8040ece:	687b      	ldr	r3, [r7, #4]
 8040ed0:	9300      	str	r3, [sp, #0]
 8040ed2:	68bb      	ldr	r3, [r7, #8]
 8040ed4:	4a06      	ldr	r2, [pc, #24]	; (8040ef0 <lcd_setCursor+0x40>)
 8040ed6:	4907      	ldr	r1, [pc, #28]	; (8040ef4 <lcd_setCursor+0x44>)
 8040ed8:	f003 f95c 	bl	8044194 <siprintf>
	print(string, sizeof(string));
 8040edc:	f107 0314 	add.w	r3, r7, #20
 8040ee0:	2164      	movs	r1, #100	; 0x64
 8040ee2:	4618      	mov	r0, r3
 8040ee4:	f000 f840 	bl	8040f68 <print>

	return;
 8040ee8:	bf00      	nop
}
 8040eea:	3778      	adds	r7, #120	; 0x78
 8040eec:	46bd      	mov	sp, r7
 8040eee:	bd80      	pop	{r7, pc}
 8040ef0:	08044e28 	.word	0x08044e28
 8040ef4:	08044c54 	.word	0x08044c54

08040ef8 <led_on>:
#include <stdio.h>
#include "led.h"
#include "main.h"

void led_on() {
 8040ef8:	b580      	push	{r7, lr}
 8040efa:	b08e      	sub	sp, #56	; 0x38
 8040efc:	af00      	add	r7, sp, #0
//	printf("%s\n", __func__);

	unsigned char string[50] = {0};
 8040efe:	1d3b      	adds	r3, r7, #4
 8040f00:	2232      	movs	r2, #50	; 0x32
 8040f02:	2100      	movs	r1, #0
 8040f04:	4618      	mov	r0, r3
 8040f06:	f003 f93d 	bl	8044184 <memset>
	sprintf(string, "%s\r\n", __func__);
 8040f0a:	1d3b      	adds	r3, r7, #4
 8040f0c:	4a06      	ldr	r2, [pc, #24]	; (8040f28 <led_on+0x30>)
 8040f0e:	4907      	ldr	r1, [pc, #28]	; (8040f2c <led_on+0x34>)
 8040f10:	4618      	mov	r0, r3
 8040f12:	f003 f93f 	bl	8044194 <siprintf>
	print(string, sizeof(string));
 8040f16:	1d3b      	adds	r3, r7, #4
 8040f18:	2132      	movs	r1, #50	; 0x32
 8040f1a:	4618      	mov	r0, r3
 8040f1c:	f000 f824 	bl	8040f68 <print>

	return;
 8040f20:	bf00      	nop
}
 8040f22:	3738      	adds	r7, #56	; 0x38
 8040f24:	46bd      	mov	sp, r7
 8040f26:	bd80      	pop	{r7, pc}
 8040f28:	08044e38 	.word	0x08044e38
 8040f2c:	08044c90 	.word	0x08044c90

08040f30 <led_off>:

void led_off() {
 8040f30:	b580      	push	{r7, lr}
 8040f32:	b08e      	sub	sp, #56	; 0x38
 8040f34:	af00      	add	r7, sp, #0
//	printf("%s\n", __func__);

	unsigned char string[50] = {0};
 8040f36:	1d3b      	adds	r3, r7, #4
 8040f38:	2232      	movs	r2, #50	; 0x32
 8040f3a:	2100      	movs	r1, #0
 8040f3c:	4618      	mov	r0, r3
 8040f3e:	f003 f921 	bl	8044184 <memset>
	sprintf(string, "%s\r\n", __func__);
 8040f42:	1d3b      	adds	r3, r7, #4
 8040f44:	4a06      	ldr	r2, [pc, #24]	; (8040f60 <led_off+0x30>)
 8040f46:	4907      	ldr	r1, [pc, #28]	; (8040f64 <led_off+0x34>)
 8040f48:	4618      	mov	r0, r3
 8040f4a:	f003 f923 	bl	8044194 <siprintf>
	print(string, sizeof(string));
 8040f4e:	1d3b      	adds	r3, r7, #4
 8040f50:	2132      	movs	r1, #50	; 0x32
 8040f52:	4618      	mov	r0, r3
 8040f54:	f000 f808 	bl	8040f68 <print>

	return;
 8040f58:	bf00      	nop
}
 8040f5a:	3738      	adds	r7, #56	; 0x38
 8040f5c:	46bd      	mov	sp, r7
 8040f5e:	bd80      	pop	{r7, pc}
 8040f60:	08044e40 	.word	0x08044e40
 8040f64:	08044c90 	.word	0x08044c90

08040f68 <print>:
int __attribute__((annotate("sensitive"))) serialStrLen = 0;

/* -- Initialize libraries -- */
LiquidCrystal lcd;

void print(unsigned char* str, int len) {
 8040f68:	b580      	push	{r7, lr}
 8040f6a:	b082      	sub	sp, #8
 8040f6c:	af00      	add	r7, sp, #0
 8040f6e:	6078      	str	r0, [r7, #4]
 8040f70:	6039      	str	r1, [r7, #0]

  // UartReady = HAL_UART_STATE_RESET;

  if (HAL_UART_Transmit_IT(&huart1, (uint8_t *) str, len) != HAL_OK) {
 8040f72:	683b      	ldr	r3, [r7, #0]
 8040f74:	b29b      	uxth	r3, r3
 8040f76:	461a      	mov	r2, r3
 8040f78:	6879      	ldr	r1, [r7, #4]
 8040f7a:	480b      	ldr	r0, [pc, #44]	; (8040fa8 <print+0x40>)
 8040f7c:	f001 feee 	bl	8042d5c <HAL_UART_Transmit_IT>
 8040f80:	4603      	mov	r3, r0
 8040f82:	2b00      	cmp	r3, #0
 8040f84:	d001      	beq.n	8040f8a <print+0x22>
    Error_Handler();
 8040f86:	f000 fb47 	bl	8041618 <Error_Handler>
  }
  //##- Wait for the end of the transfer ###################################

  while(HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY)
 8040f8a:	bf00      	nop
 8040f8c:	4806      	ldr	r0, [pc, #24]	; (8040fa8 <print+0x40>)
 8040f8e:	f002 f9bd 	bl	804330c <HAL_UART_GetState>
 8040f92:	4603      	mov	r3, r0
 8040f94:	2b20      	cmp	r3, #32
 8040f96:	d1f9      	bne.n	8040f8c <print+0x24>
  {
  }
  // Reset transmission flag
  UartReady = HAL_UART_STATE_RESET;
 8040f98:	4b04      	ldr	r3, [pc, #16]	; (8040fac <print+0x44>)
 8040f9a:	2200      	movs	r2, #0
 8040f9c:	701a      	strb	r2, [r3, #0]

}
 8040f9e:	bf00      	nop
 8040fa0:	3708      	adds	r7, #8
 8040fa2:	46bd      	mov	sp, r7
 8040fa4:	bd80      	pop	{r7, pc}
 8040fa6:	bf00      	nop
 8040fa8:	20018298 	.word	0x20018298
 8040fac:	2001820c 	.word	0x2001820c

08040fb0 <setup>:

void setup(){
 8040fb0:	b580      	push	{r7, lr}
 8040fb2:	af00      	add	r7, sp, #0
	/* LCD setup */
	lcd_begin(&lcd, 16, 2);
 8040fb4:	2202      	movs	r2, #2
 8040fb6:	2110      	movs	r1, #16
 8040fb8:	481a      	ldr	r0, [pc, #104]	; (8041024 <setup+0x74>)
 8040fba:	f7ff ff0d 	bl	8040dd8 <lcd_begin>
	lcd_clear(&lcd);
 8040fbe:	4819      	ldr	r0, [pc, #100]	; (8041024 <setup+0x74>)
 8040fc0:	f7ff ff30 	bl	8040e24 <lcd_clear>

	lcd_print(&lcd, "SyringePump v2.0", 16);
 8040fc4:	2210      	movs	r2, #16
 8040fc6:	4918      	ldr	r1, [pc, #96]	; (8041028 <setup+0x78>)
 8040fc8:	4816      	ldr	r0, [pc, #88]	; (8041024 <setup+0x74>)
 8040fca:	f7ff ff4b 	bl	8040e64 <lcd_print>

	/* Triggering setup */
	pinMode(triggerPin, INPUT);
 8040fce:	4b17      	ldr	r3, [pc, #92]	; (804102c <setup+0x7c>)
 8040fd0:	681b      	ldr	r3, [r3, #0]
 8040fd2:	2100      	movs	r1, #0
 8040fd4:	4618      	mov	r0, r3
 8040fd6:	f000 fc1f 	bl	8041818 <pinMode>
	pinMode(bigTriggerPin, INPUT);
 8040fda:	4b15      	ldr	r3, [pc, #84]	; (8041030 <setup+0x80>)
 8040fdc:	681b      	ldr	r3, [r3, #0]
 8040fde:	2100      	movs	r1, #0
 8040fe0:	4618      	mov	r0, r3
 8040fe2:	f000 fc19 	bl	8041818 <pinMode>
	digitalWrite(triggerPin, HIGH); //enable pullup resistor
 8040fe6:	4b11      	ldr	r3, [pc, #68]	; (804102c <setup+0x7c>)
 8040fe8:	681b      	ldr	r3, [r3, #0]
 8040fea:	2100      	movs	r1, #0
 8040fec:	4618      	mov	r0, r3
 8040fee:	f000 fc37 	bl	8041860 <digitalWrite>
	digitalWrite(bigTriggerPin, HIGH); //enable pullup resistor
 8040ff2:	4b0f      	ldr	r3, [pc, #60]	; (8041030 <setup+0x80>)
 8040ff4:	681b      	ldr	r3, [r3, #0]
 8040ff6:	2100      	movs	r1, #0
 8040ff8:	4618      	mov	r0, r3
 8040ffa:	f000 fc31 	bl	8041860 <digitalWrite>

	/* Motor Setup */
	pinMode(motorDirPin, OUTPUT);
 8040ffe:	4b0d      	ldr	r3, [pc, #52]	; (8041034 <setup+0x84>)
 8041000:	681b      	ldr	r3, [r3, #0]
 8041002:	2101      	movs	r1, #1
 8041004:	4618      	mov	r0, r3
 8041006:	f000 fc07 	bl	8041818 <pinMode>
	pinMode(motorStepPin, OUTPUT);
 804100a:	4b0b      	ldr	r3, [pc, #44]	; (8041038 <setup+0x88>)
 804100c:	681b      	ldr	r3, [r3, #0]
 804100e:	2101      	movs	r1, #1
 8041010:	4618      	mov	r0, r3
 8041012:	f000 fc01 	bl	8041818 <pinMode>

	/* Serial setup */
	//Note that serial commands must be terminated with a newline
	//to be processed. Check this setting in your serial monitor if
	//serial commands aren't doing anything.
	Serial_begin(57600); //Note that your serial connection must be set to 57600 to work!
 8041016:	f44f 4061 	mov.w	r0, #57600	; 0xe100
 804101a:	f000 fc45 	bl	80418a8 <Serial_begin>
}
 804101e:	bf00      	nop
 8041020:	bd80      	pop	{r7, pc}
 8041022:	bf00      	nop
 8041024:	20018284 	.word	0x20018284
 8041028:	08044c98 	.word	0x08044c98
 804102c:	20018210 	.word	0x20018210
 8041030:	20018214 	.word	0x20018214
 8041034:	20018004 	.word	0x20018004
 8041038:	20018008 	.word	0x20018008
 804103c:	00000000 	.word	0x00000000

08041040 <loop>:
void readKey();
void doKeyAction(unsigned int key);
void updateScreen();
int get_key(unsigned int input);

void loop(int count){
 8041040:	b5b0      	push	{r4, r5, r7, lr}
 8041042:	b094      	sub	sp, #80	; 0x50
 8041044:	af02      	add	r7, sp, #8
 8041046:	6078      	str	r0, [r7, #4]
	//check serial port for new commands
	//readSerial();

	// EVAL1: get the time spent on processSerial() for 1 uL, with/without rewritting.
	// 	here we hard code mLBolus
	mLBolus = 0.001 * count;
 8041048:	6878      	ldr	r0, [r7, #4]
 804104a:	f7ff fa47 	bl	80404dc <__aeabi_i2d>
 804104e:	a326      	add	r3, pc, #152	; (adr r3, 80410e8 <loop+0xa8>)
 8041050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8041054:	f7ff faac 	bl	80405b0 <__aeabi_dmul>
 8041058:	4603      	mov	r3, r0
 804105a:	460c      	mov	r4, r1
 804105c:	4618      	mov	r0, r3
 804105e:	4621      	mov	r1, r4
 8041060:	f7ff fce0 	bl	8040a24 <__aeabi_d2f>
 8041064:	4602      	mov	r2, r0
 8041066:	4b1c      	ldr	r3, [pc, #112]	; (80410d8 <loop+0x98>)
 8041068:	601a      	str	r2, [r3, #0]
	serialStr[0] = '+';
 804106a:	4b1c      	ldr	r3, [pc, #112]	; (80410dc <loop+0x9c>)
 804106c:	222b      	movs	r2, #43	; 0x2b
 804106e:	701a      	strb	r2, [r3, #0]
	serialStrReady = true;
 8041070:	4b1b      	ldr	r3, [pc, #108]	; (80410e0 <loop+0xa0>)
 8041072:	2201      	movs	r2, #1
 8041074:	701a      	strb	r2, [r3, #0]

	unsigned long start, end;

        start = usecs();
 8041076:	f000 fc5b 	bl	8041930 <usecs>
 804107a:	6478      	str	r0, [r7, #68]	; 0x44
	if(serialStrReady){
 804107c:	4b18      	ldr	r3, [pc, #96]	; (80410e0 <loop+0xa0>)
 804107e:	781b      	ldrb	r3, [r3, #0]
 8041080:	2b00      	cmp	r3, #0
 8041082:	d001      	beq.n	8041088 <loop+0x48>
//		cfv_init(1024);

		processSerial();
 8041084:	f000 f834 	bl	80410f0 <processSerial>

//		();
	}

        end = usecs();
 8041088:	f000 fc52 	bl	8041930 <usecs>
 804108c:	6438      	str	r0, [r7, #64]	; 0x40


    unsigned char tmpstr[50] = {0};
 804108e:	f107 030c 	add.w	r3, r7, #12
 8041092:	2232      	movs	r2, #50	; 0x32
 8041094:	2100      	movs	r1, #0
 8041096:	4618      	mov	r0, r3
 8041098:	f003 f874 	bl	8044184 <memset>
	sprintf(tmpstr, "mLBolus = %f, time usecs: %lu\n", mLBolus, end - start);
 804109c:	4b0e      	ldr	r3, [pc, #56]	; (80410d8 <loop+0x98>)
 804109e:	681b      	ldr	r3, [r3, #0]
 80410a0:	4618      	mov	r0, r3
 80410a2:	f7ff fa2d 	bl	8040500 <__aeabi_f2d>
 80410a6:	4604      	mov	r4, r0
 80410a8:	460d      	mov	r5, r1
 80410aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80410ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80410ae:	1ad3      	subs	r3, r2, r3
 80410b0:	f107 000c 	add.w	r0, r7, #12
 80410b4:	9300      	str	r3, [sp, #0]
 80410b6:	4622      	mov	r2, r4
 80410b8:	462b      	mov	r3, r5
 80410ba:	490a      	ldr	r1, [pc, #40]	; (80410e4 <loop+0xa4>)
 80410bc:	f003 f86a 	bl	8044194 <siprintf>
	print(tmpstr, sizeof(tmpstr));
 80410c0:	f107 030c 	add.w	r3, r7, #12
 80410c4:	2132      	movs	r1, #50	; 0x32
 80410c6:	4618      	mov	r0, r3
 80410c8:	f7ff ff4e 	bl	8040f68 <print>
}
 80410cc:	bf00      	nop
 80410ce:	3748      	adds	r7, #72	; 0x48
 80410d0:	46bd      	mov	sp, r7
 80410d2:	bdb0      	pop	{r4, r5, r7, pc}
 80410d4:	f3af 8000 	nop.w
 80410d8:	2001800c 	.word	0x2001800c
 80410dc:	20018220 	.word	0x20018220
 80410e0:	20018270 	.word	0x20018270
 80410e4:	08044cac 	.word	0x08044cac
 80410e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80410ec:	3f50624d 	.word	0x3f50624d

080410f0 <processSerial>:
			serialStrLen++;
		}
	}
}

void processSerial(){
 80410f0:	b580      	push	{r7, lr}
 80410f2:	b082      	sub	sp, #8
 80410f4:	af00      	add	r7, sp, #0
	//process serial commands as they are read in
	if(serialStr[0] == '+'){
 80410f6:	4b25      	ldr	r3, [pc, #148]	; (804118c <processSerial+0x9c>)
 80410f8:	781b      	ldrb	r3, [r3, #0]
 80410fa:	2b2b      	cmp	r3, #43	; 0x2b
 80410fc:	d105      	bne.n	804110a <processSerial+0x1a>
		bolus(PUSH);
 80410fe:	2000      	movs	r0, #0
 8041100:	f000 f852 	bl	80411a8 <bolus>
		updateScreen();
 8041104:	f000 f8e4 	bl	80412d0 <updateScreen>
 8041108:	e036      	b.n	8041178 <processSerial+0x88>
	}
	else if(serialStr[0] == '-'){
 804110a:	4b20      	ldr	r3, [pc, #128]	; (804118c <processSerial+0x9c>)
 804110c:	781b      	ldrb	r3, [r3, #0]
 804110e:	2b2d      	cmp	r3, #45	; 0x2d
 8041110:	d105      	bne.n	804111e <processSerial+0x2e>
		bolus(PULL);
 8041112:	2001      	movs	r0, #1
 8041114:	f000 f848 	bl	80411a8 <bolus>
		updateScreen();
 8041118:	f000 f8da 	bl	80412d0 <updateScreen>
 804111c:	e02c      	b.n	8041178 <processSerial+0x88>
	}
	else if(toUInt(serialStr, serialStrLen) != 0){
 804111e:	4b1c      	ldr	r3, [pc, #112]	; (8041190 <processSerial+0xa0>)
 8041120:	681b      	ldr	r3, [r3, #0]
 8041122:	4619      	mov	r1, r3
 8041124:	4819      	ldr	r0, [pc, #100]	; (804118c <processSerial+0x9c>)
 8041126:	f000 fc24 	bl	8041972 <toUInt>
 804112a:	4603      	mov	r3, r0
 804112c:	2b00      	cmp	r3, #0
 804112e:	d015      	beq.n	804115c <processSerial+0x6c>
		int uLbolus = toUInt(serialStr, serialStrLen);
 8041130:	4b17      	ldr	r3, [pc, #92]	; (8041190 <processSerial+0xa0>)
 8041132:	681b      	ldr	r3, [r3, #0]
 8041134:	4619      	mov	r1, r3
 8041136:	4815      	ldr	r0, [pc, #84]	; (804118c <processSerial+0x9c>)
 8041138:	f000 fc1b 	bl	8041972 <toUInt>
 804113c:	6078      	str	r0, [r7, #4]
		mLBolus = (float)uLbolus / 1000.0;
 804113e:	687b      	ldr	r3, [r7, #4]
 8041140:	ee07 3a90 	vmov	s15, r3
 8041144:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8041148:	eddf 6a12 	vldr	s13, [pc, #72]	; 8041194 <processSerial+0xa4>
 804114c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8041150:	4b11      	ldr	r3, [pc, #68]	; (8041198 <processSerial+0xa8>)
 8041152:	edc3 7a00 	vstr	s15, [r3]
		updateScreen();
 8041156:	f000 f8bb 	bl	80412d0 <updateScreen>
 804115a:	e00d      	b.n	8041178 <processSerial+0x88>
	}
	else{
		Serial_write("Invalid command: [", 18);
 804115c:	2112      	movs	r1, #18
 804115e:	480f      	ldr	r0, [pc, #60]	; (804119c <processSerial+0xac>)
 8041160:	f000 fbc2 	bl	80418e8 <Serial_write>
		Serial_write(serialStr, serialStrLen);
 8041164:	4b0a      	ldr	r3, [pc, #40]	; (8041190 <processSerial+0xa0>)
 8041166:	681b      	ldr	r3, [r3, #0]
 8041168:	4619      	mov	r1, r3
 804116a:	4808      	ldr	r0, [pc, #32]	; (804118c <processSerial+0x9c>)
 804116c:	f000 fbbc 	bl	80418e8 <Serial_write>
		Serial_write("]\n", 2);
 8041170:	2102      	movs	r1, #2
 8041172:	480b      	ldr	r0, [pc, #44]	; (80411a0 <processSerial+0xb0>)
 8041174:	f000 fbb8 	bl	80418e8 <Serial_write>
	}
	serialStrReady = false;
 8041178:	4b0a      	ldr	r3, [pc, #40]	; (80411a4 <processSerial+0xb4>)
 804117a:	2200      	movs	r2, #0
 804117c:	701a      	strb	r2, [r3, #0]
	serialStrLen = 0;
 804117e:	4b04      	ldr	r3, [pc, #16]	; (8041190 <processSerial+0xa0>)
 8041180:	2200      	movs	r2, #0
 8041182:	601a      	str	r2, [r3, #0]
}
 8041184:	bf00      	nop
 8041186:	3708      	adds	r7, #8
 8041188:	46bd      	mov	sp, r7
 804118a:	bd80      	pop	{r7, pc}
 804118c:	20018220 	.word	0x20018220
 8041190:	20018274 	.word	0x20018274
 8041194:	447a0000 	.word	0x447a0000
 8041198:	2001800c 	.word	0x2001800c
 804119c:	08044ccc 	.word	0x08044ccc
 80411a0:	08044ce0 	.word	0x08044ce0
 80411a4:	20018270 	.word	0x20018270

080411a8 <bolus>:

void bolus(int direction){
 80411a8:	b580      	push	{r7, lr}
 80411aa:	b086      	sub	sp, #24
 80411ac:	af00      	add	r7, sp, #0
 80411ae:	6078      	str	r0, [r7, #4]
	//Move stepper. Will not return until stepper is done moving.

	//change units to steps
	long steps = (mLBolus * ustepsPerML);
 80411b0:	4b41      	ldr	r3, [pc, #260]	; (80412b8 <bolus+0x110>)
 80411b2:	681b      	ldr	r3, [r3, #0]
 80411b4:	ee07 3a90 	vmov	s15, r3
 80411b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80411bc:	4b3f      	ldr	r3, [pc, #252]	; (80412bc <bolus+0x114>)
 80411be:	edd3 7a00 	vldr	s15, [r3]
 80411c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80411c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80411ca:	ee17 3a90 	vmov	r3, s15
 80411ce:	617b      	str	r3, [r7, #20]
	if(direction == PUSH){
 80411d0:	687b      	ldr	r3, [r7, #4]
 80411d2:	2b00      	cmp	r3, #0
 80411d4:	d123      	bne.n	804121e <bolus+0x76>
		led_on();
 80411d6:	f7ff fe8f 	bl	8040ef8 <led_on>
		digitalWrite(motorDirPin, HIGH);
 80411da:	4b39      	ldr	r3, [pc, #228]	; (80412c0 <bolus+0x118>)
 80411dc:	681b      	ldr	r3, [r3, #0]
 80411de:	2100      	movs	r1, #0
 80411e0:	4618      	mov	r0, r3
 80411e2:	f000 fb3d 	bl	8041860 <digitalWrite>
		steps = mLBolus * ustepsPerML;
 80411e6:	4b34      	ldr	r3, [pc, #208]	; (80412b8 <bolus+0x110>)
 80411e8:	681b      	ldr	r3, [r3, #0]
 80411ea:	ee07 3a90 	vmov	s15, r3
 80411ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80411f2:	4b32      	ldr	r3, [pc, #200]	; (80412bc <bolus+0x114>)
 80411f4:	edd3 7a00 	vldr	s15, [r3]
 80411f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80411fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8041200:	ee17 3a90 	vmov	r3, s15
 8041204:	617b      	str	r3, [r7, #20]
		mLUsed += mLBolus;
 8041206:	4b2f      	ldr	r3, [pc, #188]	; (80412c4 <bolus+0x11c>)
 8041208:	ed93 7a00 	vldr	s14, [r3]
 804120c:	4b2b      	ldr	r3, [pc, #172]	; (80412bc <bolus+0x114>)
 804120e:	edd3 7a00 	vldr	s15, [r3]
 8041212:	ee77 7a27 	vadd.f32	s15, s14, s15
 8041216:	4b2b      	ldr	r3, [pc, #172]	; (80412c4 <bolus+0x11c>)
 8041218:	edc3 7a00 	vstr	s15, [r3]
 804121c:	e027      	b.n	804126e <bolus+0xc6>
	}
	else if(direction == PULL){
 804121e:	687b      	ldr	r3, [r7, #4]
 8041220:	2b01      	cmp	r3, #1
 8041222:	d124      	bne.n	804126e <bolus+0xc6>
		led_off();
 8041224:	f7ff fe84 	bl	8040f30 <led_off>
		digitalWrite(motorDirPin, LOW);
 8041228:	4b25      	ldr	r3, [pc, #148]	; (80412c0 <bolus+0x118>)
 804122a:	681b      	ldr	r3, [r3, #0]
 804122c:	2101      	movs	r1, #1
 804122e:	4618      	mov	r0, r3
 8041230:	f000 fb16 	bl	8041860 <digitalWrite>
		if((mLUsed-mLBolus) > 0){
 8041234:	4b23      	ldr	r3, [pc, #140]	; (80412c4 <bolus+0x11c>)
 8041236:	ed93 7a00 	vldr	s14, [r3]
 804123a:	4b20      	ldr	r3, [pc, #128]	; (80412bc <bolus+0x114>)
 804123c:	edd3 7a00 	vldr	s15, [r3]
 8041240:	ee77 7a67 	vsub.f32	s15, s14, s15
 8041244:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8041248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 804124c:	dd0b      	ble.n	8041266 <bolus+0xbe>
			mLUsed -= mLBolus;
 804124e:	4b1d      	ldr	r3, [pc, #116]	; (80412c4 <bolus+0x11c>)
 8041250:	ed93 7a00 	vldr	s14, [r3]
 8041254:	4b19      	ldr	r3, [pc, #100]	; (80412bc <bolus+0x114>)
 8041256:	edd3 7a00 	vldr	s15, [r3]
 804125a:	ee77 7a67 	vsub.f32	s15, s14, s15
 804125e:	4b19      	ldr	r3, [pc, #100]	; (80412c4 <bolus+0x11c>)
 8041260:	edc3 7a00 	vstr	s15, [r3]
 8041264:	e003      	b.n	804126e <bolus+0xc6>
		}
		else{
			mLUsed = 0;
 8041266:	4b17      	ldr	r3, [pc, #92]	; (80412c4 <bolus+0x11c>)
 8041268:	f04f 0200 	mov.w	r2, #0
 804126c:	601a      	str	r2, [r3, #0]
		}
	}

	float usDelay = SPEED_MICROSECONDS_DELAY; //can go down to 20 or 30
 804126e:	4b16      	ldr	r3, [pc, #88]	; (80412c8 <bolus+0x120>)
 8041270:	60fb      	str	r3, [r7, #12]

	for(long i=0; i < steps; i++){
 8041272:	2300      	movs	r3, #0
 8041274:	613b      	str	r3, [r7, #16]
 8041276:	e016      	b.n	80412a6 <bolus+0xfe>
		digitalWrite(motorStepPin, HIGH);
 8041278:	4b14      	ldr	r3, [pc, #80]	; (80412cc <bolus+0x124>)
 804127a:	681b      	ldr	r3, [r3, #0]
 804127c:	2100      	movs	r1, #0
 804127e:	4618      	mov	r0, r3
 8041280:	f000 faee 	bl	8041860 <digitalWrite>
		delayMicroseconds(usDelay);
 8041284:	ed97 0a03 	vldr	s0, [r7, #12]
 8041288:	f000 fb68 	bl	804195c <delayMicroseconds>

		digitalWrite(motorStepPin, LOW);
 804128c:	4b0f      	ldr	r3, [pc, #60]	; (80412cc <bolus+0x124>)
 804128e:	681b      	ldr	r3, [r3, #0]
 8041290:	2101      	movs	r1, #1
 8041292:	4618      	mov	r0, r3
 8041294:	f000 fae4 	bl	8041860 <digitalWrite>
		delayMicroseconds(usDelay);
 8041298:	ed97 0a03 	vldr	s0, [r7, #12]
 804129c:	f000 fb5e 	bl	804195c <delayMicroseconds>
	for(long i=0; i < steps; i++){
 80412a0:	693b      	ldr	r3, [r7, #16]
 80412a2:	3301      	adds	r3, #1
 80412a4:	613b      	str	r3, [r7, #16]
 80412a6:	693a      	ldr	r2, [r7, #16]
 80412a8:	697b      	ldr	r3, [r7, #20]
 80412aa:	429a      	cmp	r2, r3
 80412ac:	dbe4      	blt.n	8041278 <bolus+0xd0>
	}

}
 80412ae:	bf00      	nop
 80412b0:	3718      	adds	r7, #24
 80412b2:	46bd      	mov	sp, r7
 80412b4:	bd80      	pop	{r7, pc}
 80412b6:	bf00      	nop
 80412b8:	20018000 	.word	0x20018000
 80412bc:	2001800c 	.word	0x2001800c
 80412c0:	20018004 	.word	0x20018004
 80412c4:	20018218 	.word	0x20018218
 80412c8:	42c80000 	.word	0x42c80000
 80412cc:	20018008 	.word	0x20018008

080412d0 <updateScreen>:
	}

	updateScreen();
}

void updateScreen(){
 80412d0:	b5b0      	push	{r4, r5, r7, lr}
 80412d2:	ed2d 8b02 	vpush	{d8}
 80412d6:	b0aa      	sub	sp, #168	; 0xa8
 80412d8:	af00      	add	r7, sp, #0
	//build strings for upper and lower lines of screen
	char s1[80]; //upper line
	char s2[80]; //lower line
	int s1Len = 0;
 80412da:	2300      	movs	r3, #0
 80412dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	int s2Len = 0;
 80412e0:	2300      	movs	r3, #0
 80412e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if(uiState == MAIN){
 80412e6:	4b7a      	ldr	r3, [pc, #488]	; (80414d0 <updateScreen+0x200>)
 80412e8:	681b      	ldr	r3, [r3, #0]
 80412ea:	2b00      	cmp	r3, #0
 80412ec:	d17f      	bne.n	80413ee <updateScreen+0x11e>
		s1Len = sprintf(s1, "Used %d.%d mL", (int)mLUsed, three_dec_places(mLUsed));
 80412ee:	4b79      	ldr	r3, [pc, #484]	; (80414d4 <updateScreen+0x204>)
 80412f0:	edd3 7a00 	vldr	s15, [r3]
 80412f4:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 80412f8:	4b76      	ldr	r3, [pc, #472]	; (80414d4 <updateScreen+0x204>)
 80412fa:	681b      	ldr	r3, [r3, #0]
 80412fc:	4618      	mov	r0, r3
 80412fe:	f7ff f8ff 	bl	8040500 <__aeabi_f2d>
 8041302:	f04f 0200 	mov.w	r2, #0
 8041306:	4b74      	ldr	r3, [pc, #464]	; (80414d8 <updateScreen+0x208>)
 8041308:	f7ff f952 	bl	80405b0 <__aeabi_dmul>
 804130c:	4603      	mov	r3, r0
 804130e:	460c      	mov	r4, r1
 8041310:	4618      	mov	r0, r3
 8041312:	4621      	mov	r1, r4
 8041314:	f04f 0200 	mov.w	r2, #0
 8041318:	4b70      	ldr	r3, [pc, #448]	; (80414dc <updateScreen+0x20c>)
 804131a:	f7fe ff93 	bl	8040244 <__adddf3>
 804131e:	4603      	mov	r3, r0
 8041320:	460c      	mov	r4, r1
 8041322:	4625      	mov	r5, r4
 8041324:	461c      	mov	r4, r3
 8041326:	4b6b      	ldr	r3, [pc, #428]	; (80414d4 <updateScreen+0x204>)
 8041328:	edd3 7a00 	vldr	s15, [r3]
 804132c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8041330:	ee17 0a90 	vmov	r0, s15
 8041334:	f7ff f8d2 	bl	80404dc <__aeabi_i2d>
 8041338:	f04f 0200 	mov.w	r2, #0
 804133c:	4b66      	ldr	r3, [pc, #408]	; (80414d8 <updateScreen+0x208>)
 804133e:	f7ff f937 	bl	80405b0 <__aeabi_dmul>
 8041342:	4602      	mov	r2, r0
 8041344:	460b      	mov	r3, r1
 8041346:	4620      	mov	r0, r4
 8041348:	4629      	mov	r1, r5
 804134a:	f7fe ff79 	bl	8040240 <__aeabi_dsub>
 804134e:	4603      	mov	r3, r0
 8041350:	460c      	mov	r4, r1
 8041352:	4618      	mov	r0, r3
 8041354:	4621      	mov	r1, r4
 8041356:	f7ff fb3d 	bl	80409d4 <__aeabi_d2iz>
 804135a:	4603      	mov	r3, r0
 804135c:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8041360:	ee18 2a10 	vmov	r2, s16
 8041364:	495e      	ldr	r1, [pc, #376]	; (80414e0 <updateScreen+0x210>)
 8041366:	f002 ff15 	bl	8044194 <siprintf>
 804136a:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
		s2Len = sprintf(s2, "Bolus %d.%d mL", (int)mLBolus, three_dec_places(mLBolus));
 804136e:	4b5d      	ldr	r3, [pc, #372]	; (80414e4 <updateScreen+0x214>)
 8041370:	edd3 7a00 	vldr	s15, [r3]
 8041374:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 8041378:	4b5a      	ldr	r3, [pc, #360]	; (80414e4 <updateScreen+0x214>)
 804137a:	681b      	ldr	r3, [r3, #0]
 804137c:	4618      	mov	r0, r3
 804137e:	f7ff f8bf 	bl	8040500 <__aeabi_f2d>
 8041382:	f04f 0200 	mov.w	r2, #0
 8041386:	4b54      	ldr	r3, [pc, #336]	; (80414d8 <updateScreen+0x208>)
 8041388:	f7ff f912 	bl	80405b0 <__aeabi_dmul>
 804138c:	4603      	mov	r3, r0
 804138e:	460c      	mov	r4, r1
 8041390:	4618      	mov	r0, r3
 8041392:	4621      	mov	r1, r4
 8041394:	f04f 0200 	mov.w	r2, #0
 8041398:	4b50      	ldr	r3, [pc, #320]	; (80414dc <updateScreen+0x20c>)
 804139a:	f7fe ff53 	bl	8040244 <__adddf3>
 804139e:	4603      	mov	r3, r0
 80413a0:	460c      	mov	r4, r1
 80413a2:	4625      	mov	r5, r4
 80413a4:	461c      	mov	r4, r3
 80413a6:	4b4f      	ldr	r3, [pc, #316]	; (80414e4 <updateScreen+0x214>)
 80413a8:	edd3 7a00 	vldr	s15, [r3]
 80413ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80413b0:	ee17 0a90 	vmov	r0, s15
 80413b4:	f7ff f892 	bl	80404dc <__aeabi_i2d>
 80413b8:	f04f 0200 	mov.w	r2, #0
 80413bc:	4b46      	ldr	r3, [pc, #280]	; (80414d8 <updateScreen+0x208>)
 80413be:	f7ff f8f7 	bl	80405b0 <__aeabi_dmul>
 80413c2:	4602      	mov	r2, r0
 80413c4:	460b      	mov	r3, r1
 80413c6:	4620      	mov	r0, r4
 80413c8:	4629      	mov	r1, r5
 80413ca:	f7fe ff39 	bl	8040240 <__aeabi_dsub>
 80413ce:	4603      	mov	r3, r0
 80413d0:	460c      	mov	r4, r1
 80413d2:	4618      	mov	r0, r3
 80413d4:	4621      	mov	r1, r4
 80413d6:	f7ff fafd 	bl	80409d4 <__aeabi_d2iz>
 80413da:	4603      	mov	r3, r0
 80413dc:	4638      	mov	r0, r7
 80413de:	ee18 2a10 	vmov	r2, s16
 80413e2:	4941      	ldr	r1, [pc, #260]	; (80414e8 <updateScreen+0x218>)
 80413e4:	f002 fed6 	bl	8044194 <siprintf>
 80413e8:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 80413ec:	e04d      	b.n	804148a <updateScreen+0x1ba>
	}
	else if(uiState == BOLUS_MENU){
 80413ee:	4b38      	ldr	r3, [pc, #224]	; (80414d0 <updateScreen+0x200>)
 80413f0:	681b      	ldr	r3, [r3, #0]
 80413f2:	2b01      	cmp	r3, #1
 80413f4:	d149      	bne.n	804148a <updateScreen+0x1ba>
		s1Len = sprintf(s1, "Menu> BolusStep");
 80413f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80413fa:	4a3c      	ldr	r2, [pc, #240]	; (80414ec <updateScreen+0x21c>)
 80413fc:	461c      	mov	r4, r3
 80413fe:	4613      	mov	r3, r2
 8041400:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8041402:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8041406:	230f      	movs	r3, #15
 8041408:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		s2Len = sprintf(s2, "%d.%d", (int)mLBolusStep, three_dec_places(mLBolusStep));
 804140c:	4b38      	ldr	r3, [pc, #224]	; (80414f0 <updateScreen+0x220>)
 804140e:	edd3 7a00 	vldr	s15, [r3]
 8041412:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 8041416:	4b36      	ldr	r3, [pc, #216]	; (80414f0 <updateScreen+0x220>)
 8041418:	681b      	ldr	r3, [r3, #0]
 804141a:	4618      	mov	r0, r3
 804141c:	f7ff f870 	bl	8040500 <__aeabi_f2d>
 8041420:	f04f 0200 	mov.w	r2, #0
 8041424:	4b2c      	ldr	r3, [pc, #176]	; (80414d8 <updateScreen+0x208>)
 8041426:	f7ff f8c3 	bl	80405b0 <__aeabi_dmul>
 804142a:	4603      	mov	r3, r0
 804142c:	460c      	mov	r4, r1
 804142e:	4618      	mov	r0, r3
 8041430:	4621      	mov	r1, r4
 8041432:	f04f 0200 	mov.w	r2, #0
 8041436:	4b29      	ldr	r3, [pc, #164]	; (80414dc <updateScreen+0x20c>)
 8041438:	f7fe ff04 	bl	8040244 <__adddf3>
 804143c:	4603      	mov	r3, r0
 804143e:	460c      	mov	r4, r1
 8041440:	4625      	mov	r5, r4
 8041442:	461c      	mov	r4, r3
 8041444:	4b2a      	ldr	r3, [pc, #168]	; (80414f0 <updateScreen+0x220>)
 8041446:	edd3 7a00 	vldr	s15, [r3]
 804144a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 804144e:	ee17 0a90 	vmov	r0, s15
 8041452:	f7ff f843 	bl	80404dc <__aeabi_i2d>
 8041456:	f04f 0200 	mov.w	r2, #0
 804145a:	4b1f      	ldr	r3, [pc, #124]	; (80414d8 <updateScreen+0x208>)
 804145c:	f7ff f8a8 	bl	80405b0 <__aeabi_dmul>
 8041460:	4602      	mov	r2, r0
 8041462:	460b      	mov	r3, r1
 8041464:	4620      	mov	r0, r4
 8041466:	4629      	mov	r1, r5
 8041468:	f7fe feea 	bl	8040240 <__aeabi_dsub>
 804146c:	4603      	mov	r3, r0
 804146e:	460c      	mov	r4, r1
 8041470:	4618      	mov	r0, r3
 8041472:	4621      	mov	r1, r4
 8041474:	f7ff faae 	bl	80409d4 <__aeabi_d2iz>
 8041478:	4603      	mov	r3, r0
 804147a:	4638      	mov	r0, r7
 804147c:	ee18 2a10 	vmov	r2, s16
 8041480:	491c      	ldr	r1, [pc, #112]	; (80414f4 <updateScreen+0x224>)
 8041482:	f002 fe87 	bl	8044194 <siprintf>
 8041486:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
	}

	//do actual screen update
	lcd_clear(&lcd);
 804148a:	481b      	ldr	r0, [pc, #108]	; (80414f8 <updateScreen+0x228>)
 804148c:	f7ff fcca 	bl	8040e24 <lcd_clear>

	lcd_setCursor(&lcd, 0, 0);  //line=1, x=0
 8041490:	2200      	movs	r2, #0
 8041492:	2100      	movs	r1, #0
 8041494:	4818      	ldr	r0, [pc, #96]	; (80414f8 <updateScreen+0x228>)
 8041496:	f7ff fd0b 	bl	8040eb0 <lcd_setCursor>
	lcd_print(&lcd, s1, s1Len);
 804149a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 804149e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80414a2:	4619      	mov	r1, r3
 80414a4:	4814      	ldr	r0, [pc, #80]	; (80414f8 <updateScreen+0x228>)
 80414a6:	f7ff fcdd 	bl	8040e64 <lcd_print>

	lcd_setCursor(&lcd, 0, 1);  //line=2, x=0
 80414aa:	2201      	movs	r2, #1
 80414ac:	2100      	movs	r1, #0
 80414ae:	4812      	ldr	r0, [pc, #72]	; (80414f8 <updateScreen+0x228>)
 80414b0:	f7ff fcfe 	bl	8040eb0 <lcd_setCursor>
	lcd_print(&lcd, s2, s2Len);
 80414b4:	463b      	mov	r3, r7
 80414b6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80414ba:	4619      	mov	r1, r3
 80414bc:	480e      	ldr	r0, [pc, #56]	; (80414f8 <updateScreen+0x228>)
 80414be:	f7ff fcd1 	bl	8040e64 <lcd_print>
}
 80414c2:	bf00      	nop
 80414c4:	37a8      	adds	r7, #168	; 0xa8
 80414c6:	46bd      	mov	sp, r7
 80414c8:	ecbd 8b02 	vpop	{d8}
 80414cc:	bdb0      	pop	{r4, r5, r7, pc}
 80414ce:	bf00      	nop
 80414d0:	2001821c 	.word	0x2001821c
 80414d4:	20018218 	.word	0x20018218
 80414d8:	408f4000 	.word	0x408f4000
 80414dc:	3fe00000 	.word	0x3fe00000
 80414e0:	08044ce4 	.word	0x08044ce4
 80414e4:	2001800c 	.word	0x2001800c
 80414e8:	08044cf4 	.word	0x08044cf4
 80414ec:	08044d04 	.word	0x08044d04
 80414f0:	20018010 	.word	0x20018010
 80414f4:	08044d14 	.word	0x08044d14
 80414f8:	20018284 	.word	0x20018284

080414fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80414fc:	b580      	push	{r7, lr}
 80414fe:	b082      	sub	sp, #8
 8041500:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8041502:	f000 fa6e 	bl	80419e2 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8041506:	f000 f863 	bl	80415d0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 804150a:	f000 f815 	bl	8041538 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  print("Starting syringe pump\r\n", sizeof("Starting syringe pump\r\n"));
 804150e:	2118      	movs	r1, #24
 8041510:	4808      	ldr	r0, [pc, #32]	; (8041534 <main+0x38>)
 8041512:	f7ff fd29 	bl	8040f68 <print>
  setup();
 8041516:	f7ff fd4b 	bl	8040fb0 <setup>

  int count = 1;
 804151a:	2301      	movs	r3, #1
 804151c:	607b      	str	r3, [r7, #4]
  while(count < 62) {
 804151e:	e005      	b.n	804152c <main+0x30>
  	count += 10;
 8041520:	687b      	ldr	r3, [r7, #4]
 8041522:	330a      	adds	r3, #10
 8041524:	607b      	str	r3, [r7, #4]
  	loop(count);
 8041526:	6878      	ldr	r0, [r7, #4]
 8041528:	f7ff fd8a 	bl	8041040 <loop>
  while(count < 62) {
 804152c:	687b      	ldr	r3, [r7, #4]
 804152e:	2b3d      	cmp	r3, #61	; 0x3d
 8041530:	ddf6      	ble.n	8041520 <main+0x24>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8041532:	e7fe      	b.n	8041532 <main+0x36>
 8041534:	08044d1c 	.word	0x08044d1c

08041538 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8041538:	b580      	push	{r7, lr}
 804153a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 804153c:	4b22      	ldr	r3, [pc, #136]	; (80415c8 <MX_USART1_UART_Init+0x90>)
 804153e:	4a23      	ldr	r2, [pc, #140]	; (80415cc <MX_USART1_UART_Init+0x94>)
 8041540:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8041542:	4b21      	ldr	r3, [pc, #132]	; (80415c8 <MX_USART1_UART_Init+0x90>)
 8041544:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8041548:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 804154a:	4b1f      	ldr	r3, [pc, #124]	; (80415c8 <MX_USART1_UART_Init+0x90>)
 804154c:	2200      	movs	r2, #0
 804154e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8041550:	4b1d      	ldr	r3, [pc, #116]	; (80415c8 <MX_USART1_UART_Init+0x90>)
 8041552:	2200      	movs	r2, #0
 8041554:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8041556:	4b1c      	ldr	r3, [pc, #112]	; (80415c8 <MX_USART1_UART_Init+0x90>)
 8041558:	2200      	movs	r2, #0
 804155a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 804155c:	4b1a      	ldr	r3, [pc, #104]	; (80415c8 <MX_USART1_UART_Init+0x90>)
 804155e:	220c      	movs	r2, #12
 8041560:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8041562:	4b19      	ldr	r3, [pc, #100]	; (80415c8 <MX_USART1_UART_Init+0x90>)
 8041564:	2200      	movs	r2, #0
 8041566:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8041568:	4b17      	ldr	r3, [pc, #92]	; (80415c8 <MX_USART1_UART_Init+0x90>)
 804156a:	2200      	movs	r2, #0
 804156c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 804156e:	4b16      	ldr	r3, [pc, #88]	; (80415c8 <MX_USART1_UART_Init+0x90>)
 8041570:	2200      	movs	r2, #0
 8041572:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8041574:	4b14      	ldr	r3, [pc, #80]	; (80415c8 <MX_USART1_UART_Init+0x90>)
 8041576:	2200      	movs	r2, #0
 8041578:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 804157a:	4b13      	ldr	r3, [pc, #76]	; (80415c8 <MX_USART1_UART_Init+0x90>)
 804157c:	2200      	movs	r2, #0
 804157e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8041580:	4811      	ldr	r0, [pc, #68]	; (80415c8 <MX_USART1_UART_Init+0x90>)
 8041582:	f001 fb9b 	bl	8042cbc <HAL_UART_Init>
 8041586:	4603      	mov	r3, r0
 8041588:	2b00      	cmp	r3, #0
 804158a:	d001      	beq.n	8041590 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 804158c:	f000 f844 	bl	8041618 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8041590:	2100      	movs	r1, #0
 8041592:	480d      	ldr	r0, [pc, #52]	; (80415c8 <MX_USART1_UART_Init+0x90>)
 8041594:	f002 fce4 	bl	8043f60 <HAL_UARTEx_SetTxFifoThreshold>
 8041598:	4603      	mov	r3, r0
 804159a:	2b00      	cmp	r3, #0
 804159c:	d001      	beq.n	80415a2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 804159e:	f000 f83b 	bl	8041618 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80415a2:	2100      	movs	r1, #0
 80415a4:	4808      	ldr	r0, [pc, #32]	; (80415c8 <MX_USART1_UART_Init+0x90>)
 80415a6:	f002 fd19 	bl	8043fdc <HAL_UARTEx_SetRxFifoThreshold>
 80415aa:	4603      	mov	r3, r0
 80415ac:	2b00      	cmp	r3, #0
 80415ae:	d001      	beq.n	80415b4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80415b0:	f000 f832 	bl	8041618 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80415b4:	4804      	ldr	r0, [pc, #16]	; (80415c8 <MX_USART1_UART_Init+0x90>)
 80415b6:	f002 fc9a 	bl	8043eee <HAL_UARTEx_DisableFifoMode>
 80415ba:	4603      	mov	r3, r0
 80415bc:	2b00      	cmp	r3, #0
 80415be:	d001      	beq.n	80415c4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80415c0:	f000 f82a 	bl	8041618 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80415c4:	bf00      	nop
 80415c6:	bd80      	pop	{r7, pc}
 80415c8:	20018298 	.word	0x20018298
 80415cc:	40013800 	.word	0x40013800

080415d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80415d0:	b480      	push	{r7}
 80415d2:	b083      	sub	sp, #12
 80415d4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80415d6:	4b0f      	ldr	r3, [pc, #60]	; (8041614 <MX_GPIO_Init+0x44>)
 80415d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80415da:	4a0e      	ldr	r2, [pc, #56]	; (8041614 <MX_GPIO_Init+0x44>)
 80415dc:	f043 0304 	orr.w	r3, r3, #4
 80415e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80415e2:	4b0c      	ldr	r3, [pc, #48]	; (8041614 <MX_GPIO_Init+0x44>)
 80415e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80415e6:	f003 0304 	and.w	r3, r3, #4
 80415ea:	607b      	str	r3, [r7, #4]
 80415ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80415ee:	4b09      	ldr	r3, [pc, #36]	; (8041614 <MX_GPIO_Init+0x44>)
 80415f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80415f2:	4a08      	ldr	r2, [pc, #32]	; (8041614 <MX_GPIO_Init+0x44>)
 80415f4:	f043 0301 	orr.w	r3, r3, #1
 80415f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80415fa:	4b06      	ldr	r3, [pc, #24]	; (8041614 <MX_GPIO_Init+0x44>)
 80415fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80415fe:	f003 0301 	and.w	r3, r3, #1
 8041602:	603b      	str	r3, [r7, #0]
 8041604:	683b      	ldr	r3, [r7, #0]

}
 8041606:	bf00      	nop
 8041608:	370c      	adds	r7, #12
 804160a:	46bd      	mov	sp, r7
 804160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041610:	4770      	bx	lr
 8041612:	bf00      	nop
 8041614:	40021000 	.word	0x40021000

08041618 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8041618:	b480      	push	{r7}
 804161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 804161c:	bf00      	nop
 804161e:	46bd      	mov	sp, r7
 8041620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041624:	4770      	bx	lr
	...

08041628 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8041628:	b480      	push	{r7}
 804162a:	b083      	sub	sp, #12
 804162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 804162e:	4b0f      	ldr	r3, [pc, #60]	; (804166c <HAL_MspInit+0x44>)
 8041630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8041632:	4a0e      	ldr	r2, [pc, #56]	; (804166c <HAL_MspInit+0x44>)
 8041634:	f043 0301 	orr.w	r3, r3, #1
 8041638:	6613      	str	r3, [r2, #96]	; 0x60
 804163a:	4b0c      	ldr	r3, [pc, #48]	; (804166c <HAL_MspInit+0x44>)
 804163c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804163e:	f003 0301 	and.w	r3, r3, #1
 8041642:	607b      	str	r3, [r7, #4]
 8041644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8041646:	4b09      	ldr	r3, [pc, #36]	; (804166c <HAL_MspInit+0x44>)
 8041648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804164a:	4a08      	ldr	r2, [pc, #32]	; (804166c <HAL_MspInit+0x44>)
 804164c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8041650:	6593      	str	r3, [r2, #88]	; 0x58
 8041652:	4b06      	ldr	r3, [pc, #24]	; (804166c <HAL_MspInit+0x44>)
 8041654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804165a:	603b      	str	r3, [r7, #0]
 804165c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 804165e:	bf00      	nop
 8041660:	370c      	adds	r7, #12
 8041662:	46bd      	mov	sp, r7
 8041664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041668:	4770      	bx	lr
 804166a:	bf00      	nop
 804166c:	40021000 	.word	0x40021000

08041670 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8041670:	b580      	push	{r7, lr}
 8041672:	b0ae      	sub	sp, #184	; 0xb8
 8041674:	af00      	add	r7, sp, #0
 8041676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8041678:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 804167c:	2200      	movs	r2, #0
 804167e:	601a      	str	r2, [r3, #0]
 8041680:	605a      	str	r2, [r3, #4]
 8041682:	609a      	str	r2, [r3, #8]
 8041684:	60da      	str	r2, [r3, #12]
 8041686:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8041688:	f107 0310 	add.w	r3, r7, #16
 804168c:	2294      	movs	r2, #148	; 0x94
 804168e:	2100      	movs	r1, #0
 8041690:	4618      	mov	r0, r3
 8041692:	f002 fd77 	bl	8044184 <memset>
  if(huart->Instance==USART1)
 8041696:	687b      	ldr	r3, [r7, #4]
 8041698:	681b      	ldr	r3, [r3, #0]
 804169a:	4a25      	ldr	r2, [pc, #148]	; (8041730 <HAL_UART_MspInit+0xc0>)
 804169c:	4293      	cmp	r3, r2
 804169e:	d143      	bne.n	8041728 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80416a0:	2301      	movs	r3, #1
 80416a2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80416a4:	2300      	movs	r3, #0
 80416a6:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80416a8:	f107 0310 	add.w	r3, r7, #16
 80416ac:	4618      	mov	r0, r3
 80416ae:	f000 fe31 	bl	8042314 <HAL_RCCEx_PeriphCLKConfig>
 80416b2:	4603      	mov	r3, r0
 80416b4:	2b00      	cmp	r3, #0
 80416b6:	d001      	beq.n	80416bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80416b8:	f7ff ffae 	bl	8041618 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80416bc:	4b1d      	ldr	r3, [pc, #116]	; (8041734 <HAL_UART_MspInit+0xc4>)
 80416be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80416c0:	4a1c      	ldr	r2, [pc, #112]	; (8041734 <HAL_UART_MspInit+0xc4>)
 80416c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80416c6:	6613      	str	r3, [r2, #96]	; 0x60
 80416c8:	4b1a      	ldr	r3, [pc, #104]	; (8041734 <HAL_UART_MspInit+0xc4>)
 80416ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80416cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80416d0:	60fb      	str	r3, [r7, #12]
 80416d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80416d4:	4b17      	ldr	r3, [pc, #92]	; (8041734 <HAL_UART_MspInit+0xc4>)
 80416d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80416d8:	4a16      	ldr	r2, [pc, #88]	; (8041734 <HAL_UART_MspInit+0xc4>)
 80416da:	f043 0301 	orr.w	r3, r3, #1
 80416de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80416e0:	4b14      	ldr	r3, [pc, #80]	; (8041734 <HAL_UART_MspInit+0xc4>)
 80416e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80416e4:	f003 0301 	and.w	r3, r3, #1
 80416e8:	60bb      	str	r3, [r7, #8]
 80416ea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 80416ec:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80416f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80416f4:	2302      	movs	r3, #2
 80416f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80416fa:	2300      	movs	r3, #0
 80416fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8041700:	2300      	movs	r3, #0
 8041702:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8041706:	2307      	movs	r3, #7
 8041708:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 804170c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8041710:	4619      	mov	r1, r3
 8041712:	4809      	ldr	r0, [pc, #36]	; (8041738 <HAL_UART_MspInit+0xc8>)
 8041714:	f000 fba6 	bl	8041e64 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8041718:	2200      	movs	r2, #0
 804171a:	2100      	movs	r1, #0
 804171c:	203d      	movs	r0, #61	; 0x3d
 804171e:	f000 fab2 	bl	8041c86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8041722:	203d      	movs	r0, #61	; 0x3d
 8041724:	f000 fac9 	bl	8041cba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8041728:	bf00      	nop
 804172a:	37b8      	adds	r7, #184	; 0xb8
 804172c:	46bd      	mov	sp, r7
 804172e:	bd80      	pop	{r7, pc}
 8041730:	40013800 	.word	0x40013800
 8041734:	40021000 	.word	0x40021000
 8041738:	42020000 	.word	0x42020000

0804173c <MemManage_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 804173c:	b480      	push	{r7}
 804173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8041740:	e7fe      	b.n	8041740 <MemManage_Handler+0x4>

08041742 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8041742:	b480      	push	{r7}
 8041744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8041746:	e7fe      	b.n	8041746 <UsageFault_Handler+0x4>

08041748 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8041748:	b480      	push	{r7}
 804174a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 804174c:	bf00      	nop
 804174e:	46bd      	mov	sp, r7
 8041750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041754:	4770      	bx	lr

08041756 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8041756:	b480      	push	{r7}
 8041758:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 804175a:	bf00      	nop
 804175c:	46bd      	mov	sp, r7
 804175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041762:	4770      	bx	lr

08041764 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8041764:	b580      	push	{r7, lr}
 8041766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8041768:	f000 f992 	bl	8041a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 804176c:	bf00      	nop
 804176e:	bd80      	pop	{r7, pc}

08041770 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 26.
  */
void USART1_IRQHandler(void)
{
 8041770:	b580      	push	{r7, lr}
 8041772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8041774:	4802      	ldr	r0, [pc, #8]	; (8041780 <USART1_IRQHandler+0x10>)
 8041776:	f001 fb75 	bl	8042e64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 804177a:	bf00      	nop
 804177c:	bd80      	pop	{r7, pc}
 804177e:	bf00      	nop
 8041780:	20018298 	.word	0x20018298

08041784 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8041784:	b580      	push	{r7, lr}
 8041786:	b086      	sub	sp, #24
 8041788:	af00      	add	r7, sp, #0
 804178a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 804178c:	4a14      	ldr	r2, [pc, #80]	; (80417e0 <_sbrk+0x5c>)
 804178e:	4b15      	ldr	r3, [pc, #84]	; (80417e4 <_sbrk+0x60>)
 8041790:	1ad3      	subs	r3, r2, r3
 8041792:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8041794:	697b      	ldr	r3, [r7, #20]
 8041796:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8041798:	4b13      	ldr	r3, [pc, #76]	; (80417e8 <_sbrk+0x64>)
 804179a:	681b      	ldr	r3, [r3, #0]
 804179c:	2b00      	cmp	r3, #0
 804179e:	d102      	bne.n	80417a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80417a0:	4b11      	ldr	r3, [pc, #68]	; (80417e8 <_sbrk+0x64>)
 80417a2:	4a12      	ldr	r2, [pc, #72]	; (80417ec <_sbrk+0x68>)
 80417a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80417a6:	4b10      	ldr	r3, [pc, #64]	; (80417e8 <_sbrk+0x64>)
 80417a8:	681a      	ldr	r2, [r3, #0]
 80417aa:	687b      	ldr	r3, [r7, #4]
 80417ac:	4413      	add	r3, r2
 80417ae:	693a      	ldr	r2, [r7, #16]
 80417b0:	429a      	cmp	r2, r3
 80417b2:	d207      	bcs.n	80417c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80417b4:	f002 fcbc 	bl	8044130 <__errno>
 80417b8:	4602      	mov	r2, r0
 80417ba:	230c      	movs	r3, #12
 80417bc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80417be:	f04f 33ff 	mov.w	r3, #4294967295
 80417c2:	e009      	b.n	80417d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80417c4:	4b08      	ldr	r3, [pc, #32]	; (80417e8 <_sbrk+0x64>)
 80417c6:	681b      	ldr	r3, [r3, #0]
 80417c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80417ca:	4b07      	ldr	r3, [pc, #28]	; (80417e8 <_sbrk+0x64>)
 80417cc:	681a      	ldr	r2, [r3, #0]
 80417ce:	687b      	ldr	r3, [r7, #4]
 80417d0:	4413      	add	r3, r2
 80417d2:	4a05      	ldr	r2, [pc, #20]	; (80417e8 <_sbrk+0x64>)
 80417d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80417d6:	68fb      	ldr	r3, [r7, #12]
}
 80417d8:	4618      	mov	r0, r3
 80417da:	3718      	adds	r7, #24
 80417dc:	46bd      	mov	sp, r7
 80417de:	bd80      	pop	{r7, pc}
 80417e0:	20030000 	.word	0x20030000
 80417e4:	00000400 	.word	0x00000400
 80417e8:	20018278 	.word	0x20018278
 80417ec:	20018338 	.word	0x20018338

080417f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80417f0:	b480      	push	{r7}
 80417f2:	af00      	add	r7, sp, #0
#endif

  /* Non-secure main application shall call SystemCoreClockUpdate() to update */
  /* the SystemCoreClock variable to insure non-secure application relies on  */
  /* the initial clock reference set by secure application.                   */
}
 80417f4:	bf00      	nop
 80417f6:	46bd      	mov	sp, r7
 80417f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80417fc:	4770      	bx	lr
	...

08041800 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8041800:	b580      	push	{r7, lr}
 8041802:	af00      	add	r7, sp, #0
  /* Get the SystemCoreClock value from the secure domain */
  SystemCoreClock = SECURE_SystemCoreClockUpdate();
 8041804:	f003 f9c0 	bl	8044b88 <__SECURE_SystemCoreClockUpdate_veneer>
 8041808:	4602      	mov	r2, r0
 804180a:	4b02      	ldr	r3, [pc, #8]	; (8041814 <SystemCoreClockUpdate+0x14>)
 804180c:	601a      	str	r2, [r3, #0]
}
 804180e:	bf00      	nop
 8041810:	bd80      	pop	{r7, pc}
 8041812:	bf00      	nop
 8041814:	20018014 	.word	0x20018014

08041818 <pinMode>:
#include <unistd.h>
#include <stdlib.h>
#include "util.h"
#include "main.h"

void pinMode(int pin, int mode) {
 8041818:	b580      	push	{r7, lr}
 804181a:	b092      	sub	sp, #72	; 0x48
 804181c:	af02      	add	r7, sp, #8
 804181e:	6078      	str	r0, [r7, #4]
 8041820:	6039      	str	r1, [r7, #0]
//	printf("%s (int pin = %d, int mode = %d)\n", __func__, pin, mode);

	unsigned char string[50] = {0};
 8041822:	f107 030c 	add.w	r3, r7, #12
 8041826:	2232      	movs	r2, #50	; 0x32
 8041828:	2100      	movs	r1, #0
 804182a:	4618      	mov	r0, r3
 804182c:	f002 fcaa 	bl	8044184 <memset>
	sprintf(string, "%s (int pin = %d, int mode = %d)\r\n", __func__, pin, mode);
 8041830:	f107 000c 	add.w	r0, r7, #12
 8041834:	683b      	ldr	r3, [r7, #0]
 8041836:	9300      	str	r3, [sp, #0]
 8041838:	687b      	ldr	r3, [r7, #4]
 804183a:	4a07      	ldr	r2, [pc, #28]	; (8041858 <pinMode+0x40>)
 804183c:	4907      	ldr	r1, [pc, #28]	; (804185c <pinMode+0x44>)
 804183e:	f002 fca9 	bl	8044194 <siprintf>
	print(string, sizeof(string));
 8041842:	f107 030c 	add.w	r3, r7, #12
 8041846:	2132      	movs	r1, #50	; 0x32
 8041848:	4618      	mov	r0, r3
 804184a:	f7ff fb8d 	bl	8040f68 <print>
	return;
 804184e:	bf00      	nop
}
 8041850:	3740      	adds	r7, #64	; 0x40
 8041852:	46bd      	mov	sp, r7
 8041854:	bd80      	pop	{r7, pc}
 8041856:	bf00      	nop
 8041858:	08044ea0 	.word	0x08044ea0
 804185c:	08044d34 	.word	0x08044d34

08041860 <digitalWrite>:
	printf("%s (int pin = %d)\r\n", __func__, pin);
	scanf("%d", &val);
	return val;
}

void digitalWrite(int pin, int value) {
 8041860:	b580      	push	{r7, lr}
 8041862:	b092      	sub	sp, #72	; 0x48
 8041864:	af02      	add	r7, sp, #8
 8041866:	6078      	str	r0, [r7, #4]
 8041868:	6039      	str	r1, [r7, #0]
//	printf("%s (int pin = %d, int value = %d)\n", __func__, pin, value);

	unsigned char string[50] = {0};
 804186a:	f107 030c 	add.w	r3, r7, #12
 804186e:	2232      	movs	r2, #50	; 0x32
 8041870:	2100      	movs	r1, #0
 8041872:	4618      	mov	r0, r3
 8041874:	f002 fc86 	bl	8044184 <memset>
	sprintf(string, "%s (int pin = %d, int value = %d)\r\n", __func__, pin, value);
 8041878:	f107 000c 	add.w	r0, r7, #12
 804187c:	683b      	ldr	r3, [r7, #0]
 804187e:	9300      	str	r3, [sp, #0]
 8041880:	687b      	ldr	r3, [r7, #4]
 8041882:	4a07      	ldr	r2, [pc, #28]	; (80418a0 <digitalWrite+0x40>)
 8041884:	4907      	ldr	r1, [pc, #28]	; (80418a4 <digitalWrite+0x44>)
 8041886:	f002 fc85 	bl	8044194 <siprintf>
	print(string, sizeof(string));
 804188a:	f107 030c 	add.w	r3, r7, #12
 804188e:	2132      	movs	r1, #50	; 0x32
 8041890:	4618      	mov	r0, r3
 8041892:	f7ff fb69 	bl	8040f68 <print>

	return;
 8041896:	bf00      	nop
}
 8041898:	3740      	adds	r7, #64	; 0x40
 804189a:	46bd      	mov	sp, r7
 804189c:	bd80      	pop	{r7, pc}
 804189e:	bf00      	nop
 80418a0:	08044ea8 	.word	0x08044ea8
 80418a4:	08044d70 	.word	0x08044d70

080418a8 <Serial_begin>:

void Serial_begin(int baud) {
 80418a8:	b580      	push	{r7, lr}
 80418aa:	b090      	sub	sp, #64	; 0x40
 80418ac:	af00      	add	r7, sp, #0
 80418ae:	6078      	str	r0, [r7, #4]
//	printf("%s (int baud = %d)\n", __func__, baud);

	unsigned char string[50] = {0};
 80418b0:	f107 030c 	add.w	r3, r7, #12
 80418b4:	2232      	movs	r2, #50	; 0x32
 80418b6:	2100      	movs	r1, #0
 80418b8:	4618      	mov	r0, r3
 80418ba:	f002 fc63 	bl	8044184 <memset>
	sprintf(string, "%s (int baud = %d)\r\n", __func__, baud);
 80418be:	f107 000c 	add.w	r0, r7, #12
 80418c2:	687b      	ldr	r3, [r7, #4]
 80418c4:	4a06      	ldr	r2, [pc, #24]	; (80418e0 <Serial_begin+0x38>)
 80418c6:	4907      	ldr	r1, [pc, #28]	; (80418e4 <Serial_begin+0x3c>)
 80418c8:	f002 fc64 	bl	8044194 <siprintf>
	print(string, sizeof(string));
 80418cc:	f107 030c 	add.w	r3, r7, #12
 80418d0:	2132      	movs	r1, #50	; 0x32
 80418d2:	4618      	mov	r0, r3
 80418d4:	f7ff fb48 	bl	8040f68 <print>

	return;
 80418d8:	bf00      	nop
}
 80418da:	3740      	adds	r7, #64	; 0x40
 80418dc:	46bd      	mov	sp, r7
 80418de:	bd80      	pop	{r7, pc}
 80418e0:	08044eb8 	.word	0x08044eb8
 80418e4:	08044d94 	.word	0x08044d94

080418e8 <Serial_write>:
	c = getchar();

	return (int)c;
}

int Serial_write(char* output, int len) {
 80418e8:	b580      	push	{r7, lr}
 80418ea:	b094      	sub	sp, #80	; 0x50
 80418ec:	af02      	add	r7, sp, #8
 80418ee:	6078      	str	r0, [r7, #4]
 80418f0:	6039      	str	r1, [r7, #0]
//	printf("%s (char *output = %s, int len = %d)\n", __func__, output, len);

	unsigned char string[60] = {0};
 80418f2:	f107 030c 	add.w	r3, r7, #12
 80418f6:	223c      	movs	r2, #60	; 0x3c
 80418f8:	2100      	movs	r1, #0
 80418fa:	4618      	mov	r0, r3
 80418fc:	f002 fc42 	bl	8044184 <memset>
	sprintf(string, "%s (char *output = %s, int len = %d)\n", __func__, output, len);
 8041900:	f107 000c 	add.w	r0, r7, #12
 8041904:	683b      	ldr	r3, [r7, #0]
 8041906:	9300      	str	r3, [sp, #0]
 8041908:	687b      	ldr	r3, [r7, #4]
 804190a:	4a07      	ldr	r2, [pc, #28]	; (8041928 <Serial_write+0x40>)
 804190c:	4907      	ldr	r1, [pc, #28]	; (804192c <Serial_write+0x44>)
 804190e:	f002 fc41 	bl	8044194 <siprintf>
	print(string, sizeof(string));
 8041912:	f107 030c 	add.w	r3, r7, #12
 8041916:	213c      	movs	r1, #60	; 0x3c
 8041918:	4618      	mov	r0, r3
 804191a:	f7ff fb25 	bl	8040f68 <print>

	return 0;
 804191e:	2300      	movs	r3, #0
}
 8041920:	4618      	mov	r0, r3
 8041922:	3748      	adds	r7, #72	; 0x48
 8041924:	46bd      	mov	sp, r7
 8041926:	bd80      	pop	{r7, pc}
 8041928:	08044ec8 	.word	0x08044ec8
 804192c:	08044db8 	.word	0x08044db8

08041930 <usecs>:

	return start.tv_sec * 1000 + start.tv_usec/1000;

}

unsigned long usecs() {
 8041930:	b590      	push	{r4, r7, lr}
 8041932:	b085      	sub	sp, #20
 8041934:	af00      	add	r7, sp, #0
	struct timeval start;

	gettimeofday(&start, NULL);
 8041936:	463b      	mov	r3, r7
 8041938:	2100      	movs	r1, #0
 804193a:	4618      	mov	r0, r3
 804193c:	f002 fcdc 	bl	80442f8 <gettimeofday>

	return start.tv_sec * 1000 * 1000 + start.tv_usec;
 8041940:	e9d7 3400 	ldrd	r3, r4, [r7]
 8041944:	461a      	mov	r2, r3
 8041946:	4b04      	ldr	r3, [pc, #16]	; (8041958 <usecs+0x28>)
 8041948:	fb03 f302 	mul.w	r3, r3, r2
 804194c:	68ba      	ldr	r2, [r7, #8]
 804194e:	4413      	add	r3, r2

}
 8041950:	4618      	mov	r0, r3
 8041952:	3714      	adds	r7, #20
 8041954:	46bd      	mov	sp, r7
 8041956:	bd90      	pop	{r4, r7, pc}
 8041958:	000f4240 	.word	0x000f4240

0804195c <delayMicroseconds>:

void delayMicroseconds(float usecs) {
 804195c:	b480      	push	{r7}
 804195e:	b083      	sub	sp, #12
 8041960:	af00      	add	r7, sp, #0
 8041962:	ed87 0a01 	vstr	s0, [r7, #4]
//	usleep((long)usecs);

}
 8041966:	bf00      	nop
 8041968:	370c      	adds	r7, #12
 804196a:	46bd      	mov	sp, r7
 804196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041970:	4770      	bx	lr

08041972 <toUInt>:

int toUInt(char* input, int len) {
 8041972:	b580      	push	{r7, lr}
 8041974:	b084      	sub	sp, #16
 8041976:	af00      	add	r7, sp, #0
 8041978:	6078      	str	r0, [r7, #4]
 804197a:	6039      	str	r1, [r7, #0]
	int val;
	val = atoi(input);
 804197c:	6878      	ldr	r0, [r7, #4]
 804197e:	f002 fbd3 	bl	8044128 <atoi>
 8041982:	60f8      	str	r0, [r7, #12]
	return val;
 8041984:	68fb      	ldr	r3, [r7, #12]
}
 8041986:	4618      	mov	r0, r3
 8041988:	3710      	adds	r7, #16
 804198a:	46bd      	mov	sp, r7
 804198c:	bd80      	pop	{r7, pc}
	...

08041990 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8041990:	f8df d034 	ldr.w	sp, [pc, #52]	; 80419c8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8041994:	f7ff ff2c 	bl	80417f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8041998:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 804199a:	e003      	b.n	80419a4 <LoopCopyDataInit>

0804199c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 804199c:	4b0b      	ldr	r3, [pc, #44]	; (80419cc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 804199e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80419a0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80419a2:	3104      	adds	r1, #4

080419a4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80419a4:	480a      	ldr	r0, [pc, #40]	; (80419d0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80419a6:	4b0b      	ldr	r3, [pc, #44]	; (80419d4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80419a8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80419aa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80419ac:	d3f6      	bcc.n	804199c <CopyDataInit>
	ldr	r2, =_sbss
 80419ae:	4a0a      	ldr	r2, [pc, #40]	; (80419d8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80419b0:	e002      	b.n	80419b8 <LoopFillZerobss>

080419b2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80419b2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80419b4:	f842 3b04 	str.w	r3, [r2], #4

080419b8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80419b8:	4b08      	ldr	r3, [pc, #32]	; (80419dc <LoopForever+0x16>)
	cmp	r2, r3
 80419ba:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80419bc:	d3f9      	bcc.n	80419b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80419be:	f002 fbbd 	bl	804413c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80419c2:	f7ff fd9b 	bl	80414fc <main>

080419c6 <LoopForever>:

LoopForever:
    b LoopForever
 80419c6:	e7fe      	b.n	80419c6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80419c8:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 80419cc:	080450a0 	.word	0x080450a0
	ldr	r0, =_sdata
 80419d0:	20018000 	.word	0x20018000
	ldr	r3, =_edata
 80419d4:	200181f0 	.word	0x200181f0
	ldr	r2, =_sbss
 80419d8:	200181f0 	.word	0x200181f0
	ldr	r3, = _ebss
 80419dc:	20018334 	.word	0x20018334

080419e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80419e0:	e7fe      	b.n	80419e0 <ADC1_2_IRQHandler>

080419e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80419e2:	b580      	push	{r7, lr}
 80419e4:	b082      	sub	sp, #8
 80419e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80419e8:	2300      	movs	r3, #0
 80419ea:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80419ec:	2004      	movs	r0, #4
 80419ee:	f000 f93f 	bl	8041c70 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 80419f2:	f7ff ff05 	bl	8041800 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80419f6:	2000      	movs	r0, #0
 80419f8:	f000 f80e 	bl	8041a18 <HAL_InitTick>
 80419fc:	4603      	mov	r3, r0
 80419fe:	2b00      	cmp	r3, #0
 8041a00:	d002      	beq.n	8041a08 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8041a02:	2301      	movs	r3, #1
 8041a04:	71fb      	strb	r3, [r7, #7]
 8041a06:	e001      	b.n	8041a0c <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8041a08:	f7ff fe0e 	bl	8041628 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8041a0c:	79fb      	ldrb	r3, [r7, #7]
}
 8041a0e:	4618      	mov	r0, r3
 8041a10:	3708      	adds	r7, #8
 8041a12:	46bd      	mov	sp, r7
 8041a14:	bd80      	pop	{r7, pc}
	...

08041a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8041a18:	b580      	push	{r7, lr}
 8041a1a:	b084      	sub	sp, #16
 8041a1c:	af00      	add	r7, sp, #0
 8041a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8041a20:	2300      	movs	r3, #0
 8041a22:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8041a24:	4b17      	ldr	r3, [pc, #92]	; (8041a84 <HAL_InitTick+0x6c>)
 8041a26:	781b      	ldrb	r3, [r3, #0]
 8041a28:	2b00      	cmp	r3, #0
 8041a2a:	d023      	beq.n	8041a74 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8041a2c:	4b16      	ldr	r3, [pc, #88]	; (8041a88 <HAL_InitTick+0x70>)
 8041a2e:	681a      	ldr	r2, [r3, #0]
 8041a30:	4b14      	ldr	r3, [pc, #80]	; (8041a84 <HAL_InitTick+0x6c>)
 8041a32:	781b      	ldrb	r3, [r3, #0]
 8041a34:	4619      	mov	r1, r3
 8041a36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8041a3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8041a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8041a42:	4618      	mov	r0, r3
 8041a44:	f000 f947 	bl	8041cd6 <HAL_SYSTICK_Config>
 8041a48:	4603      	mov	r3, r0
 8041a4a:	2b00      	cmp	r3, #0
 8041a4c:	d10f      	bne.n	8041a6e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8041a4e:	687b      	ldr	r3, [r7, #4]
 8041a50:	2b07      	cmp	r3, #7
 8041a52:	d809      	bhi.n	8041a68 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8041a54:	2200      	movs	r2, #0
 8041a56:	6879      	ldr	r1, [r7, #4]
 8041a58:	f04f 30ff 	mov.w	r0, #4294967295
 8041a5c:	f000 f913 	bl	8041c86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8041a60:	4a0a      	ldr	r2, [pc, #40]	; (8041a8c <HAL_InitTick+0x74>)
 8041a62:	687b      	ldr	r3, [r7, #4]
 8041a64:	6013      	str	r3, [r2, #0]
 8041a66:	e007      	b.n	8041a78 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8041a68:	2301      	movs	r3, #1
 8041a6a:	73fb      	strb	r3, [r7, #15]
 8041a6c:	e004      	b.n	8041a78 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8041a6e:	2301      	movs	r3, #1
 8041a70:	73fb      	strb	r3, [r7, #15]
 8041a72:	e001      	b.n	8041a78 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8041a74:	2301      	movs	r3, #1
 8041a76:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8041a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8041a7a:	4618      	mov	r0, r3
 8041a7c:	3710      	adds	r7, #16
 8041a7e:	46bd      	mov	sp, r7
 8041a80:	bd80      	pop	{r7, pc}
 8041a82:	bf00      	nop
 8041a84:	2001801c 	.word	0x2001801c
 8041a88:	20018014 	.word	0x20018014
 8041a8c:	20018018 	.word	0x20018018

08041a90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8041a90:	b480      	push	{r7}
 8041a92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8041a94:	4b06      	ldr	r3, [pc, #24]	; (8041ab0 <HAL_IncTick+0x20>)
 8041a96:	781b      	ldrb	r3, [r3, #0]
 8041a98:	461a      	mov	r2, r3
 8041a9a:	4b06      	ldr	r3, [pc, #24]	; (8041ab4 <HAL_IncTick+0x24>)
 8041a9c:	681b      	ldr	r3, [r3, #0]
 8041a9e:	4413      	add	r3, r2
 8041aa0:	4a04      	ldr	r2, [pc, #16]	; (8041ab4 <HAL_IncTick+0x24>)
 8041aa2:	6013      	str	r3, [r2, #0]
}
 8041aa4:	bf00      	nop
 8041aa6:	46bd      	mov	sp, r7
 8041aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041aac:	4770      	bx	lr
 8041aae:	bf00      	nop
 8041ab0:	2001801c 	.word	0x2001801c
 8041ab4:	2001832c 	.word	0x2001832c

08041ab8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8041ab8:	b480      	push	{r7}
 8041aba:	af00      	add	r7, sp, #0
  return uwTick;
 8041abc:	4b03      	ldr	r3, [pc, #12]	; (8041acc <HAL_GetTick+0x14>)
 8041abe:	681b      	ldr	r3, [r3, #0]
}
 8041ac0:	4618      	mov	r0, r3
 8041ac2:	46bd      	mov	sp, r7
 8041ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041ac8:	4770      	bx	lr
 8041aca:	bf00      	nop
 8041acc:	2001832c 	.word	0x2001832c

08041ad0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8041ad0:	b480      	push	{r7}
 8041ad2:	b085      	sub	sp, #20
 8041ad4:	af00      	add	r7, sp, #0
 8041ad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8041ad8:	687b      	ldr	r3, [r7, #4]
 8041ada:	f003 0307 	and.w	r3, r3, #7
 8041ade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8041ae0:	4b0c      	ldr	r3, [pc, #48]	; (8041b14 <__NVIC_SetPriorityGrouping+0x44>)
 8041ae2:	68db      	ldr	r3, [r3, #12]
 8041ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8041ae6:	68ba      	ldr	r2, [r7, #8]
 8041ae8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8041aec:	4013      	ands	r3, r2
 8041aee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8041af0:	68fb      	ldr	r3, [r7, #12]
 8041af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8041af4:	68bb      	ldr	r3, [r7, #8]
 8041af6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8041af8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8041afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8041b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8041b02:	4a04      	ldr	r2, [pc, #16]	; (8041b14 <__NVIC_SetPriorityGrouping+0x44>)
 8041b04:	68bb      	ldr	r3, [r7, #8]
 8041b06:	60d3      	str	r3, [r2, #12]
}
 8041b08:	bf00      	nop
 8041b0a:	3714      	adds	r7, #20
 8041b0c:	46bd      	mov	sp, r7
 8041b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041b12:	4770      	bx	lr
 8041b14:	e000ed00 	.word	0xe000ed00

08041b18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8041b18:	b480      	push	{r7}
 8041b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8041b1c:	4b04      	ldr	r3, [pc, #16]	; (8041b30 <__NVIC_GetPriorityGrouping+0x18>)
 8041b1e:	68db      	ldr	r3, [r3, #12]
 8041b20:	0a1b      	lsrs	r3, r3, #8
 8041b22:	f003 0307 	and.w	r3, r3, #7
}
 8041b26:	4618      	mov	r0, r3
 8041b28:	46bd      	mov	sp, r7
 8041b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041b2e:	4770      	bx	lr
 8041b30:	e000ed00 	.word	0xe000ed00

08041b34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8041b34:	b480      	push	{r7}
 8041b36:	b083      	sub	sp, #12
 8041b38:	af00      	add	r7, sp, #0
 8041b3a:	4603      	mov	r3, r0
 8041b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8041b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8041b42:	2b00      	cmp	r3, #0
 8041b44:	db0b      	blt.n	8041b5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8041b46:	79fb      	ldrb	r3, [r7, #7]
 8041b48:	f003 021f 	and.w	r2, r3, #31
 8041b4c:	4907      	ldr	r1, [pc, #28]	; (8041b6c <__NVIC_EnableIRQ+0x38>)
 8041b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8041b52:	095b      	lsrs	r3, r3, #5
 8041b54:	2001      	movs	r0, #1
 8041b56:	fa00 f202 	lsl.w	r2, r0, r2
 8041b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8041b5e:	bf00      	nop
 8041b60:	370c      	adds	r7, #12
 8041b62:	46bd      	mov	sp, r7
 8041b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041b68:	4770      	bx	lr
 8041b6a:	bf00      	nop
 8041b6c:	e000e100 	.word	0xe000e100

08041b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8041b70:	b480      	push	{r7}
 8041b72:	b083      	sub	sp, #12
 8041b74:	af00      	add	r7, sp, #0
 8041b76:	4603      	mov	r3, r0
 8041b78:	6039      	str	r1, [r7, #0]
 8041b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8041b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8041b80:	2b00      	cmp	r3, #0
 8041b82:	db0a      	blt.n	8041b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8041b84:	683b      	ldr	r3, [r7, #0]
 8041b86:	b2da      	uxtb	r2, r3
 8041b88:	490c      	ldr	r1, [pc, #48]	; (8041bbc <__NVIC_SetPriority+0x4c>)
 8041b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8041b8e:	0152      	lsls	r2, r2, #5
 8041b90:	b2d2      	uxtb	r2, r2
 8041b92:	440b      	add	r3, r1
 8041b94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8041b98:	e00a      	b.n	8041bb0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8041b9a:	683b      	ldr	r3, [r7, #0]
 8041b9c:	b2da      	uxtb	r2, r3
 8041b9e:	4908      	ldr	r1, [pc, #32]	; (8041bc0 <__NVIC_SetPriority+0x50>)
 8041ba0:	79fb      	ldrb	r3, [r7, #7]
 8041ba2:	f003 030f 	and.w	r3, r3, #15
 8041ba6:	3b04      	subs	r3, #4
 8041ba8:	0152      	lsls	r2, r2, #5
 8041baa:	b2d2      	uxtb	r2, r2
 8041bac:	440b      	add	r3, r1
 8041bae:	761a      	strb	r2, [r3, #24]
}
 8041bb0:	bf00      	nop
 8041bb2:	370c      	adds	r7, #12
 8041bb4:	46bd      	mov	sp, r7
 8041bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041bba:	4770      	bx	lr
 8041bbc:	e000e100 	.word	0xe000e100
 8041bc0:	e000ed00 	.word	0xe000ed00

08041bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8041bc4:	b480      	push	{r7}
 8041bc6:	b089      	sub	sp, #36	; 0x24
 8041bc8:	af00      	add	r7, sp, #0
 8041bca:	60f8      	str	r0, [r7, #12]
 8041bcc:	60b9      	str	r1, [r7, #8]
 8041bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8041bd0:	68fb      	ldr	r3, [r7, #12]
 8041bd2:	f003 0307 	and.w	r3, r3, #7
 8041bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8041bd8:	69fb      	ldr	r3, [r7, #28]
 8041bda:	f1c3 0307 	rsb	r3, r3, #7
 8041bde:	2b03      	cmp	r3, #3
 8041be0:	bf28      	it	cs
 8041be2:	2303      	movcs	r3, #3
 8041be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8041be6:	69fb      	ldr	r3, [r7, #28]
 8041be8:	3303      	adds	r3, #3
 8041bea:	2b06      	cmp	r3, #6
 8041bec:	d902      	bls.n	8041bf4 <NVIC_EncodePriority+0x30>
 8041bee:	69fb      	ldr	r3, [r7, #28]
 8041bf0:	3b04      	subs	r3, #4
 8041bf2:	e000      	b.n	8041bf6 <NVIC_EncodePriority+0x32>
 8041bf4:	2300      	movs	r3, #0
 8041bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8041bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8041bfc:	69bb      	ldr	r3, [r7, #24]
 8041bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8041c02:	43da      	mvns	r2, r3
 8041c04:	68bb      	ldr	r3, [r7, #8]
 8041c06:	401a      	ands	r2, r3
 8041c08:	697b      	ldr	r3, [r7, #20]
 8041c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8041c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8041c10:	697b      	ldr	r3, [r7, #20]
 8041c12:	fa01 f303 	lsl.w	r3, r1, r3
 8041c16:	43d9      	mvns	r1, r3
 8041c18:	687b      	ldr	r3, [r7, #4]
 8041c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8041c1c:	4313      	orrs	r3, r2
         );
}
 8041c1e:	4618      	mov	r0, r3
 8041c20:	3724      	adds	r7, #36	; 0x24
 8041c22:	46bd      	mov	sp, r7
 8041c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041c28:	4770      	bx	lr
	...

08041c2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8041c2c:	b580      	push	{r7, lr}
 8041c2e:	b082      	sub	sp, #8
 8041c30:	af00      	add	r7, sp, #0
 8041c32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8041c34:	687b      	ldr	r3, [r7, #4]
 8041c36:	3b01      	subs	r3, #1
 8041c38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8041c3c:	d301      	bcc.n	8041c42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8041c3e:	2301      	movs	r3, #1
 8041c40:	e00f      	b.n	8041c62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8041c42:	4a0a      	ldr	r2, [pc, #40]	; (8041c6c <SysTick_Config+0x40>)
 8041c44:	687b      	ldr	r3, [r7, #4]
 8041c46:	3b01      	subs	r3, #1
 8041c48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8041c4a:	2107      	movs	r1, #7
 8041c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8041c50:	f7ff ff8e 	bl	8041b70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8041c54:	4b05      	ldr	r3, [pc, #20]	; (8041c6c <SysTick_Config+0x40>)
 8041c56:	2200      	movs	r2, #0
 8041c58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8041c5a:	4b04      	ldr	r3, [pc, #16]	; (8041c6c <SysTick_Config+0x40>)
 8041c5c:	2207      	movs	r2, #7
 8041c5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8041c60:	2300      	movs	r3, #0
}
 8041c62:	4618      	mov	r0, r3
 8041c64:	3708      	adds	r7, #8
 8041c66:	46bd      	mov	sp, r7
 8041c68:	bd80      	pop	{r7, pc}
 8041c6a:	bf00      	nop
 8041c6c:	e000e010 	.word	0xe000e010

08041c70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8041c70:	b580      	push	{r7, lr}
 8041c72:	b082      	sub	sp, #8
 8041c74:	af00      	add	r7, sp, #0
 8041c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8041c78:	6878      	ldr	r0, [r7, #4]
 8041c7a:	f7ff ff29 	bl	8041ad0 <__NVIC_SetPriorityGrouping>
}
 8041c7e:	bf00      	nop
 8041c80:	3708      	adds	r7, #8
 8041c82:	46bd      	mov	sp, r7
 8041c84:	bd80      	pop	{r7, pc}

08041c86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8041c86:	b580      	push	{r7, lr}
 8041c88:	b086      	sub	sp, #24
 8041c8a:	af00      	add	r7, sp, #0
 8041c8c:	4603      	mov	r3, r0
 8041c8e:	60b9      	str	r1, [r7, #8]
 8041c90:	607a      	str	r2, [r7, #4]
 8041c92:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8041c94:	f7ff ff40 	bl	8041b18 <__NVIC_GetPriorityGrouping>
 8041c98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8041c9a:	687a      	ldr	r2, [r7, #4]
 8041c9c:	68b9      	ldr	r1, [r7, #8]
 8041c9e:	6978      	ldr	r0, [r7, #20]
 8041ca0:	f7ff ff90 	bl	8041bc4 <NVIC_EncodePriority>
 8041ca4:	4602      	mov	r2, r0
 8041ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8041caa:	4611      	mov	r1, r2
 8041cac:	4618      	mov	r0, r3
 8041cae:	f7ff ff5f 	bl	8041b70 <__NVIC_SetPriority>
}
 8041cb2:	bf00      	nop
 8041cb4:	3718      	adds	r7, #24
 8041cb6:	46bd      	mov	sp, r7
 8041cb8:	bd80      	pop	{r7, pc}

08041cba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8041cba:	b580      	push	{r7, lr}
 8041cbc:	b082      	sub	sp, #8
 8041cbe:	af00      	add	r7, sp, #0
 8041cc0:	4603      	mov	r3, r0
 8041cc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8041cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8041cc8:	4618      	mov	r0, r3
 8041cca:	f7ff ff33 	bl	8041b34 <__NVIC_EnableIRQ>
}
 8041cce:	bf00      	nop
 8041cd0:	3708      	adds	r7, #8
 8041cd2:	46bd      	mov	sp, r7
 8041cd4:	bd80      	pop	{r7, pc}

08041cd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8041cd6:	b580      	push	{r7, lr}
 8041cd8:	b082      	sub	sp, #8
 8041cda:	af00      	add	r7, sp, #0
 8041cdc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8041cde:	6878      	ldr	r0, [r7, #4]
 8041ce0:	f7ff ffa4 	bl	8041c2c <SysTick_Config>
 8041ce4:	4603      	mov	r3, r0
}
 8041ce6:	4618      	mov	r0, r3
 8041ce8:	3708      	adds	r7, #8
 8041cea:	46bd      	mov	sp, r7
 8041cec:	bd80      	pop	{r7, pc}

08041cee <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8041cee:	b480      	push	{r7}
 8041cf0:	b085      	sub	sp, #20
 8041cf2:	af00      	add	r7, sp, #0
 8041cf4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8041cf6:	2300      	movs	r3, #0
 8041cf8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8041cfa:	687b      	ldr	r3, [r7, #4]
 8041cfc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8041d00:	b2db      	uxtb	r3, r3
 8041d02:	2b02      	cmp	r3, #2
 8041d04:	d008      	beq.n	8041d18 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8041d06:	687b      	ldr	r3, [r7, #4]
 8041d08:	2204      	movs	r2, #4
 8041d0a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8041d0c:	687b      	ldr	r3, [r7, #4]
 8041d0e:	2200      	movs	r2, #0
 8041d10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8041d14:	2301      	movs	r3, #1
 8041d16:	e040      	b.n	8041d9a <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8041d18:	687b      	ldr	r3, [r7, #4]
 8041d1a:	681b      	ldr	r3, [r3, #0]
 8041d1c:	681a      	ldr	r2, [r3, #0]
 8041d1e:	687b      	ldr	r3, [r7, #4]
 8041d20:	681b      	ldr	r3, [r3, #0]
 8041d22:	f022 020e 	bic.w	r2, r2, #14
 8041d26:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8041d28:	687b      	ldr	r3, [r7, #4]
 8041d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8041d2c:	681a      	ldr	r2, [r3, #0]
 8041d2e:	687b      	ldr	r3, [r7, #4]
 8041d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8041d32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8041d36:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8041d38:	687b      	ldr	r3, [r7, #4]
 8041d3a:	681b      	ldr	r3, [r3, #0]
 8041d3c:	681a      	ldr	r2, [r3, #0]
 8041d3e:	687b      	ldr	r3, [r7, #4]
 8041d40:	681b      	ldr	r3, [r3, #0]
 8041d42:	f022 0201 	bic.w	r2, r2, #1
 8041d46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8041d48:	687b      	ldr	r3, [r7, #4]
 8041d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8041d4c:	f003 021c 	and.w	r2, r3, #28
 8041d50:	687b      	ldr	r3, [r7, #4]
 8041d52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8041d54:	2101      	movs	r1, #1
 8041d56:	fa01 f202 	lsl.w	r2, r1, r2
 8041d5a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8041d5c:	687b      	ldr	r3, [r7, #4]
 8041d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8041d60:	687a      	ldr	r2, [r7, #4]
 8041d62:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8041d64:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8041d66:	687b      	ldr	r3, [r7, #4]
 8041d68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8041d6a:	2b00      	cmp	r3, #0
 8041d6c:	d00c      	beq.n	8041d88 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8041d6e:	687b      	ldr	r3, [r7, #4]
 8041d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8041d72:	681a      	ldr	r2, [r3, #0]
 8041d74:	687b      	ldr	r3, [r7, #4]
 8041d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8041d78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8041d7c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8041d7e:	687b      	ldr	r3, [r7, #4]
 8041d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8041d82:	687a      	ldr	r2, [r7, #4]
 8041d84:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8041d86:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8041d88:	687b      	ldr	r3, [r7, #4]
 8041d8a:	2201      	movs	r2, #1
 8041d8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8041d90:	687b      	ldr	r3, [r7, #4]
 8041d92:	2200      	movs	r2, #0
 8041d94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8041d98:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8041d9a:	4618      	mov	r0, r3
 8041d9c:	3714      	adds	r7, #20
 8041d9e:	46bd      	mov	sp, r7
 8041da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041da4:	4770      	bx	lr

08041da6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8041da6:	b580      	push	{r7, lr}
 8041da8:	b084      	sub	sp, #16
 8041daa:	af00      	add	r7, sp, #0
 8041dac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8041dae:	2300      	movs	r3, #0
 8041db0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8041db2:	687b      	ldr	r3, [r7, #4]
 8041db4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8041db8:	b2db      	uxtb	r3, r3
 8041dba:	2b02      	cmp	r3, #2
 8041dbc:	d005      	beq.n	8041dca <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8041dbe:	687b      	ldr	r3, [r7, #4]
 8041dc0:	2204      	movs	r2, #4
 8041dc2:	645a      	str	r2, [r3, #68]	; 0x44

    status = HAL_ERROR;
 8041dc4:	2301      	movs	r3, #1
 8041dc6:	73fb      	strb	r3, [r7, #15]
 8041dc8:	e047      	b.n	8041e5a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8041dca:	687b      	ldr	r3, [r7, #4]
 8041dcc:	681b      	ldr	r3, [r3, #0]
 8041dce:	681a      	ldr	r2, [r3, #0]
 8041dd0:	687b      	ldr	r3, [r7, #4]
 8041dd2:	681b      	ldr	r3, [r3, #0]
 8041dd4:	f022 020e 	bic.w	r2, r2, #14
 8041dd8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8041dda:	687b      	ldr	r3, [r7, #4]
 8041ddc:	681b      	ldr	r3, [r3, #0]
 8041dde:	681a      	ldr	r2, [r3, #0]
 8041de0:	687b      	ldr	r3, [r7, #4]
 8041de2:	681b      	ldr	r3, [r3, #0]
 8041de4:	f022 0201 	bic.w	r2, r2, #1
 8041de8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8041dea:	687b      	ldr	r3, [r7, #4]
 8041dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8041dee:	681a      	ldr	r2, [r3, #0]
 8041df0:	687b      	ldr	r3, [r7, #4]
 8041df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8041df4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8041df8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8041dfa:	687b      	ldr	r3, [r7, #4]
 8041dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8041dfe:	f003 021c 	and.w	r2, r3, #28
 8041e02:	687b      	ldr	r3, [r7, #4]
 8041e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8041e06:	2101      	movs	r1, #1
 8041e08:	fa01 f202 	lsl.w	r2, r1, r2
 8041e0c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8041e0e:	687b      	ldr	r3, [r7, #4]
 8041e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8041e12:	687a      	ldr	r2, [r7, #4]
 8041e14:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8041e16:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8041e18:	687b      	ldr	r3, [r7, #4]
 8041e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8041e1c:	2b00      	cmp	r3, #0
 8041e1e:	d00c      	beq.n	8041e3a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8041e20:	687b      	ldr	r3, [r7, #4]
 8041e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8041e24:	681a      	ldr	r2, [r3, #0]
 8041e26:	687b      	ldr	r3, [r7, #4]
 8041e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8041e2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8041e2e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8041e30:	687b      	ldr	r3, [r7, #4]
 8041e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8041e34:	687a      	ldr	r2, [r7, #4]
 8041e36:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8041e38:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8041e3a:	687b      	ldr	r3, [r7, #4]
 8041e3c:	2201      	movs	r2, #1
 8041e3e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8041e42:	687b      	ldr	r3, [r7, #4]
 8041e44:	2200      	movs	r2, #0
 8041e46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8041e4a:	687b      	ldr	r3, [r7, #4]
 8041e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041e4e:	2b00      	cmp	r3, #0
 8041e50:	d003      	beq.n	8041e5a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8041e52:	687b      	ldr	r3, [r7, #4]
 8041e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041e56:	6878      	ldr	r0, [r7, #4]
 8041e58:	4798      	blx	r3
    }
  }
  return status;
 8041e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8041e5c:	4618      	mov	r0, r3
 8041e5e:	3710      	adds	r7, #16
 8041e60:	46bd      	mov	sp, r7
 8041e62:	bd80      	pop	{r7, pc}

08041e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8041e64:	b480      	push	{r7}
 8041e66:	b087      	sub	sp, #28
 8041e68:	af00      	add	r7, sp, #0
 8041e6a:	6078      	str	r0, [r7, #4]
 8041e6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8041e6e:	2300      	movs	r3, #0
 8041e70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8041e72:	e158      	b.n	8042126 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8041e74:	683b      	ldr	r3, [r7, #0]
 8041e76:	681a      	ldr	r2, [r3, #0]
 8041e78:	2101      	movs	r1, #1
 8041e7a:	697b      	ldr	r3, [r7, #20]
 8041e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8041e80:	4013      	ands	r3, r2
 8041e82:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 8041e84:	68fb      	ldr	r3, [r7, #12]
 8041e86:	2b00      	cmp	r3, #0
 8041e88:	f000 814a 	beq.w	8042120 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8041e8c:	683b      	ldr	r3, [r7, #0]
 8041e8e:	685b      	ldr	r3, [r3, #4]
 8041e90:	2b01      	cmp	r3, #1
 8041e92:	d00b      	beq.n	8041eac <HAL_GPIO_Init+0x48>
 8041e94:	683b      	ldr	r3, [r7, #0]
 8041e96:	685b      	ldr	r3, [r3, #4]
 8041e98:	2b02      	cmp	r3, #2
 8041e9a:	d007      	beq.n	8041eac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8041e9c:	683b      	ldr	r3, [r7, #0]
 8041e9e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8041ea0:	2b11      	cmp	r3, #17
 8041ea2:	d003      	beq.n	8041eac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8041ea4:	683b      	ldr	r3, [r7, #0]
 8041ea6:	685b      	ldr	r3, [r3, #4]
 8041ea8:	2b12      	cmp	r3, #18
 8041eaa:	d130      	bne.n	8041f0e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8041eac:	687b      	ldr	r3, [r7, #4]
 8041eae:	689b      	ldr	r3, [r3, #8]
 8041eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8041eb2:	697b      	ldr	r3, [r7, #20]
 8041eb4:	005b      	lsls	r3, r3, #1
 8041eb6:	2203      	movs	r2, #3
 8041eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8041ebc:	43db      	mvns	r3, r3
 8041ebe:	693a      	ldr	r2, [r7, #16]
 8041ec0:	4013      	ands	r3, r2
 8041ec2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8041ec4:	683b      	ldr	r3, [r7, #0]
 8041ec6:	68da      	ldr	r2, [r3, #12]
 8041ec8:	697b      	ldr	r3, [r7, #20]
 8041eca:	005b      	lsls	r3, r3, #1
 8041ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8041ed0:	693a      	ldr	r2, [r7, #16]
 8041ed2:	4313      	orrs	r3, r2
 8041ed4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8041ed6:	687b      	ldr	r3, [r7, #4]
 8041ed8:	693a      	ldr	r2, [r7, #16]
 8041eda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8041edc:	687b      	ldr	r3, [r7, #4]
 8041ede:	685b      	ldr	r3, [r3, #4]
 8041ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8041ee2:	2201      	movs	r2, #1
 8041ee4:	697b      	ldr	r3, [r7, #20]
 8041ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8041eea:	43db      	mvns	r3, r3
 8041eec:	693a      	ldr	r2, [r7, #16]
 8041eee:	4013      	ands	r3, r2
 8041ef0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8041ef2:	683b      	ldr	r3, [r7, #0]
 8041ef4:	685b      	ldr	r3, [r3, #4]
 8041ef6:	091b      	lsrs	r3, r3, #4
 8041ef8:	f003 0201 	and.w	r2, r3, #1
 8041efc:	697b      	ldr	r3, [r7, #20]
 8041efe:	fa02 f303 	lsl.w	r3, r2, r3
 8041f02:	693a      	ldr	r2, [r7, #16]
 8041f04:	4313      	orrs	r3, r2
 8041f06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8041f08:	687b      	ldr	r3, [r7, #4]
 8041f0a:	693a      	ldr	r2, [r7, #16]
 8041f0c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8041f0e:	687b      	ldr	r3, [r7, #4]
 8041f10:	68db      	ldr	r3, [r3, #12]
 8041f12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8041f14:	697b      	ldr	r3, [r7, #20]
 8041f16:	005b      	lsls	r3, r3, #1
 8041f18:	2203      	movs	r2, #3
 8041f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8041f1e:	43db      	mvns	r3, r3
 8041f20:	693a      	ldr	r2, [r7, #16]
 8041f22:	4013      	ands	r3, r2
 8041f24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8041f26:	683b      	ldr	r3, [r7, #0]
 8041f28:	689a      	ldr	r2, [r3, #8]
 8041f2a:	697b      	ldr	r3, [r7, #20]
 8041f2c:	005b      	lsls	r3, r3, #1
 8041f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8041f32:	693a      	ldr	r2, [r7, #16]
 8041f34:	4313      	orrs	r3, r2
 8041f36:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8041f38:	687b      	ldr	r3, [r7, #4]
 8041f3a:	693a      	ldr	r2, [r7, #16]
 8041f3c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8041f3e:	683b      	ldr	r3, [r7, #0]
 8041f40:	685b      	ldr	r3, [r3, #4]
 8041f42:	2b02      	cmp	r3, #2
 8041f44:	d003      	beq.n	8041f4e <HAL_GPIO_Init+0xea>
 8041f46:	683b      	ldr	r3, [r7, #0]
 8041f48:	685b      	ldr	r3, [r3, #4]
 8041f4a:	2b12      	cmp	r3, #18
 8041f4c:	d123      	bne.n	8041f96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8041f4e:	697b      	ldr	r3, [r7, #20]
 8041f50:	08da      	lsrs	r2, r3, #3
 8041f52:	687b      	ldr	r3, [r7, #4]
 8041f54:	3208      	adds	r2, #8
 8041f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8041f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8041f5c:	697b      	ldr	r3, [r7, #20]
 8041f5e:	f003 0307 	and.w	r3, r3, #7
 8041f62:	009b      	lsls	r3, r3, #2
 8041f64:	220f      	movs	r2, #15
 8041f66:	fa02 f303 	lsl.w	r3, r2, r3
 8041f6a:	43db      	mvns	r3, r3
 8041f6c:	693a      	ldr	r2, [r7, #16]
 8041f6e:	4013      	ands	r3, r2
 8041f70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8041f72:	683b      	ldr	r3, [r7, #0]
 8041f74:	691a      	ldr	r2, [r3, #16]
 8041f76:	697b      	ldr	r3, [r7, #20]
 8041f78:	f003 0307 	and.w	r3, r3, #7
 8041f7c:	009b      	lsls	r3, r3, #2
 8041f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8041f82:	693a      	ldr	r2, [r7, #16]
 8041f84:	4313      	orrs	r3, r2
 8041f86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8041f88:	697b      	ldr	r3, [r7, #20]
 8041f8a:	08da      	lsrs	r2, r3, #3
 8041f8c:	687b      	ldr	r3, [r7, #4]
 8041f8e:	3208      	adds	r2, #8
 8041f90:	6939      	ldr	r1, [r7, #16]
 8041f92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8041f96:	687b      	ldr	r3, [r7, #4]
 8041f98:	681b      	ldr	r3, [r3, #0]
 8041f9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8041f9c:	697b      	ldr	r3, [r7, #20]
 8041f9e:	005b      	lsls	r3, r3, #1
 8041fa0:	2203      	movs	r2, #3
 8041fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8041fa6:	43db      	mvns	r3, r3
 8041fa8:	693a      	ldr	r2, [r7, #16]
 8041faa:	4013      	ands	r3, r2
 8041fac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8041fae:	683b      	ldr	r3, [r7, #0]
 8041fb0:	685b      	ldr	r3, [r3, #4]
 8041fb2:	f003 0203 	and.w	r2, r3, #3
 8041fb6:	697b      	ldr	r3, [r7, #20]
 8041fb8:	005b      	lsls	r3, r3, #1
 8041fba:	fa02 f303 	lsl.w	r3, r2, r3
 8041fbe:	693a      	ldr	r2, [r7, #16]
 8041fc0:	4313      	orrs	r3, r2
 8041fc2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8041fc4:	687b      	ldr	r3, [r7, #4]
 8041fc6:	693a      	ldr	r2, [r7, #16]
 8041fc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8041fca:	683b      	ldr	r3, [r7, #0]
 8041fcc:	685b      	ldr	r3, [r3, #4]
 8041fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041fd2:	2b00      	cmp	r3, #0
 8041fd4:	f000 80a4 	beq.w	8042120 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8041fd8:	4a5a      	ldr	r2, [pc, #360]	; (8042144 <HAL_GPIO_Init+0x2e0>)
 8041fda:	697b      	ldr	r3, [r7, #20]
 8041fdc:	089b      	lsrs	r3, r3, #2
 8041fde:	3318      	adds	r3, #24
 8041fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8041fe4:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8041fe6:	697b      	ldr	r3, [r7, #20]
 8041fe8:	f003 0303 	and.w	r3, r3, #3
 8041fec:	00db      	lsls	r3, r3, #3
 8041fee:	220f      	movs	r2, #15
 8041ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8041ff4:	43db      	mvns	r3, r3
 8041ff6:	693a      	ldr	r2, [r7, #16]
 8041ff8:	4013      	ands	r3, r2
 8041ffa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8041ffc:	687b      	ldr	r3, [r7, #4]
 8041ffe:	4a52      	ldr	r2, [pc, #328]	; (8042148 <HAL_GPIO_Init+0x2e4>)
 8042000:	4293      	cmp	r3, r2
 8042002:	d025      	beq.n	8042050 <HAL_GPIO_Init+0x1ec>
 8042004:	687b      	ldr	r3, [r7, #4]
 8042006:	4a51      	ldr	r2, [pc, #324]	; (804214c <HAL_GPIO_Init+0x2e8>)
 8042008:	4293      	cmp	r3, r2
 804200a:	d01f      	beq.n	804204c <HAL_GPIO_Init+0x1e8>
 804200c:	687b      	ldr	r3, [r7, #4]
 804200e:	4a50      	ldr	r2, [pc, #320]	; (8042150 <HAL_GPIO_Init+0x2ec>)
 8042010:	4293      	cmp	r3, r2
 8042012:	d019      	beq.n	8042048 <HAL_GPIO_Init+0x1e4>
 8042014:	687b      	ldr	r3, [r7, #4]
 8042016:	4a4f      	ldr	r2, [pc, #316]	; (8042154 <HAL_GPIO_Init+0x2f0>)
 8042018:	4293      	cmp	r3, r2
 804201a:	d013      	beq.n	8042044 <HAL_GPIO_Init+0x1e0>
 804201c:	687b      	ldr	r3, [r7, #4]
 804201e:	4a4e      	ldr	r2, [pc, #312]	; (8042158 <HAL_GPIO_Init+0x2f4>)
 8042020:	4293      	cmp	r3, r2
 8042022:	d00d      	beq.n	8042040 <HAL_GPIO_Init+0x1dc>
 8042024:	687b      	ldr	r3, [r7, #4]
 8042026:	4a4d      	ldr	r2, [pc, #308]	; (804215c <HAL_GPIO_Init+0x2f8>)
 8042028:	4293      	cmp	r3, r2
 804202a:	d007      	beq.n	804203c <HAL_GPIO_Init+0x1d8>
 804202c:	687b      	ldr	r3, [r7, #4]
 804202e:	4a4c      	ldr	r2, [pc, #304]	; (8042160 <HAL_GPIO_Init+0x2fc>)
 8042030:	4293      	cmp	r3, r2
 8042032:	d101      	bne.n	8042038 <HAL_GPIO_Init+0x1d4>
 8042034:	2306      	movs	r3, #6
 8042036:	e00c      	b.n	8042052 <HAL_GPIO_Init+0x1ee>
 8042038:	2307      	movs	r3, #7
 804203a:	e00a      	b.n	8042052 <HAL_GPIO_Init+0x1ee>
 804203c:	2305      	movs	r3, #5
 804203e:	e008      	b.n	8042052 <HAL_GPIO_Init+0x1ee>
 8042040:	2304      	movs	r3, #4
 8042042:	e006      	b.n	8042052 <HAL_GPIO_Init+0x1ee>
 8042044:	2303      	movs	r3, #3
 8042046:	e004      	b.n	8042052 <HAL_GPIO_Init+0x1ee>
 8042048:	2302      	movs	r3, #2
 804204a:	e002      	b.n	8042052 <HAL_GPIO_Init+0x1ee>
 804204c:	2301      	movs	r3, #1
 804204e:	e000      	b.n	8042052 <HAL_GPIO_Init+0x1ee>
 8042050:	2300      	movs	r3, #0
 8042052:	697a      	ldr	r2, [r7, #20]
 8042054:	f002 0203 	and.w	r2, r2, #3
 8042058:	00d2      	lsls	r2, r2, #3
 804205a:	4093      	lsls	r3, r2
 804205c:	693a      	ldr	r2, [r7, #16]
 804205e:	4313      	orrs	r3, r2
 8042060:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8042062:	4938      	ldr	r1, [pc, #224]	; (8042144 <HAL_GPIO_Init+0x2e0>)
 8042064:	697b      	ldr	r3, [r7, #20]
 8042066:	089b      	lsrs	r3, r3, #2
 8042068:	3318      	adds	r3, #24
 804206a:	693a      	ldr	r2, [r7, #16]
 804206c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8042070:	4b34      	ldr	r3, [pc, #208]	; (8042144 <HAL_GPIO_Init+0x2e0>)
 8042072:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8042076:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8042078:	68fb      	ldr	r3, [r7, #12]
 804207a:	43db      	mvns	r3, r3
 804207c:	693a      	ldr	r2, [r7, #16]
 804207e:	4013      	ands	r3, r2
 8042080:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8042082:	683b      	ldr	r3, [r7, #0]
 8042084:	685b      	ldr	r3, [r3, #4]
 8042086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 804208a:	2b00      	cmp	r3, #0
 804208c:	d003      	beq.n	8042096 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 804208e:	693a      	ldr	r2, [r7, #16]
 8042090:	68fb      	ldr	r3, [r7, #12]
 8042092:	4313      	orrs	r3, r2
 8042094:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8042096:	4a2b      	ldr	r2, [pc, #172]	; (8042144 <HAL_GPIO_Init+0x2e0>)
 8042098:	693b      	ldr	r3, [r7, #16]
 804209a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 804209e:	4b29      	ldr	r3, [pc, #164]	; (8042144 <HAL_GPIO_Init+0x2e0>)
 80420a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80420a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80420a6:	68fb      	ldr	r3, [r7, #12]
 80420a8:	43db      	mvns	r3, r3
 80420aa:	693a      	ldr	r2, [r7, #16]
 80420ac:	4013      	ands	r3, r2
 80420ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80420b0:	683b      	ldr	r3, [r7, #0]
 80420b2:	685b      	ldr	r3, [r3, #4]
 80420b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80420b8:	2b00      	cmp	r3, #0
 80420ba:	d003      	beq.n	80420c4 <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 80420bc:	693a      	ldr	r2, [r7, #16]
 80420be:	68fb      	ldr	r3, [r7, #12]
 80420c0:	4313      	orrs	r3, r2
 80420c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80420c4:	4a1f      	ldr	r2, [pc, #124]	; (8042144 <HAL_GPIO_Init+0x2e0>)
 80420c6:	693b      	ldr	r3, [r7, #16]
 80420c8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80420cc:	4b1d      	ldr	r3, [pc, #116]	; (8042144 <HAL_GPIO_Init+0x2e0>)
 80420ce:	681b      	ldr	r3, [r3, #0]
 80420d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80420d2:	68fb      	ldr	r3, [r7, #12]
 80420d4:	43db      	mvns	r3, r3
 80420d6:	693a      	ldr	r2, [r7, #16]
 80420d8:	4013      	ands	r3, r2
 80420da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80420dc:	683b      	ldr	r3, [r7, #0]
 80420de:	685b      	ldr	r3, [r3, #4]
 80420e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80420e4:	2b00      	cmp	r3, #0
 80420e6:	d003      	beq.n	80420f0 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 80420e8:	693a      	ldr	r2, [r7, #16]
 80420ea:	68fb      	ldr	r3, [r7, #12]
 80420ec:	4313      	orrs	r3, r2
 80420ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80420f0:	4a14      	ldr	r2, [pc, #80]	; (8042144 <HAL_GPIO_Init+0x2e0>)
 80420f2:	693b      	ldr	r3, [r7, #16]
 80420f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80420f6:	4b13      	ldr	r3, [pc, #76]	; (8042144 <HAL_GPIO_Init+0x2e0>)
 80420f8:	685b      	ldr	r3, [r3, #4]
 80420fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80420fc:	68fb      	ldr	r3, [r7, #12]
 80420fe:	43db      	mvns	r3, r3
 8042100:	693a      	ldr	r2, [r7, #16]
 8042102:	4013      	ands	r3, r2
 8042104:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8042106:	683b      	ldr	r3, [r7, #0]
 8042108:	685b      	ldr	r3, [r3, #4]
 804210a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 804210e:	2b00      	cmp	r3, #0
 8042110:	d003      	beq.n	804211a <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 8042112:	693a      	ldr	r2, [r7, #16]
 8042114:	68fb      	ldr	r3, [r7, #12]
 8042116:	4313      	orrs	r3, r2
 8042118:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 804211a:	4a0a      	ldr	r2, [pc, #40]	; (8042144 <HAL_GPIO_Init+0x2e0>)
 804211c:	693b      	ldr	r3, [r7, #16]
 804211e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8042120:	697b      	ldr	r3, [r7, #20]
 8042122:	3301      	adds	r3, #1
 8042124:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8042126:	683b      	ldr	r3, [r7, #0]
 8042128:	681a      	ldr	r2, [r3, #0]
 804212a:	697b      	ldr	r3, [r7, #20]
 804212c:	fa22 f303 	lsr.w	r3, r2, r3
 8042130:	2b00      	cmp	r3, #0
 8042132:	f47f ae9f 	bne.w	8041e74 <HAL_GPIO_Init+0x10>
  }
}
 8042136:	bf00      	nop
 8042138:	371c      	adds	r7, #28
 804213a:	46bd      	mov	sp, r7
 804213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042140:	4770      	bx	lr
 8042142:	bf00      	nop
 8042144:	4002f400 	.word	0x4002f400
 8042148:	42020000 	.word	0x42020000
 804214c:	42020400 	.word	0x42020400
 8042150:	42020800 	.word	0x42020800
 8042154:	42020c00 	.word	0x42020c00
 8042158:	42021000 	.word	0x42021000
 804215c:	42021400 	.word	0x42021400
 8042160:	42021800 	.word	0x42021800

08042164 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8042164:	b480      	push	{r7}
 8042166:	b089      	sub	sp, #36	; 0x24
 8042168:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 804216a:	2300      	movs	r3, #0
 804216c:	61fb      	str	r3, [r7, #28]
 804216e:	2300      	movs	r3, #0
 8042170:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8042172:	4b46      	ldr	r3, [pc, #280]	; (804228c <HAL_RCC_GetSysClockFreq+0x128>)
 8042174:	689b      	ldr	r3, [r3, #8]
 8042176:	f003 030c 	and.w	r3, r3, #12
 804217a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 804217c:	4b43      	ldr	r3, [pc, #268]	; (804228c <HAL_RCC_GetSysClockFreq+0x128>)
 804217e:	68db      	ldr	r3, [r3, #12]
 8042180:	f003 0303 	and.w	r3, r3, #3
 8042184:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8042186:	693b      	ldr	r3, [r7, #16]
 8042188:	2b00      	cmp	r3, #0
 804218a:	d005      	beq.n	8042198 <HAL_RCC_GetSysClockFreq+0x34>
 804218c:	693b      	ldr	r3, [r7, #16]
 804218e:	2b0c      	cmp	r3, #12
 8042190:	d121      	bne.n	80421d6 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8042192:	68fb      	ldr	r3, [r7, #12]
 8042194:	2b01      	cmp	r3, #1
 8042196:	d11e      	bne.n	80421d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8042198:	4b3c      	ldr	r3, [pc, #240]	; (804228c <HAL_RCC_GetSysClockFreq+0x128>)
 804219a:	681b      	ldr	r3, [r3, #0]
 804219c:	f003 0308 	and.w	r3, r3, #8
 80421a0:	2b00      	cmp	r3, #0
 80421a2:	d107      	bne.n	80421b4 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80421a4:	4b39      	ldr	r3, [pc, #228]	; (804228c <HAL_RCC_GetSysClockFreq+0x128>)
 80421a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80421aa:	0a1b      	lsrs	r3, r3, #8
 80421ac:	f003 030f 	and.w	r3, r3, #15
 80421b0:	61fb      	str	r3, [r7, #28]
 80421b2:	e005      	b.n	80421c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80421b4:	4b35      	ldr	r3, [pc, #212]	; (804228c <HAL_RCC_GetSysClockFreq+0x128>)
 80421b6:	681b      	ldr	r3, [r3, #0]
 80421b8:	091b      	lsrs	r3, r3, #4
 80421ba:	f003 030f 	and.w	r3, r3, #15
 80421be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 80421c0:	4a33      	ldr	r2, [pc, #204]	; (8042290 <HAL_RCC_GetSysClockFreq+0x12c>)
 80421c2:	69fb      	ldr	r3, [r7, #28]
 80421c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80421c8:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80421ca:	693b      	ldr	r3, [r7, #16]
 80421cc:	2b00      	cmp	r3, #0
 80421ce:	d10d      	bne.n	80421ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80421d0:	69fb      	ldr	r3, [r7, #28]
 80421d2:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80421d4:	e00a      	b.n	80421ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80421d6:	693b      	ldr	r3, [r7, #16]
 80421d8:	2b04      	cmp	r3, #4
 80421da:	d102      	bne.n	80421e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80421dc:	4b2d      	ldr	r3, [pc, #180]	; (8042294 <HAL_RCC_GetSysClockFreq+0x130>)
 80421de:	61bb      	str	r3, [r7, #24]
 80421e0:	e004      	b.n	80421ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80421e2:	693b      	ldr	r3, [r7, #16]
 80421e4:	2b08      	cmp	r3, #8
 80421e6:	d101      	bne.n	80421ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80421e8:	4b2b      	ldr	r3, [pc, #172]	; (8042298 <HAL_RCC_GetSysClockFreq+0x134>)
 80421ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80421ec:	693b      	ldr	r3, [r7, #16]
 80421ee:	2b0c      	cmp	r3, #12
 80421f0:	d145      	bne.n	804227e <HAL_RCC_GetSysClockFreq+0x11a>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80421f2:	4b26      	ldr	r3, [pc, #152]	; (804228c <HAL_RCC_GetSysClockFreq+0x128>)
 80421f4:	68db      	ldr	r3, [r3, #12]
 80421f6:	f003 0303 	and.w	r3, r3, #3
 80421fa:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80421fc:	4b23      	ldr	r3, [pc, #140]	; (804228c <HAL_RCC_GetSysClockFreq+0x128>)
 80421fe:	68db      	ldr	r3, [r3, #12]
 8042200:	091b      	lsrs	r3, r3, #4
 8042202:	f003 030f 	and.w	r3, r3, #15
 8042206:	3301      	adds	r3, #1
 8042208:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 804220a:	68bb      	ldr	r3, [r7, #8]
 804220c:	2b02      	cmp	r3, #2
 804220e:	d002      	beq.n	8042216 <HAL_RCC_GetSysClockFreq+0xb2>
 8042210:	2b03      	cmp	r3, #3
 8042212:	d00d      	beq.n	8042230 <HAL_RCC_GetSysClockFreq+0xcc>
 8042214:	e019      	b.n	804224a <HAL_RCC_GetSysClockFreq+0xe6>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8042216:	4a1f      	ldr	r2, [pc, #124]	; (8042294 <HAL_RCC_GetSysClockFreq+0x130>)
 8042218:	687b      	ldr	r3, [r7, #4]
 804221a:	fbb2 f3f3 	udiv	r3, r2, r3
 804221e:	4a1b      	ldr	r2, [pc, #108]	; (804228c <HAL_RCC_GetSysClockFreq+0x128>)
 8042220:	68d2      	ldr	r2, [r2, #12]
 8042222:	0a12      	lsrs	r2, r2, #8
 8042224:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8042228:	fb02 f303 	mul.w	r3, r2, r3
 804222c:	617b      	str	r3, [r7, #20]
        break;
 804222e:	e019      	b.n	8042264 <HAL_RCC_GetSysClockFreq+0x100>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8042230:	4a19      	ldr	r2, [pc, #100]	; (8042298 <HAL_RCC_GetSysClockFreq+0x134>)
 8042232:	687b      	ldr	r3, [r7, #4]
 8042234:	fbb2 f3f3 	udiv	r3, r2, r3
 8042238:	4a14      	ldr	r2, [pc, #80]	; (804228c <HAL_RCC_GetSysClockFreq+0x128>)
 804223a:	68d2      	ldr	r2, [r2, #12]
 804223c:	0a12      	lsrs	r2, r2, #8
 804223e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8042242:	fb02 f303 	mul.w	r3, r2, r3
 8042246:	617b      	str	r3, [r7, #20]
        break;
 8042248:	e00c      	b.n	8042264 <HAL_RCC_GetSysClockFreq+0x100>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 804224a:	69fa      	ldr	r2, [r7, #28]
 804224c:	687b      	ldr	r3, [r7, #4]
 804224e:	fbb2 f3f3 	udiv	r3, r2, r3
 8042252:	4a0e      	ldr	r2, [pc, #56]	; (804228c <HAL_RCC_GetSysClockFreq+0x128>)
 8042254:	68d2      	ldr	r2, [r2, #12]
 8042256:	0a12      	lsrs	r2, r2, #8
 8042258:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 804225c:	fb02 f303 	mul.w	r3, r2, r3
 8042260:	617b      	str	r3, [r7, #20]
        break;
 8042262:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8042264:	4b09      	ldr	r3, [pc, #36]	; (804228c <HAL_RCC_GetSysClockFreq+0x128>)
 8042266:	68db      	ldr	r3, [r3, #12]
 8042268:	0e5b      	lsrs	r3, r3, #25
 804226a:	f003 0303 	and.w	r3, r3, #3
 804226e:	3301      	adds	r3, #1
 8042270:	005b      	lsls	r3, r3, #1
 8042272:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8042274:	697a      	ldr	r2, [r7, #20]
 8042276:	683b      	ldr	r3, [r7, #0]
 8042278:	fbb2 f3f3 	udiv	r3, r2, r3
 804227c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 804227e:	69bb      	ldr	r3, [r7, #24]
}
 8042280:	4618      	mov	r0, r3
 8042282:	3724      	adds	r7, #36	; 0x24
 8042284:	46bd      	mov	sp, r7
 8042286:	f85d 7b04 	ldr.w	r7, [sp], #4
 804228a:	4770      	bx	lr
 804228c:	40021000 	.word	0x40021000
 8042290:	08044e60 	.word	0x08044e60
 8042294:	00f42400 	.word	0x00f42400
 8042298:	007a1200 	.word	0x007a1200

0804229c <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 804229c:	b580      	push	{r7, lr}
 804229e:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 80422a0:	f7ff ff60 	bl	8042164 <HAL_RCC_GetSysClockFreq>
 80422a4:	4601      	mov	r1, r0
 80422a6:	4b05      	ldr	r3, [pc, #20]	; (80422bc <HAL_RCC_GetHCLKFreq+0x20>)
 80422a8:	689b      	ldr	r3, [r3, #8]
 80422aa:	091b      	lsrs	r3, r3, #4
 80422ac:	f003 030f 	and.w	r3, r3, #15
 80422b0:	4a03      	ldr	r2, [pc, #12]	; (80422c0 <HAL_RCC_GetHCLKFreq+0x24>)
 80422b2:	5cd3      	ldrb	r3, [r2, r3]
 80422b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80422b8:	4618      	mov	r0, r3
 80422ba:	bd80      	pop	{r7, pc}
 80422bc:	40021000 	.word	0x40021000
 80422c0:	08044e48 	.word	0x08044e48

080422c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80422c4:	b580      	push	{r7, lr}
 80422c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80422c8:	f7ff ffe8 	bl	804229c <HAL_RCC_GetHCLKFreq>
 80422cc:	4601      	mov	r1, r0
 80422ce:	4b05      	ldr	r3, [pc, #20]	; (80422e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80422d0:	689b      	ldr	r3, [r3, #8]
 80422d2:	0a1b      	lsrs	r3, r3, #8
 80422d4:	f003 0307 	and.w	r3, r3, #7
 80422d8:	4a03      	ldr	r2, [pc, #12]	; (80422e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80422da:	5cd3      	ldrb	r3, [r2, r3]
 80422dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80422e0:	4618      	mov	r0, r3
 80422e2:	bd80      	pop	{r7, pc}
 80422e4:	40021000 	.word	0x40021000
 80422e8:	08044e58 	.word	0x08044e58

080422ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80422ec:	b580      	push	{r7, lr}
 80422ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80422f0:	f7ff ffd4 	bl	804229c <HAL_RCC_GetHCLKFreq>
 80422f4:	4601      	mov	r1, r0
 80422f6:	4b05      	ldr	r3, [pc, #20]	; (804230c <HAL_RCC_GetPCLK2Freq+0x20>)
 80422f8:	689b      	ldr	r3, [r3, #8]
 80422fa:	0adb      	lsrs	r3, r3, #11
 80422fc:	f003 0307 	and.w	r3, r3, #7
 8042300:	4a03      	ldr	r2, [pc, #12]	; (8042310 <HAL_RCC_GetPCLK2Freq+0x24>)
 8042302:	5cd3      	ldrb	r3, [r2, r3]
 8042304:	fa21 f303 	lsr.w	r3, r1, r3
}
 8042308:	4618      	mov	r0, r3
 804230a:	bd80      	pop	{r7, pc}
 804230c:	40021000 	.word	0x40021000
 8042310:	08044e58 	.word	0x08044e58

08042314 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8042314:	b580      	push	{r7, lr}
 8042316:	b088      	sub	sp, #32
 8042318:	af00      	add	r7, sp, #0
 804231a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 804231c:	2300      	movs	r3, #0
 804231e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8042320:	2300      	movs	r3, #0
 8042322:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8042324:	687b      	ldr	r3, [r7, #4]
 8042326:	681b      	ldr	r3, [r3, #0]
 8042328:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 804232c:	2b00      	cmp	r3, #0
 804232e:	d03d      	beq.n	80423ac <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8042330:	687b      	ldr	r3, [r7, #4]
 8042332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8042334:	2b40      	cmp	r3, #64	; 0x40
 8042336:	d00b      	beq.n	8042350 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8042338:	2b40      	cmp	r3, #64	; 0x40
 804233a:	d804      	bhi.n	8042346 <HAL_RCCEx_PeriphCLKConfig+0x32>
 804233c:	2b00      	cmp	r3, #0
 804233e:	d00e      	beq.n	804235e <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8042340:	2b20      	cmp	r3, #32
 8042342:	d015      	beq.n	8042370 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8042344:	e01d      	b.n	8042382 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8042346:	2b60      	cmp	r3, #96	; 0x60
 8042348:	d01e      	beq.n	8042388 <HAL_RCCEx_PeriphCLKConfig+0x74>
 804234a:	2b80      	cmp	r3, #128	; 0x80
 804234c:	d01c      	beq.n	8042388 <HAL_RCCEx_PeriphCLKConfig+0x74>
 804234e:	e018      	b.n	8042382 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8042350:	4b84      	ldr	r3, [pc, #528]	; (8042564 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8042352:	68db      	ldr	r3, [r3, #12]
 8042354:	4a83      	ldr	r2, [pc, #524]	; (8042564 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8042356:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 804235a:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 804235c:	e015      	b.n	804238a <HAL_RCCEx_PeriphCLKConfig+0x76>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 804235e:	687b      	ldr	r3, [r7, #4]
 8042360:	3304      	adds	r3, #4
 8042362:	2100      	movs	r1, #0
 8042364:	4618      	mov	r0, r3
 8042366:	f000 fb3f 	bl	80429e8 <RCCEx_PLLSAI1_Config>
 804236a:	4603      	mov	r3, r0
 804236c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 804236e:	e00c      	b.n	804238a <HAL_RCCEx_PeriphCLKConfig+0x76>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8042370:	687b      	ldr	r3, [r7, #4]
 8042372:	3320      	adds	r3, #32
 8042374:	2100      	movs	r1, #0
 8042376:	4618      	mov	r0, r3
 8042378:	f000 fc08 	bl	8042b8c <RCCEx_PLLSAI2_Config>
 804237c:	4603      	mov	r3, r0
 804237e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8042380:	e003      	b.n	804238a <HAL_RCCEx_PeriphCLKConfig+0x76>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8042382:	2301      	movs	r3, #1
 8042384:	77fb      	strb	r3, [r7, #31]
        break;
 8042386:	e000      	b.n	804238a <HAL_RCCEx_PeriphCLKConfig+0x76>
        break;
 8042388:	bf00      	nop
    }

    if (ret == HAL_OK)
 804238a:	7ffb      	ldrb	r3, [r7, #31]
 804238c:	2b00      	cmp	r3, #0
 804238e:	d10b      	bne.n	80423a8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8042390:	4b74      	ldr	r3, [pc, #464]	; (8042564 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8042392:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8042396:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 804239a:	687b      	ldr	r3, [r7, #4]
 804239c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 804239e:	4971      	ldr	r1, [pc, #452]	; (8042564 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80423a0:	4313      	orrs	r3, r2
 80423a2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80423a6:	e001      	b.n	80423ac <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80423a8:	7ffb      	ldrb	r3, [r7, #31]
 80423aa:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80423ac:	687b      	ldr	r3, [r7, #4]
 80423ae:	681b      	ldr	r3, [r3, #0]
 80423b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80423b4:	2b00      	cmp	r3, #0
 80423b6:	d042      	beq.n	804243e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 80423b8:	687b      	ldr	r3, [r7, #4]
 80423ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80423bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80423c0:	d00f      	beq.n	80423e2 <HAL_RCCEx_PeriphCLKConfig+0xce>
 80423c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80423c6:	d805      	bhi.n	80423d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 80423c8:	2b00      	cmp	r3, #0
 80423ca:	d011      	beq.n	80423f0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80423cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80423d0:	d017      	beq.n	8042402 <HAL_RCCEx_PeriphCLKConfig+0xee>
 80423d2:	e01f      	b.n	8042414 <HAL_RCCEx_PeriphCLKConfig+0x100>
 80423d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80423d8:	d01f      	beq.n	804241a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80423da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80423de:	d01c      	beq.n	804241a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80423e0:	e018      	b.n	8042414 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80423e2:	4b60      	ldr	r3, [pc, #384]	; (8042564 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80423e4:	68db      	ldr	r3, [r3, #12]
 80423e6:	4a5f      	ldr	r2, [pc, #380]	; (8042564 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80423e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80423ec:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80423ee:	e015      	b.n	804241c <HAL_RCCEx_PeriphCLKConfig+0x108>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80423f0:	687b      	ldr	r3, [r7, #4]
 80423f2:	3304      	adds	r3, #4
 80423f4:	2100      	movs	r1, #0
 80423f6:	4618      	mov	r0, r3
 80423f8:	f000 faf6 	bl	80429e8 <RCCEx_PLLSAI1_Config>
 80423fc:	4603      	mov	r3, r0
 80423fe:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8042400:	e00c      	b.n	804241c <HAL_RCCEx_PeriphCLKConfig+0x108>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8042402:	687b      	ldr	r3, [r7, #4]
 8042404:	3320      	adds	r3, #32
 8042406:	2100      	movs	r1, #0
 8042408:	4618      	mov	r0, r3
 804240a:	f000 fbbf 	bl	8042b8c <RCCEx_PLLSAI2_Config>
 804240e:	4603      	mov	r3, r0
 8042410:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8042412:	e003      	b.n	804241c <HAL_RCCEx_PeriphCLKConfig+0x108>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8042414:	2301      	movs	r3, #1
 8042416:	77fb      	strb	r3, [r7, #31]
        break;
 8042418:	e000      	b.n	804241c <HAL_RCCEx_PeriphCLKConfig+0x108>
        break;
 804241a:	bf00      	nop
    }

    if (ret == HAL_OK)
 804241c:	7ffb      	ldrb	r3, [r7, #31]
 804241e:	2b00      	cmp	r3, #0
 8042420:	d10b      	bne.n	804243a <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8042422:	4b50      	ldr	r3, [pc, #320]	; (8042564 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8042424:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8042428:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 804242c:	687b      	ldr	r3, [r7, #4]
 804242e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042430:	494c      	ldr	r1, [pc, #304]	; (8042564 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8042432:	4313      	orrs	r3, r2
 8042434:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8042438:	e001      	b.n	804243e <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 804243a:	7ffb      	ldrb	r3, [r7, #31]
 804243c:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 804243e:	687b      	ldr	r3, [r7, #4]
 8042440:	681b      	ldr	r3, [r3, #0]
 8042442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8042446:	2b00      	cmp	r3, #0
 8042448:	f000 809b 	beq.w	8042582 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    FlagStatus       pwrclkchanged = RESET;
 804244c:	2300      	movs	r3, #0
 804244e:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8042450:	4b44      	ldr	r3, [pc, #272]	; (8042564 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8042452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8042454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8042458:	2b00      	cmp	r3, #0
 804245a:	d10d      	bne.n	8042478 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 804245c:	4b41      	ldr	r3, [pc, #260]	; (8042564 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 804245e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8042460:	4a40      	ldr	r2, [pc, #256]	; (8042564 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8042462:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8042466:	6593      	str	r3, [r2, #88]	; 0x58
 8042468:	4b3e      	ldr	r3, [pc, #248]	; (8042564 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 804246a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804246c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8042470:	60fb      	str	r3, [r7, #12]
 8042472:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8042474:	2301      	movs	r3, #1
 8042476:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8042478:	4b3b      	ldr	r3, [pc, #236]	; (8042568 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 804247a:	681b      	ldr	r3, [r3, #0]
 804247c:	4a3a      	ldr	r2, [pc, #232]	; (8042568 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 804247e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8042482:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8042484:	f7ff fb18 	bl	8041ab8 <HAL_GetTick>
 8042488:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 804248a:	e009      	b.n	80424a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 804248c:	f7ff fb14 	bl	8041ab8 <HAL_GetTick>
 8042490:	4602      	mov	r2, r0
 8042492:	693b      	ldr	r3, [r7, #16]
 8042494:	1ad3      	subs	r3, r2, r3
 8042496:	2b02      	cmp	r3, #2
 8042498:	d902      	bls.n	80424a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      {
        ret = HAL_TIMEOUT;
 804249a:	2303      	movs	r3, #3
 804249c:	77fb      	strb	r3, [r7, #31]
        break;
 804249e:	e005      	b.n	80424ac <HAL_RCCEx_PeriphCLKConfig+0x198>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80424a0:	4b31      	ldr	r3, [pc, #196]	; (8042568 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80424a2:	681b      	ldr	r3, [r3, #0]
 80424a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80424a8:	2b00      	cmp	r3, #0
 80424aa:	d0ef      	beq.n	804248c <HAL_RCCEx_PeriphCLKConfig+0x178>
      }
    }

    if (ret == HAL_OK)
 80424ac:	7ffb      	ldrb	r3, [r7, #31]
 80424ae:	2b00      	cmp	r3, #0
 80424b0:	d15c      	bne.n	804256c <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80424b2:	4b2c      	ldr	r3, [pc, #176]	; (8042564 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80424b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80424b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80424bc:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80424be:	69bb      	ldr	r3, [r7, #24]
 80424c0:	2b00      	cmp	r3, #0
 80424c2:	d01f      	beq.n	8042504 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80424c4:	687b      	ldr	r3, [r7, #4]
 80424c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80424ca:	69ba      	ldr	r2, [r7, #24]
 80424cc:	429a      	cmp	r2, r3
 80424ce:	d019      	beq.n	8042504 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80424d0:	4b24      	ldr	r3, [pc, #144]	; (8042564 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80424d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80424d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80424da:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80424dc:	4b21      	ldr	r3, [pc, #132]	; (8042564 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80424de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80424e2:	4a20      	ldr	r2, [pc, #128]	; (8042564 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80424e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80424e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80424ec:	4b1d      	ldr	r3, [pc, #116]	; (8042564 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80424ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80424f2:	4a1c      	ldr	r2, [pc, #112]	; (8042564 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80424f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80424f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80424fc:	4a19      	ldr	r2, [pc, #100]	; (8042564 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80424fe:	69bb      	ldr	r3, [r7, #24]
 8042500:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8042504:	69bb      	ldr	r3, [r7, #24]
 8042506:	f003 0301 	and.w	r3, r3, #1
 804250a:	2b00      	cmp	r3, #0
 804250c:	d016      	beq.n	804253c <HAL_RCCEx_PeriphCLKConfig+0x228>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804250e:	f7ff fad3 	bl	8041ab8 <HAL_GetTick>
 8042512:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8042514:	e00b      	b.n	804252e <HAL_RCCEx_PeriphCLKConfig+0x21a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8042516:	f7ff facf 	bl	8041ab8 <HAL_GetTick>
 804251a:	4602      	mov	r2, r0
 804251c:	693b      	ldr	r3, [r7, #16]
 804251e:	1ad3      	subs	r3, r2, r3
 8042520:	f241 3288 	movw	r2, #5000	; 0x1388
 8042524:	4293      	cmp	r3, r2
 8042526:	d902      	bls.n	804252e <HAL_RCCEx_PeriphCLKConfig+0x21a>
          {
            ret = HAL_TIMEOUT;
 8042528:	2303      	movs	r3, #3
 804252a:	77fb      	strb	r3, [r7, #31]
            break;
 804252c:	e006      	b.n	804253c <HAL_RCCEx_PeriphCLKConfig+0x228>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 804252e:	4b0d      	ldr	r3, [pc, #52]	; (8042564 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8042530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042534:	f003 0302 	and.w	r3, r3, #2
 8042538:	2b00      	cmp	r3, #0
 804253a:	d0ec      	beq.n	8042516 <HAL_RCCEx_PeriphCLKConfig+0x202>
          }
        }
      }

      if (ret == HAL_OK)
 804253c:	7ffb      	ldrb	r3, [r7, #31]
 804253e:	2b00      	cmp	r3, #0
 8042540:	d10c      	bne.n	804255c <HAL_RCCEx_PeriphCLKConfig+0x248>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8042542:	4b08      	ldr	r3, [pc, #32]	; (8042564 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8042544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042548:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 804254c:	687b      	ldr	r3, [r7, #4]
 804254e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042552:	4904      	ldr	r1, [pc, #16]	; (8042564 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8042554:	4313      	orrs	r3, r2
 8042556:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 804255a:	e009      	b.n	8042570 <HAL_RCCEx_PeriphCLKConfig+0x25c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 804255c:	7ffb      	ldrb	r3, [r7, #31]
 804255e:	77bb      	strb	r3, [r7, #30]
 8042560:	e006      	b.n	8042570 <HAL_RCCEx_PeriphCLKConfig+0x25c>
 8042562:	bf00      	nop
 8042564:	40021000 	.word	0x40021000
 8042568:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 804256c:	7ffb      	ldrb	r3, [r7, #31]
 804256e:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8042570:	7dfb      	ldrb	r3, [r7, #23]
 8042572:	2b01      	cmp	r3, #1
 8042574:	d105      	bne.n	8042582 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8042576:	4bae      	ldr	r3, [pc, #696]	; (8042830 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8042578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804257a:	4aad      	ldr	r2, [pc, #692]	; (8042830 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 804257c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8042580:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8042582:	687b      	ldr	r3, [r7, #4]
 8042584:	681b      	ldr	r3, [r3, #0]
 8042586:	f003 0301 	and.w	r3, r3, #1
 804258a:	2b00      	cmp	r3, #0
 804258c:	d00a      	beq.n	80425a4 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 804258e:	4ba8      	ldr	r3, [pc, #672]	; (8042830 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8042590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042594:	f023 0203 	bic.w	r2, r3, #3
 8042598:	687b      	ldr	r3, [r7, #4]
 804259a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 804259c:	49a4      	ldr	r1, [pc, #656]	; (8042830 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 804259e:	4313      	orrs	r3, r2
 80425a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80425a4:	687b      	ldr	r3, [r7, #4]
 80425a6:	681b      	ldr	r3, [r3, #0]
 80425a8:	f003 0302 	and.w	r3, r3, #2
 80425ac:	2b00      	cmp	r3, #0
 80425ae:	d00a      	beq.n	80425c6 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80425b0:	4b9f      	ldr	r3, [pc, #636]	; (8042830 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80425b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80425b6:	f023 020c 	bic.w	r2, r3, #12
 80425ba:	687b      	ldr	r3, [r7, #4]
 80425bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80425be:	499c      	ldr	r1, [pc, #624]	; (8042830 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80425c0:	4313      	orrs	r3, r2
 80425c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80425c6:	687b      	ldr	r3, [r7, #4]
 80425c8:	681b      	ldr	r3, [r3, #0]
 80425ca:	f003 0304 	and.w	r3, r3, #4
 80425ce:	2b00      	cmp	r3, #0
 80425d0:	d00a      	beq.n	80425e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80425d2:	4b97      	ldr	r3, [pc, #604]	; (8042830 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80425d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80425d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80425dc:	687b      	ldr	r3, [r7, #4]
 80425de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80425e0:	4993      	ldr	r1, [pc, #588]	; (8042830 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80425e2:	4313      	orrs	r3, r2
 80425e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80425e8:	687b      	ldr	r3, [r7, #4]
 80425ea:	681b      	ldr	r3, [r3, #0]
 80425ec:	f003 0308 	and.w	r3, r3, #8
 80425f0:	2b00      	cmp	r3, #0
 80425f2:	d00a      	beq.n	804260a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80425f4:	4b8e      	ldr	r3, [pc, #568]	; (8042830 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80425f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80425fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80425fe:	687b      	ldr	r3, [r7, #4]
 8042600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8042602:	498b      	ldr	r1, [pc, #556]	; (8042830 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8042604:	4313      	orrs	r3, r2
 8042606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 804260a:	687b      	ldr	r3, [r7, #4]
 804260c:	681b      	ldr	r3, [r3, #0]
 804260e:	f003 0310 	and.w	r3, r3, #16
 8042612:	2b00      	cmp	r3, #0
 8042614:	d00a      	beq.n	804262c <HAL_RCCEx_PeriphCLKConfig+0x318>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8042616:	4b86      	ldr	r3, [pc, #536]	; (8042830 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8042618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804261c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8042620:	687b      	ldr	r3, [r7, #4]
 8042622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8042624:	4982      	ldr	r1, [pc, #520]	; (8042830 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8042626:	4313      	orrs	r3, r2
 8042628:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 804262c:	687b      	ldr	r3, [r7, #4]
 804262e:	681b      	ldr	r3, [r3, #0]
 8042630:	f003 0320 	and.w	r3, r3, #32
 8042634:	2b00      	cmp	r3, #0
 8042636:	d00a      	beq.n	804264e <HAL_RCCEx_PeriphCLKConfig+0x33a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8042638:	4b7d      	ldr	r3, [pc, #500]	; (8042830 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 804263a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804263e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8042642:	687b      	ldr	r3, [r7, #4]
 8042644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8042646:	497a      	ldr	r1, [pc, #488]	; (8042830 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8042648:	4313      	orrs	r3, r2
 804264a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 804264e:	687b      	ldr	r3, [r7, #4]
 8042650:	681b      	ldr	r3, [r3, #0]
 8042652:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8042656:	2b00      	cmp	r3, #0
 8042658:	d00a      	beq.n	8042670 <HAL_RCCEx_PeriphCLKConfig+0x35c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 804265a:	4b75      	ldr	r3, [pc, #468]	; (8042830 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 804265c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042660:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8042664:	687b      	ldr	r3, [r7, #4]
 8042666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8042668:	4971      	ldr	r1, [pc, #452]	; (8042830 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 804266a:	4313      	orrs	r3, r2
 804266c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8042670:	687b      	ldr	r3, [r7, #4]
 8042672:	681b      	ldr	r3, [r3, #0]
 8042674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8042678:	2b00      	cmp	r3, #0
 804267a:	d00a      	beq.n	8042692 <HAL_RCCEx_PeriphCLKConfig+0x37e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 804267c:	4b6c      	ldr	r3, [pc, #432]	; (8042830 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 804267e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042682:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8042686:	687b      	ldr	r3, [r7, #4]
 8042688:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804268a:	4969      	ldr	r1, [pc, #420]	; (8042830 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 804268c:	4313      	orrs	r3, r2
 804268e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8042692:	687b      	ldr	r3, [r7, #4]
 8042694:	681b      	ldr	r3, [r3, #0]
 8042696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 804269a:	2b00      	cmp	r3, #0
 804269c:	d00a      	beq.n	80426b4 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 804269e:	4b64      	ldr	r3, [pc, #400]	; (8042830 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80426a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80426a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80426a8:	687b      	ldr	r3, [r7, #4]
 80426aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80426ac:	4960      	ldr	r1, [pc, #384]	; (8042830 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80426ae:	4313      	orrs	r3, r2
 80426b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 80426b4:	687b      	ldr	r3, [r7, #4]
 80426b6:	681b      	ldr	r3, [r3, #0]
 80426b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80426bc:	2b00      	cmp	r3, #0
 80426be:	d02f      	beq.n	8042720 <HAL_RCCEx_PeriphCLKConfig+0x40c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 80426c0:	687b      	ldr	r3, [r7, #4]
 80426c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80426c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80426c8:	d005      	beq.n	80426d6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 80426ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80426ce:	d009      	beq.n	80426e4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80426d0:	2b00      	cmp	r3, #0
 80426d2:	d013      	beq.n	80426fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80426d4:	e00f      	b.n	80426f6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80426d6:	4b56      	ldr	r3, [pc, #344]	; (8042830 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80426d8:	68db      	ldr	r3, [r3, #12]
 80426da:	4a55      	ldr	r2, [pc, #340]	; (8042830 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80426dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80426e0:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80426e2:	e00c      	b.n	80426fe <HAL_RCCEx_PeriphCLKConfig+0x3ea>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80426e4:	687b      	ldr	r3, [r7, #4]
 80426e6:	3304      	adds	r3, #4
 80426e8:	2100      	movs	r1, #0
 80426ea:	4618      	mov	r0, r3
 80426ec:	f000 f97c 	bl	80429e8 <RCCEx_PLLSAI1_Config>
 80426f0:	4603      	mov	r3, r0
 80426f2:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80426f4:	e003      	b.n	80426fe <HAL_RCCEx_PeriphCLKConfig+0x3ea>

      default:
        ret = HAL_ERROR;
 80426f6:	2301      	movs	r3, #1
 80426f8:	77fb      	strb	r3, [r7, #31]
        break;
 80426fa:	e000      	b.n	80426fe <HAL_RCCEx_PeriphCLKConfig+0x3ea>
        break;
 80426fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80426fe:	7ffb      	ldrb	r3, [r7, #31]
 8042700:	2b00      	cmp	r3, #0
 8042702:	d10b      	bne.n	804271c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8042704:	4b4a      	ldr	r3, [pc, #296]	; (8042830 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8042706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804270a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 804270e:	687b      	ldr	r3, [r7, #4]
 8042710:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8042712:	4947      	ldr	r1, [pc, #284]	; (8042830 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8042714:	4313      	orrs	r3, r2
 8042716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 804271a:	e001      	b.n	8042720 <HAL_RCCEx_PeriphCLKConfig+0x40c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 804271c:	7ffb      	ldrb	r3, [r7, #31]
 804271e:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8042720:	687b      	ldr	r3, [r7, #4]
 8042722:	681b      	ldr	r3, [r3, #0]
 8042724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8042728:	2b00      	cmp	r3, #0
 804272a:	d00a      	beq.n	8042742 <HAL_RCCEx_PeriphCLKConfig+0x42e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 804272c:	4b40      	ldr	r3, [pc, #256]	; (8042830 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 804272e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042732:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8042736:	687b      	ldr	r3, [r7, #4]
 8042738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804273a:	493d      	ldr	r1, [pc, #244]	; (8042830 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 804273c:	4313      	orrs	r3, r2
 804273e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8042742:	687b      	ldr	r3, [r7, #4]
 8042744:	681b      	ldr	r3, [r3, #0]
 8042746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804274a:	2b00      	cmp	r3, #0
 804274c:	d00a      	beq.n	8042764 <HAL_RCCEx_PeriphCLKConfig+0x450>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 804274e:	4b38      	ldr	r3, [pc, #224]	; (8042830 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8042750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042754:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8042758:	687b      	ldr	r3, [r7, #4]
 804275a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 804275c:	4934      	ldr	r1, [pc, #208]	; (8042830 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 804275e:	4313      	orrs	r3, r2
 8042760:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8042764:	687b      	ldr	r3, [r7, #4]
 8042766:	681b      	ldr	r3, [r3, #0]
 8042768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804276c:	2b00      	cmp	r3, #0
 804276e:	d00a      	beq.n	8042786 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8042770:	4b2f      	ldr	r3, [pc, #188]	; (8042830 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8042772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042776:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 804277a:	687b      	ldr	r3, [r7, #4]
 804277c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804277e:	492c      	ldr	r1, [pc, #176]	; (8042830 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8042780:	4313      	orrs	r3, r2
 8042782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8042786:	687b      	ldr	r3, [r7, #4]
 8042788:	681b      	ldr	r3, [r3, #0]
 804278a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 804278e:	2b00      	cmp	r3, #0
 8042790:	d00a      	beq.n	80427a8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8042792:	4b27      	ldr	r3, [pc, #156]	; (8042830 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8042794:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8042798:	f023 0203 	bic.w	r2, r3, #3
 804279c:	687b      	ldr	r3, [r7, #4]
 804279e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80427a0:	4923      	ldr	r1, [pc, #140]	; (8042830 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80427a2:	4313      	orrs	r3, r2
 80427a4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80427a8:	687b      	ldr	r3, [r7, #4]
 80427aa:	681b      	ldr	r3, [r3, #0]
 80427ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80427b0:	2b00      	cmp	r3, #0
 80427b2:	d028      	beq.n	8042806 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80427b4:	4b1e      	ldr	r3, [pc, #120]	; (8042830 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80427b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80427ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80427be:	687b      	ldr	r3, [r7, #4]
 80427c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80427c2:	491b      	ldr	r1, [pc, #108]	; (8042830 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80427c4:	4313      	orrs	r3, r2
 80427c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80427ca:	687b      	ldr	r3, [r7, #4]
 80427cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80427ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80427d2:	d106      	bne.n	80427e2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80427d4:	4b16      	ldr	r3, [pc, #88]	; (8042830 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80427d6:	68db      	ldr	r3, [r3, #12]
 80427d8:	4a15      	ldr	r2, [pc, #84]	; (8042830 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80427da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80427de:	60d3      	str	r3, [r2, #12]
 80427e0:	e011      	b.n	8042806 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80427e2:	687b      	ldr	r3, [r7, #4]
 80427e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80427e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80427ea:	d10c      	bne.n	8042806 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80427ec:	687b      	ldr	r3, [r7, #4]
 80427ee:	3304      	adds	r3, #4
 80427f0:	2101      	movs	r1, #1
 80427f2:	4618      	mov	r0, r3
 80427f4:	f000 f8f8 	bl	80429e8 <RCCEx_PLLSAI1_Config>
 80427f8:	4603      	mov	r3, r0
 80427fa:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 80427fc:	7ffb      	ldrb	r3, [r7, #31]
 80427fe:	2b00      	cmp	r3, #0
 8042800:	d001      	beq.n	8042806 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
        {
          /* set overall return value */
          status = ret;
 8042802:	7ffb      	ldrb	r3, [r7, #31]
 8042804:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8042806:	687b      	ldr	r3, [r7, #4]
 8042808:	681b      	ldr	r3, [r3, #0]
 804280a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 804280e:	2b00      	cmp	r3, #0
 8042810:	d04d      	beq.n	80428ae <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8042812:	687b      	ldr	r3, [r7, #4]
 8042814:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8042816:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 804281a:	d10b      	bne.n	8042834 <HAL_RCCEx_PeriphCLKConfig+0x520>
 804281c:	4b04      	ldr	r3, [pc, #16]	; (8042830 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 804281e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8042822:	4a03      	ldr	r2, [pc, #12]	; (8042830 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8042824:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8042828:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 804282c:	e015      	b.n	804285a <HAL_RCCEx_PeriphCLKConfig+0x546>
 804282e:	bf00      	nop
 8042830:	40021000 	.word	0x40021000
 8042834:	4b6b      	ldr	r3, [pc, #428]	; (80429e4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8042836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804283a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 804283e:	687b      	ldr	r3, [r7, #4]
 8042840:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8042842:	4968      	ldr	r1, [pc, #416]	; (80429e4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8042844:	4313      	orrs	r3, r2
 8042846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 804284a:	4b66      	ldr	r3, [pc, #408]	; (80429e4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 804284c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8042850:	4a64      	ldr	r2, [pc, #400]	; (80429e4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8042852:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8042856:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 804285a:	687b      	ldr	r3, [r7, #4]
 804285c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 804285e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8042862:	d10d      	bne.n	8042880 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8042864:	687b      	ldr	r3, [r7, #4]
 8042866:	3304      	adds	r3, #4
 8042868:	2101      	movs	r1, #1
 804286a:	4618      	mov	r0, r3
 804286c:	f000 f8bc 	bl	80429e8 <RCCEx_PLLSAI1_Config>
 8042870:	4603      	mov	r3, r0
 8042872:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8042874:	7ffb      	ldrb	r3, [r7, #31]
 8042876:	2b00      	cmp	r3, #0
 8042878:	d019      	beq.n	80428ae <HAL_RCCEx_PeriphCLKConfig+0x59a>
      {
        /* set overall return value */
        status = ret;
 804287a:	7ffb      	ldrb	r3, [r7, #31]
 804287c:	77bb      	strb	r3, [r7, #30]
 804287e:	e016      	b.n	80428ae <HAL_RCCEx_PeriphCLKConfig+0x59a>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8042880:	687b      	ldr	r3, [r7, #4]
 8042882:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8042884:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8042888:	d106      	bne.n	8042898 <HAL_RCCEx_PeriphCLKConfig+0x584>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 804288a:	4b56      	ldr	r3, [pc, #344]	; (80429e4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 804288c:	68db      	ldr	r3, [r3, #12]
 804288e:	4a55      	ldr	r2, [pc, #340]	; (80429e4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8042890:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8042894:	60d3      	str	r3, [r2, #12]
 8042896:	e00a      	b.n	80428ae <HAL_RCCEx_PeriphCLKConfig+0x59a>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8042898:	687b      	ldr	r3, [r7, #4]
 804289a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 804289c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80428a0:	d105      	bne.n	80428ae <HAL_RCCEx_PeriphCLKConfig+0x59a>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80428a2:	4b50      	ldr	r3, [pc, #320]	; (80429e4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 80428a4:	68db      	ldr	r3, [r3, #12]
 80428a6:	4a4f      	ldr	r2, [pc, #316]	; (80429e4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 80428a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80428ac:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80428ae:	687b      	ldr	r3, [r7, #4]
 80428b0:	681b      	ldr	r3, [r3, #0]
 80428b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80428b6:	2b00      	cmp	r3, #0
 80428b8:	d028      	beq.n	804290c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80428ba:	4b4a      	ldr	r3, [pc, #296]	; (80429e4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 80428bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80428c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80428c4:	687b      	ldr	r3, [r7, #4]
 80428c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80428c8:	4946      	ldr	r1, [pc, #280]	; (80429e4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 80428ca:	4313      	orrs	r3, r2
 80428cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80428d0:	687b      	ldr	r3, [r7, #4]
 80428d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80428d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80428d8:	d106      	bne.n	80428e8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80428da:	4b42      	ldr	r3, [pc, #264]	; (80429e4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 80428dc:	68db      	ldr	r3, [r3, #12]
 80428de:	4a41      	ldr	r2, [pc, #260]	; (80429e4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 80428e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80428e4:	60d3      	str	r3, [r2, #12]
 80428e6:	e011      	b.n	804290c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80428e8:	687b      	ldr	r3, [r7, #4]
 80428ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80428ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80428f0:	d10c      	bne.n	804290c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80428f2:	687b      	ldr	r3, [r7, #4]
 80428f4:	3304      	adds	r3, #4
 80428f6:	2101      	movs	r1, #1
 80428f8:	4618      	mov	r0, r3
 80428fa:	f000 f875 	bl	80429e8 <RCCEx_PLLSAI1_Config>
 80428fe:	4603      	mov	r3, r0
 8042900:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8042902:	7ffb      	ldrb	r3, [r7, #31]
 8042904:	2b00      	cmp	r3, #0
 8042906:	d001      	beq.n	804290c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        /* set overall return value */
        status = ret;
 8042908:	7ffb      	ldrb	r3, [r7, #31]
 804290a:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 804290c:	687b      	ldr	r3, [r7, #4]
 804290e:	681b      	ldr	r3, [r3, #0]
 8042910:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8042914:	2b00      	cmp	r3, #0
 8042916:	d01e      	beq.n	8042956 <HAL_RCCEx_PeriphCLKConfig+0x642>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8042918:	4b32      	ldr	r3, [pc, #200]	; (80429e4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 804291a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804291e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8042922:	687b      	ldr	r3, [r7, #4]
 8042924:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8042928:	492e      	ldr	r1, [pc, #184]	; (80429e4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 804292a:	4313      	orrs	r3, r2
 804292c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8042930:	687b      	ldr	r3, [r7, #4]
 8042932:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8042936:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 804293a:	d10c      	bne.n	8042956 <HAL_RCCEx_PeriphCLKConfig+0x642>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 804293c:	687b      	ldr	r3, [r7, #4]
 804293e:	3304      	adds	r3, #4
 8042940:	2102      	movs	r1, #2
 8042942:	4618      	mov	r0, r3
 8042944:	f000 f850 	bl	80429e8 <RCCEx_PLLSAI1_Config>
 8042948:	4603      	mov	r3, r0
 804294a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 804294c:	7ffb      	ldrb	r3, [r7, #31]
 804294e:	2b00      	cmp	r3, #0
 8042950:	d001      	beq.n	8042956 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* set overall return value */
        status = ret;
 8042952:	7ffb      	ldrb	r3, [r7, #31]
 8042954:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8042956:	687b      	ldr	r3, [r7, #4]
 8042958:	681b      	ldr	r3, [r3, #0]
 804295a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 804295e:	2b00      	cmp	r3, #0
 8042960:	d00b      	beq.n	804297a <HAL_RCCEx_PeriphCLKConfig+0x666>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8042962:	4b20      	ldr	r3, [pc, #128]	; (80429e4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8042964:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8042968:	f023 0204 	bic.w	r2, r3, #4
 804296c:	687b      	ldr	r3, [r7, #4]
 804296e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8042972:	491c      	ldr	r1, [pc, #112]	; (80429e4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8042974:	4313      	orrs	r3, r2
 8042976:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 804297a:	687b      	ldr	r3, [r7, #4]
 804297c:	681b      	ldr	r3, [r3, #0]
 804297e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8042982:	2b00      	cmp	r3, #0
 8042984:	d00b      	beq.n	804299e <HAL_RCCEx_PeriphCLKConfig+0x68a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8042986:	4b17      	ldr	r3, [pc, #92]	; (80429e4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8042988:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 804298c:	f023 0218 	bic.w	r2, r3, #24
 8042990:	687b      	ldr	r3, [r7, #4]
 8042992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042996:	4913      	ldr	r1, [pc, #76]	; (80429e4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8042998:	4313      	orrs	r3, r2
 804299a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 804299e:	687b      	ldr	r3, [r7, #4]
 80429a0:	681b      	ldr	r3, [r3, #0]
 80429a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80429a6:	2b00      	cmp	r3, #0
 80429a8:	d017      	beq.n	80429da <HAL_RCCEx_PeriphCLKConfig+0x6c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80429aa:	4b0e      	ldr	r3, [pc, #56]	; (80429e4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 80429ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80429b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80429b4:	687b      	ldr	r3, [r7, #4]
 80429b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80429ba:	490a      	ldr	r1, [pc, #40]	; (80429e4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 80429bc:	4313      	orrs	r3, r2
 80429be:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
    
    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80429c2:	687b      	ldr	r3, [r7, #4]
 80429c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80429c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80429cc:	d105      	bne.n	80429da <HAL_RCCEx_PeriphCLKConfig+0x6c6>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80429ce:	4b05      	ldr	r3, [pc, #20]	; (80429e4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 80429d0:	68db      	ldr	r3, [r3, #12]
 80429d2:	4a04      	ldr	r2, [pc, #16]	; (80429e4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 80429d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80429d8:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80429da:	7fbb      	ldrb	r3, [r7, #30]
}
 80429dc:	4618      	mov	r0, r3
 80429de:	3720      	adds	r7, #32
 80429e0:	46bd      	mov	sp, r7
 80429e2:	bd80      	pop	{r7, pc}
 80429e4:	40021000 	.word	0x40021000

080429e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 80429e8:	b580      	push	{r7, lr}
 80429ea:	b084      	sub	sp, #16
 80429ec:	af00      	add	r7, sp, #0
 80429ee:	6078      	str	r0, [r7, #4]
 80429f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80429f2:	2300      	movs	r3, #0
 80429f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 80429f6:	687b      	ldr	r3, [r7, #4]
 80429f8:	681b      	ldr	r3, [r3, #0]
 80429fa:	2b02      	cmp	r3, #2
 80429fc:	d00c      	beq.n	8042a18 <RCCEx_PLLSAI1_Config+0x30>
 80429fe:	2b03      	cmp	r3, #3
 8042a00:	d013      	beq.n	8042a2a <RCCEx_PLLSAI1_Config+0x42>
 8042a02:	2b01      	cmp	r3, #1
 8042a04:	d11a      	bne.n	8042a3c <RCCEx_PLLSAI1_Config+0x54>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8042a06:	4b5d      	ldr	r3, [pc, #372]	; (8042b7c <RCCEx_PLLSAI1_Config+0x194>)
 8042a08:	681b      	ldr	r3, [r3, #0]
 8042a0a:	f003 0302 	and.w	r3, r3, #2
 8042a0e:	2b00      	cmp	r3, #0
 8042a10:	d117      	bne.n	8042a42 <RCCEx_PLLSAI1_Config+0x5a>
      {
        status = HAL_ERROR;
 8042a12:	2301      	movs	r3, #1
 8042a14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8042a16:	e014      	b.n	8042a42 <RCCEx_PLLSAI1_Config+0x5a>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8042a18:	4b58      	ldr	r3, [pc, #352]	; (8042b7c <RCCEx_PLLSAI1_Config+0x194>)
 8042a1a:	681b      	ldr	r3, [r3, #0]
 8042a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8042a20:	2b00      	cmp	r3, #0
 8042a22:	d110      	bne.n	8042a46 <RCCEx_PLLSAI1_Config+0x5e>
      {
        status = HAL_ERROR;
 8042a24:	2301      	movs	r3, #1
 8042a26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8042a28:	e00d      	b.n	8042a46 <RCCEx_PLLSAI1_Config+0x5e>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8042a2a:	4b54      	ldr	r3, [pc, #336]	; (8042b7c <RCCEx_PLLSAI1_Config+0x194>)
 8042a2c:	681b      	ldr	r3, [r3, #0]
 8042a2e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8042a32:	2b00      	cmp	r3, #0
 8042a34:	d109      	bne.n	8042a4a <RCCEx_PLLSAI1_Config+0x62>
      {
        status = HAL_ERROR;
 8042a36:	2301      	movs	r3, #1
 8042a38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8042a3a:	e006      	b.n	8042a4a <RCCEx_PLLSAI1_Config+0x62>
    default:
      status = HAL_ERROR;
 8042a3c:	2301      	movs	r3, #1
 8042a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8042a40:	e004      	b.n	8042a4c <RCCEx_PLLSAI1_Config+0x64>
      break;
 8042a42:	bf00      	nop
 8042a44:	e002      	b.n	8042a4c <RCCEx_PLLSAI1_Config+0x64>
      break;
 8042a46:	bf00      	nop
 8042a48:	e000      	b.n	8042a4c <RCCEx_PLLSAI1_Config+0x64>
      break;
 8042a4a:	bf00      	nop
  }

  if (status == HAL_OK)
 8042a4c:	7bfb      	ldrb	r3, [r7, #15]
 8042a4e:	2b00      	cmp	r3, #0
 8042a50:	f040 808f 	bne.w	8042b72 <RCCEx_PLLSAI1_Config+0x18a>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8042a54:	4b49      	ldr	r3, [pc, #292]	; (8042b7c <RCCEx_PLLSAI1_Config+0x194>)
 8042a56:	681b      	ldr	r3, [r3, #0]
 8042a58:	4a48      	ldr	r2, [pc, #288]	; (8042b7c <RCCEx_PLLSAI1_Config+0x194>)
 8042a5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8042a5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8042a60:	f7ff f82a 	bl	8041ab8 <HAL_GetTick>
 8042a64:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8042a66:	e009      	b.n	8042a7c <RCCEx_PLLSAI1_Config+0x94>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8042a68:	f7ff f826 	bl	8041ab8 <HAL_GetTick>
 8042a6c:	4602      	mov	r2, r0
 8042a6e:	68bb      	ldr	r3, [r7, #8]
 8042a70:	1ad3      	subs	r3, r2, r3
 8042a72:	2b02      	cmp	r3, #2
 8042a74:	d902      	bls.n	8042a7c <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_TIMEOUT;
 8042a76:	2303      	movs	r3, #3
 8042a78:	73fb      	strb	r3, [r7, #15]
        break;
 8042a7a:	e005      	b.n	8042a88 <RCCEx_PLLSAI1_Config+0xa0>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8042a7c:	4b3f      	ldr	r3, [pc, #252]	; (8042b7c <RCCEx_PLLSAI1_Config+0x194>)
 8042a7e:	681b      	ldr	r3, [r3, #0]
 8042a80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8042a84:	2b00      	cmp	r3, #0
 8042a86:	d1ef      	bne.n	8042a68 <RCCEx_PLLSAI1_Config+0x80>
      }
    }

    if (status == HAL_OK)
 8042a88:	7bfb      	ldrb	r3, [r7, #15]
 8042a8a:	2b00      	cmp	r3, #0
 8042a8c:	d171      	bne.n	8042b72 <RCCEx_PLLSAI1_Config+0x18a>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8042a8e:	683b      	ldr	r3, [r7, #0]
 8042a90:	2b00      	cmp	r3, #0
 8042a92:	d116      	bne.n	8042ac2 <RCCEx_PLLSAI1_Config+0xda>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8042a94:	4b39      	ldr	r3, [pc, #228]	; (8042b7c <RCCEx_PLLSAI1_Config+0x194>)
 8042a96:	691a      	ldr	r2, [r3, #16]
 8042a98:	4b39      	ldr	r3, [pc, #228]	; (8042b80 <RCCEx_PLLSAI1_Config+0x198>)
 8042a9a:	4013      	ands	r3, r2
 8042a9c:	687a      	ldr	r2, [r7, #4]
 8042a9e:	6892      	ldr	r2, [r2, #8]
 8042aa0:	0211      	lsls	r1, r2, #8
 8042aa2:	687a      	ldr	r2, [r7, #4]
 8042aa4:	68d2      	ldr	r2, [r2, #12]
 8042aa6:	06d2      	lsls	r2, r2, #27
 8042aa8:	4311      	orrs	r1, r2
 8042aaa:	687a      	ldr	r2, [r7, #4]
 8042aac:	6852      	ldr	r2, [r2, #4]
 8042aae:	3a01      	subs	r2, #1
 8042ab0:	0112      	lsls	r2, r2, #4
 8042ab2:	4311      	orrs	r1, r2
 8042ab4:	687a      	ldr	r2, [r7, #4]
 8042ab6:	6812      	ldr	r2, [r2, #0]
 8042ab8:	430a      	orrs	r2, r1
 8042aba:	4930      	ldr	r1, [pc, #192]	; (8042b7c <RCCEx_PLLSAI1_Config+0x194>)
 8042abc:	4313      	orrs	r3, r2
 8042abe:	610b      	str	r3, [r1, #16]
 8042ac0:	e033      	b.n	8042b2a <RCCEx_PLLSAI1_Config+0x142>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8042ac2:	683b      	ldr	r3, [r7, #0]
 8042ac4:	2b01      	cmp	r3, #1
 8042ac6:	d118      	bne.n	8042afa <RCCEx_PLLSAI1_Config+0x112>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8042ac8:	4b2c      	ldr	r3, [pc, #176]	; (8042b7c <RCCEx_PLLSAI1_Config+0x194>)
 8042aca:	691a      	ldr	r2, [r3, #16]
 8042acc:	4b2d      	ldr	r3, [pc, #180]	; (8042b84 <RCCEx_PLLSAI1_Config+0x19c>)
 8042ace:	4013      	ands	r3, r2
 8042ad0:	687a      	ldr	r2, [r7, #4]
 8042ad2:	6892      	ldr	r2, [r2, #8]
 8042ad4:	0211      	lsls	r1, r2, #8
 8042ad6:	687a      	ldr	r2, [r7, #4]
 8042ad8:	6912      	ldr	r2, [r2, #16]
 8042ada:	0852      	lsrs	r2, r2, #1
 8042adc:	3a01      	subs	r2, #1
 8042ade:	0552      	lsls	r2, r2, #21
 8042ae0:	4311      	orrs	r1, r2
 8042ae2:	687a      	ldr	r2, [r7, #4]
 8042ae4:	6852      	ldr	r2, [r2, #4]
 8042ae6:	3a01      	subs	r2, #1
 8042ae8:	0112      	lsls	r2, r2, #4
 8042aea:	4311      	orrs	r1, r2
 8042aec:	687a      	ldr	r2, [r7, #4]
 8042aee:	6812      	ldr	r2, [r2, #0]
 8042af0:	430a      	orrs	r2, r1
 8042af2:	4922      	ldr	r1, [pc, #136]	; (8042b7c <RCCEx_PLLSAI1_Config+0x194>)
 8042af4:	4313      	orrs	r3, r2
 8042af6:	610b      	str	r3, [r1, #16]
 8042af8:	e017      	b.n	8042b2a <RCCEx_PLLSAI1_Config+0x142>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8042afa:	4b20      	ldr	r3, [pc, #128]	; (8042b7c <RCCEx_PLLSAI1_Config+0x194>)
 8042afc:	691a      	ldr	r2, [r3, #16]
 8042afe:	4b22      	ldr	r3, [pc, #136]	; (8042b88 <RCCEx_PLLSAI1_Config+0x1a0>)
 8042b00:	4013      	ands	r3, r2
 8042b02:	687a      	ldr	r2, [r7, #4]
 8042b04:	6892      	ldr	r2, [r2, #8]
 8042b06:	0211      	lsls	r1, r2, #8
 8042b08:	687a      	ldr	r2, [r7, #4]
 8042b0a:	6952      	ldr	r2, [r2, #20]
 8042b0c:	0852      	lsrs	r2, r2, #1
 8042b0e:	3a01      	subs	r2, #1
 8042b10:	0652      	lsls	r2, r2, #25
 8042b12:	4311      	orrs	r1, r2
 8042b14:	687a      	ldr	r2, [r7, #4]
 8042b16:	6852      	ldr	r2, [r2, #4]
 8042b18:	3a01      	subs	r2, #1
 8042b1a:	0112      	lsls	r2, r2, #4
 8042b1c:	4311      	orrs	r1, r2
 8042b1e:	687a      	ldr	r2, [r7, #4]
 8042b20:	6812      	ldr	r2, [r2, #0]
 8042b22:	430a      	orrs	r2, r1
 8042b24:	4915      	ldr	r1, [pc, #84]	; (8042b7c <RCCEx_PLLSAI1_Config+0x194>)
 8042b26:	4313      	orrs	r3, r2
 8042b28:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8042b2a:	4b14      	ldr	r3, [pc, #80]	; (8042b7c <RCCEx_PLLSAI1_Config+0x194>)
 8042b2c:	681b      	ldr	r3, [r3, #0]
 8042b2e:	4a13      	ldr	r2, [pc, #76]	; (8042b7c <RCCEx_PLLSAI1_Config+0x194>)
 8042b30:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8042b34:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8042b36:	f7fe ffbf 	bl	8041ab8 <HAL_GetTick>
 8042b3a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8042b3c:	e009      	b.n	8042b52 <RCCEx_PLLSAI1_Config+0x16a>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8042b3e:	f7fe ffbb 	bl	8041ab8 <HAL_GetTick>
 8042b42:	4602      	mov	r2, r0
 8042b44:	68bb      	ldr	r3, [r7, #8]
 8042b46:	1ad3      	subs	r3, r2, r3
 8042b48:	2b02      	cmp	r3, #2
 8042b4a:	d902      	bls.n	8042b52 <RCCEx_PLLSAI1_Config+0x16a>
        {
          status = HAL_TIMEOUT;
 8042b4c:	2303      	movs	r3, #3
 8042b4e:	73fb      	strb	r3, [r7, #15]
          break;
 8042b50:	e005      	b.n	8042b5e <RCCEx_PLLSAI1_Config+0x176>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8042b52:	4b0a      	ldr	r3, [pc, #40]	; (8042b7c <RCCEx_PLLSAI1_Config+0x194>)
 8042b54:	681b      	ldr	r3, [r3, #0]
 8042b56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8042b5a:	2b00      	cmp	r3, #0
 8042b5c:	d0ef      	beq.n	8042b3e <RCCEx_PLLSAI1_Config+0x156>
        }
      }

      if (status == HAL_OK)
 8042b5e:	7bfb      	ldrb	r3, [r7, #15]
 8042b60:	2b00      	cmp	r3, #0
 8042b62:	d106      	bne.n	8042b72 <RCCEx_PLLSAI1_Config+0x18a>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8042b64:	4b05      	ldr	r3, [pc, #20]	; (8042b7c <RCCEx_PLLSAI1_Config+0x194>)
 8042b66:	691a      	ldr	r2, [r3, #16]
 8042b68:	687b      	ldr	r3, [r7, #4]
 8042b6a:	699b      	ldr	r3, [r3, #24]
 8042b6c:	4903      	ldr	r1, [pc, #12]	; (8042b7c <RCCEx_PLLSAI1_Config+0x194>)
 8042b6e:	4313      	orrs	r3, r2
 8042b70:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8042b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8042b74:	4618      	mov	r0, r3
 8042b76:	3710      	adds	r7, #16
 8042b78:	46bd      	mov	sp, r7
 8042b7a:	bd80      	pop	{r7, pc}
 8042b7c:	40021000 	.word	0x40021000
 8042b80:	07ff800c 	.word	0x07ff800c
 8042b84:	ff9f800c 	.word	0xff9f800c
 8042b88:	f9ff800c 	.word	0xf9ff800c

08042b8c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8042b8c:	b580      	push	{r7, lr}
 8042b8e:	b084      	sub	sp, #16
 8042b90:	af00      	add	r7, sp, #0
 8042b92:	6078      	str	r0, [r7, #4]
 8042b94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8042b96:	2300      	movs	r3, #0
 8042b98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8042b9a:	687b      	ldr	r3, [r7, #4]
 8042b9c:	681b      	ldr	r3, [r3, #0]
 8042b9e:	2b02      	cmp	r3, #2
 8042ba0:	d00c      	beq.n	8042bbc <RCCEx_PLLSAI2_Config+0x30>
 8042ba2:	2b03      	cmp	r3, #3
 8042ba4:	d013      	beq.n	8042bce <RCCEx_PLLSAI2_Config+0x42>
 8042ba6:	2b01      	cmp	r3, #1
 8042ba8:	d11a      	bne.n	8042be0 <RCCEx_PLLSAI2_Config+0x54>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8042baa:	4b42      	ldr	r3, [pc, #264]	; (8042cb4 <RCCEx_PLLSAI2_Config+0x128>)
 8042bac:	681b      	ldr	r3, [r3, #0]
 8042bae:	f003 0302 	and.w	r3, r3, #2
 8042bb2:	2b00      	cmp	r3, #0
 8042bb4:	d117      	bne.n	8042be6 <RCCEx_PLLSAI2_Config+0x5a>
      {
        status = HAL_ERROR;
 8042bb6:	2301      	movs	r3, #1
 8042bb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8042bba:	e014      	b.n	8042be6 <RCCEx_PLLSAI2_Config+0x5a>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8042bbc:	4b3d      	ldr	r3, [pc, #244]	; (8042cb4 <RCCEx_PLLSAI2_Config+0x128>)
 8042bbe:	681b      	ldr	r3, [r3, #0]
 8042bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8042bc4:	2b00      	cmp	r3, #0
 8042bc6:	d110      	bne.n	8042bea <RCCEx_PLLSAI2_Config+0x5e>
      {
        status = HAL_ERROR;
 8042bc8:	2301      	movs	r3, #1
 8042bca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8042bcc:	e00d      	b.n	8042bea <RCCEx_PLLSAI2_Config+0x5e>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8042bce:	4b39      	ldr	r3, [pc, #228]	; (8042cb4 <RCCEx_PLLSAI2_Config+0x128>)
 8042bd0:	681b      	ldr	r3, [r3, #0]
 8042bd2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8042bd6:	2b00      	cmp	r3, #0
 8042bd8:	d109      	bne.n	8042bee <RCCEx_PLLSAI2_Config+0x62>
      {
        status = HAL_ERROR;
 8042bda:	2301      	movs	r3, #1
 8042bdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8042bde:	e006      	b.n	8042bee <RCCEx_PLLSAI2_Config+0x62>
    default:
      status = HAL_ERROR;
 8042be0:	2301      	movs	r3, #1
 8042be2:	73fb      	strb	r3, [r7, #15]
      break;
 8042be4:	e004      	b.n	8042bf0 <RCCEx_PLLSAI2_Config+0x64>
      break;
 8042be6:	bf00      	nop
 8042be8:	e002      	b.n	8042bf0 <RCCEx_PLLSAI2_Config+0x64>
      break;
 8042bea:	bf00      	nop
 8042bec:	e000      	b.n	8042bf0 <RCCEx_PLLSAI2_Config+0x64>
      break;
 8042bee:	bf00      	nop
  }

  if (status == HAL_OK)
 8042bf0:	7bfb      	ldrb	r3, [r7, #15]
 8042bf2:	2b00      	cmp	r3, #0
 8042bf4:	d159      	bne.n	8042caa <RCCEx_PLLSAI2_Config+0x11e>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8042bf6:	4b2f      	ldr	r3, [pc, #188]	; (8042cb4 <RCCEx_PLLSAI2_Config+0x128>)
 8042bf8:	681b      	ldr	r3, [r3, #0]
 8042bfa:	4a2e      	ldr	r2, [pc, #184]	; (8042cb4 <RCCEx_PLLSAI2_Config+0x128>)
 8042bfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8042c00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8042c02:	f7fe ff59 	bl	8041ab8 <HAL_GetTick>
 8042c06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8042c08:	e009      	b.n	8042c1e <RCCEx_PLLSAI2_Config+0x92>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8042c0a:	f7fe ff55 	bl	8041ab8 <HAL_GetTick>
 8042c0e:	4602      	mov	r2, r0
 8042c10:	68bb      	ldr	r3, [r7, #8]
 8042c12:	1ad3      	subs	r3, r2, r3
 8042c14:	2b02      	cmp	r3, #2
 8042c16:	d902      	bls.n	8042c1e <RCCEx_PLLSAI2_Config+0x92>
      {
        status = HAL_TIMEOUT;
 8042c18:	2303      	movs	r3, #3
 8042c1a:	73fb      	strb	r3, [r7, #15]
        break;
 8042c1c:	e005      	b.n	8042c2a <RCCEx_PLLSAI2_Config+0x9e>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8042c1e:	4b25      	ldr	r3, [pc, #148]	; (8042cb4 <RCCEx_PLLSAI2_Config+0x128>)
 8042c20:	681b      	ldr	r3, [r3, #0]
 8042c22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8042c26:	2b00      	cmp	r3, #0
 8042c28:	d1ef      	bne.n	8042c0a <RCCEx_PLLSAI2_Config+0x7e>
      }
    }

    if (status == HAL_OK)
 8042c2a:	7bfb      	ldrb	r3, [r7, #15]
 8042c2c:	2b00      	cmp	r3, #0
 8042c2e:	d13c      	bne.n	8042caa <RCCEx_PLLSAI2_Config+0x11e>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8042c30:	683b      	ldr	r3, [r7, #0]
 8042c32:	2b00      	cmp	r3, #0
 8042c34:	d115      	bne.n	8042c62 <RCCEx_PLLSAI2_Config+0xd6>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8042c36:	4b1f      	ldr	r3, [pc, #124]	; (8042cb4 <RCCEx_PLLSAI2_Config+0x128>)
 8042c38:	695a      	ldr	r2, [r3, #20]
 8042c3a:	4b1f      	ldr	r3, [pc, #124]	; (8042cb8 <RCCEx_PLLSAI2_Config+0x12c>)
 8042c3c:	4013      	ands	r3, r2
 8042c3e:	687a      	ldr	r2, [r7, #4]
 8042c40:	6892      	ldr	r2, [r2, #8]
 8042c42:	0211      	lsls	r1, r2, #8
 8042c44:	687a      	ldr	r2, [r7, #4]
 8042c46:	68d2      	ldr	r2, [r2, #12]
 8042c48:	06d2      	lsls	r2, r2, #27
 8042c4a:	4311      	orrs	r1, r2
 8042c4c:	687a      	ldr	r2, [r7, #4]
 8042c4e:	6852      	ldr	r2, [r2, #4]
 8042c50:	3a01      	subs	r2, #1
 8042c52:	0112      	lsls	r2, r2, #4
 8042c54:	4311      	orrs	r1, r2
 8042c56:	687a      	ldr	r2, [r7, #4]
 8042c58:	6812      	ldr	r2, [r2, #0]
 8042c5a:	430a      	orrs	r2, r1
 8042c5c:	4915      	ldr	r1, [pc, #84]	; (8042cb4 <RCCEx_PLLSAI2_Config+0x128>)
 8042c5e:	4313      	orrs	r3, r2
 8042c60:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8042c62:	4b14      	ldr	r3, [pc, #80]	; (8042cb4 <RCCEx_PLLSAI2_Config+0x128>)
 8042c64:	681b      	ldr	r3, [r3, #0]
 8042c66:	4a13      	ldr	r2, [pc, #76]	; (8042cb4 <RCCEx_PLLSAI2_Config+0x128>)
 8042c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8042c6c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8042c6e:	f7fe ff23 	bl	8041ab8 <HAL_GetTick>
 8042c72:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8042c74:	e009      	b.n	8042c8a <RCCEx_PLLSAI2_Config+0xfe>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8042c76:	f7fe ff1f 	bl	8041ab8 <HAL_GetTick>
 8042c7a:	4602      	mov	r2, r0
 8042c7c:	68bb      	ldr	r3, [r7, #8]
 8042c7e:	1ad3      	subs	r3, r2, r3
 8042c80:	2b02      	cmp	r3, #2
 8042c82:	d902      	bls.n	8042c8a <RCCEx_PLLSAI2_Config+0xfe>
        {
          status = HAL_TIMEOUT;
 8042c84:	2303      	movs	r3, #3
 8042c86:	73fb      	strb	r3, [r7, #15]
          break;
 8042c88:	e005      	b.n	8042c96 <RCCEx_PLLSAI2_Config+0x10a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8042c8a:	4b0a      	ldr	r3, [pc, #40]	; (8042cb4 <RCCEx_PLLSAI2_Config+0x128>)
 8042c8c:	681b      	ldr	r3, [r3, #0]
 8042c8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8042c92:	2b00      	cmp	r3, #0
 8042c94:	d0ef      	beq.n	8042c76 <RCCEx_PLLSAI2_Config+0xea>
        }
      }

      if (status == HAL_OK)
 8042c96:	7bfb      	ldrb	r3, [r7, #15]
 8042c98:	2b00      	cmp	r3, #0
 8042c9a:	d106      	bne.n	8042caa <RCCEx_PLLSAI2_Config+0x11e>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8042c9c:	4b05      	ldr	r3, [pc, #20]	; (8042cb4 <RCCEx_PLLSAI2_Config+0x128>)
 8042c9e:	695a      	ldr	r2, [r3, #20]
 8042ca0:	687b      	ldr	r3, [r7, #4]
 8042ca2:	691b      	ldr	r3, [r3, #16]
 8042ca4:	4903      	ldr	r1, [pc, #12]	; (8042cb4 <RCCEx_PLLSAI2_Config+0x128>)
 8042ca6:	4313      	orrs	r3, r2
 8042ca8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8042caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8042cac:	4618      	mov	r0, r3
 8042cae:	3710      	adds	r7, #16
 8042cb0:	46bd      	mov	sp, r7
 8042cb2:	bd80      	pop	{r7, pc}
 8042cb4:	40021000 	.word	0x40021000
 8042cb8:	07ff800c 	.word	0x07ff800c

08042cbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8042cbc:	b580      	push	{r7, lr}
 8042cbe:	b082      	sub	sp, #8
 8042cc0:	af00      	add	r7, sp, #0
 8042cc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8042cc4:	687b      	ldr	r3, [r7, #4]
 8042cc6:	2b00      	cmp	r3, #0
 8042cc8:	d101      	bne.n	8042cce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8042cca:	2301      	movs	r3, #1
 8042ccc:	e042      	b.n	8042d54 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8042cce:	687b      	ldr	r3, [r7, #4]
 8042cd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8042cd4:	2b00      	cmp	r3, #0
 8042cd6:	d106      	bne.n	8042ce6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8042cd8:	687b      	ldr	r3, [r7, #4]
 8042cda:	2200      	movs	r2, #0
 8042cdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8042ce0:	6878      	ldr	r0, [r7, #4]
 8042ce2:	f7fe fcc5 	bl	8041670 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8042ce6:	687b      	ldr	r3, [r7, #4]
 8042ce8:	2224      	movs	r2, #36	; 0x24
 8042cea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8042cee:	687b      	ldr	r3, [r7, #4]
 8042cf0:	681b      	ldr	r3, [r3, #0]
 8042cf2:	681a      	ldr	r2, [r3, #0]
 8042cf4:	687b      	ldr	r3, [r7, #4]
 8042cf6:	681b      	ldr	r3, [r3, #0]
 8042cf8:	f022 0201 	bic.w	r2, r2, #1
 8042cfc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8042cfe:	6878      	ldr	r0, [r7, #4]
 8042d00:	f000 fb1a 	bl	8043338 <UART_SetConfig>
 8042d04:	4603      	mov	r3, r0
 8042d06:	2b01      	cmp	r3, #1
 8042d08:	d101      	bne.n	8042d0e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8042d0a:	2301      	movs	r3, #1
 8042d0c:	e022      	b.n	8042d54 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8042d0e:	687b      	ldr	r3, [r7, #4]
 8042d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042d12:	2b00      	cmp	r3, #0
 8042d14:	d002      	beq.n	8042d1c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8042d16:	6878      	ldr	r0, [r7, #4]
 8042d18:	f000 fde4 	bl	80438e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8042d1c:	687b      	ldr	r3, [r7, #4]
 8042d1e:	681b      	ldr	r3, [r3, #0]
 8042d20:	685a      	ldr	r2, [r3, #4]
 8042d22:	687b      	ldr	r3, [r7, #4]
 8042d24:	681b      	ldr	r3, [r3, #0]
 8042d26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8042d2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8042d2c:	687b      	ldr	r3, [r7, #4]
 8042d2e:	681b      	ldr	r3, [r3, #0]
 8042d30:	689a      	ldr	r2, [r3, #8]
 8042d32:	687b      	ldr	r3, [r7, #4]
 8042d34:	681b      	ldr	r3, [r3, #0]
 8042d36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8042d3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8042d3c:	687b      	ldr	r3, [r7, #4]
 8042d3e:	681b      	ldr	r3, [r3, #0]
 8042d40:	681a      	ldr	r2, [r3, #0]
 8042d42:	687b      	ldr	r3, [r7, #4]
 8042d44:	681b      	ldr	r3, [r3, #0]
 8042d46:	f042 0201 	orr.w	r2, r2, #1
 8042d4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8042d4c:	6878      	ldr	r0, [r7, #4]
 8042d4e:	f000 fe6b 	bl	8043a28 <UART_CheckIdleState>
 8042d52:	4603      	mov	r3, r0
}
 8042d54:	4618      	mov	r0, r3
 8042d56:	3708      	adds	r7, #8
 8042d58:	46bd      	mov	sp, r7
 8042d5a:	bd80      	pop	{r7, pc}

08042d5c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8042d5c:	b480      	push	{r7}
 8042d5e:	b085      	sub	sp, #20
 8042d60:	af00      	add	r7, sp, #0
 8042d62:	60f8      	str	r0, [r7, #12]
 8042d64:	60b9      	str	r1, [r7, #8]
 8042d66:	4613      	mov	r3, r2
 8042d68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8042d6a:	68fb      	ldr	r3, [r7, #12]
 8042d6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8042d70:	2b20      	cmp	r3, #32
 8042d72:	d168      	bne.n	8042e46 <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8042d74:	68bb      	ldr	r3, [r7, #8]
 8042d76:	2b00      	cmp	r3, #0
 8042d78:	d002      	beq.n	8042d80 <HAL_UART_Transmit_IT+0x24>
 8042d7a:	88fb      	ldrh	r3, [r7, #6]
 8042d7c:	2b00      	cmp	r3, #0
 8042d7e:	d101      	bne.n	8042d84 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8042d80:	2301      	movs	r3, #1
 8042d82:	e061      	b.n	8042e48 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 8042d84:	68fb      	ldr	r3, [r7, #12]
 8042d86:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8042d8a:	2b01      	cmp	r3, #1
 8042d8c:	d101      	bne.n	8042d92 <HAL_UART_Transmit_IT+0x36>
 8042d8e:	2302      	movs	r3, #2
 8042d90:	e05a      	b.n	8042e48 <HAL_UART_Transmit_IT+0xec>
 8042d92:	68fb      	ldr	r3, [r7, #12]
 8042d94:	2201      	movs	r2, #1
 8042d96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8042d9a:	68fb      	ldr	r3, [r7, #12]
 8042d9c:	68ba      	ldr	r2, [r7, #8]
 8042d9e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8042da0:	68fb      	ldr	r3, [r7, #12]
 8042da2:	88fa      	ldrh	r2, [r7, #6]
 8042da4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8042da8:	68fb      	ldr	r3, [r7, #12]
 8042daa:	88fa      	ldrh	r2, [r7, #6]
 8042dac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8042db0:	68fb      	ldr	r3, [r7, #12]
 8042db2:	2200      	movs	r2, #0
 8042db4:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8042db6:	68fb      	ldr	r3, [r7, #12]
 8042db8:	2200      	movs	r2, #0
 8042dba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8042dbe:	68fb      	ldr	r3, [r7, #12]
 8042dc0:	2221      	movs	r2, #33	; 0x21
 8042dc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8042dc6:	68fb      	ldr	r3, [r7, #12]
 8042dc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8042dca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8042dce:	d11c      	bne.n	8042e0a <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8042dd0:	68fb      	ldr	r3, [r7, #12]
 8042dd2:	689b      	ldr	r3, [r3, #8]
 8042dd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8042dd8:	d107      	bne.n	8042dea <HAL_UART_Transmit_IT+0x8e>
 8042dda:	68fb      	ldr	r3, [r7, #12]
 8042ddc:	691b      	ldr	r3, [r3, #16]
 8042dde:	2b00      	cmp	r3, #0
 8042de0:	d103      	bne.n	8042dea <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8042de2:	68fb      	ldr	r3, [r7, #12]
 8042de4:	4a1b      	ldr	r2, [pc, #108]	; (8042e54 <HAL_UART_Transmit_IT+0xf8>)
 8042de6:	675a      	str	r2, [r3, #116]	; 0x74
 8042de8:	e002      	b.n	8042df0 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8042dea:	68fb      	ldr	r3, [r7, #12]
 8042dec:	4a1a      	ldr	r2, [pc, #104]	; (8042e58 <HAL_UART_Transmit_IT+0xfc>)
 8042dee:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8042df0:	68fb      	ldr	r3, [r7, #12]
 8042df2:	2200      	movs	r2, #0
 8042df4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8042df8:	68fb      	ldr	r3, [r7, #12]
 8042dfa:	681b      	ldr	r3, [r3, #0]
 8042dfc:	689a      	ldr	r2, [r3, #8]
 8042dfe:	68fb      	ldr	r3, [r7, #12]
 8042e00:	681b      	ldr	r3, [r3, #0]
 8042e02:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8042e06:	609a      	str	r2, [r3, #8]
 8042e08:	e01b      	b.n	8042e42 <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8042e0a:	68fb      	ldr	r3, [r7, #12]
 8042e0c:	689b      	ldr	r3, [r3, #8]
 8042e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8042e12:	d107      	bne.n	8042e24 <HAL_UART_Transmit_IT+0xc8>
 8042e14:	68fb      	ldr	r3, [r7, #12]
 8042e16:	691b      	ldr	r3, [r3, #16]
 8042e18:	2b00      	cmp	r3, #0
 8042e1a:	d103      	bne.n	8042e24 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8042e1c:	68fb      	ldr	r3, [r7, #12]
 8042e1e:	4a0f      	ldr	r2, [pc, #60]	; (8042e5c <HAL_UART_Transmit_IT+0x100>)
 8042e20:	675a      	str	r2, [r3, #116]	; 0x74
 8042e22:	e002      	b.n	8042e2a <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8042e24:	68fb      	ldr	r3, [r7, #12]
 8042e26:	4a0e      	ldr	r2, [pc, #56]	; (8042e60 <HAL_UART_Transmit_IT+0x104>)
 8042e28:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8042e2a:	68fb      	ldr	r3, [r7, #12]
 8042e2c:	2200      	movs	r2, #0
 8042e2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8042e32:	68fb      	ldr	r3, [r7, #12]
 8042e34:	681b      	ldr	r3, [r3, #0]
 8042e36:	681a      	ldr	r2, [r3, #0]
 8042e38:	68fb      	ldr	r3, [r7, #12]
 8042e3a:	681b      	ldr	r3, [r3, #0]
 8042e3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8042e40:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8042e42:	2300      	movs	r3, #0
 8042e44:	e000      	b.n	8042e48 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 8042e46:	2302      	movs	r3, #2
  }
}
 8042e48:	4618      	mov	r0, r3
 8042e4a:	3714      	adds	r7, #20
 8042e4c:	46bd      	mov	sp, r7
 8042e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042e52:	4770      	bx	lr
 8042e54:	08043ddb 	.word	0x08043ddb
 8042e58:	08043d41 	.word	0x08043d41
 8042e5c:	08043cc3 	.word	0x08043cc3
 8042e60:	08043c4f 	.word	0x08043c4f

08042e64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8042e64:	b580      	push	{r7, lr}
 8042e66:	b088      	sub	sp, #32
 8042e68:	af00      	add	r7, sp, #0
 8042e6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8042e6c:	687b      	ldr	r3, [r7, #4]
 8042e6e:	681b      	ldr	r3, [r3, #0]
 8042e70:	69db      	ldr	r3, [r3, #28]
 8042e72:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8042e74:	687b      	ldr	r3, [r7, #4]
 8042e76:	681b      	ldr	r3, [r3, #0]
 8042e78:	681b      	ldr	r3, [r3, #0]
 8042e7a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8042e7c:	687b      	ldr	r3, [r7, #4]
 8042e7e:	681b      	ldr	r3, [r3, #0]
 8042e80:	689b      	ldr	r3, [r3, #8]
 8042e82:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8042e84:	69fa      	ldr	r2, [r7, #28]
 8042e86:	f640 030f 	movw	r3, #2063	; 0x80f
 8042e8a:	4013      	ands	r3, r2
 8042e8c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8042e8e:	693b      	ldr	r3, [r7, #16]
 8042e90:	2b00      	cmp	r3, #0
 8042e92:	d118      	bne.n	8042ec6 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8042e94:	69fb      	ldr	r3, [r7, #28]
 8042e96:	f003 0320 	and.w	r3, r3, #32
 8042e9a:	2b00      	cmp	r3, #0
 8042e9c:	d013      	beq.n	8042ec6 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8042e9e:	69bb      	ldr	r3, [r7, #24]
 8042ea0:	f003 0320 	and.w	r3, r3, #32
 8042ea4:	2b00      	cmp	r3, #0
 8042ea6:	d104      	bne.n	8042eb2 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8042ea8:	697b      	ldr	r3, [r7, #20]
 8042eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8042eae:	2b00      	cmp	r3, #0
 8042eb0:	d009      	beq.n	8042ec6 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8042eb2:	687b      	ldr	r3, [r7, #4]
 8042eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042eb6:	2b00      	cmp	r3, #0
 8042eb8:	f000 81fc 	beq.w	80432b4 <HAL_UART_IRQHandler+0x450>
      {
        huart->RxISR(huart);
 8042ebc:	687b      	ldr	r3, [r7, #4]
 8042ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042ec0:	6878      	ldr	r0, [r7, #4]
 8042ec2:	4798      	blx	r3
      }
      return;
 8042ec4:	e1f6      	b.n	80432b4 <HAL_UART_IRQHandler+0x450>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8042ec6:	693b      	ldr	r3, [r7, #16]
 8042ec8:	2b00      	cmp	r3, #0
 8042eca:	f000 80ef 	beq.w	80430ac <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8042ece:	697a      	ldr	r2, [r7, #20]
 8042ed0:	4b73      	ldr	r3, [pc, #460]	; (80430a0 <HAL_UART_IRQHandler+0x23c>)
 8042ed2:	4013      	ands	r3, r2
 8042ed4:	2b00      	cmp	r3, #0
 8042ed6:	d105      	bne.n	8042ee4 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8042ed8:	69ba      	ldr	r2, [r7, #24]
 8042eda:	4b72      	ldr	r3, [pc, #456]	; (80430a4 <HAL_UART_IRQHandler+0x240>)
 8042edc:	4013      	ands	r3, r2
 8042ede:	2b00      	cmp	r3, #0
 8042ee0:	f000 80e4 	beq.w	80430ac <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8042ee4:	69fb      	ldr	r3, [r7, #28]
 8042ee6:	f003 0301 	and.w	r3, r3, #1
 8042eea:	2b00      	cmp	r3, #0
 8042eec:	d010      	beq.n	8042f10 <HAL_UART_IRQHandler+0xac>
 8042eee:	69bb      	ldr	r3, [r7, #24]
 8042ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8042ef4:	2b00      	cmp	r3, #0
 8042ef6:	d00b      	beq.n	8042f10 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8042ef8:	687b      	ldr	r3, [r7, #4]
 8042efa:	681b      	ldr	r3, [r3, #0]
 8042efc:	2201      	movs	r2, #1
 8042efe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8042f00:	687b      	ldr	r3, [r7, #4]
 8042f02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8042f06:	f043 0201 	orr.w	r2, r3, #1
 8042f0a:	687b      	ldr	r3, [r7, #4]
 8042f0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8042f10:	69fb      	ldr	r3, [r7, #28]
 8042f12:	f003 0302 	and.w	r3, r3, #2
 8042f16:	2b00      	cmp	r3, #0
 8042f18:	d010      	beq.n	8042f3c <HAL_UART_IRQHandler+0xd8>
 8042f1a:	697b      	ldr	r3, [r7, #20]
 8042f1c:	f003 0301 	and.w	r3, r3, #1
 8042f20:	2b00      	cmp	r3, #0
 8042f22:	d00b      	beq.n	8042f3c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8042f24:	687b      	ldr	r3, [r7, #4]
 8042f26:	681b      	ldr	r3, [r3, #0]
 8042f28:	2202      	movs	r2, #2
 8042f2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8042f2c:	687b      	ldr	r3, [r7, #4]
 8042f2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8042f32:	f043 0204 	orr.w	r2, r3, #4
 8042f36:	687b      	ldr	r3, [r7, #4]
 8042f38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8042f3c:	69fb      	ldr	r3, [r7, #28]
 8042f3e:	f003 0304 	and.w	r3, r3, #4
 8042f42:	2b00      	cmp	r3, #0
 8042f44:	d010      	beq.n	8042f68 <HAL_UART_IRQHandler+0x104>
 8042f46:	697b      	ldr	r3, [r7, #20]
 8042f48:	f003 0301 	and.w	r3, r3, #1
 8042f4c:	2b00      	cmp	r3, #0
 8042f4e:	d00b      	beq.n	8042f68 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8042f50:	687b      	ldr	r3, [r7, #4]
 8042f52:	681b      	ldr	r3, [r3, #0]
 8042f54:	2204      	movs	r2, #4
 8042f56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8042f58:	687b      	ldr	r3, [r7, #4]
 8042f5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8042f5e:	f043 0202 	orr.w	r2, r3, #2
 8042f62:	687b      	ldr	r3, [r7, #4]
 8042f64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8042f68:	69fb      	ldr	r3, [r7, #28]
 8042f6a:	f003 0308 	and.w	r3, r3, #8
 8042f6e:	2b00      	cmp	r3, #0
 8042f70:	d015      	beq.n	8042f9e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8042f72:	69bb      	ldr	r3, [r7, #24]
 8042f74:	f003 0320 	and.w	r3, r3, #32
 8042f78:	2b00      	cmp	r3, #0
 8042f7a:	d104      	bne.n	8042f86 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8042f7c:	697a      	ldr	r2, [r7, #20]
 8042f7e:	4b48      	ldr	r3, [pc, #288]	; (80430a0 <HAL_UART_IRQHandler+0x23c>)
 8042f80:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8042f82:	2b00      	cmp	r3, #0
 8042f84:	d00b      	beq.n	8042f9e <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8042f86:	687b      	ldr	r3, [r7, #4]
 8042f88:	681b      	ldr	r3, [r3, #0]
 8042f8a:	2208      	movs	r2, #8
 8042f8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8042f8e:	687b      	ldr	r3, [r7, #4]
 8042f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8042f94:	f043 0208 	orr.w	r2, r3, #8
 8042f98:	687b      	ldr	r3, [r7, #4]
 8042f9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8042f9e:	69fb      	ldr	r3, [r7, #28]
 8042fa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8042fa4:	2b00      	cmp	r3, #0
 8042fa6:	d011      	beq.n	8042fcc <HAL_UART_IRQHandler+0x168>
 8042fa8:	69bb      	ldr	r3, [r7, #24]
 8042faa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8042fae:	2b00      	cmp	r3, #0
 8042fb0:	d00c      	beq.n	8042fcc <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8042fb2:	687b      	ldr	r3, [r7, #4]
 8042fb4:	681b      	ldr	r3, [r3, #0]
 8042fb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8042fba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8042fbc:	687b      	ldr	r3, [r7, #4]
 8042fbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8042fc2:	f043 0220 	orr.w	r2, r3, #32
 8042fc6:	687b      	ldr	r3, [r7, #4]
 8042fc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8042fcc:	687b      	ldr	r3, [r7, #4]
 8042fce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8042fd2:	2b00      	cmp	r3, #0
 8042fd4:	f000 8170 	beq.w	80432b8 <HAL_UART_IRQHandler+0x454>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8042fd8:	69fb      	ldr	r3, [r7, #28]
 8042fda:	f003 0320 	and.w	r3, r3, #32
 8042fde:	2b00      	cmp	r3, #0
 8042fe0:	d011      	beq.n	8043006 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8042fe2:	69bb      	ldr	r3, [r7, #24]
 8042fe4:	f003 0320 	and.w	r3, r3, #32
 8042fe8:	2b00      	cmp	r3, #0
 8042fea:	d104      	bne.n	8042ff6 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8042fec:	697b      	ldr	r3, [r7, #20]
 8042fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8042ff2:	2b00      	cmp	r3, #0
 8042ff4:	d007      	beq.n	8043006 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8042ff6:	687b      	ldr	r3, [r7, #4]
 8042ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042ffa:	2b00      	cmp	r3, #0
 8042ffc:	d003      	beq.n	8043006 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8042ffe:	687b      	ldr	r3, [r7, #4]
 8043000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8043002:	6878      	ldr	r0, [r7, #4]
 8043004:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8043006:	687b      	ldr	r3, [r7, #4]
 8043008:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804300c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 804300e:	687b      	ldr	r3, [r7, #4]
 8043010:	681b      	ldr	r3, [r3, #0]
 8043012:	689b      	ldr	r3, [r3, #8]
 8043014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8043018:	2b40      	cmp	r3, #64	; 0x40
 804301a:	d004      	beq.n	8043026 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 804301c:	68fb      	ldr	r3, [r7, #12]
 804301e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8043022:	2b00      	cmp	r3, #0
 8043024:	d031      	beq.n	804308a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8043026:	6878      	ldr	r0, [r7, #4]
 8043028:	f000 fdc9 	bl	8043bbe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 804302c:	687b      	ldr	r3, [r7, #4]
 804302e:	681b      	ldr	r3, [r3, #0]
 8043030:	689b      	ldr	r3, [r3, #8]
 8043032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8043036:	2b40      	cmp	r3, #64	; 0x40
 8043038:	d123      	bne.n	8043082 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 804303a:	687b      	ldr	r3, [r7, #4]
 804303c:	681b      	ldr	r3, [r3, #0]
 804303e:	689a      	ldr	r2, [r3, #8]
 8043040:	687b      	ldr	r3, [r7, #4]
 8043042:	681b      	ldr	r3, [r3, #0]
 8043044:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8043048:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 804304a:	687b      	ldr	r3, [r7, #4]
 804304c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804304e:	2b00      	cmp	r3, #0
 8043050:	d013      	beq.n	804307a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8043052:	687b      	ldr	r3, [r7, #4]
 8043054:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8043056:	4a14      	ldr	r2, [pc, #80]	; (80430a8 <HAL_UART_IRQHandler+0x244>)
 8043058:	641a      	str	r2, [r3, #64]	; 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 804305a:	687b      	ldr	r3, [r7, #4]
 804305c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804305e:	4618      	mov	r0, r3
 8043060:	f7fe fea1 	bl	8041da6 <HAL_DMA_Abort_IT>
 8043064:	4603      	mov	r3, r0
 8043066:	2b00      	cmp	r3, #0
 8043068:	d017      	beq.n	804309a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 804306a:	687b      	ldr	r3, [r7, #4]
 804306c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804306e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043070:	687a      	ldr	r2, [r7, #4]
 8043072:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8043074:	4610      	mov	r0, r2
 8043076:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8043078:	e00f      	b.n	804309a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 804307a:	6878      	ldr	r0, [r7, #4]
 804307c:	f000 f930 	bl	80432e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8043080:	e00b      	b.n	804309a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8043082:	6878      	ldr	r0, [r7, #4]
 8043084:	f000 f92c 	bl	80432e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8043088:	e007      	b.n	804309a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 804308a:	6878      	ldr	r0, [r7, #4]
 804308c:	f000 f928 	bl	80432e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8043090:	687b      	ldr	r3, [r7, #4]
 8043092:	2200      	movs	r2, #0
 8043094:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8043098:	e10e      	b.n	80432b8 <HAL_UART_IRQHandler+0x454>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 804309a:	bf00      	nop
    return;
 804309c:	e10c      	b.n	80432b8 <HAL_UART_IRQHandler+0x454>
 804309e:	bf00      	nop
 80430a0:	10000001 	.word	0x10000001
 80430a4:	04000120 	.word	0x04000120
 80430a8:	08043c23 	.word	0x08043c23

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80430ac:	687b      	ldr	r3, [r7, #4]
 80430ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80430b0:	2b01      	cmp	r3, #1
 80430b2:	f040 80ab 	bne.w	804320c <HAL_UART_IRQHandler+0x3a8>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80430b6:	69fb      	ldr	r3, [r7, #28]
 80430b8:	f003 0310 	and.w	r3, r3, #16
 80430bc:	2b00      	cmp	r3, #0
 80430be:	f000 80a5 	beq.w	804320c <HAL_UART_IRQHandler+0x3a8>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80430c2:	69bb      	ldr	r3, [r7, #24]
 80430c4:	f003 0310 	and.w	r3, r3, #16
 80430c8:	2b00      	cmp	r3, #0
 80430ca:	f000 809f 	beq.w	804320c <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80430ce:	687b      	ldr	r3, [r7, #4]
 80430d0:	681b      	ldr	r3, [r3, #0]
 80430d2:	2210      	movs	r2, #16
 80430d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80430d6:	687b      	ldr	r3, [r7, #4]
 80430d8:	681b      	ldr	r3, [r3, #0]
 80430da:	689b      	ldr	r3, [r3, #8]
 80430dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80430e0:	2b40      	cmp	r3, #64	; 0x40
 80430e2:	d155      	bne.n	8043190 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80430e4:	687b      	ldr	r3, [r7, #4]
 80430e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80430e8:	681b      	ldr	r3, [r3, #0]
 80430ea:	685b      	ldr	r3, [r3, #4]
 80430ec:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80430ee:	893b      	ldrh	r3, [r7, #8]
 80430f0:	2b00      	cmp	r3, #0
 80430f2:	f000 80e3 	beq.w	80432bc <HAL_UART_IRQHandler+0x458>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80430f6:	687b      	ldr	r3, [r7, #4]
 80430f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80430fc:	893a      	ldrh	r2, [r7, #8]
 80430fe:	429a      	cmp	r2, r3
 8043100:	f080 80dc 	bcs.w	80432bc <HAL_UART_IRQHandler+0x458>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8043104:	687b      	ldr	r3, [r7, #4]
 8043106:	893a      	ldrh	r2, [r7, #8]
 8043108:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 804310c:	687b      	ldr	r3, [r7, #4]
 804310e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8043110:	681b      	ldr	r3, [r3, #0]
 8043112:	681b      	ldr	r3, [r3, #0]
 8043114:	f003 0320 	and.w	r3, r3, #32
 8043118:	2b00      	cmp	r3, #0
 804311a:	d12b      	bne.n	8043174 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 804311c:	687b      	ldr	r3, [r7, #4]
 804311e:	681b      	ldr	r3, [r3, #0]
 8043120:	681a      	ldr	r2, [r3, #0]
 8043122:	687b      	ldr	r3, [r7, #4]
 8043124:	681b      	ldr	r3, [r3, #0]
 8043126:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 804312a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 804312c:	687b      	ldr	r3, [r7, #4]
 804312e:	681b      	ldr	r3, [r3, #0]
 8043130:	689a      	ldr	r2, [r3, #8]
 8043132:	687b      	ldr	r3, [r7, #4]
 8043134:	681b      	ldr	r3, [r3, #0]
 8043136:	f022 0201 	bic.w	r2, r2, #1
 804313a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 804313c:	687b      	ldr	r3, [r7, #4]
 804313e:	681b      	ldr	r3, [r3, #0]
 8043140:	689a      	ldr	r2, [r3, #8]
 8043142:	687b      	ldr	r3, [r7, #4]
 8043144:	681b      	ldr	r3, [r3, #0]
 8043146:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 804314a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 804314c:	687b      	ldr	r3, [r7, #4]
 804314e:	2220      	movs	r2, #32
 8043150:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8043154:	687b      	ldr	r3, [r7, #4]
 8043156:	2200      	movs	r2, #0
 8043158:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 804315a:	687b      	ldr	r3, [r7, #4]
 804315c:	681b      	ldr	r3, [r3, #0]
 804315e:	681a      	ldr	r2, [r3, #0]
 8043160:	687b      	ldr	r3, [r7, #4]
 8043162:	681b      	ldr	r3, [r3, #0]
 8043164:	f022 0210 	bic.w	r2, r2, #16
 8043168:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 804316a:	687b      	ldr	r3, [r7, #4]
 804316c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804316e:	4618      	mov	r0, r3
 8043170:	f7fe fdbd 	bl	8041cee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8043174:	687b      	ldr	r3, [r7, #4]
 8043176:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 804317a:	687b      	ldr	r3, [r7, #4]
 804317c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8043180:	b29b      	uxth	r3, r3
 8043182:	1ad3      	subs	r3, r2, r3
 8043184:	b29b      	uxth	r3, r3
 8043186:	4619      	mov	r1, r3
 8043188:	6878      	ldr	r0, [r7, #4]
 804318a:	f000 f8b3 	bl	80432f4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 804318e:	e095      	b.n	80432bc <HAL_UART_IRQHandler+0x458>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8043190:	687b      	ldr	r3, [r7, #4]
 8043192:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8043196:	687b      	ldr	r3, [r7, #4]
 8043198:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 804319c:	b29b      	uxth	r3, r3
 804319e:	1ad3      	subs	r3, r2, r3
 80431a0:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80431a2:	687b      	ldr	r3, [r7, #4]
 80431a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80431a8:	b29b      	uxth	r3, r3
 80431aa:	2b00      	cmp	r3, #0
 80431ac:	f000 8088 	beq.w	80432c0 <HAL_UART_IRQHandler+0x45c>
          &&(nb_rx_data > 0U) )
 80431b0:	897b      	ldrh	r3, [r7, #10]
 80431b2:	2b00      	cmp	r3, #0
 80431b4:	f000 8084 	beq.w	80432c0 <HAL_UART_IRQHandler+0x45c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80431b8:	687b      	ldr	r3, [r7, #4]
 80431ba:	681b      	ldr	r3, [r3, #0]
 80431bc:	681a      	ldr	r2, [r3, #0]
 80431be:	687b      	ldr	r3, [r7, #4]
 80431c0:	681b      	ldr	r3, [r3, #0]
 80431c2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80431c6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80431c8:	687b      	ldr	r3, [r7, #4]
 80431ca:	681b      	ldr	r3, [r3, #0]
 80431cc:	689b      	ldr	r3, [r3, #8]
 80431ce:	687a      	ldr	r2, [r7, #4]
 80431d0:	6812      	ldr	r2, [r2, #0]
 80431d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80431d6:	f023 0301 	bic.w	r3, r3, #1
 80431da:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80431dc:	687b      	ldr	r3, [r7, #4]
 80431de:	2220      	movs	r2, #32
 80431e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80431e4:	687b      	ldr	r3, [r7, #4]
 80431e6:	2200      	movs	r2, #0
 80431e8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80431ea:	687b      	ldr	r3, [r7, #4]
 80431ec:	2200      	movs	r2, #0
 80431ee:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80431f0:	687b      	ldr	r3, [r7, #4]
 80431f2:	681b      	ldr	r3, [r3, #0]
 80431f4:	681a      	ldr	r2, [r3, #0]
 80431f6:	687b      	ldr	r3, [r7, #4]
 80431f8:	681b      	ldr	r3, [r3, #0]
 80431fa:	f022 0210 	bic.w	r2, r2, #16
 80431fe:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8043200:	897b      	ldrh	r3, [r7, #10]
 8043202:	4619      	mov	r1, r3
 8043204:	6878      	ldr	r0, [r7, #4]
 8043206:	f000 f875 	bl	80432f4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 804320a:	e059      	b.n	80432c0 <HAL_UART_IRQHandler+0x45c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 804320c:	69fb      	ldr	r3, [r7, #28]
 804320e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8043212:	2b00      	cmp	r3, #0
 8043214:	d00d      	beq.n	8043232 <HAL_UART_IRQHandler+0x3ce>
 8043216:	697b      	ldr	r3, [r7, #20]
 8043218:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 804321c:	2b00      	cmp	r3, #0
 804321e:	d008      	beq.n	8043232 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8043220:	687b      	ldr	r3, [r7, #4]
 8043222:	681b      	ldr	r3, [r3, #0]
 8043224:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8043228:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 804322a:	6878      	ldr	r0, [r7, #4]
 804322c:	f000 fe41 	bl	8043eb2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8043230:	e049      	b.n	80432c6 <HAL_UART_IRQHandler+0x462>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8043232:	69fb      	ldr	r3, [r7, #28]
 8043234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8043238:	2b00      	cmp	r3, #0
 804323a:	d012      	beq.n	8043262 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 804323c:	69bb      	ldr	r3, [r7, #24]
 804323e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8043242:	2b00      	cmp	r3, #0
 8043244:	d104      	bne.n	8043250 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8043246:	697b      	ldr	r3, [r7, #20]
 8043248:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 804324c:	2b00      	cmp	r3, #0
 804324e:	d008      	beq.n	8043262 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8043250:	687b      	ldr	r3, [r7, #4]
 8043252:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8043254:	2b00      	cmp	r3, #0
 8043256:	d035      	beq.n	80432c4 <HAL_UART_IRQHandler+0x460>
    {
      huart->TxISR(huart);
 8043258:	687b      	ldr	r3, [r7, #4]
 804325a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804325c:	6878      	ldr	r0, [r7, #4]
 804325e:	4798      	blx	r3
    }
    return;
 8043260:	e030      	b.n	80432c4 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8043262:	69fb      	ldr	r3, [r7, #28]
 8043264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8043268:	2b00      	cmp	r3, #0
 804326a:	d008      	beq.n	804327e <HAL_UART_IRQHandler+0x41a>
 804326c:	69bb      	ldr	r3, [r7, #24]
 804326e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8043272:	2b00      	cmp	r3, #0
 8043274:	d003      	beq.n	804327e <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8043276:	6878      	ldr	r0, [r7, #4]
 8043278:	f000 fe01 	bl	8043e7e <UART_EndTransmit_IT>
    return;
 804327c:	e023      	b.n	80432c6 <HAL_UART_IRQHandler+0x462>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 804327e:	69fb      	ldr	r3, [r7, #28]
 8043280:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8043284:	2b00      	cmp	r3, #0
 8043286:	d008      	beq.n	804329a <HAL_UART_IRQHandler+0x436>
 8043288:	69bb      	ldr	r3, [r7, #24]
 804328a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 804328e:	2b00      	cmp	r3, #0
 8043290:	d003      	beq.n	804329a <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8043292:	6878      	ldr	r0, [r7, #4]
 8043294:	f000 fe21 	bl	8043eda <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8043298:	e015      	b.n	80432c6 <HAL_UART_IRQHandler+0x462>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 804329a:	69fb      	ldr	r3, [r7, #28]
 804329c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80432a0:	2b00      	cmp	r3, #0
 80432a2:	d010      	beq.n	80432c6 <HAL_UART_IRQHandler+0x462>
 80432a4:	69bb      	ldr	r3, [r7, #24]
 80432a6:	2b00      	cmp	r3, #0
 80432a8:	da0d      	bge.n	80432c6 <HAL_UART_IRQHandler+0x462>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80432aa:	6878      	ldr	r0, [r7, #4]
 80432ac:	f000 fe0b 	bl	8043ec6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80432b0:	bf00      	nop
 80432b2:	e008      	b.n	80432c6 <HAL_UART_IRQHandler+0x462>
      return;
 80432b4:	bf00      	nop
 80432b6:	e006      	b.n	80432c6 <HAL_UART_IRQHandler+0x462>
    return;
 80432b8:	bf00      	nop
 80432ba:	e004      	b.n	80432c6 <HAL_UART_IRQHandler+0x462>
      return;
 80432bc:	bf00      	nop
 80432be:	e002      	b.n	80432c6 <HAL_UART_IRQHandler+0x462>
      return;
 80432c0:	bf00      	nop
 80432c2:	e000      	b.n	80432c6 <HAL_UART_IRQHandler+0x462>
    return;
 80432c4:	bf00      	nop
  }
}
 80432c6:	3720      	adds	r7, #32
 80432c8:	46bd      	mov	sp, r7
 80432ca:	bd80      	pop	{r7, pc}

080432cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80432cc:	b480      	push	{r7}
 80432ce:	b083      	sub	sp, #12
 80432d0:	af00      	add	r7, sp, #0
 80432d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80432d4:	bf00      	nop
 80432d6:	370c      	adds	r7, #12
 80432d8:	46bd      	mov	sp, r7
 80432da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80432de:	4770      	bx	lr

080432e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80432e0:	b480      	push	{r7}
 80432e2:	b083      	sub	sp, #12
 80432e4:	af00      	add	r7, sp, #0
 80432e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80432e8:	bf00      	nop
 80432ea:	370c      	adds	r7, #12
 80432ec:	46bd      	mov	sp, r7
 80432ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80432f2:	4770      	bx	lr

080432f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80432f4:	b480      	push	{r7}
 80432f6:	b083      	sub	sp, #12
 80432f8:	af00      	add	r7, sp, #0
 80432fa:	6078      	str	r0, [r7, #4]
 80432fc:	460b      	mov	r3, r1
 80432fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8043300:	bf00      	nop
 8043302:	370c      	adds	r7, #12
 8043304:	46bd      	mov	sp, r7
 8043306:	f85d 7b04 	ldr.w	r7, [sp], #4
 804330a:	4770      	bx	lr

0804330c <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 804330c:	b480      	push	{r7}
 804330e:	b085      	sub	sp, #20
 8043310:	af00      	add	r7, sp, #0
 8043312:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8043314:	687b      	ldr	r3, [r7, #4]
 8043316:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 804331a:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 804331c:	687b      	ldr	r3, [r7, #4]
 804331e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8043322:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8043324:	68fa      	ldr	r2, [r7, #12]
 8043326:	68bb      	ldr	r3, [r7, #8]
 8043328:	4313      	orrs	r3, r2
}
 804332a:	4618      	mov	r0, r3
 804332c:	3714      	adds	r7, #20
 804332e:	46bd      	mov	sp, r7
 8043330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043334:	4770      	bx	lr
	...

08043338 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8043338:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 804333c:	b088      	sub	sp, #32
 804333e:	af00      	add	r7, sp, #0
 8043340:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8043342:	2300      	movs	r3, #0
 8043344:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8043346:	687b      	ldr	r3, [r7, #4]
 8043348:	689a      	ldr	r2, [r3, #8]
 804334a:	687b      	ldr	r3, [r7, #4]
 804334c:	691b      	ldr	r3, [r3, #16]
 804334e:	431a      	orrs	r2, r3
 8043350:	687b      	ldr	r3, [r7, #4]
 8043352:	695b      	ldr	r3, [r3, #20]
 8043354:	431a      	orrs	r2, r3
 8043356:	687b      	ldr	r3, [r7, #4]
 8043358:	69db      	ldr	r3, [r3, #28]
 804335a:	4313      	orrs	r3, r2
 804335c:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 804335e:	687b      	ldr	r3, [r7, #4]
 8043360:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8043362:	69fa      	ldr	r2, [r7, #28]
 8043364:	4313      	orrs	r3, r2
 8043366:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8043368:	687b      	ldr	r3, [r7, #4]
 804336a:	681b      	ldr	r3, [r3, #0]
 804336c:	681a      	ldr	r2, [r3, #0]
 804336e:	4bb1      	ldr	r3, [pc, #708]	; (8043634 <UART_SetConfig+0x2fc>)
 8043370:	4013      	ands	r3, r2
 8043372:	687a      	ldr	r2, [r7, #4]
 8043374:	6812      	ldr	r2, [r2, #0]
 8043376:	69f9      	ldr	r1, [r7, #28]
 8043378:	430b      	orrs	r3, r1
 804337a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 804337c:	687b      	ldr	r3, [r7, #4]
 804337e:	681b      	ldr	r3, [r3, #0]
 8043380:	685b      	ldr	r3, [r3, #4]
 8043382:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8043386:	687b      	ldr	r3, [r7, #4]
 8043388:	68da      	ldr	r2, [r3, #12]
 804338a:	687b      	ldr	r3, [r7, #4]
 804338c:	681b      	ldr	r3, [r3, #0]
 804338e:	430a      	orrs	r2, r1
 8043390:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8043392:	687b      	ldr	r3, [r7, #4]
 8043394:	699b      	ldr	r3, [r3, #24]
 8043396:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8043398:	687b      	ldr	r3, [r7, #4]
 804339a:	681b      	ldr	r3, [r3, #0]
 804339c:	4aa6      	ldr	r2, [pc, #664]	; (8043638 <UART_SetConfig+0x300>)
 804339e:	4293      	cmp	r3, r2
 80433a0:	d004      	beq.n	80433ac <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80433a2:	687b      	ldr	r3, [r7, #4]
 80433a4:	6a1b      	ldr	r3, [r3, #32]
 80433a6:	69fa      	ldr	r2, [r7, #28]
 80433a8:	4313      	orrs	r3, r2
 80433aa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80433ac:	687b      	ldr	r3, [r7, #4]
 80433ae:	681b      	ldr	r3, [r3, #0]
 80433b0:	689b      	ldr	r3, [r3, #8]
 80433b2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80433b6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80433ba:	687a      	ldr	r2, [r7, #4]
 80433bc:	6812      	ldr	r2, [r2, #0]
 80433be:	69f9      	ldr	r1, [r7, #28]
 80433c0:	430b      	orrs	r3, r1
 80433c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80433c4:	687b      	ldr	r3, [r7, #4]
 80433c6:	681b      	ldr	r3, [r3, #0]
 80433c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80433ca:	f023 010f 	bic.w	r1, r3, #15
 80433ce:	687b      	ldr	r3, [r7, #4]
 80433d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80433d2:	687b      	ldr	r3, [r7, #4]
 80433d4:	681b      	ldr	r3, [r3, #0]
 80433d6:	430a      	orrs	r2, r1
 80433d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80433da:	687b      	ldr	r3, [r7, #4]
 80433dc:	681b      	ldr	r3, [r3, #0]
 80433de:	4a97      	ldr	r2, [pc, #604]	; (804363c <UART_SetConfig+0x304>)
 80433e0:	4293      	cmp	r3, r2
 80433e2:	d121      	bne.n	8043428 <UART_SetConfig+0xf0>
 80433e4:	4b96      	ldr	r3, [pc, #600]	; (8043640 <UART_SetConfig+0x308>)
 80433e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80433ea:	f003 0303 	and.w	r3, r3, #3
 80433ee:	2b03      	cmp	r3, #3
 80433f0:	d816      	bhi.n	8043420 <UART_SetConfig+0xe8>
 80433f2:	a201      	add	r2, pc, #4	; (adr r2, 80433f8 <UART_SetConfig+0xc0>)
 80433f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80433f8:	08043409 	.word	0x08043409
 80433fc:	08043415 	.word	0x08043415
 8043400:	0804340f 	.word	0x0804340f
 8043404:	0804341b 	.word	0x0804341b
 8043408:	2301      	movs	r3, #1
 804340a:	76fb      	strb	r3, [r7, #27]
 804340c:	e0e8      	b.n	80435e0 <UART_SetConfig+0x2a8>
 804340e:	2302      	movs	r3, #2
 8043410:	76fb      	strb	r3, [r7, #27]
 8043412:	e0e5      	b.n	80435e0 <UART_SetConfig+0x2a8>
 8043414:	2304      	movs	r3, #4
 8043416:	76fb      	strb	r3, [r7, #27]
 8043418:	e0e2      	b.n	80435e0 <UART_SetConfig+0x2a8>
 804341a:	2308      	movs	r3, #8
 804341c:	76fb      	strb	r3, [r7, #27]
 804341e:	e0df      	b.n	80435e0 <UART_SetConfig+0x2a8>
 8043420:	2310      	movs	r3, #16
 8043422:	76fb      	strb	r3, [r7, #27]
 8043424:	bf00      	nop
 8043426:	e0db      	b.n	80435e0 <UART_SetConfig+0x2a8>
 8043428:	687b      	ldr	r3, [r7, #4]
 804342a:	681b      	ldr	r3, [r3, #0]
 804342c:	4a85      	ldr	r2, [pc, #532]	; (8043644 <UART_SetConfig+0x30c>)
 804342e:	4293      	cmp	r3, r2
 8043430:	d134      	bne.n	804349c <UART_SetConfig+0x164>
 8043432:	4b83      	ldr	r3, [pc, #524]	; (8043640 <UART_SetConfig+0x308>)
 8043434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8043438:	f003 030c 	and.w	r3, r3, #12
 804343c:	2b0c      	cmp	r3, #12
 804343e:	d829      	bhi.n	8043494 <UART_SetConfig+0x15c>
 8043440:	a201      	add	r2, pc, #4	; (adr r2, 8043448 <UART_SetConfig+0x110>)
 8043442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8043446:	bf00      	nop
 8043448:	0804347d 	.word	0x0804347d
 804344c:	08043495 	.word	0x08043495
 8043450:	08043495 	.word	0x08043495
 8043454:	08043495 	.word	0x08043495
 8043458:	08043489 	.word	0x08043489
 804345c:	08043495 	.word	0x08043495
 8043460:	08043495 	.word	0x08043495
 8043464:	08043495 	.word	0x08043495
 8043468:	08043483 	.word	0x08043483
 804346c:	08043495 	.word	0x08043495
 8043470:	08043495 	.word	0x08043495
 8043474:	08043495 	.word	0x08043495
 8043478:	0804348f 	.word	0x0804348f
 804347c:	2300      	movs	r3, #0
 804347e:	76fb      	strb	r3, [r7, #27]
 8043480:	e0ae      	b.n	80435e0 <UART_SetConfig+0x2a8>
 8043482:	2302      	movs	r3, #2
 8043484:	76fb      	strb	r3, [r7, #27]
 8043486:	e0ab      	b.n	80435e0 <UART_SetConfig+0x2a8>
 8043488:	2304      	movs	r3, #4
 804348a:	76fb      	strb	r3, [r7, #27]
 804348c:	e0a8      	b.n	80435e0 <UART_SetConfig+0x2a8>
 804348e:	2308      	movs	r3, #8
 8043490:	76fb      	strb	r3, [r7, #27]
 8043492:	e0a5      	b.n	80435e0 <UART_SetConfig+0x2a8>
 8043494:	2310      	movs	r3, #16
 8043496:	76fb      	strb	r3, [r7, #27]
 8043498:	bf00      	nop
 804349a:	e0a1      	b.n	80435e0 <UART_SetConfig+0x2a8>
 804349c:	687b      	ldr	r3, [r7, #4]
 804349e:	681b      	ldr	r3, [r3, #0]
 80434a0:	4a69      	ldr	r2, [pc, #420]	; (8043648 <UART_SetConfig+0x310>)
 80434a2:	4293      	cmp	r3, r2
 80434a4:	d120      	bne.n	80434e8 <UART_SetConfig+0x1b0>
 80434a6:	4b66      	ldr	r3, [pc, #408]	; (8043640 <UART_SetConfig+0x308>)
 80434a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80434ac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80434b0:	2b10      	cmp	r3, #16
 80434b2:	d00f      	beq.n	80434d4 <UART_SetConfig+0x19c>
 80434b4:	2b10      	cmp	r3, #16
 80434b6:	d802      	bhi.n	80434be <UART_SetConfig+0x186>
 80434b8:	2b00      	cmp	r3, #0
 80434ba:	d005      	beq.n	80434c8 <UART_SetConfig+0x190>
 80434bc:	e010      	b.n	80434e0 <UART_SetConfig+0x1a8>
 80434be:	2b20      	cmp	r3, #32
 80434c0:	d005      	beq.n	80434ce <UART_SetConfig+0x196>
 80434c2:	2b30      	cmp	r3, #48	; 0x30
 80434c4:	d009      	beq.n	80434da <UART_SetConfig+0x1a2>
 80434c6:	e00b      	b.n	80434e0 <UART_SetConfig+0x1a8>
 80434c8:	2300      	movs	r3, #0
 80434ca:	76fb      	strb	r3, [r7, #27]
 80434cc:	e088      	b.n	80435e0 <UART_SetConfig+0x2a8>
 80434ce:	2302      	movs	r3, #2
 80434d0:	76fb      	strb	r3, [r7, #27]
 80434d2:	e085      	b.n	80435e0 <UART_SetConfig+0x2a8>
 80434d4:	2304      	movs	r3, #4
 80434d6:	76fb      	strb	r3, [r7, #27]
 80434d8:	e082      	b.n	80435e0 <UART_SetConfig+0x2a8>
 80434da:	2308      	movs	r3, #8
 80434dc:	76fb      	strb	r3, [r7, #27]
 80434de:	e07f      	b.n	80435e0 <UART_SetConfig+0x2a8>
 80434e0:	2310      	movs	r3, #16
 80434e2:	76fb      	strb	r3, [r7, #27]
 80434e4:	bf00      	nop
 80434e6:	e07b      	b.n	80435e0 <UART_SetConfig+0x2a8>
 80434e8:	687b      	ldr	r3, [r7, #4]
 80434ea:	681b      	ldr	r3, [r3, #0]
 80434ec:	4a57      	ldr	r2, [pc, #348]	; (804364c <UART_SetConfig+0x314>)
 80434ee:	4293      	cmp	r3, r2
 80434f0:	d120      	bne.n	8043534 <UART_SetConfig+0x1fc>
 80434f2:	4b53      	ldr	r3, [pc, #332]	; (8043640 <UART_SetConfig+0x308>)
 80434f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80434f8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80434fc:	2b40      	cmp	r3, #64	; 0x40
 80434fe:	d00f      	beq.n	8043520 <UART_SetConfig+0x1e8>
 8043500:	2b40      	cmp	r3, #64	; 0x40
 8043502:	d802      	bhi.n	804350a <UART_SetConfig+0x1d2>
 8043504:	2b00      	cmp	r3, #0
 8043506:	d005      	beq.n	8043514 <UART_SetConfig+0x1dc>
 8043508:	e010      	b.n	804352c <UART_SetConfig+0x1f4>
 804350a:	2b80      	cmp	r3, #128	; 0x80
 804350c:	d005      	beq.n	804351a <UART_SetConfig+0x1e2>
 804350e:	2bc0      	cmp	r3, #192	; 0xc0
 8043510:	d009      	beq.n	8043526 <UART_SetConfig+0x1ee>
 8043512:	e00b      	b.n	804352c <UART_SetConfig+0x1f4>
 8043514:	2300      	movs	r3, #0
 8043516:	76fb      	strb	r3, [r7, #27]
 8043518:	e062      	b.n	80435e0 <UART_SetConfig+0x2a8>
 804351a:	2302      	movs	r3, #2
 804351c:	76fb      	strb	r3, [r7, #27]
 804351e:	e05f      	b.n	80435e0 <UART_SetConfig+0x2a8>
 8043520:	2304      	movs	r3, #4
 8043522:	76fb      	strb	r3, [r7, #27]
 8043524:	e05c      	b.n	80435e0 <UART_SetConfig+0x2a8>
 8043526:	2308      	movs	r3, #8
 8043528:	76fb      	strb	r3, [r7, #27]
 804352a:	e059      	b.n	80435e0 <UART_SetConfig+0x2a8>
 804352c:	2310      	movs	r3, #16
 804352e:	76fb      	strb	r3, [r7, #27]
 8043530:	bf00      	nop
 8043532:	e055      	b.n	80435e0 <UART_SetConfig+0x2a8>
 8043534:	687b      	ldr	r3, [r7, #4]
 8043536:	681b      	ldr	r3, [r3, #0]
 8043538:	4a45      	ldr	r2, [pc, #276]	; (8043650 <UART_SetConfig+0x318>)
 804353a:	4293      	cmp	r3, r2
 804353c:	d124      	bne.n	8043588 <UART_SetConfig+0x250>
 804353e:	4b40      	ldr	r3, [pc, #256]	; (8043640 <UART_SetConfig+0x308>)
 8043540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8043544:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8043548:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 804354c:	d012      	beq.n	8043574 <UART_SetConfig+0x23c>
 804354e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8043552:	d802      	bhi.n	804355a <UART_SetConfig+0x222>
 8043554:	2b00      	cmp	r3, #0
 8043556:	d007      	beq.n	8043568 <UART_SetConfig+0x230>
 8043558:	e012      	b.n	8043580 <UART_SetConfig+0x248>
 804355a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 804355e:	d006      	beq.n	804356e <UART_SetConfig+0x236>
 8043560:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8043564:	d009      	beq.n	804357a <UART_SetConfig+0x242>
 8043566:	e00b      	b.n	8043580 <UART_SetConfig+0x248>
 8043568:	2300      	movs	r3, #0
 804356a:	76fb      	strb	r3, [r7, #27]
 804356c:	e038      	b.n	80435e0 <UART_SetConfig+0x2a8>
 804356e:	2302      	movs	r3, #2
 8043570:	76fb      	strb	r3, [r7, #27]
 8043572:	e035      	b.n	80435e0 <UART_SetConfig+0x2a8>
 8043574:	2304      	movs	r3, #4
 8043576:	76fb      	strb	r3, [r7, #27]
 8043578:	e032      	b.n	80435e0 <UART_SetConfig+0x2a8>
 804357a:	2308      	movs	r3, #8
 804357c:	76fb      	strb	r3, [r7, #27]
 804357e:	e02f      	b.n	80435e0 <UART_SetConfig+0x2a8>
 8043580:	2310      	movs	r3, #16
 8043582:	76fb      	strb	r3, [r7, #27]
 8043584:	bf00      	nop
 8043586:	e02b      	b.n	80435e0 <UART_SetConfig+0x2a8>
 8043588:	687b      	ldr	r3, [r7, #4]
 804358a:	681b      	ldr	r3, [r3, #0]
 804358c:	4a2a      	ldr	r2, [pc, #168]	; (8043638 <UART_SetConfig+0x300>)
 804358e:	4293      	cmp	r3, r2
 8043590:	d124      	bne.n	80435dc <UART_SetConfig+0x2a4>
 8043592:	4b2b      	ldr	r3, [pc, #172]	; (8043640 <UART_SetConfig+0x308>)
 8043594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8043598:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 804359c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80435a0:	d012      	beq.n	80435c8 <UART_SetConfig+0x290>
 80435a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80435a6:	d802      	bhi.n	80435ae <UART_SetConfig+0x276>
 80435a8:	2b00      	cmp	r3, #0
 80435aa:	d007      	beq.n	80435bc <UART_SetConfig+0x284>
 80435ac:	e012      	b.n	80435d4 <UART_SetConfig+0x29c>
 80435ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80435b2:	d006      	beq.n	80435c2 <UART_SetConfig+0x28a>
 80435b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80435b8:	d009      	beq.n	80435ce <UART_SetConfig+0x296>
 80435ba:	e00b      	b.n	80435d4 <UART_SetConfig+0x29c>
 80435bc:	2300      	movs	r3, #0
 80435be:	76fb      	strb	r3, [r7, #27]
 80435c0:	e00e      	b.n	80435e0 <UART_SetConfig+0x2a8>
 80435c2:	2302      	movs	r3, #2
 80435c4:	76fb      	strb	r3, [r7, #27]
 80435c6:	e00b      	b.n	80435e0 <UART_SetConfig+0x2a8>
 80435c8:	2304      	movs	r3, #4
 80435ca:	76fb      	strb	r3, [r7, #27]
 80435cc:	e008      	b.n	80435e0 <UART_SetConfig+0x2a8>
 80435ce:	2308      	movs	r3, #8
 80435d0:	76fb      	strb	r3, [r7, #27]
 80435d2:	e005      	b.n	80435e0 <UART_SetConfig+0x2a8>
 80435d4:	2310      	movs	r3, #16
 80435d6:	76fb      	strb	r3, [r7, #27]
 80435d8:	bf00      	nop
 80435da:	e001      	b.n	80435e0 <UART_SetConfig+0x2a8>
 80435dc:	2310      	movs	r3, #16
 80435de:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80435e0:	687b      	ldr	r3, [r7, #4]
 80435e2:	681b      	ldr	r3, [r3, #0]
 80435e4:	4a14      	ldr	r2, [pc, #80]	; (8043638 <UART_SetConfig+0x300>)
 80435e6:	4293      	cmp	r3, r2
 80435e8:	f040 80a5 	bne.w	8043736 <UART_SetConfig+0x3fe>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80435ec:	7efb      	ldrb	r3, [r7, #27]
 80435ee:	2b08      	cmp	r3, #8
 80435f0:	d83a      	bhi.n	8043668 <UART_SetConfig+0x330>
 80435f2:	a201      	add	r2, pc, #4	; (adr r2, 80435f8 <UART_SetConfig+0x2c0>)
 80435f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80435f8:	0804361d 	.word	0x0804361d
 80435fc:	08043625 	.word	0x08043625
 8043600:	0804362d 	.word	0x0804362d
 8043604:	08043669 	.word	0x08043669
 8043608:	08043659 	.word	0x08043659
 804360c:	08043669 	.word	0x08043669
 8043610:	08043669 	.word	0x08043669
 8043614:	08043669 	.word	0x08043669
 8043618:	08043661 	.word	0x08043661
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 804361c:	f7fe fe52 	bl	80422c4 <HAL_RCC_GetPCLK1Freq>
 8043620:	6178      	str	r0, [r7, #20]
        break;
 8043622:	e026      	b.n	8043672 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8043624:	f7fe fe62 	bl	80422ec <HAL_RCC_GetPCLK2Freq>
 8043628:	6178      	str	r0, [r7, #20]
        break;
 804362a:	e022      	b.n	8043672 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 804362c:	4b09      	ldr	r3, [pc, #36]	; (8043654 <UART_SetConfig+0x31c>)
 804362e:	617b      	str	r3, [r7, #20]
        break;
 8043630:	e01f      	b.n	8043672 <UART_SetConfig+0x33a>
 8043632:	bf00      	nop
 8043634:	cfff69f3 	.word	0xcfff69f3
 8043638:	40008000 	.word	0x40008000
 804363c:	40013800 	.word	0x40013800
 8043640:	40021000 	.word	0x40021000
 8043644:	40004400 	.word	0x40004400
 8043648:	40004800 	.word	0x40004800
 804364c:	40004c00 	.word	0x40004c00
 8043650:	40005000 	.word	0x40005000
 8043654:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8043658:	f7fe fd84 	bl	8042164 <HAL_RCC_GetSysClockFreq>
 804365c:	6178      	str	r0, [r7, #20]
        break;
 804365e:	e008      	b.n	8043672 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8043660:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8043664:	617b      	str	r3, [r7, #20]
        break;
 8043666:	e004      	b.n	8043672 <UART_SetConfig+0x33a>
      default:
        pclk = 0U;
 8043668:	2300      	movs	r3, #0
 804366a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 804366c:	2301      	movs	r3, #1
 804366e:	76bb      	strb	r3, [r7, #26]
        break;
 8043670:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8043672:	697b      	ldr	r3, [r7, #20]
 8043674:	2b00      	cmp	r3, #0
 8043676:	f000 811d 	beq.w	80438b4 <UART_SetConfig+0x57c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 804367a:	687b      	ldr	r3, [r7, #4]
 804367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804367e:	4a97      	ldr	r2, [pc, #604]	; (80438dc <UART_SetConfig+0x5a4>)
 8043680:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8043684:	461a      	mov	r2, r3
 8043686:	697b      	ldr	r3, [r7, #20]
 8043688:	fbb3 f3f2 	udiv	r3, r3, r2
 804368c:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 804368e:	687b      	ldr	r3, [r7, #4]
 8043690:	685a      	ldr	r2, [r3, #4]
 8043692:	4613      	mov	r3, r2
 8043694:	005b      	lsls	r3, r3, #1
 8043696:	4413      	add	r3, r2
 8043698:	68ba      	ldr	r2, [r7, #8]
 804369a:	429a      	cmp	r2, r3
 804369c:	d305      	bcc.n	80436aa <UART_SetConfig+0x372>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 804369e:	687b      	ldr	r3, [r7, #4]
 80436a0:	685b      	ldr	r3, [r3, #4]
 80436a2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80436a4:	68ba      	ldr	r2, [r7, #8]
 80436a6:	429a      	cmp	r2, r3
 80436a8:	d902      	bls.n	80436b0 <UART_SetConfig+0x378>
      {
        ret = HAL_ERROR;
 80436aa:	2301      	movs	r3, #1
 80436ac:	76bb      	strb	r3, [r7, #26]
 80436ae:	e101      	b.n	80438b4 <UART_SetConfig+0x57c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80436b0:	697b      	ldr	r3, [r7, #20]
 80436b2:	4618      	mov	r0, r3
 80436b4:	f04f 0100 	mov.w	r1, #0
 80436b8:	687b      	ldr	r3, [r7, #4]
 80436ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80436bc:	4a87      	ldr	r2, [pc, #540]	; (80438dc <UART_SetConfig+0x5a4>)
 80436be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80436c2:	b29b      	uxth	r3, r3
 80436c4:	f04f 0400 	mov.w	r4, #0
 80436c8:	461a      	mov	r2, r3
 80436ca:	4623      	mov	r3, r4
 80436cc:	f7fd f9fa 	bl	8040ac4 <__aeabi_uldivmod>
 80436d0:	4603      	mov	r3, r0
 80436d2:	460c      	mov	r4, r1
 80436d4:	4619      	mov	r1, r3
 80436d6:	4622      	mov	r2, r4
 80436d8:	f04f 0300 	mov.w	r3, #0
 80436dc:	f04f 0400 	mov.w	r4, #0
 80436e0:	0214      	lsls	r4, r2, #8
 80436e2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80436e6:	020b      	lsls	r3, r1, #8
 80436e8:	687a      	ldr	r2, [r7, #4]
 80436ea:	6852      	ldr	r2, [r2, #4]
 80436ec:	0852      	lsrs	r2, r2, #1
 80436ee:	4611      	mov	r1, r2
 80436f0:	f04f 0200 	mov.w	r2, #0
 80436f4:	eb13 0b01 	adds.w	fp, r3, r1
 80436f8:	eb44 0c02 	adc.w	ip, r4, r2
 80436fc:	4658      	mov	r0, fp
 80436fe:	4661      	mov	r1, ip
 8043700:	687b      	ldr	r3, [r7, #4]
 8043702:	685b      	ldr	r3, [r3, #4]
 8043704:	f04f 0400 	mov.w	r4, #0
 8043708:	461a      	mov	r2, r3
 804370a:	4623      	mov	r3, r4
 804370c:	f7fd f9da 	bl	8040ac4 <__aeabi_uldivmod>
 8043710:	4603      	mov	r3, r0
 8043712:	460c      	mov	r4, r1
 8043714:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8043716:	693b      	ldr	r3, [r7, #16]
 8043718:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 804371c:	d308      	bcc.n	8043730 <UART_SetConfig+0x3f8>
 804371e:	693b      	ldr	r3, [r7, #16]
 8043720:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8043724:	d204      	bcs.n	8043730 <UART_SetConfig+0x3f8>
        {
          huart->Instance->BRR = usartdiv;
 8043726:	687b      	ldr	r3, [r7, #4]
 8043728:	681b      	ldr	r3, [r3, #0]
 804372a:	693a      	ldr	r2, [r7, #16]
 804372c:	60da      	str	r2, [r3, #12]
 804372e:	e0c1      	b.n	80438b4 <UART_SetConfig+0x57c>
        }
        else
        {
          ret = HAL_ERROR;
 8043730:	2301      	movs	r3, #1
 8043732:	76bb      	strb	r3, [r7, #26]
 8043734:	e0be      	b.n	80438b4 <UART_SetConfig+0x57c>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8043736:	687b      	ldr	r3, [r7, #4]
 8043738:	69db      	ldr	r3, [r3, #28]
 804373a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 804373e:	d164      	bne.n	804380a <UART_SetConfig+0x4d2>
  {
    switch (clocksource)
 8043740:	7efb      	ldrb	r3, [r7, #27]
 8043742:	2b08      	cmp	r3, #8
 8043744:	d827      	bhi.n	8043796 <UART_SetConfig+0x45e>
 8043746:	a201      	add	r2, pc, #4	; (adr r2, 804374c <UART_SetConfig+0x414>)
 8043748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804374c:	08043771 	.word	0x08043771
 8043750:	08043779 	.word	0x08043779
 8043754:	08043781 	.word	0x08043781
 8043758:	08043797 	.word	0x08043797
 804375c:	08043787 	.word	0x08043787
 8043760:	08043797 	.word	0x08043797
 8043764:	08043797 	.word	0x08043797
 8043768:	08043797 	.word	0x08043797
 804376c:	0804378f 	.word	0x0804378f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8043770:	f7fe fda8 	bl	80422c4 <HAL_RCC_GetPCLK1Freq>
 8043774:	6178      	str	r0, [r7, #20]
        break;
 8043776:	e013      	b.n	80437a0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8043778:	f7fe fdb8 	bl	80422ec <HAL_RCC_GetPCLK2Freq>
 804377c:	6178      	str	r0, [r7, #20]
        break;
 804377e:	e00f      	b.n	80437a0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8043780:	4b57      	ldr	r3, [pc, #348]	; (80438e0 <UART_SetConfig+0x5a8>)
 8043782:	617b      	str	r3, [r7, #20]
        break;
 8043784:	e00c      	b.n	80437a0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8043786:	f7fe fced 	bl	8042164 <HAL_RCC_GetSysClockFreq>
 804378a:	6178      	str	r0, [r7, #20]
        break;
 804378c:	e008      	b.n	80437a0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 804378e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8043792:	617b      	str	r3, [r7, #20]
        break;
 8043794:	e004      	b.n	80437a0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8043796:	2300      	movs	r3, #0
 8043798:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 804379a:	2301      	movs	r3, #1
 804379c:	76bb      	strb	r3, [r7, #26]
        break;
 804379e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80437a0:	697b      	ldr	r3, [r7, #20]
 80437a2:	2b00      	cmp	r3, #0
 80437a4:	f000 8086 	beq.w	80438b4 <UART_SetConfig+0x57c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80437a8:	687b      	ldr	r3, [r7, #4]
 80437aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80437ac:	4a4b      	ldr	r2, [pc, #300]	; (80438dc <UART_SetConfig+0x5a4>)
 80437ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80437b2:	461a      	mov	r2, r3
 80437b4:	697b      	ldr	r3, [r7, #20]
 80437b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80437ba:	005a      	lsls	r2, r3, #1
 80437bc:	687b      	ldr	r3, [r7, #4]
 80437be:	685b      	ldr	r3, [r3, #4]
 80437c0:	085b      	lsrs	r3, r3, #1
 80437c2:	441a      	add	r2, r3
 80437c4:	687b      	ldr	r3, [r7, #4]
 80437c6:	685b      	ldr	r3, [r3, #4]
 80437c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80437cc:	b29b      	uxth	r3, r3
 80437ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80437d0:	693b      	ldr	r3, [r7, #16]
 80437d2:	2b0f      	cmp	r3, #15
 80437d4:	d916      	bls.n	8043804 <UART_SetConfig+0x4cc>
 80437d6:	693b      	ldr	r3, [r7, #16]
 80437d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80437dc:	d212      	bcs.n	8043804 <UART_SetConfig+0x4cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80437de:	693b      	ldr	r3, [r7, #16]
 80437e0:	b29b      	uxth	r3, r3
 80437e2:	f023 030f 	bic.w	r3, r3, #15
 80437e6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80437e8:	693b      	ldr	r3, [r7, #16]
 80437ea:	085b      	lsrs	r3, r3, #1
 80437ec:	b29b      	uxth	r3, r3
 80437ee:	f003 0307 	and.w	r3, r3, #7
 80437f2:	b29a      	uxth	r2, r3
 80437f4:	89fb      	ldrh	r3, [r7, #14]
 80437f6:	4313      	orrs	r3, r2
 80437f8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80437fa:	687b      	ldr	r3, [r7, #4]
 80437fc:	681b      	ldr	r3, [r3, #0]
 80437fe:	89fa      	ldrh	r2, [r7, #14]
 8043800:	60da      	str	r2, [r3, #12]
 8043802:	e057      	b.n	80438b4 <UART_SetConfig+0x57c>
      }
      else
      {
        ret = HAL_ERROR;
 8043804:	2301      	movs	r3, #1
 8043806:	76bb      	strb	r3, [r7, #26]
 8043808:	e054      	b.n	80438b4 <UART_SetConfig+0x57c>
      }
    }
  }
  else
  {
    switch (clocksource)
 804380a:	7efb      	ldrb	r3, [r7, #27]
 804380c:	2b08      	cmp	r3, #8
 804380e:	d828      	bhi.n	8043862 <UART_SetConfig+0x52a>
 8043810:	a201      	add	r2, pc, #4	; (adr r2, 8043818 <UART_SetConfig+0x4e0>)
 8043812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8043816:	bf00      	nop
 8043818:	0804383d 	.word	0x0804383d
 804381c:	08043845 	.word	0x08043845
 8043820:	0804384d 	.word	0x0804384d
 8043824:	08043863 	.word	0x08043863
 8043828:	08043853 	.word	0x08043853
 804382c:	08043863 	.word	0x08043863
 8043830:	08043863 	.word	0x08043863
 8043834:	08043863 	.word	0x08043863
 8043838:	0804385b 	.word	0x0804385b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 804383c:	f7fe fd42 	bl	80422c4 <HAL_RCC_GetPCLK1Freq>
 8043840:	6178      	str	r0, [r7, #20]
        break;
 8043842:	e013      	b.n	804386c <UART_SetConfig+0x534>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8043844:	f7fe fd52 	bl	80422ec <HAL_RCC_GetPCLK2Freq>
 8043848:	6178      	str	r0, [r7, #20]
        break;
 804384a:	e00f      	b.n	804386c <UART_SetConfig+0x534>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 804384c:	4b24      	ldr	r3, [pc, #144]	; (80438e0 <UART_SetConfig+0x5a8>)
 804384e:	617b      	str	r3, [r7, #20]
        break;
 8043850:	e00c      	b.n	804386c <UART_SetConfig+0x534>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8043852:	f7fe fc87 	bl	8042164 <HAL_RCC_GetSysClockFreq>
 8043856:	6178      	str	r0, [r7, #20]
        break;
 8043858:	e008      	b.n	804386c <UART_SetConfig+0x534>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 804385a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 804385e:	617b      	str	r3, [r7, #20]
        break;
 8043860:	e004      	b.n	804386c <UART_SetConfig+0x534>
      default:
        pclk = 0U;
 8043862:	2300      	movs	r3, #0
 8043864:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8043866:	2301      	movs	r3, #1
 8043868:	76bb      	strb	r3, [r7, #26]
        break;
 804386a:	bf00      	nop
    }

    if (pclk != 0U)
 804386c:	697b      	ldr	r3, [r7, #20]
 804386e:	2b00      	cmp	r3, #0
 8043870:	d020      	beq.n	80438b4 <UART_SetConfig+0x57c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8043872:	687b      	ldr	r3, [r7, #4]
 8043874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043876:	4a19      	ldr	r2, [pc, #100]	; (80438dc <UART_SetConfig+0x5a4>)
 8043878:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 804387c:	461a      	mov	r2, r3
 804387e:	697b      	ldr	r3, [r7, #20]
 8043880:	fbb3 f2f2 	udiv	r2, r3, r2
 8043884:	687b      	ldr	r3, [r7, #4]
 8043886:	685b      	ldr	r3, [r3, #4]
 8043888:	085b      	lsrs	r3, r3, #1
 804388a:	441a      	add	r2, r3
 804388c:	687b      	ldr	r3, [r7, #4]
 804388e:	685b      	ldr	r3, [r3, #4]
 8043890:	fbb2 f3f3 	udiv	r3, r2, r3
 8043894:	b29b      	uxth	r3, r3
 8043896:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8043898:	693b      	ldr	r3, [r7, #16]
 804389a:	2b0f      	cmp	r3, #15
 804389c:	d908      	bls.n	80438b0 <UART_SetConfig+0x578>
 804389e:	693b      	ldr	r3, [r7, #16]
 80438a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80438a4:	d204      	bcs.n	80438b0 <UART_SetConfig+0x578>
      {
        huart->Instance->BRR = usartdiv;
 80438a6:	687b      	ldr	r3, [r7, #4]
 80438a8:	681b      	ldr	r3, [r3, #0]
 80438aa:	693a      	ldr	r2, [r7, #16]
 80438ac:	60da      	str	r2, [r3, #12]
 80438ae:	e001      	b.n	80438b4 <UART_SetConfig+0x57c>
      }
      else
      {
        ret = HAL_ERROR;
 80438b0:	2301      	movs	r3, #1
 80438b2:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80438b4:	687b      	ldr	r3, [r7, #4]
 80438b6:	2201      	movs	r2, #1
 80438b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80438bc:	687b      	ldr	r3, [r7, #4]
 80438be:	2201      	movs	r2, #1
 80438c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80438c4:	687b      	ldr	r3, [r7, #4]
 80438c6:	2200      	movs	r2, #0
 80438c8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80438ca:	687b      	ldr	r3, [r7, #4]
 80438cc:	2200      	movs	r2, #0
 80438ce:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80438d0:	7ebb      	ldrb	r3, [r7, #26]
}
 80438d2:	4618      	mov	r0, r3
 80438d4:	3720      	adds	r7, #32
 80438d6:	46bd      	mov	sp, r7
 80438d8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80438dc:	08044ed8 	.word	0x08044ed8
 80438e0:	00f42400 	.word	0x00f42400

080438e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80438e4:	b480      	push	{r7}
 80438e6:	b083      	sub	sp, #12
 80438e8:	af00      	add	r7, sp, #0
 80438ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80438ec:	687b      	ldr	r3, [r7, #4]
 80438ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80438f0:	f003 0301 	and.w	r3, r3, #1
 80438f4:	2b00      	cmp	r3, #0
 80438f6:	d00a      	beq.n	804390e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80438f8:	687b      	ldr	r3, [r7, #4]
 80438fa:	681b      	ldr	r3, [r3, #0]
 80438fc:	685b      	ldr	r3, [r3, #4]
 80438fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8043902:	687b      	ldr	r3, [r7, #4]
 8043904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8043906:	687b      	ldr	r3, [r7, #4]
 8043908:	681b      	ldr	r3, [r3, #0]
 804390a:	430a      	orrs	r2, r1
 804390c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 804390e:	687b      	ldr	r3, [r7, #4]
 8043910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043912:	f003 0302 	and.w	r3, r3, #2
 8043916:	2b00      	cmp	r3, #0
 8043918:	d00a      	beq.n	8043930 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 804391a:	687b      	ldr	r3, [r7, #4]
 804391c:	681b      	ldr	r3, [r3, #0]
 804391e:	685b      	ldr	r3, [r3, #4]
 8043920:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8043924:	687b      	ldr	r3, [r7, #4]
 8043926:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8043928:	687b      	ldr	r3, [r7, #4]
 804392a:	681b      	ldr	r3, [r3, #0]
 804392c:	430a      	orrs	r2, r1
 804392e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8043930:	687b      	ldr	r3, [r7, #4]
 8043932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043934:	f003 0304 	and.w	r3, r3, #4
 8043938:	2b00      	cmp	r3, #0
 804393a:	d00a      	beq.n	8043952 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 804393c:	687b      	ldr	r3, [r7, #4]
 804393e:	681b      	ldr	r3, [r3, #0]
 8043940:	685b      	ldr	r3, [r3, #4]
 8043942:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8043946:	687b      	ldr	r3, [r7, #4]
 8043948:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 804394a:	687b      	ldr	r3, [r7, #4]
 804394c:	681b      	ldr	r3, [r3, #0]
 804394e:	430a      	orrs	r2, r1
 8043950:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8043952:	687b      	ldr	r3, [r7, #4]
 8043954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043956:	f003 0308 	and.w	r3, r3, #8
 804395a:	2b00      	cmp	r3, #0
 804395c:	d00a      	beq.n	8043974 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 804395e:	687b      	ldr	r3, [r7, #4]
 8043960:	681b      	ldr	r3, [r3, #0]
 8043962:	685b      	ldr	r3, [r3, #4]
 8043964:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8043968:	687b      	ldr	r3, [r7, #4]
 804396a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 804396c:	687b      	ldr	r3, [r7, #4]
 804396e:	681b      	ldr	r3, [r3, #0]
 8043970:	430a      	orrs	r2, r1
 8043972:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8043974:	687b      	ldr	r3, [r7, #4]
 8043976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043978:	f003 0310 	and.w	r3, r3, #16
 804397c:	2b00      	cmp	r3, #0
 804397e:	d00a      	beq.n	8043996 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8043980:	687b      	ldr	r3, [r7, #4]
 8043982:	681b      	ldr	r3, [r3, #0]
 8043984:	689b      	ldr	r3, [r3, #8]
 8043986:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 804398a:	687b      	ldr	r3, [r7, #4]
 804398c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 804398e:	687b      	ldr	r3, [r7, #4]
 8043990:	681b      	ldr	r3, [r3, #0]
 8043992:	430a      	orrs	r2, r1
 8043994:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8043996:	687b      	ldr	r3, [r7, #4]
 8043998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804399a:	f003 0320 	and.w	r3, r3, #32
 804399e:	2b00      	cmp	r3, #0
 80439a0:	d00a      	beq.n	80439b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80439a2:	687b      	ldr	r3, [r7, #4]
 80439a4:	681b      	ldr	r3, [r3, #0]
 80439a6:	689b      	ldr	r3, [r3, #8]
 80439a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80439ac:	687b      	ldr	r3, [r7, #4]
 80439ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80439b0:	687b      	ldr	r3, [r7, #4]
 80439b2:	681b      	ldr	r3, [r3, #0]
 80439b4:	430a      	orrs	r2, r1
 80439b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80439b8:	687b      	ldr	r3, [r7, #4]
 80439ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80439bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80439c0:	2b00      	cmp	r3, #0
 80439c2:	d01a      	beq.n	80439fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80439c4:	687b      	ldr	r3, [r7, #4]
 80439c6:	681b      	ldr	r3, [r3, #0]
 80439c8:	685b      	ldr	r3, [r3, #4]
 80439ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80439ce:	687b      	ldr	r3, [r7, #4]
 80439d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80439d2:	687b      	ldr	r3, [r7, #4]
 80439d4:	681b      	ldr	r3, [r3, #0]
 80439d6:	430a      	orrs	r2, r1
 80439d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80439da:	687b      	ldr	r3, [r7, #4]
 80439dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80439de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80439e2:	d10a      	bne.n	80439fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80439e4:	687b      	ldr	r3, [r7, #4]
 80439e6:	681b      	ldr	r3, [r3, #0]
 80439e8:	685b      	ldr	r3, [r3, #4]
 80439ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80439ee:	687b      	ldr	r3, [r7, #4]
 80439f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80439f2:	687b      	ldr	r3, [r7, #4]
 80439f4:	681b      	ldr	r3, [r3, #0]
 80439f6:	430a      	orrs	r2, r1
 80439f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80439fa:	687b      	ldr	r3, [r7, #4]
 80439fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80439fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8043a02:	2b00      	cmp	r3, #0
 8043a04:	d00a      	beq.n	8043a1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8043a06:	687b      	ldr	r3, [r7, #4]
 8043a08:	681b      	ldr	r3, [r3, #0]
 8043a0a:	685b      	ldr	r3, [r3, #4]
 8043a0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8043a10:	687b      	ldr	r3, [r7, #4]
 8043a12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8043a14:	687b      	ldr	r3, [r7, #4]
 8043a16:	681b      	ldr	r3, [r3, #0]
 8043a18:	430a      	orrs	r2, r1
 8043a1a:	605a      	str	r2, [r3, #4]
  }
}
 8043a1c:	bf00      	nop
 8043a1e:	370c      	adds	r7, #12
 8043a20:	46bd      	mov	sp, r7
 8043a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043a26:	4770      	bx	lr

08043a28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8043a28:	b580      	push	{r7, lr}
 8043a2a:	b086      	sub	sp, #24
 8043a2c:	af02      	add	r7, sp, #8
 8043a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8043a30:	687b      	ldr	r3, [r7, #4]
 8043a32:	2200      	movs	r2, #0
 8043a34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8043a38:	f7fe f83e 	bl	8041ab8 <HAL_GetTick>
 8043a3c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8043a3e:	687b      	ldr	r3, [r7, #4]
 8043a40:	681b      	ldr	r3, [r3, #0]
 8043a42:	681b      	ldr	r3, [r3, #0]
 8043a44:	f003 0308 	and.w	r3, r3, #8
 8043a48:	2b08      	cmp	r3, #8
 8043a4a:	d10e      	bne.n	8043a6a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8043a4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8043a50:	9300      	str	r3, [sp, #0]
 8043a52:	68fb      	ldr	r3, [r7, #12]
 8043a54:	2200      	movs	r2, #0
 8043a56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8043a5a:	6878      	ldr	r0, [r7, #4]
 8043a5c:	f000 f82f 	bl	8043abe <UART_WaitOnFlagUntilTimeout>
 8043a60:	4603      	mov	r3, r0
 8043a62:	2b00      	cmp	r3, #0
 8043a64:	d001      	beq.n	8043a6a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8043a66:	2303      	movs	r3, #3
 8043a68:	e025      	b.n	8043ab6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8043a6a:	687b      	ldr	r3, [r7, #4]
 8043a6c:	681b      	ldr	r3, [r3, #0]
 8043a6e:	681b      	ldr	r3, [r3, #0]
 8043a70:	f003 0304 	and.w	r3, r3, #4
 8043a74:	2b04      	cmp	r3, #4
 8043a76:	d10e      	bne.n	8043a96 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8043a78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8043a7c:	9300      	str	r3, [sp, #0]
 8043a7e:	68fb      	ldr	r3, [r7, #12]
 8043a80:	2200      	movs	r2, #0
 8043a82:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8043a86:	6878      	ldr	r0, [r7, #4]
 8043a88:	f000 f819 	bl	8043abe <UART_WaitOnFlagUntilTimeout>
 8043a8c:	4603      	mov	r3, r0
 8043a8e:	2b00      	cmp	r3, #0
 8043a90:	d001      	beq.n	8043a96 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8043a92:	2303      	movs	r3, #3
 8043a94:	e00f      	b.n	8043ab6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8043a96:	687b      	ldr	r3, [r7, #4]
 8043a98:	2220      	movs	r2, #32
 8043a9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8043a9e:	687b      	ldr	r3, [r7, #4]
 8043aa0:	2220      	movs	r2, #32
 8043aa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8043aa6:	687b      	ldr	r3, [r7, #4]
 8043aa8:	2200      	movs	r2, #0
 8043aaa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8043aac:	687b      	ldr	r3, [r7, #4]
 8043aae:	2200      	movs	r2, #0
 8043ab0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8043ab4:	2300      	movs	r3, #0
}
 8043ab6:	4618      	mov	r0, r3
 8043ab8:	3710      	adds	r7, #16
 8043aba:	46bd      	mov	sp, r7
 8043abc:	bd80      	pop	{r7, pc}

08043abe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8043abe:	b580      	push	{r7, lr}
 8043ac0:	b084      	sub	sp, #16
 8043ac2:	af00      	add	r7, sp, #0
 8043ac4:	60f8      	str	r0, [r7, #12]
 8043ac6:	60b9      	str	r1, [r7, #8]
 8043ac8:	603b      	str	r3, [r7, #0]
 8043aca:	4613      	mov	r3, r2
 8043acc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8043ace:	e062      	b.n	8043b96 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8043ad0:	69bb      	ldr	r3, [r7, #24]
 8043ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8043ad6:	d05e      	beq.n	8043b96 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8043ad8:	f7fd ffee 	bl	8041ab8 <HAL_GetTick>
 8043adc:	4602      	mov	r2, r0
 8043ade:	683b      	ldr	r3, [r7, #0]
 8043ae0:	1ad3      	subs	r3, r2, r3
 8043ae2:	69ba      	ldr	r2, [r7, #24]
 8043ae4:	429a      	cmp	r2, r3
 8043ae6:	d302      	bcc.n	8043aee <UART_WaitOnFlagUntilTimeout+0x30>
 8043ae8:	69bb      	ldr	r3, [r7, #24]
 8043aea:	2b00      	cmp	r3, #0
 8043aec:	d11d      	bne.n	8043b2a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8043aee:	68fb      	ldr	r3, [r7, #12]
 8043af0:	681b      	ldr	r3, [r3, #0]
 8043af2:	681a      	ldr	r2, [r3, #0]
 8043af4:	68fb      	ldr	r3, [r7, #12]
 8043af6:	681b      	ldr	r3, [r3, #0]
 8043af8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8043afc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8043afe:	68fb      	ldr	r3, [r7, #12]
 8043b00:	681b      	ldr	r3, [r3, #0]
 8043b02:	689a      	ldr	r2, [r3, #8]
 8043b04:	68fb      	ldr	r3, [r7, #12]
 8043b06:	681b      	ldr	r3, [r3, #0]
 8043b08:	f022 0201 	bic.w	r2, r2, #1
 8043b0c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8043b0e:	68fb      	ldr	r3, [r7, #12]
 8043b10:	2220      	movs	r2, #32
 8043b12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8043b16:	68fb      	ldr	r3, [r7, #12]
 8043b18:	2220      	movs	r2, #32
 8043b1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8043b1e:	68fb      	ldr	r3, [r7, #12]
 8043b20:	2200      	movs	r2, #0
 8043b22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8043b26:	2303      	movs	r3, #3
 8043b28:	e045      	b.n	8043bb6 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8043b2a:	68fb      	ldr	r3, [r7, #12]
 8043b2c:	681b      	ldr	r3, [r3, #0]
 8043b2e:	681b      	ldr	r3, [r3, #0]
 8043b30:	f003 0304 	and.w	r3, r3, #4
 8043b34:	2b00      	cmp	r3, #0
 8043b36:	d02e      	beq.n	8043b96 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8043b38:	68fb      	ldr	r3, [r7, #12]
 8043b3a:	681b      	ldr	r3, [r3, #0]
 8043b3c:	69db      	ldr	r3, [r3, #28]
 8043b3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8043b42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8043b46:	d126      	bne.n	8043b96 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8043b48:	68fb      	ldr	r3, [r7, #12]
 8043b4a:	681b      	ldr	r3, [r3, #0]
 8043b4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8043b50:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8043b52:	68fb      	ldr	r3, [r7, #12]
 8043b54:	681b      	ldr	r3, [r3, #0]
 8043b56:	681a      	ldr	r2, [r3, #0]
 8043b58:	68fb      	ldr	r3, [r7, #12]
 8043b5a:	681b      	ldr	r3, [r3, #0]
 8043b5c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8043b60:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8043b62:	68fb      	ldr	r3, [r7, #12]
 8043b64:	681b      	ldr	r3, [r3, #0]
 8043b66:	689a      	ldr	r2, [r3, #8]
 8043b68:	68fb      	ldr	r3, [r7, #12]
 8043b6a:	681b      	ldr	r3, [r3, #0]
 8043b6c:	f022 0201 	bic.w	r2, r2, #1
 8043b70:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8043b72:	68fb      	ldr	r3, [r7, #12]
 8043b74:	2220      	movs	r2, #32
 8043b76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8043b7a:	68fb      	ldr	r3, [r7, #12]
 8043b7c:	2220      	movs	r2, #32
 8043b7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8043b82:	68fb      	ldr	r3, [r7, #12]
 8043b84:	2220      	movs	r2, #32
 8043b86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8043b8a:	68fb      	ldr	r3, [r7, #12]
 8043b8c:	2200      	movs	r2, #0
 8043b8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8043b92:	2303      	movs	r3, #3
 8043b94:	e00f      	b.n	8043bb6 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8043b96:	68fb      	ldr	r3, [r7, #12]
 8043b98:	681b      	ldr	r3, [r3, #0]
 8043b9a:	69da      	ldr	r2, [r3, #28]
 8043b9c:	68bb      	ldr	r3, [r7, #8]
 8043b9e:	4013      	ands	r3, r2
 8043ba0:	68ba      	ldr	r2, [r7, #8]
 8043ba2:	429a      	cmp	r2, r3
 8043ba4:	bf0c      	ite	eq
 8043ba6:	2301      	moveq	r3, #1
 8043ba8:	2300      	movne	r3, #0
 8043baa:	b2db      	uxtb	r3, r3
 8043bac:	461a      	mov	r2, r3
 8043bae:	79fb      	ldrb	r3, [r7, #7]
 8043bb0:	429a      	cmp	r2, r3
 8043bb2:	d08d      	beq.n	8043ad0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8043bb4:	2300      	movs	r3, #0
}
 8043bb6:	4618      	mov	r0, r3
 8043bb8:	3710      	adds	r7, #16
 8043bba:	46bd      	mov	sp, r7
 8043bbc:	bd80      	pop	{r7, pc}

08043bbe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8043bbe:	b480      	push	{r7}
 8043bc0:	b083      	sub	sp, #12
 8043bc2:	af00      	add	r7, sp, #0
 8043bc4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8043bc6:	687b      	ldr	r3, [r7, #4]
 8043bc8:	681b      	ldr	r3, [r3, #0]
 8043bca:	681a      	ldr	r2, [r3, #0]
 8043bcc:	687b      	ldr	r3, [r7, #4]
 8043bce:	681b      	ldr	r3, [r3, #0]
 8043bd0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8043bd4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8043bd6:	687b      	ldr	r3, [r7, #4]
 8043bd8:	681b      	ldr	r3, [r3, #0]
 8043bda:	689b      	ldr	r3, [r3, #8]
 8043bdc:	687a      	ldr	r2, [r7, #4]
 8043bde:	6812      	ldr	r2, [r2, #0]
 8043be0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8043be4:	f023 0301 	bic.w	r3, r3, #1
 8043be8:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8043bea:	687b      	ldr	r3, [r7, #4]
 8043bec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8043bee:	2b01      	cmp	r3, #1
 8043bf0:	d107      	bne.n	8043c02 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8043bf2:	687b      	ldr	r3, [r7, #4]
 8043bf4:	681b      	ldr	r3, [r3, #0]
 8043bf6:	681a      	ldr	r2, [r3, #0]
 8043bf8:	687b      	ldr	r3, [r7, #4]
 8043bfa:	681b      	ldr	r3, [r3, #0]
 8043bfc:	f022 0210 	bic.w	r2, r2, #16
 8043c00:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8043c02:	687b      	ldr	r3, [r7, #4]
 8043c04:	2220      	movs	r2, #32
 8043c06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8043c0a:	687b      	ldr	r3, [r7, #4]
 8043c0c:	2200      	movs	r2, #0
 8043c0e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8043c10:	687b      	ldr	r3, [r7, #4]
 8043c12:	2200      	movs	r2, #0
 8043c14:	671a      	str	r2, [r3, #112]	; 0x70
}
 8043c16:	bf00      	nop
 8043c18:	370c      	adds	r7, #12
 8043c1a:	46bd      	mov	sp, r7
 8043c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043c20:	4770      	bx	lr

08043c22 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8043c22:	b580      	push	{r7, lr}
 8043c24:	b084      	sub	sp, #16
 8043c26:	af00      	add	r7, sp, #0
 8043c28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8043c2a:	687b      	ldr	r3, [r7, #4]
 8043c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043c2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8043c30:	68fb      	ldr	r3, [r7, #12]
 8043c32:	2200      	movs	r2, #0
 8043c34:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8043c38:	68fb      	ldr	r3, [r7, #12]
 8043c3a:	2200      	movs	r2, #0
 8043c3c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8043c40:	68f8      	ldr	r0, [r7, #12]
 8043c42:	f7ff fb4d 	bl	80432e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8043c46:	bf00      	nop
 8043c48:	3710      	adds	r7, #16
 8043c4a:	46bd      	mov	sp, r7
 8043c4c:	bd80      	pop	{r7, pc}

08043c4e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8043c4e:	b480      	push	{r7}
 8043c50:	b083      	sub	sp, #12
 8043c52:	af00      	add	r7, sp, #0
 8043c54:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8043c56:	687b      	ldr	r3, [r7, #4]
 8043c58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8043c5c:	2b21      	cmp	r3, #33	; 0x21
 8043c5e:	d12a      	bne.n	8043cb6 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8043c60:	687b      	ldr	r3, [r7, #4]
 8043c62:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8043c66:	b29b      	uxth	r3, r3
 8043c68:	2b00      	cmp	r3, #0
 8043c6a:	d110      	bne.n	8043c8e <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8043c6c:	687b      	ldr	r3, [r7, #4]
 8043c6e:	681b      	ldr	r3, [r3, #0]
 8043c70:	681a      	ldr	r2, [r3, #0]
 8043c72:	687b      	ldr	r3, [r7, #4]
 8043c74:	681b      	ldr	r3, [r3, #0]
 8043c76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8043c7a:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8043c7c:	687b      	ldr	r3, [r7, #4]
 8043c7e:	681b      	ldr	r3, [r3, #0]
 8043c80:	681a      	ldr	r2, [r3, #0]
 8043c82:	687b      	ldr	r3, [r7, #4]
 8043c84:	681b      	ldr	r3, [r3, #0]
 8043c86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8043c8a:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8043c8c:	e013      	b.n	8043cb6 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8043c8e:	687b      	ldr	r3, [r7, #4]
 8043c90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8043c92:	781a      	ldrb	r2, [r3, #0]
 8043c94:	687b      	ldr	r3, [r7, #4]
 8043c96:	681b      	ldr	r3, [r3, #0]
 8043c98:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8043c9a:	687b      	ldr	r3, [r7, #4]
 8043c9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8043c9e:	1c5a      	adds	r2, r3, #1
 8043ca0:	687b      	ldr	r3, [r7, #4]
 8043ca2:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8043ca4:	687b      	ldr	r3, [r7, #4]
 8043ca6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8043caa:	b29b      	uxth	r3, r3
 8043cac:	3b01      	subs	r3, #1
 8043cae:	b29a      	uxth	r2, r3
 8043cb0:	687b      	ldr	r3, [r7, #4]
 8043cb2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8043cb6:	bf00      	nop
 8043cb8:	370c      	adds	r7, #12
 8043cba:	46bd      	mov	sp, r7
 8043cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043cc0:	4770      	bx	lr

08043cc2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8043cc2:	b480      	push	{r7}
 8043cc4:	b085      	sub	sp, #20
 8043cc6:	af00      	add	r7, sp, #0
 8043cc8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8043cca:	687b      	ldr	r3, [r7, #4]
 8043ccc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8043cd0:	2b21      	cmp	r3, #33	; 0x21
 8043cd2:	d12f      	bne.n	8043d34 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 8043cd4:	687b      	ldr	r3, [r7, #4]
 8043cd6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8043cda:	b29b      	uxth	r3, r3
 8043cdc:	2b00      	cmp	r3, #0
 8043cde:	d110      	bne.n	8043d02 <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8043ce0:	687b      	ldr	r3, [r7, #4]
 8043ce2:	681b      	ldr	r3, [r3, #0]
 8043ce4:	681a      	ldr	r2, [r3, #0]
 8043ce6:	687b      	ldr	r3, [r7, #4]
 8043ce8:	681b      	ldr	r3, [r3, #0]
 8043cea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8043cee:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8043cf0:	687b      	ldr	r3, [r7, #4]
 8043cf2:	681b      	ldr	r3, [r3, #0]
 8043cf4:	681a      	ldr	r2, [r3, #0]
 8043cf6:	687b      	ldr	r3, [r7, #4]
 8043cf8:	681b      	ldr	r3, [r3, #0]
 8043cfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8043cfe:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8043d00:	e018      	b.n	8043d34 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8043d02:	687b      	ldr	r3, [r7, #4]
 8043d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8043d06:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8043d08:	68fb      	ldr	r3, [r7, #12]
 8043d0a:	881b      	ldrh	r3, [r3, #0]
 8043d0c:	461a      	mov	r2, r3
 8043d0e:	687b      	ldr	r3, [r7, #4]
 8043d10:	681b      	ldr	r3, [r3, #0]
 8043d12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8043d16:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8043d18:	687b      	ldr	r3, [r7, #4]
 8043d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8043d1c:	1c9a      	adds	r2, r3, #2
 8043d1e:	687b      	ldr	r3, [r7, #4]
 8043d20:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8043d22:	687b      	ldr	r3, [r7, #4]
 8043d24:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8043d28:	b29b      	uxth	r3, r3
 8043d2a:	3b01      	subs	r3, #1
 8043d2c:	b29a      	uxth	r2, r3
 8043d2e:	687b      	ldr	r3, [r7, #4]
 8043d30:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8043d34:	bf00      	nop
 8043d36:	3714      	adds	r7, #20
 8043d38:	46bd      	mov	sp, r7
 8043d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043d3e:	4770      	bx	lr

08043d40 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8043d40:	b480      	push	{r7}
 8043d42:	b085      	sub	sp, #20
 8043d44:	af00      	add	r7, sp, #0
 8043d46:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8043d48:	687b      	ldr	r3, [r7, #4]
 8043d4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8043d4e:	2b21      	cmp	r3, #33	; 0x21
 8043d50:	d13d      	bne.n	8043dce <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8043d52:	687b      	ldr	r3, [r7, #4]
 8043d54:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8043d58:	81fb      	strh	r3, [r7, #14]
 8043d5a:	e035      	b.n	8043dc8 <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 8043d5c:	687b      	ldr	r3, [r7, #4]
 8043d5e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8043d62:	b29b      	uxth	r3, r3
 8043d64:	2b00      	cmp	r3, #0
 8043d66:	d111      	bne.n	8043d8c <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8043d68:	687b      	ldr	r3, [r7, #4]
 8043d6a:	681b      	ldr	r3, [r3, #0]
 8043d6c:	689a      	ldr	r2, [r3, #8]
 8043d6e:	687b      	ldr	r3, [r7, #4]
 8043d70:	681b      	ldr	r3, [r3, #0]
 8043d72:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8043d76:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8043d78:	687b      	ldr	r3, [r7, #4]
 8043d7a:	681b      	ldr	r3, [r3, #0]
 8043d7c:	681a      	ldr	r2, [r3, #0]
 8043d7e:	687b      	ldr	r3, [r7, #4]
 8043d80:	681b      	ldr	r3, [r3, #0]
 8043d82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8043d86:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8043d88:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8043d8a:	e020      	b.n	8043dce <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8043d8c:	687b      	ldr	r3, [r7, #4]
 8043d8e:	681b      	ldr	r3, [r3, #0]
 8043d90:	69db      	ldr	r3, [r3, #28]
 8043d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8043d96:	2b00      	cmp	r3, #0
 8043d98:	d013      	beq.n	8043dc2 <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8043d9a:	687b      	ldr	r3, [r7, #4]
 8043d9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8043d9e:	781a      	ldrb	r2, [r3, #0]
 8043da0:	687b      	ldr	r3, [r7, #4]
 8043da2:	681b      	ldr	r3, [r3, #0]
 8043da4:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8043da6:	687b      	ldr	r3, [r7, #4]
 8043da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8043daa:	1c5a      	adds	r2, r3, #1
 8043dac:	687b      	ldr	r3, [r7, #4]
 8043dae:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8043db0:	687b      	ldr	r3, [r7, #4]
 8043db2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8043db6:	b29b      	uxth	r3, r3
 8043db8:	3b01      	subs	r3, #1
 8043dba:	b29a      	uxth	r2, r3
 8043dbc:	687b      	ldr	r3, [r7, #4]
 8043dbe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8043dc2:	89fb      	ldrh	r3, [r7, #14]
 8043dc4:	3b01      	subs	r3, #1
 8043dc6:	81fb      	strh	r3, [r7, #14]
 8043dc8:	89fb      	ldrh	r3, [r7, #14]
 8043dca:	2b00      	cmp	r3, #0
 8043dcc:	d1c6      	bne.n	8043d5c <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 8043dce:	bf00      	nop
 8043dd0:	3714      	adds	r7, #20
 8043dd2:	46bd      	mov	sp, r7
 8043dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043dd8:	4770      	bx	lr

08043dda <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8043dda:	b480      	push	{r7}
 8043ddc:	b085      	sub	sp, #20
 8043dde:	af00      	add	r7, sp, #0
 8043de0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8043de2:	687b      	ldr	r3, [r7, #4]
 8043de4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8043de8:	2b21      	cmp	r3, #33	; 0x21
 8043dea:	d142      	bne.n	8043e72 <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8043dec:	687b      	ldr	r3, [r7, #4]
 8043dee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8043df2:	81fb      	strh	r3, [r7, #14]
 8043df4:	e03a      	b.n	8043e6c <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 8043df6:	687b      	ldr	r3, [r7, #4]
 8043df8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8043dfc:	b29b      	uxth	r3, r3
 8043dfe:	2b00      	cmp	r3, #0
 8043e00:	d111      	bne.n	8043e26 <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8043e02:	687b      	ldr	r3, [r7, #4]
 8043e04:	681b      	ldr	r3, [r3, #0]
 8043e06:	689a      	ldr	r2, [r3, #8]
 8043e08:	687b      	ldr	r3, [r7, #4]
 8043e0a:	681b      	ldr	r3, [r3, #0]
 8043e0c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8043e10:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8043e12:	687b      	ldr	r3, [r7, #4]
 8043e14:	681b      	ldr	r3, [r3, #0]
 8043e16:	681a      	ldr	r2, [r3, #0]
 8043e18:	687b      	ldr	r3, [r7, #4]
 8043e1a:	681b      	ldr	r3, [r3, #0]
 8043e1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8043e20:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8043e22:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8043e24:	e025      	b.n	8043e72 <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8043e26:	687b      	ldr	r3, [r7, #4]
 8043e28:	681b      	ldr	r3, [r3, #0]
 8043e2a:	69db      	ldr	r3, [r3, #28]
 8043e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8043e30:	2b00      	cmp	r3, #0
 8043e32:	d018      	beq.n	8043e66 <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8043e34:	687b      	ldr	r3, [r7, #4]
 8043e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8043e38:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8043e3a:	68bb      	ldr	r3, [r7, #8]
 8043e3c:	881b      	ldrh	r3, [r3, #0]
 8043e3e:	461a      	mov	r2, r3
 8043e40:	687b      	ldr	r3, [r7, #4]
 8043e42:	681b      	ldr	r3, [r3, #0]
 8043e44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8043e48:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8043e4a:	687b      	ldr	r3, [r7, #4]
 8043e4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8043e4e:	1c9a      	adds	r2, r3, #2
 8043e50:	687b      	ldr	r3, [r7, #4]
 8043e52:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8043e54:	687b      	ldr	r3, [r7, #4]
 8043e56:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8043e5a:	b29b      	uxth	r3, r3
 8043e5c:	3b01      	subs	r3, #1
 8043e5e:	b29a      	uxth	r2, r3
 8043e60:	687b      	ldr	r3, [r7, #4]
 8043e62:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8043e66:	89fb      	ldrh	r3, [r7, #14]
 8043e68:	3b01      	subs	r3, #1
 8043e6a:	81fb      	strh	r3, [r7, #14]
 8043e6c:	89fb      	ldrh	r3, [r7, #14]
 8043e6e:	2b00      	cmp	r3, #0
 8043e70:	d1c1      	bne.n	8043df6 <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 8043e72:	bf00      	nop
 8043e74:	3714      	adds	r7, #20
 8043e76:	46bd      	mov	sp, r7
 8043e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043e7c:	4770      	bx	lr

08043e7e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8043e7e:	b580      	push	{r7, lr}
 8043e80:	b082      	sub	sp, #8
 8043e82:	af00      	add	r7, sp, #0
 8043e84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8043e86:	687b      	ldr	r3, [r7, #4]
 8043e88:	681b      	ldr	r3, [r3, #0]
 8043e8a:	681a      	ldr	r2, [r3, #0]
 8043e8c:	687b      	ldr	r3, [r7, #4]
 8043e8e:	681b      	ldr	r3, [r3, #0]
 8043e90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8043e94:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8043e96:	687b      	ldr	r3, [r7, #4]
 8043e98:	2220      	movs	r2, #32
 8043e9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8043e9e:	687b      	ldr	r3, [r7, #4]
 8043ea0:	2200      	movs	r2, #0
 8043ea2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8043ea4:	6878      	ldr	r0, [r7, #4]
 8043ea6:	f7ff fa11 	bl	80432cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8043eaa:	bf00      	nop
 8043eac:	3708      	adds	r7, #8
 8043eae:	46bd      	mov	sp, r7
 8043eb0:	bd80      	pop	{r7, pc}

08043eb2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8043eb2:	b480      	push	{r7}
 8043eb4:	b083      	sub	sp, #12
 8043eb6:	af00      	add	r7, sp, #0
 8043eb8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8043eba:	bf00      	nop
 8043ebc:	370c      	adds	r7, #12
 8043ebe:	46bd      	mov	sp, r7
 8043ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043ec4:	4770      	bx	lr

08043ec6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8043ec6:	b480      	push	{r7}
 8043ec8:	b083      	sub	sp, #12
 8043eca:	af00      	add	r7, sp, #0
 8043ecc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8043ece:	bf00      	nop
 8043ed0:	370c      	adds	r7, #12
 8043ed2:	46bd      	mov	sp, r7
 8043ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043ed8:	4770      	bx	lr

08043eda <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8043eda:	b480      	push	{r7}
 8043edc:	b083      	sub	sp, #12
 8043ede:	af00      	add	r7, sp, #0
 8043ee0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8043ee2:	bf00      	nop
 8043ee4:	370c      	adds	r7, #12
 8043ee6:	46bd      	mov	sp, r7
 8043ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043eec:	4770      	bx	lr

08043eee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8043eee:	b480      	push	{r7}
 8043ef0:	b085      	sub	sp, #20
 8043ef2:	af00      	add	r7, sp, #0
 8043ef4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8043ef6:	687b      	ldr	r3, [r7, #4]
 8043ef8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8043efc:	2b01      	cmp	r3, #1
 8043efe:	d101      	bne.n	8043f04 <HAL_UARTEx_DisableFifoMode+0x16>
 8043f00:	2302      	movs	r3, #2
 8043f02:	e027      	b.n	8043f54 <HAL_UARTEx_DisableFifoMode+0x66>
 8043f04:	687b      	ldr	r3, [r7, #4]
 8043f06:	2201      	movs	r2, #1
 8043f08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8043f0c:	687b      	ldr	r3, [r7, #4]
 8043f0e:	2224      	movs	r2, #36	; 0x24
 8043f10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8043f14:	687b      	ldr	r3, [r7, #4]
 8043f16:	681b      	ldr	r3, [r3, #0]
 8043f18:	681b      	ldr	r3, [r3, #0]
 8043f1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8043f1c:	687b      	ldr	r3, [r7, #4]
 8043f1e:	681b      	ldr	r3, [r3, #0]
 8043f20:	681a      	ldr	r2, [r3, #0]
 8043f22:	687b      	ldr	r3, [r7, #4]
 8043f24:	681b      	ldr	r3, [r3, #0]
 8043f26:	f022 0201 	bic.w	r2, r2, #1
 8043f2a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8043f2c:	68fb      	ldr	r3, [r7, #12]
 8043f2e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8043f32:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8043f34:	687b      	ldr	r3, [r7, #4]
 8043f36:	2200      	movs	r2, #0
 8043f38:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8043f3a:	687b      	ldr	r3, [r7, #4]
 8043f3c:	681b      	ldr	r3, [r3, #0]
 8043f3e:	68fa      	ldr	r2, [r7, #12]
 8043f40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8043f42:	687b      	ldr	r3, [r7, #4]
 8043f44:	2220      	movs	r2, #32
 8043f46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8043f4a:	687b      	ldr	r3, [r7, #4]
 8043f4c:	2200      	movs	r2, #0
 8043f4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8043f52:	2300      	movs	r3, #0
}
 8043f54:	4618      	mov	r0, r3
 8043f56:	3714      	adds	r7, #20
 8043f58:	46bd      	mov	sp, r7
 8043f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043f5e:	4770      	bx	lr

08043f60 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8043f60:	b580      	push	{r7, lr}
 8043f62:	b084      	sub	sp, #16
 8043f64:	af00      	add	r7, sp, #0
 8043f66:	6078      	str	r0, [r7, #4]
 8043f68:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8043f6a:	687b      	ldr	r3, [r7, #4]
 8043f6c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8043f70:	2b01      	cmp	r3, #1
 8043f72:	d101      	bne.n	8043f78 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8043f74:	2302      	movs	r3, #2
 8043f76:	e02d      	b.n	8043fd4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8043f78:	687b      	ldr	r3, [r7, #4]
 8043f7a:	2201      	movs	r2, #1
 8043f7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8043f80:	687b      	ldr	r3, [r7, #4]
 8043f82:	2224      	movs	r2, #36	; 0x24
 8043f84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8043f88:	687b      	ldr	r3, [r7, #4]
 8043f8a:	681b      	ldr	r3, [r3, #0]
 8043f8c:	681b      	ldr	r3, [r3, #0]
 8043f8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8043f90:	687b      	ldr	r3, [r7, #4]
 8043f92:	681b      	ldr	r3, [r3, #0]
 8043f94:	681a      	ldr	r2, [r3, #0]
 8043f96:	687b      	ldr	r3, [r7, #4]
 8043f98:	681b      	ldr	r3, [r3, #0]
 8043f9a:	f022 0201 	bic.w	r2, r2, #1
 8043f9e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8043fa0:	687b      	ldr	r3, [r7, #4]
 8043fa2:	681b      	ldr	r3, [r3, #0]
 8043fa4:	689b      	ldr	r3, [r3, #8]
 8043fa6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8043faa:	687b      	ldr	r3, [r7, #4]
 8043fac:	681b      	ldr	r3, [r3, #0]
 8043fae:	683a      	ldr	r2, [r7, #0]
 8043fb0:	430a      	orrs	r2, r1
 8043fb2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8043fb4:	6878      	ldr	r0, [r7, #4]
 8043fb6:	f000 f84f 	bl	8044058 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8043fba:	687b      	ldr	r3, [r7, #4]
 8043fbc:	681b      	ldr	r3, [r3, #0]
 8043fbe:	68fa      	ldr	r2, [r7, #12]
 8043fc0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8043fc2:	687b      	ldr	r3, [r7, #4]
 8043fc4:	2220      	movs	r2, #32
 8043fc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8043fca:	687b      	ldr	r3, [r7, #4]
 8043fcc:	2200      	movs	r2, #0
 8043fce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8043fd2:	2300      	movs	r3, #0
}
 8043fd4:	4618      	mov	r0, r3
 8043fd6:	3710      	adds	r7, #16
 8043fd8:	46bd      	mov	sp, r7
 8043fda:	bd80      	pop	{r7, pc}

08043fdc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8043fdc:	b580      	push	{r7, lr}
 8043fde:	b084      	sub	sp, #16
 8043fe0:	af00      	add	r7, sp, #0
 8043fe2:	6078      	str	r0, [r7, #4]
 8043fe4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8043fe6:	687b      	ldr	r3, [r7, #4]
 8043fe8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8043fec:	2b01      	cmp	r3, #1
 8043fee:	d101      	bne.n	8043ff4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8043ff0:	2302      	movs	r3, #2
 8043ff2:	e02d      	b.n	8044050 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8043ff4:	687b      	ldr	r3, [r7, #4]
 8043ff6:	2201      	movs	r2, #1
 8043ff8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8043ffc:	687b      	ldr	r3, [r7, #4]
 8043ffe:	2224      	movs	r2, #36	; 0x24
 8044000:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8044004:	687b      	ldr	r3, [r7, #4]
 8044006:	681b      	ldr	r3, [r3, #0]
 8044008:	681b      	ldr	r3, [r3, #0]
 804400a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 804400c:	687b      	ldr	r3, [r7, #4]
 804400e:	681b      	ldr	r3, [r3, #0]
 8044010:	681a      	ldr	r2, [r3, #0]
 8044012:	687b      	ldr	r3, [r7, #4]
 8044014:	681b      	ldr	r3, [r3, #0]
 8044016:	f022 0201 	bic.w	r2, r2, #1
 804401a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 804401c:	687b      	ldr	r3, [r7, #4]
 804401e:	681b      	ldr	r3, [r3, #0]
 8044020:	689b      	ldr	r3, [r3, #8]
 8044022:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8044026:	687b      	ldr	r3, [r7, #4]
 8044028:	681b      	ldr	r3, [r3, #0]
 804402a:	683a      	ldr	r2, [r7, #0]
 804402c:	430a      	orrs	r2, r1
 804402e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8044030:	6878      	ldr	r0, [r7, #4]
 8044032:	f000 f811 	bl	8044058 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8044036:	687b      	ldr	r3, [r7, #4]
 8044038:	681b      	ldr	r3, [r3, #0]
 804403a:	68fa      	ldr	r2, [r7, #12]
 804403c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 804403e:	687b      	ldr	r3, [r7, #4]
 8044040:	2220      	movs	r2, #32
 8044042:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8044046:	687b      	ldr	r3, [r7, #4]
 8044048:	2200      	movs	r2, #0
 804404a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 804404e:	2300      	movs	r3, #0
}
 8044050:	4618      	mov	r0, r3
 8044052:	3710      	adds	r7, #16
 8044054:	46bd      	mov	sp, r7
 8044056:	bd80      	pop	{r7, pc}

08044058 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8044058:	b480      	push	{r7}
 804405a:	b089      	sub	sp, #36	; 0x24
 804405c:	af00      	add	r7, sp, #0
 804405e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8044060:	4a2f      	ldr	r2, [pc, #188]	; (8044120 <UARTEx_SetNbDataToProcess+0xc8>)
 8044062:	f107 0314 	add.w	r3, r7, #20
 8044066:	e892 0003 	ldmia.w	r2, {r0, r1}
 804406a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 804406e:	4a2d      	ldr	r2, [pc, #180]	; (8044124 <UARTEx_SetNbDataToProcess+0xcc>)
 8044070:	f107 030c 	add.w	r3, r7, #12
 8044074:	e892 0003 	ldmia.w	r2, {r0, r1}
 8044078:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 804407c:	687b      	ldr	r3, [r7, #4]
 804407e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8044080:	2b00      	cmp	r3, #0
 8044082:	d108      	bne.n	8044096 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8044084:	687b      	ldr	r3, [r7, #4]
 8044086:	2201      	movs	r2, #1
 8044088:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 804408c:	687b      	ldr	r3, [r7, #4]
 804408e:	2201      	movs	r2, #1
 8044090:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8044094:	e03d      	b.n	8044112 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8044096:	2308      	movs	r3, #8
 8044098:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 804409a:	2308      	movs	r3, #8
 804409c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 804409e:	687b      	ldr	r3, [r7, #4]
 80440a0:	681b      	ldr	r3, [r3, #0]
 80440a2:	689b      	ldr	r3, [r3, #8]
 80440a4:	0e5b      	lsrs	r3, r3, #25
 80440a6:	b2db      	uxtb	r3, r3
 80440a8:	f003 0307 	and.w	r3, r3, #7
 80440ac:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80440ae:	687b      	ldr	r3, [r7, #4]
 80440b0:	681b      	ldr	r3, [r3, #0]
 80440b2:	689b      	ldr	r3, [r3, #8]
 80440b4:	0f5b      	lsrs	r3, r3, #29
 80440b6:	b2db      	uxtb	r3, r3
 80440b8:	f003 0307 	and.w	r3, r3, #7
 80440bc:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80440be:	7fbb      	ldrb	r3, [r7, #30]
 80440c0:	7f3a      	ldrb	r2, [r7, #28]
 80440c2:	f107 0120 	add.w	r1, r7, #32
 80440c6:	440a      	add	r2, r1
 80440c8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80440cc:	fb02 f303 	mul.w	r3, r2, r3
 80440d0:	7f3a      	ldrb	r2, [r7, #28]
 80440d2:	f107 0120 	add.w	r1, r7, #32
 80440d6:	440a      	add	r2, r1
 80440d8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80440dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80440e0:	b29a      	uxth	r2, r3
 80440e2:	687b      	ldr	r3, [r7, #4]
 80440e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80440e8:	7ffb      	ldrb	r3, [r7, #31]
 80440ea:	7f7a      	ldrb	r2, [r7, #29]
 80440ec:	f107 0120 	add.w	r1, r7, #32
 80440f0:	440a      	add	r2, r1
 80440f2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80440f6:	fb02 f303 	mul.w	r3, r2, r3
 80440fa:	7f7a      	ldrb	r2, [r7, #29]
 80440fc:	f107 0120 	add.w	r1, r7, #32
 8044100:	440a      	add	r2, r1
 8044102:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8044106:	fb93 f3f2 	sdiv	r3, r3, r2
 804410a:	b29a      	uxth	r2, r3
 804410c:	687b      	ldr	r3, [r7, #4]
 804410e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8044112:	bf00      	nop
 8044114:	3724      	adds	r7, #36	; 0x24
 8044116:	46bd      	mov	sp, r7
 8044118:	f85d 7b04 	ldr.w	r7, [sp], #4
 804411c:	4770      	bx	lr
 804411e:	bf00      	nop
 8044120:	08044df4 	.word	0x08044df4
 8044124:	08044dfc 	.word	0x08044dfc

08044128 <atoi>:
 8044128:	220a      	movs	r2, #10
 804412a:	2100      	movs	r1, #0
 804412c:	f000 b8ce 	b.w	80442cc <strtol>

08044130 <__errno>:
 8044130:	4b01      	ldr	r3, [pc, #4]	; (8044138 <__errno+0x8>)
 8044132:	6818      	ldr	r0, [r3, #0]
 8044134:	4770      	bx	lr
 8044136:	bf00      	nop
 8044138:	20018020 	.word	0x20018020

0804413c <__libc_init_array>:
 804413c:	b570      	push	{r4, r5, r6, lr}
 804413e:	4e0d      	ldr	r6, [pc, #52]	; (8044174 <__libc_init_array+0x38>)
 8044140:	2500      	movs	r5, #0
 8044142:	4c0d      	ldr	r4, [pc, #52]	; (8044178 <__libc_init_array+0x3c>)
 8044144:	1ba4      	subs	r4, r4, r6
 8044146:	10a4      	asrs	r4, r4, #2
 8044148:	42a5      	cmp	r5, r4
 804414a:	d109      	bne.n	8044160 <__libc_init_array+0x24>
 804414c:	4e0b      	ldr	r6, [pc, #44]	; (804417c <__libc_init_array+0x40>)
 804414e:	2500      	movs	r5, #0
 8044150:	4c0b      	ldr	r4, [pc, #44]	; (8044180 <__libc_init_array+0x44>)
 8044152:	f000 fd0d 	bl	8044b70 <_init>
 8044156:	1ba4      	subs	r4, r4, r6
 8044158:	10a4      	asrs	r4, r4, #2
 804415a:	42a5      	cmp	r5, r4
 804415c:	d105      	bne.n	804416a <__libc_init_array+0x2e>
 804415e:	bd70      	pop	{r4, r5, r6, pc}
 8044160:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8044164:	3501      	adds	r5, #1
 8044166:	4798      	blx	r3
 8044168:	e7ee      	b.n	8044148 <__libc_init_array+0xc>
 804416a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 804416e:	3501      	adds	r5, #1
 8044170:	4798      	blx	r3
 8044172:	e7f2      	b.n	804415a <__libc_init_array+0x1e>
 8044174:	08045098 	.word	0x08045098
 8044178:	08045098 	.word	0x08045098
 804417c:	08045098 	.word	0x08045098
 8044180:	0804509c 	.word	0x0804509c

08044184 <memset>:
 8044184:	4402      	add	r2, r0
 8044186:	4603      	mov	r3, r0
 8044188:	4293      	cmp	r3, r2
 804418a:	d100      	bne.n	804418e <memset+0xa>
 804418c:	4770      	bx	lr
 804418e:	f803 1b01 	strb.w	r1, [r3], #1
 8044192:	e7f9      	b.n	8044188 <memset+0x4>

08044194 <siprintf>:
 8044194:	b40e      	push	{r1, r2, r3}
 8044196:	b500      	push	{lr}
 8044198:	b09c      	sub	sp, #112	; 0x70
 804419a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 804419e:	ab1d      	add	r3, sp, #116	; 0x74
 80441a0:	9002      	str	r0, [sp, #8]
 80441a2:	9006      	str	r0, [sp, #24]
 80441a4:	9107      	str	r1, [sp, #28]
 80441a6:	9104      	str	r1, [sp, #16]
 80441a8:	4808      	ldr	r0, [pc, #32]	; (80441cc <siprintf+0x38>)
 80441aa:	4909      	ldr	r1, [pc, #36]	; (80441d0 <siprintf+0x3c>)
 80441ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80441b0:	9105      	str	r1, [sp, #20]
 80441b2:	a902      	add	r1, sp, #8
 80441b4:	6800      	ldr	r0, [r0, #0]
 80441b6:	9301      	str	r3, [sp, #4]
 80441b8:	f000 f982 	bl	80444c0 <_svfiprintf_r>
 80441bc:	9b02      	ldr	r3, [sp, #8]
 80441be:	2200      	movs	r2, #0
 80441c0:	701a      	strb	r2, [r3, #0]
 80441c2:	b01c      	add	sp, #112	; 0x70
 80441c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80441c8:	b003      	add	sp, #12
 80441ca:	4770      	bx	lr
 80441cc:	20018020 	.word	0x20018020
 80441d0:	ffff0208 	.word	0xffff0208

080441d4 <_strtol_l.isra.0>:
 80441d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80441d8:	4680      	mov	r8, r0
 80441da:	4689      	mov	r9, r1
 80441dc:	4692      	mov	sl, r2
 80441de:	461e      	mov	r6, r3
 80441e0:	460f      	mov	r7, r1
 80441e2:	463d      	mov	r5, r7
 80441e4:	9808      	ldr	r0, [sp, #32]
 80441e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80441ea:	f000 f89f 	bl	804432c <__locale_ctype_ptr_l>
 80441ee:	4420      	add	r0, r4
 80441f0:	7843      	ldrb	r3, [r0, #1]
 80441f2:	f013 0308 	ands.w	r3, r3, #8
 80441f6:	d133      	bne.n	8044260 <_strtol_l.isra.0+0x8c>
 80441f8:	2c2d      	cmp	r4, #45	; 0x2d
 80441fa:	d133      	bne.n	8044264 <_strtol_l.isra.0+0x90>
 80441fc:	1cbd      	adds	r5, r7, #2
 80441fe:	787c      	ldrb	r4, [r7, #1]
 8044200:	2201      	movs	r2, #1
 8044202:	2e00      	cmp	r6, #0
 8044204:	d05e      	beq.n	80442c4 <_strtol_l.isra.0+0xf0>
 8044206:	2e10      	cmp	r6, #16
 8044208:	d109      	bne.n	804421e <_strtol_l.isra.0+0x4a>
 804420a:	2c30      	cmp	r4, #48	; 0x30
 804420c:	d107      	bne.n	804421e <_strtol_l.isra.0+0x4a>
 804420e:	782b      	ldrb	r3, [r5, #0]
 8044210:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8044214:	2b58      	cmp	r3, #88	; 0x58
 8044216:	d150      	bne.n	80442ba <_strtol_l.isra.0+0xe6>
 8044218:	786c      	ldrb	r4, [r5, #1]
 804421a:	2610      	movs	r6, #16
 804421c:	3502      	adds	r5, #2
 804421e:	2a00      	cmp	r2, #0
 8044220:	f04f 0700 	mov.w	r7, #0
 8044224:	bf14      	ite	ne
 8044226:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 804422a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 804422e:	4638      	mov	r0, r7
 8044230:	fbb1 fcf6 	udiv	ip, r1, r6
 8044234:	fb06 1e1c 	mls	lr, r6, ip, r1
 8044238:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 804423c:	2b09      	cmp	r3, #9
 804423e:	d817      	bhi.n	8044270 <_strtol_l.isra.0+0x9c>
 8044240:	461c      	mov	r4, r3
 8044242:	42a6      	cmp	r6, r4
 8044244:	dd23      	ble.n	804428e <_strtol_l.isra.0+0xba>
 8044246:	1c7b      	adds	r3, r7, #1
 8044248:	d007      	beq.n	804425a <_strtol_l.isra.0+0x86>
 804424a:	4584      	cmp	ip, r0
 804424c:	d31c      	bcc.n	8044288 <_strtol_l.isra.0+0xb4>
 804424e:	d101      	bne.n	8044254 <_strtol_l.isra.0+0x80>
 8044250:	45a6      	cmp	lr, r4
 8044252:	db19      	blt.n	8044288 <_strtol_l.isra.0+0xb4>
 8044254:	fb00 4006 	mla	r0, r0, r6, r4
 8044258:	2701      	movs	r7, #1
 804425a:	f815 4b01 	ldrb.w	r4, [r5], #1
 804425e:	e7eb      	b.n	8044238 <_strtol_l.isra.0+0x64>
 8044260:	462f      	mov	r7, r5
 8044262:	e7be      	b.n	80441e2 <_strtol_l.isra.0+0xe>
 8044264:	2c2b      	cmp	r4, #43	; 0x2b
 8044266:	461a      	mov	r2, r3
 8044268:	bf04      	itt	eq
 804426a:	1cbd      	addeq	r5, r7, #2
 804426c:	787c      	ldrbeq	r4, [r7, #1]
 804426e:	e7c8      	b.n	8044202 <_strtol_l.isra.0+0x2e>
 8044270:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8044274:	2b19      	cmp	r3, #25
 8044276:	d801      	bhi.n	804427c <_strtol_l.isra.0+0xa8>
 8044278:	3c37      	subs	r4, #55	; 0x37
 804427a:	e7e2      	b.n	8044242 <_strtol_l.isra.0+0x6e>
 804427c:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8044280:	2b19      	cmp	r3, #25
 8044282:	d804      	bhi.n	804428e <_strtol_l.isra.0+0xba>
 8044284:	3c57      	subs	r4, #87	; 0x57
 8044286:	e7dc      	b.n	8044242 <_strtol_l.isra.0+0x6e>
 8044288:	f04f 37ff 	mov.w	r7, #4294967295
 804428c:	e7e5      	b.n	804425a <_strtol_l.isra.0+0x86>
 804428e:	1c7b      	adds	r3, r7, #1
 8044290:	d108      	bne.n	80442a4 <_strtol_l.isra.0+0xd0>
 8044292:	2322      	movs	r3, #34	; 0x22
 8044294:	4608      	mov	r0, r1
 8044296:	f8c8 3000 	str.w	r3, [r8]
 804429a:	f1ba 0f00 	cmp.w	sl, #0
 804429e:	d107      	bne.n	80442b0 <_strtol_l.isra.0+0xdc>
 80442a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80442a4:	b102      	cbz	r2, 80442a8 <_strtol_l.isra.0+0xd4>
 80442a6:	4240      	negs	r0, r0
 80442a8:	f1ba 0f00 	cmp.w	sl, #0
 80442ac:	d0f8      	beq.n	80442a0 <_strtol_l.isra.0+0xcc>
 80442ae:	b10f      	cbz	r7, 80442b4 <_strtol_l.isra.0+0xe0>
 80442b0:	f105 39ff 	add.w	r9, r5, #4294967295
 80442b4:	f8ca 9000 	str.w	r9, [sl]
 80442b8:	e7f2      	b.n	80442a0 <_strtol_l.isra.0+0xcc>
 80442ba:	2430      	movs	r4, #48	; 0x30
 80442bc:	2e00      	cmp	r6, #0
 80442be:	d1ae      	bne.n	804421e <_strtol_l.isra.0+0x4a>
 80442c0:	2608      	movs	r6, #8
 80442c2:	e7ac      	b.n	804421e <_strtol_l.isra.0+0x4a>
 80442c4:	2c30      	cmp	r4, #48	; 0x30
 80442c6:	d0a2      	beq.n	804420e <_strtol_l.isra.0+0x3a>
 80442c8:	260a      	movs	r6, #10
 80442ca:	e7a8      	b.n	804421e <_strtol_l.isra.0+0x4a>

080442cc <strtol>:
 80442cc:	4b08      	ldr	r3, [pc, #32]	; (80442f0 <strtol+0x24>)
 80442ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80442d0:	681c      	ldr	r4, [r3, #0]
 80442d2:	4d08      	ldr	r5, [pc, #32]	; (80442f4 <strtol+0x28>)
 80442d4:	6a23      	ldr	r3, [r4, #32]
 80442d6:	2b00      	cmp	r3, #0
 80442d8:	bf08      	it	eq
 80442da:	462b      	moveq	r3, r5
 80442dc:	9300      	str	r3, [sp, #0]
 80442de:	4613      	mov	r3, r2
 80442e0:	460a      	mov	r2, r1
 80442e2:	4601      	mov	r1, r0
 80442e4:	4620      	mov	r0, r4
 80442e6:	f7ff ff75 	bl	80441d4 <_strtol_l.isra.0>
 80442ea:	b003      	add	sp, #12
 80442ec:	bd30      	pop	{r4, r5, pc}
 80442ee:	bf00      	nop
 80442f0:	20018020 	.word	0x20018020
 80442f4:	20018084 	.word	0x20018084

080442f8 <gettimeofday>:
 80442f8:	4b02      	ldr	r3, [pc, #8]	; (8044304 <gettimeofday+0xc>)
 80442fa:	460a      	mov	r2, r1
 80442fc:	4601      	mov	r1, r0
 80442fe:	6818      	ldr	r0, [r3, #0]
 8044300:	f000 b802 	b.w	8044308 <_gettimeofday_r>
 8044304:	20018020 	.word	0x20018020

08044308 <_gettimeofday_r>:
 8044308:	b538      	push	{r3, r4, r5, lr}
 804430a:	2300      	movs	r3, #0
 804430c:	4c06      	ldr	r4, [pc, #24]	; (8044328 <_gettimeofday_r+0x20>)
 804430e:	4605      	mov	r5, r0
 8044310:	4608      	mov	r0, r1
 8044312:	4611      	mov	r1, r2
 8044314:	6023      	str	r3, [r4, #0]
 8044316:	f000 fc23 	bl	8044b60 <_gettimeofday>
 804431a:	1c43      	adds	r3, r0, #1
 804431c:	d102      	bne.n	8044324 <_gettimeofday_r+0x1c>
 804431e:	6823      	ldr	r3, [r4, #0]
 8044320:	b103      	cbz	r3, 8044324 <_gettimeofday_r+0x1c>
 8044322:	602b      	str	r3, [r5, #0]
 8044324:	bd38      	pop	{r3, r4, r5, pc}
 8044326:	bf00      	nop
 8044328:	20018330 	.word	0x20018330

0804432c <__locale_ctype_ptr_l>:
 804432c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8044330:	4770      	bx	lr

08044332 <__ascii_mbtowc>:
 8044332:	b082      	sub	sp, #8
 8044334:	b901      	cbnz	r1, 8044338 <__ascii_mbtowc+0x6>
 8044336:	a901      	add	r1, sp, #4
 8044338:	b142      	cbz	r2, 804434c <__ascii_mbtowc+0x1a>
 804433a:	b14b      	cbz	r3, 8044350 <__ascii_mbtowc+0x1e>
 804433c:	7813      	ldrb	r3, [r2, #0]
 804433e:	600b      	str	r3, [r1, #0]
 8044340:	7812      	ldrb	r2, [r2, #0]
 8044342:	1c10      	adds	r0, r2, #0
 8044344:	bf18      	it	ne
 8044346:	2001      	movne	r0, #1
 8044348:	b002      	add	sp, #8
 804434a:	4770      	bx	lr
 804434c:	4610      	mov	r0, r2
 804434e:	e7fb      	b.n	8044348 <__ascii_mbtowc+0x16>
 8044350:	f06f 0001 	mvn.w	r0, #1
 8044354:	e7f8      	b.n	8044348 <__ascii_mbtowc+0x16>
	...

08044358 <_malloc_r>:
 8044358:	b570      	push	{r4, r5, r6, lr}
 804435a:	1ccd      	adds	r5, r1, #3
 804435c:	4606      	mov	r6, r0
 804435e:	f025 0503 	bic.w	r5, r5, #3
 8044362:	3508      	adds	r5, #8
 8044364:	2d0c      	cmp	r5, #12
 8044366:	bf38      	it	cc
 8044368:	250c      	movcc	r5, #12
 804436a:	2d00      	cmp	r5, #0
 804436c:	db01      	blt.n	8044372 <_malloc_r+0x1a>
 804436e:	42a9      	cmp	r1, r5
 8044370:	d903      	bls.n	804437a <_malloc_r+0x22>
 8044372:	230c      	movs	r3, #12
 8044374:	6033      	str	r3, [r6, #0]
 8044376:	2000      	movs	r0, #0
 8044378:	bd70      	pop	{r4, r5, r6, pc}
 804437a:	f000 fb72 	bl	8044a62 <__malloc_lock>
 804437e:	4a21      	ldr	r2, [pc, #132]	; (8044404 <_malloc_r+0xac>)
 8044380:	6814      	ldr	r4, [r2, #0]
 8044382:	4621      	mov	r1, r4
 8044384:	b991      	cbnz	r1, 80443ac <_malloc_r+0x54>
 8044386:	4c20      	ldr	r4, [pc, #128]	; (8044408 <_malloc_r+0xb0>)
 8044388:	6823      	ldr	r3, [r4, #0]
 804438a:	b91b      	cbnz	r3, 8044394 <_malloc_r+0x3c>
 804438c:	4630      	mov	r0, r6
 804438e:	f000 fb19 	bl	80449c4 <_sbrk_r>
 8044392:	6020      	str	r0, [r4, #0]
 8044394:	4629      	mov	r1, r5
 8044396:	4630      	mov	r0, r6
 8044398:	f000 fb14 	bl	80449c4 <_sbrk_r>
 804439c:	1c43      	adds	r3, r0, #1
 804439e:	d124      	bne.n	80443ea <_malloc_r+0x92>
 80443a0:	230c      	movs	r3, #12
 80443a2:	4630      	mov	r0, r6
 80443a4:	6033      	str	r3, [r6, #0]
 80443a6:	f000 fb5d 	bl	8044a64 <__malloc_unlock>
 80443aa:	e7e4      	b.n	8044376 <_malloc_r+0x1e>
 80443ac:	680b      	ldr	r3, [r1, #0]
 80443ae:	1b5b      	subs	r3, r3, r5
 80443b0:	d418      	bmi.n	80443e4 <_malloc_r+0x8c>
 80443b2:	2b0b      	cmp	r3, #11
 80443b4:	d90f      	bls.n	80443d6 <_malloc_r+0x7e>
 80443b6:	18cc      	adds	r4, r1, r3
 80443b8:	600b      	str	r3, [r1, #0]
 80443ba:	50cd      	str	r5, [r1, r3]
 80443bc:	4630      	mov	r0, r6
 80443be:	f000 fb51 	bl	8044a64 <__malloc_unlock>
 80443c2:	f104 000b 	add.w	r0, r4, #11
 80443c6:	1d23      	adds	r3, r4, #4
 80443c8:	f020 0007 	bic.w	r0, r0, #7
 80443cc:	1ac3      	subs	r3, r0, r3
 80443ce:	d0d3      	beq.n	8044378 <_malloc_r+0x20>
 80443d0:	425a      	negs	r2, r3
 80443d2:	50e2      	str	r2, [r4, r3]
 80443d4:	e7d0      	b.n	8044378 <_malloc_r+0x20>
 80443d6:	428c      	cmp	r4, r1
 80443d8:	684b      	ldr	r3, [r1, #4]
 80443da:	bf1a      	itte	ne
 80443dc:	6063      	strne	r3, [r4, #4]
 80443de:	460c      	movne	r4, r1
 80443e0:	6013      	streq	r3, [r2, #0]
 80443e2:	e7eb      	b.n	80443bc <_malloc_r+0x64>
 80443e4:	460c      	mov	r4, r1
 80443e6:	6849      	ldr	r1, [r1, #4]
 80443e8:	e7cc      	b.n	8044384 <_malloc_r+0x2c>
 80443ea:	1cc4      	adds	r4, r0, #3
 80443ec:	f024 0403 	bic.w	r4, r4, #3
 80443f0:	42a0      	cmp	r0, r4
 80443f2:	d005      	beq.n	8044400 <_malloc_r+0xa8>
 80443f4:	1a21      	subs	r1, r4, r0
 80443f6:	4630      	mov	r0, r6
 80443f8:	f000 fae4 	bl	80449c4 <_sbrk_r>
 80443fc:	3001      	adds	r0, #1
 80443fe:	d0cf      	beq.n	80443a0 <_malloc_r+0x48>
 8044400:	6025      	str	r5, [r4, #0]
 8044402:	e7db      	b.n	80443bc <_malloc_r+0x64>
 8044404:	2001827c 	.word	0x2001827c
 8044408:	20018280 	.word	0x20018280

0804440c <__ssputs_r>:
 804440c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8044410:	688e      	ldr	r6, [r1, #8]
 8044412:	4682      	mov	sl, r0
 8044414:	460c      	mov	r4, r1
 8044416:	4690      	mov	r8, r2
 8044418:	429e      	cmp	r6, r3
 804441a:	4699      	mov	r9, r3
 804441c:	d837      	bhi.n	804448e <__ssputs_r+0x82>
 804441e:	898a      	ldrh	r2, [r1, #12]
 8044420:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8044424:	d031      	beq.n	804448a <__ssputs_r+0x7e>
 8044426:	6825      	ldr	r5, [r4, #0]
 8044428:	2302      	movs	r3, #2
 804442a:	6909      	ldr	r1, [r1, #16]
 804442c:	1a6f      	subs	r7, r5, r1
 804442e:	6965      	ldr	r5, [r4, #20]
 8044430:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8044434:	fb95 f5f3 	sdiv	r5, r5, r3
 8044438:	f109 0301 	add.w	r3, r9, #1
 804443c:	443b      	add	r3, r7
 804443e:	429d      	cmp	r5, r3
 8044440:	bf38      	it	cc
 8044442:	461d      	movcc	r5, r3
 8044444:	0553      	lsls	r3, r2, #21
 8044446:	d530      	bpl.n	80444aa <__ssputs_r+0x9e>
 8044448:	4629      	mov	r1, r5
 804444a:	f7ff ff85 	bl	8044358 <_malloc_r>
 804444e:	4606      	mov	r6, r0
 8044450:	b950      	cbnz	r0, 8044468 <__ssputs_r+0x5c>
 8044452:	230c      	movs	r3, #12
 8044454:	f04f 30ff 	mov.w	r0, #4294967295
 8044458:	f8ca 3000 	str.w	r3, [sl]
 804445c:	89a3      	ldrh	r3, [r4, #12]
 804445e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8044462:	81a3      	strh	r3, [r4, #12]
 8044464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8044468:	463a      	mov	r2, r7
 804446a:	6921      	ldr	r1, [r4, #16]
 804446c:	f000 fad5 	bl	8044a1a <memcpy>
 8044470:	89a3      	ldrh	r3, [r4, #12]
 8044472:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8044476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 804447a:	81a3      	strh	r3, [r4, #12]
 804447c:	6126      	str	r6, [r4, #16]
 804447e:	443e      	add	r6, r7
 8044480:	6165      	str	r5, [r4, #20]
 8044482:	1bed      	subs	r5, r5, r7
 8044484:	6026      	str	r6, [r4, #0]
 8044486:	464e      	mov	r6, r9
 8044488:	60a5      	str	r5, [r4, #8]
 804448a:	454e      	cmp	r6, r9
 804448c:	d900      	bls.n	8044490 <__ssputs_r+0x84>
 804448e:	464e      	mov	r6, r9
 8044490:	4632      	mov	r2, r6
 8044492:	4641      	mov	r1, r8
 8044494:	6820      	ldr	r0, [r4, #0]
 8044496:	f000 facb 	bl	8044a30 <memmove>
 804449a:	68a3      	ldr	r3, [r4, #8]
 804449c:	2000      	movs	r0, #0
 804449e:	1b9b      	subs	r3, r3, r6
 80444a0:	60a3      	str	r3, [r4, #8]
 80444a2:	6823      	ldr	r3, [r4, #0]
 80444a4:	441e      	add	r6, r3
 80444a6:	6026      	str	r6, [r4, #0]
 80444a8:	e7dc      	b.n	8044464 <__ssputs_r+0x58>
 80444aa:	462a      	mov	r2, r5
 80444ac:	f000 fb2a 	bl	8044b04 <_realloc_r>
 80444b0:	4606      	mov	r6, r0
 80444b2:	2800      	cmp	r0, #0
 80444b4:	d1e2      	bne.n	804447c <__ssputs_r+0x70>
 80444b6:	6921      	ldr	r1, [r4, #16]
 80444b8:	4650      	mov	r0, sl
 80444ba:	f000 fad5 	bl	8044a68 <_free_r>
 80444be:	e7c8      	b.n	8044452 <__ssputs_r+0x46>

080444c0 <_svfiprintf_r>:
 80444c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80444c4:	461d      	mov	r5, r3
 80444c6:	898b      	ldrh	r3, [r1, #12]
 80444c8:	b09d      	sub	sp, #116	; 0x74
 80444ca:	4680      	mov	r8, r0
 80444cc:	061f      	lsls	r7, r3, #24
 80444ce:	460c      	mov	r4, r1
 80444d0:	4616      	mov	r6, r2
 80444d2:	d50f      	bpl.n	80444f4 <_svfiprintf_r+0x34>
 80444d4:	690b      	ldr	r3, [r1, #16]
 80444d6:	b96b      	cbnz	r3, 80444f4 <_svfiprintf_r+0x34>
 80444d8:	2140      	movs	r1, #64	; 0x40
 80444da:	f7ff ff3d 	bl	8044358 <_malloc_r>
 80444de:	6020      	str	r0, [r4, #0]
 80444e0:	6120      	str	r0, [r4, #16]
 80444e2:	b928      	cbnz	r0, 80444f0 <_svfiprintf_r+0x30>
 80444e4:	230c      	movs	r3, #12
 80444e6:	f8c8 3000 	str.w	r3, [r8]
 80444ea:	f04f 30ff 	mov.w	r0, #4294967295
 80444ee:	e0c8      	b.n	8044682 <_svfiprintf_r+0x1c2>
 80444f0:	2340      	movs	r3, #64	; 0x40
 80444f2:	6163      	str	r3, [r4, #20]
 80444f4:	2300      	movs	r3, #0
 80444f6:	f04f 0b01 	mov.w	fp, #1
 80444fa:	9503      	str	r5, [sp, #12]
 80444fc:	9309      	str	r3, [sp, #36]	; 0x24
 80444fe:	2320      	movs	r3, #32
 8044500:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8044504:	2330      	movs	r3, #48	; 0x30
 8044506:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 804450a:	4637      	mov	r7, r6
 804450c:	463d      	mov	r5, r7
 804450e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8044512:	b10b      	cbz	r3, 8044518 <_svfiprintf_r+0x58>
 8044514:	2b25      	cmp	r3, #37	; 0x25
 8044516:	d13e      	bne.n	8044596 <_svfiprintf_r+0xd6>
 8044518:	ebb7 0a06 	subs.w	sl, r7, r6
 804451c:	d00b      	beq.n	8044536 <_svfiprintf_r+0x76>
 804451e:	4653      	mov	r3, sl
 8044520:	4632      	mov	r2, r6
 8044522:	4621      	mov	r1, r4
 8044524:	4640      	mov	r0, r8
 8044526:	f7ff ff71 	bl	804440c <__ssputs_r>
 804452a:	3001      	adds	r0, #1
 804452c:	f000 80a4 	beq.w	8044678 <_svfiprintf_r+0x1b8>
 8044530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8044532:	4453      	add	r3, sl
 8044534:	9309      	str	r3, [sp, #36]	; 0x24
 8044536:	783b      	ldrb	r3, [r7, #0]
 8044538:	2b00      	cmp	r3, #0
 804453a:	f000 809d 	beq.w	8044678 <_svfiprintf_r+0x1b8>
 804453e:	2300      	movs	r3, #0
 8044540:	f04f 32ff 	mov.w	r2, #4294967295
 8044544:	9304      	str	r3, [sp, #16]
 8044546:	9307      	str	r3, [sp, #28]
 8044548:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 804454c:	931a      	str	r3, [sp, #104]	; 0x68
 804454e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8044552:	462f      	mov	r7, r5
 8044554:	2205      	movs	r2, #5
 8044556:	4851      	ldr	r0, [pc, #324]	; (804469c <_svfiprintf_r+0x1dc>)
 8044558:	f817 1b01 	ldrb.w	r1, [r7], #1
 804455c:	f000 fa4f 	bl	80449fe <memchr>
 8044560:	9b04      	ldr	r3, [sp, #16]
 8044562:	b9d0      	cbnz	r0, 804459a <_svfiprintf_r+0xda>
 8044564:	06d9      	lsls	r1, r3, #27
 8044566:	bf44      	itt	mi
 8044568:	2220      	movmi	r2, #32
 804456a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 804456e:	071a      	lsls	r2, r3, #28
 8044570:	bf44      	itt	mi
 8044572:	222b      	movmi	r2, #43	; 0x2b
 8044574:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8044578:	782a      	ldrb	r2, [r5, #0]
 804457a:	2a2a      	cmp	r2, #42	; 0x2a
 804457c:	d015      	beq.n	80445aa <_svfiprintf_r+0xea>
 804457e:	462f      	mov	r7, r5
 8044580:	9a07      	ldr	r2, [sp, #28]
 8044582:	2000      	movs	r0, #0
 8044584:	250a      	movs	r5, #10
 8044586:	4639      	mov	r1, r7
 8044588:	f811 3b01 	ldrb.w	r3, [r1], #1
 804458c:	3b30      	subs	r3, #48	; 0x30
 804458e:	2b09      	cmp	r3, #9
 8044590:	d94d      	bls.n	804462e <_svfiprintf_r+0x16e>
 8044592:	b1b8      	cbz	r0, 80445c4 <_svfiprintf_r+0x104>
 8044594:	e00f      	b.n	80445b6 <_svfiprintf_r+0xf6>
 8044596:	462f      	mov	r7, r5
 8044598:	e7b8      	b.n	804450c <_svfiprintf_r+0x4c>
 804459a:	4a40      	ldr	r2, [pc, #256]	; (804469c <_svfiprintf_r+0x1dc>)
 804459c:	463d      	mov	r5, r7
 804459e:	1a80      	subs	r0, r0, r2
 80445a0:	fa0b f000 	lsl.w	r0, fp, r0
 80445a4:	4318      	orrs	r0, r3
 80445a6:	9004      	str	r0, [sp, #16]
 80445a8:	e7d3      	b.n	8044552 <_svfiprintf_r+0x92>
 80445aa:	9a03      	ldr	r2, [sp, #12]
 80445ac:	1d11      	adds	r1, r2, #4
 80445ae:	6812      	ldr	r2, [r2, #0]
 80445b0:	2a00      	cmp	r2, #0
 80445b2:	9103      	str	r1, [sp, #12]
 80445b4:	db01      	blt.n	80445ba <_svfiprintf_r+0xfa>
 80445b6:	9207      	str	r2, [sp, #28]
 80445b8:	e004      	b.n	80445c4 <_svfiprintf_r+0x104>
 80445ba:	4252      	negs	r2, r2
 80445bc:	f043 0302 	orr.w	r3, r3, #2
 80445c0:	9207      	str	r2, [sp, #28]
 80445c2:	9304      	str	r3, [sp, #16]
 80445c4:	783b      	ldrb	r3, [r7, #0]
 80445c6:	2b2e      	cmp	r3, #46	; 0x2e
 80445c8:	d10c      	bne.n	80445e4 <_svfiprintf_r+0x124>
 80445ca:	787b      	ldrb	r3, [r7, #1]
 80445cc:	2b2a      	cmp	r3, #42	; 0x2a
 80445ce:	d133      	bne.n	8044638 <_svfiprintf_r+0x178>
 80445d0:	9b03      	ldr	r3, [sp, #12]
 80445d2:	3702      	adds	r7, #2
 80445d4:	1d1a      	adds	r2, r3, #4
 80445d6:	681b      	ldr	r3, [r3, #0]
 80445d8:	2b00      	cmp	r3, #0
 80445da:	9203      	str	r2, [sp, #12]
 80445dc:	bfb8      	it	lt
 80445de:	f04f 33ff 	movlt.w	r3, #4294967295
 80445e2:	9305      	str	r3, [sp, #20]
 80445e4:	4d2e      	ldr	r5, [pc, #184]	; (80446a0 <_svfiprintf_r+0x1e0>)
 80445e6:	2203      	movs	r2, #3
 80445e8:	7839      	ldrb	r1, [r7, #0]
 80445ea:	4628      	mov	r0, r5
 80445ec:	f000 fa07 	bl	80449fe <memchr>
 80445f0:	b138      	cbz	r0, 8044602 <_svfiprintf_r+0x142>
 80445f2:	2340      	movs	r3, #64	; 0x40
 80445f4:	1b40      	subs	r0, r0, r5
 80445f6:	3701      	adds	r7, #1
 80445f8:	fa03 f000 	lsl.w	r0, r3, r0
 80445fc:	9b04      	ldr	r3, [sp, #16]
 80445fe:	4303      	orrs	r3, r0
 8044600:	9304      	str	r3, [sp, #16]
 8044602:	7839      	ldrb	r1, [r7, #0]
 8044604:	2206      	movs	r2, #6
 8044606:	4827      	ldr	r0, [pc, #156]	; (80446a4 <_svfiprintf_r+0x1e4>)
 8044608:	1c7e      	adds	r6, r7, #1
 804460a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 804460e:	f000 f9f6 	bl	80449fe <memchr>
 8044612:	2800      	cmp	r0, #0
 8044614:	d038      	beq.n	8044688 <_svfiprintf_r+0x1c8>
 8044616:	4b24      	ldr	r3, [pc, #144]	; (80446a8 <_svfiprintf_r+0x1e8>)
 8044618:	bb13      	cbnz	r3, 8044660 <_svfiprintf_r+0x1a0>
 804461a:	9b03      	ldr	r3, [sp, #12]
 804461c:	3307      	adds	r3, #7
 804461e:	f023 0307 	bic.w	r3, r3, #7
 8044622:	3308      	adds	r3, #8
 8044624:	9303      	str	r3, [sp, #12]
 8044626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8044628:	444b      	add	r3, r9
 804462a:	9309      	str	r3, [sp, #36]	; 0x24
 804462c:	e76d      	b.n	804450a <_svfiprintf_r+0x4a>
 804462e:	fb05 3202 	mla	r2, r5, r2, r3
 8044632:	2001      	movs	r0, #1
 8044634:	460f      	mov	r7, r1
 8044636:	e7a6      	b.n	8044586 <_svfiprintf_r+0xc6>
 8044638:	2300      	movs	r3, #0
 804463a:	3701      	adds	r7, #1
 804463c:	250a      	movs	r5, #10
 804463e:	4619      	mov	r1, r3
 8044640:	9305      	str	r3, [sp, #20]
 8044642:	4638      	mov	r0, r7
 8044644:	f810 2b01 	ldrb.w	r2, [r0], #1
 8044648:	3a30      	subs	r2, #48	; 0x30
 804464a:	2a09      	cmp	r2, #9
 804464c:	d903      	bls.n	8044656 <_svfiprintf_r+0x196>
 804464e:	2b00      	cmp	r3, #0
 8044650:	d0c8      	beq.n	80445e4 <_svfiprintf_r+0x124>
 8044652:	9105      	str	r1, [sp, #20]
 8044654:	e7c6      	b.n	80445e4 <_svfiprintf_r+0x124>
 8044656:	fb05 2101 	mla	r1, r5, r1, r2
 804465a:	2301      	movs	r3, #1
 804465c:	4607      	mov	r7, r0
 804465e:	e7f0      	b.n	8044642 <_svfiprintf_r+0x182>
 8044660:	ab03      	add	r3, sp, #12
 8044662:	4622      	mov	r2, r4
 8044664:	a904      	add	r1, sp, #16
 8044666:	4640      	mov	r0, r8
 8044668:	9300      	str	r3, [sp, #0]
 804466a:	4b10      	ldr	r3, [pc, #64]	; (80446ac <_svfiprintf_r+0x1ec>)
 804466c:	e000      	b.n	8044670 <_svfiprintf_r+0x1b0>
 804466e:	bf00      	nop
 8044670:	f1b0 3fff 	cmp.w	r0, #4294967295
 8044674:	4681      	mov	r9, r0
 8044676:	d1d6      	bne.n	8044626 <_svfiprintf_r+0x166>
 8044678:	89a3      	ldrh	r3, [r4, #12]
 804467a:	065b      	lsls	r3, r3, #25
 804467c:	f53f af35 	bmi.w	80444ea <_svfiprintf_r+0x2a>
 8044680:	9809      	ldr	r0, [sp, #36]	; 0x24
 8044682:	b01d      	add	sp, #116	; 0x74
 8044684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8044688:	ab03      	add	r3, sp, #12
 804468a:	4622      	mov	r2, r4
 804468c:	a904      	add	r1, sp, #16
 804468e:	4640      	mov	r0, r8
 8044690:	9300      	str	r3, [sp, #0]
 8044692:	4b06      	ldr	r3, [pc, #24]	; (80446ac <_svfiprintf_r+0x1ec>)
 8044694:	f000 f884 	bl	80447a0 <_printf_i>
 8044698:	e7ea      	b.n	8044670 <_svfiprintf_r+0x1b0>
 804469a:	bf00      	nop
 804469c:	08044f5a 	.word	0x08044f5a
 80446a0:	08044f60 	.word	0x08044f60
 80446a4:	08044f64 	.word	0x08044f64
 80446a8:	00000000 	.word	0x00000000
 80446ac:	0804440d 	.word	0x0804440d

080446b0 <_printf_common>:
 80446b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80446b4:	4691      	mov	r9, r2
 80446b6:	461f      	mov	r7, r3
 80446b8:	688a      	ldr	r2, [r1, #8]
 80446ba:	4606      	mov	r6, r0
 80446bc:	690b      	ldr	r3, [r1, #16]
 80446be:	460c      	mov	r4, r1
 80446c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80446c4:	4293      	cmp	r3, r2
 80446c6:	bfb8      	it	lt
 80446c8:	4613      	movlt	r3, r2
 80446ca:	f8c9 3000 	str.w	r3, [r9]
 80446ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80446d2:	b112      	cbz	r2, 80446da <_printf_common+0x2a>
 80446d4:	3301      	adds	r3, #1
 80446d6:	f8c9 3000 	str.w	r3, [r9]
 80446da:	6823      	ldr	r3, [r4, #0]
 80446dc:	0699      	lsls	r1, r3, #26
 80446de:	bf42      	ittt	mi
 80446e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80446e4:	3302      	addmi	r3, #2
 80446e6:	f8c9 3000 	strmi.w	r3, [r9]
 80446ea:	6825      	ldr	r5, [r4, #0]
 80446ec:	f015 0506 	ands.w	r5, r5, #6
 80446f0:	d107      	bne.n	8044702 <_printf_common+0x52>
 80446f2:	f104 0a19 	add.w	sl, r4, #25
 80446f6:	68e3      	ldr	r3, [r4, #12]
 80446f8:	f8d9 2000 	ldr.w	r2, [r9]
 80446fc:	1a9b      	subs	r3, r3, r2
 80446fe:	42ab      	cmp	r3, r5
 8044700:	dc2b      	bgt.n	804475a <_printf_common+0xaa>
 8044702:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8044706:	6822      	ldr	r2, [r4, #0]
 8044708:	3300      	adds	r3, #0
 804470a:	bf18      	it	ne
 804470c:	2301      	movne	r3, #1
 804470e:	0692      	lsls	r2, r2, #26
 8044710:	d430      	bmi.n	8044774 <_printf_common+0xc4>
 8044712:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8044716:	4639      	mov	r1, r7
 8044718:	4630      	mov	r0, r6
 804471a:	47c0      	blx	r8
 804471c:	3001      	adds	r0, #1
 804471e:	d023      	beq.n	8044768 <_printf_common+0xb8>
 8044720:	6823      	ldr	r3, [r4, #0]
 8044722:	341a      	adds	r4, #26
 8044724:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 8044728:	f003 0306 	and.w	r3, r3, #6
 804472c:	f8d9 2000 	ldr.w	r2, [r9]
 8044730:	f04f 0900 	mov.w	r9, #0
 8044734:	2b04      	cmp	r3, #4
 8044736:	f854 3c12 	ldr.w	r3, [r4, #-18]
 804473a:	bf08      	it	eq
 804473c:	1aad      	subeq	r5, r5, r2
 804473e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8044742:	bf14      	ite	ne
 8044744:	2500      	movne	r5, #0
 8044746:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 804474a:	4293      	cmp	r3, r2
 804474c:	bfc4      	itt	gt
 804474e:	1a9b      	subgt	r3, r3, r2
 8044750:	18ed      	addgt	r5, r5, r3
 8044752:	454d      	cmp	r5, r9
 8044754:	d11a      	bne.n	804478c <_printf_common+0xdc>
 8044756:	2000      	movs	r0, #0
 8044758:	e008      	b.n	804476c <_printf_common+0xbc>
 804475a:	2301      	movs	r3, #1
 804475c:	4652      	mov	r2, sl
 804475e:	4639      	mov	r1, r7
 8044760:	4630      	mov	r0, r6
 8044762:	47c0      	blx	r8
 8044764:	3001      	adds	r0, #1
 8044766:	d103      	bne.n	8044770 <_printf_common+0xc0>
 8044768:	f04f 30ff 	mov.w	r0, #4294967295
 804476c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8044770:	3501      	adds	r5, #1
 8044772:	e7c0      	b.n	80446f6 <_printf_common+0x46>
 8044774:	18e1      	adds	r1, r4, r3
 8044776:	1c5a      	adds	r2, r3, #1
 8044778:	2030      	movs	r0, #48	; 0x30
 804477a:	3302      	adds	r3, #2
 804477c:	4422      	add	r2, r4
 804477e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8044782:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8044786:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 804478a:	e7c2      	b.n	8044712 <_printf_common+0x62>
 804478c:	2301      	movs	r3, #1
 804478e:	4622      	mov	r2, r4
 8044790:	4639      	mov	r1, r7
 8044792:	4630      	mov	r0, r6
 8044794:	47c0      	blx	r8
 8044796:	3001      	adds	r0, #1
 8044798:	d0e6      	beq.n	8044768 <_printf_common+0xb8>
 804479a:	f109 0901 	add.w	r9, r9, #1
 804479e:	e7d8      	b.n	8044752 <_printf_common+0xa2>

080447a0 <_printf_i>:
 80447a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80447a4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80447a8:	460c      	mov	r4, r1
 80447aa:	7e09      	ldrb	r1, [r1, #24]
 80447ac:	b085      	sub	sp, #20
 80447ae:	4617      	mov	r7, r2
 80447b0:	4606      	mov	r6, r0
 80447b2:	296e      	cmp	r1, #110	; 0x6e
 80447b4:	4698      	mov	r8, r3
 80447b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80447b8:	f000 80b3 	beq.w	8044922 <_printf_i+0x182>
 80447bc:	d822      	bhi.n	8044804 <_printf_i+0x64>
 80447be:	2963      	cmp	r1, #99	; 0x63
 80447c0:	d036      	beq.n	8044830 <_printf_i+0x90>
 80447c2:	d80a      	bhi.n	80447da <_printf_i+0x3a>
 80447c4:	2900      	cmp	r1, #0
 80447c6:	f000 80b9 	beq.w	804493c <_printf_i+0x19c>
 80447ca:	2958      	cmp	r1, #88	; 0x58
 80447cc:	f000 8083 	beq.w	80448d6 <_printf_i+0x136>
 80447d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80447d4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80447d8:	e032      	b.n	8044840 <_printf_i+0xa0>
 80447da:	2964      	cmp	r1, #100	; 0x64
 80447dc:	d001      	beq.n	80447e2 <_printf_i+0x42>
 80447de:	2969      	cmp	r1, #105	; 0x69
 80447e0:	d1f6      	bne.n	80447d0 <_printf_i+0x30>
 80447e2:	6820      	ldr	r0, [r4, #0]
 80447e4:	6813      	ldr	r3, [r2, #0]
 80447e6:	0605      	lsls	r5, r0, #24
 80447e8:	f103 0104 	add.w	r1, r3, #4
 80447ec:	d52a      	bpl.n	8044844 <_printf_i+0xa4>
 80447ee:	681b      	ldr	r3, [r3, #0]
 80447f0:	6011      	str	r1, [r2, #0]
 80447f2:	2b00      	cmp	r3, #0
 80447f4:	da03      	bge.n	80447fe <_printf_i+0x5e>
 80447f6:	222d      	movs	r2, #45	; 0x2d
 80447f8:	425b      	negs	r3, r3
 80447fa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80447fe:	486f      	ldr	r0, [pc, #444]	; (80449bc <_printf_i+0x21c>)
 8044800:	220a      	movs	r2, #10
 8044802:	e039      	b.n	8044878 <_printf_i+0xd8>
 8044804:	2973      	cmp	r1, #115	; 0x73
 8044806:	f000 809d 	beq.w	8044944 <_printf_i+0x1a4>
 804480a:	d808      	bhi.n	804481e <_printf_i+0x7e>
 804480c:	296f      	cmp	r1, #111	; 0x6f
 804480e:	d020      	beq.n	8044852 <_printf_i+0xb2>
 8044810:	2970      	cmp	r1, #112	; 0x70
 8044812:	d1dd      	bne.n	80447d0 <_printf_i+0x30>
 8044814:	6823      	ldr	r3, [r4, #0]
 8044816:	f043 0320 	orr.w	r3, r3, #32
 804481a:	6023      	str	r3, [r4, #0]
 804481c:	e003      	b.n	8044826 <_printf_i+0x86>
 804481e:	2975      	cmp	r1, #117	; 0x75
 8044820:	d017      	beq.n	8044852 <_printf_i+0xb2>
 8044822:	2978      	cmp	r1, #120	; 0x78
 8044824:	d1d4      	bne.n	80447d0 <_printf_i+0x30>
 8044826:	2378      	movs	r3, #120	; 0x78
 8044828:	4865      	ldr	r0, [pc, #404]	; (80449c0 <_printf_i+0x220>)
 804482a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 804482e:	e055      	b.n	80448dc <_printf_i+0x13c>
 8044830:	6813      	ldr	r3, [r2, #0]
 8044832:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8044836:	1d19      	adds	r1, r3, #4
 8044838:	681b      	ldr	r3, [r3, #0]
 804483a:	6011      	str	r1, [r2, #0]
 804483c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8044840:	2301      	movs	r3, #1
 8044842:	e08c      	b.n	804495e <_printf_i+0x1be>
 8044844:	681b      	ldr	r3, [r3, #0]
 8044846:	f010 0f40 	tst.w	r0, #64	; 0x40
 804484a:	6011      	str	r1, [r2, #0]
 804484c:	bf18      	it	ne
 804484e:	b21b      	sxthne	r3, r3
 8044850:	e7cf      	b.n	80447f2 <_printf_i+0x52>
 8044852:	6813      	ldr	r3, [r2, #0]
 8044854:	6825      	ldr	r5, [r4, #0]
 8044856:	1d18      	adds	r0, r3, #4
 8044858:	6010      	str	r0, [r2, #0]
 804485a:	0628      	lsls	r0, r5, #24
 804485c:	d501      	bpl.n	8044862 <_printf_i+0xc2>
 804485e:	681b      	ldr	r3, [r3, #0]
 8044860:	e002      	b.n	8044868 <_printf_i+0xc8>
 8044862:	0668      	lsls	r0, r5, #25
 8044864:	d5fb      	bpl.n	804485e <_printf_i+0xbe>
 8044866:	881b      	ldrh	r3, [r3, #0]
 8044868:	296f      	cmp	r1, #111	; 0x6f
 804486a:	4854      	ldr	r0, [pc, #336]	; (80449bc <_printf_i+0x21c>)
 804486c:	bf14      	ite	ne
 804486e:	220a      	movne	r2, #10
 8044870:	2208      	moveq	r2, #8
 8044872:	2100      	movs	r1, #0
 8044874:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8044878:	6865      	ldr	r5, [r4, #4]
 804487a:	2d00      	cmp	r5, #0
 804487c:	60a5      	str	r5, [r4, #8]
 804487e:	f2c0 8095 	blt.w	80449ac <_printf_i+0x20c>
 8044882:	6821      	ldr	r1, [r4, #0]
 8044884:	f021 0104 	bic.w	r1, r1, #4
 8044888:	6021      	str	r1, [r4, #0]
 804488a:	2b00      	cmp	r3, #0
 804488c:	d13d      	bne.n	804490a <_printf_i+0x16a>
 804488e:	2d00      	cmp	r5, #0
 8044890:	f040 808e 	bne.w	80449b0 <_printf_i+0x210>
 8044894:	4665      	mov	r5, ip
 8044896:	2a08      	cmp	r2, #8
 8044898:	d10b      	bne.n	80448b2 <_printf_i+0x112>
 804489a:	6823      	ldr	r3, [r4, #0]
 804489c:	07db      	lsls	r3, r3, #31
 804489e:	d508      	bpl.n	80448b2 <_printf_i+0x112>
 80448a0:	6923      	ldr	r3, [r4, #16]
 80448a2:	6862      	ldr	r2, [r4, #4]
 80448a4:	429a      	cmp	r2, r3
 80448a6:	bfde      	ittt	le
 80448a8:	2330      	movle	r3, #48	; 0x30
 80448aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80448ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 80448b2:	ebac 0305 	sub.w	r3, ip, r5
 80448b6:	6123      	str	r3, [r4, #16]
 80448b8:	f8cd 8000 	str.w	r8, [sp]
 80448bc:	463b      	mov	r3, r7
 80448be:	aa03      	add	r2, sp, #12
 80448c0:	4621      	mov	r1, r4
 80448c2:	4630      	mov	r0, r6
 80448c4:	f7ff fef4 	bl	80446b0 <_printf_common>
 80448c8:	3001      	adds	r0, #1
 80448ca:	d14d      	bne.n	8044968 <_printf_i+0x1c8>
 80448cc:	f04f 30ff 	mov.w	r0, #4294967295
 80448d0:	b005      	add	sp, #20
 80448d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80448d6:	4839      	ldr	r0, [pc, #228]	; (80449bc <_printf_i+0x21c>)
 80448d8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80448dc:	6813      	ldr	r3, [r2, #0]
 80448de:	6821      	ldr	r1, [r4, #0]
 80448e0:	1d1d      	adds	r5, r3, #4
 80448e2:	681b      	ldr	r3, [r3, #0]
 80448e4:	6015      	str	r5, [r2, #0]
 80448e6:	060a      	lsls	r2, r1, #24
 80448e8:	d50b      	bpl.n	8044902 <_printf_i+0x162>
 80448ea:	07ca      	lsls	r2, r1, #31
 80448ec:	bf44      	itt	mi
 80448ee:	f041 0120 	orrmi.w	r1, r1, #32
 80448f2:	6021      	strmi	r1, [r4, #0]
 80448f4:	b91b      	cbnz	r3, 80448fe <_printf_i+0x15e>
 80448f6:	6822      	ldr	r2, [r4, #0]
 80448f8:	f022 0220 	bic.w	r2, r2, #32
 80448fc:	6022      	str	r2, [r4, #0]
 80448fe:	2210      	movs	r2, #16
 8044900:	e7b7      	b.n	8044872 <_printf_i+0xd2>
 8044902:	064d      	lsls	r5, r1, #25
 8044904:	bf48      	it	mi
 8044906:	b29b      	uxthmi	r3, r3
 8044908:	e7ef      	b.n	80448ea <_printf_i+0x14a>
 804490a:	4665      	mov	r5, ip
 804490c:	fbb3 f1f2 	udiv	r1, r3, r2
 8044910:	fb02 3311 	mls	r3, r2, r1, r3
 8044914:	5cc3      	ldrb	r3, [r0, r3]
 8044916:	f805 3d01 	strb.w	r3, [r5, #-1]!
 804491a:	460b      	mov	r3, r1
 804491c:	2900      	cmp	r1, #0
 804491e:	d1f5      	bne.n	804490c <_printf_i+0x16c>
 8044920:	e7b9      	b.n	8044896 <_printf_i+0xf6>
 8044922:	6813      	ldr	r3, [r2, #0]
 8044924:	6825      	ldr	r5, [r4, #0]
 8044926:	1d18      	adds	r0, r3, #4
 8044928:	6961      	ldr	r1, [r4, #20]
 804492a:	6010      	str	r0, [r2, #0]
 804492c:	0628      	lsls	r0, r5, #24
 804492e:	681b      	ldr	r3, [r3, #0]
 8044930:	d501      	bpl.n	8044936 <_printf_i+0x196>
 8044932:	6019      	str	r1, [r3, #0]
 8044934:	e002      	b.n	804493c <_printf_i+0x19c>
 8044936:	066a      	lsls	r2, r5, #25
 8044938:	d5fb      	bpl.n	8044932 <_printf_i+0x192>
 804493a:	8019      	strh	r1, [r3, #0]
 804493c:	2300      	movs	r3, #0
 804493e:	4665      	mov	r5, ip
 8044940:	6123      	str	r3, [r4, #16]
 8044942:	e7b9      	b.n	80448b8 <_printf_i+0x118>
 8044944:	6813      	ldr	r3, [r2, #0]
 8044946:	1d19      	adds	r1, r3, #4
 8044948:	6011      	str	r1, [r2, #0]
 804494a:	2100      	movs	r1, #0
 804494c:	681d      	ldr	r5, [r3, #0]
 804494e:	6862      	ldr	r2, [r4, #4]
 8044950:	4628      	mov	r0, r5
 8044952:	f000 f854 	bl	80449fe <memchr>
 8044956:	b108      	cbz	r0, 804495c <_printf_i+0x1bc>
 8044958:	1b40      	subs	r0, r0, r5
 804495a:	6060      	str	r0, [r4, #4]
 804495c:	6863      	ldr	r3, [r4, #4]
 804495e:	6123      	str	r3, [r4, #16]
 8044960:	2300      	movs	r3, #0
 8044962:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8044966:	e7a7      	b.n	80448b8 <_printf_i+0x118>
 8044968:	6923      	ldr	r3, [r4, #16]
 804496a:	462a      	mov	r2, r5
 804496c:	4639      	mov	r1, r7
 804496e:	4630      	mov	r0, r6
 8044970:	47c0      	blx	r8
 8044972:	3001      	adds	r0, #1
 8044974:	d0aa      	beq.n	80448cc <_printf_i+0x12c>
 8044976:	6823      	ldr	r3, [r4, #0]
 8044978:	079b      	lsls	r3, r3, #30
 804497a:	d413      	bmi.n	80449a4 <_printf_i+0x204>
 804497c:	68e0      	ldr	r0, [r4, #12]
 804497e:	9b03      	ldr	r3, [sp, #12]
 8044980:	4298      	cmp	r0, r3
 8044982:	bfb8      	it	lt
 8044984:	4618      	movlt	r0, r3
 8044986:	e7a3      	b.n	80448d0 <_printf_i+0x130>
 8044988:	2301      	movs	r3, #1
 804498a:	464a      	mov	r2, r9
 804498c:	4639      	mov	r1, r7
 804498e:	4630      	mov	r0, r6
 8044990:	47c0      	blx	r8
 8044992:	3001      	adds	r0, #1
 8044994:	d09a      	beq.n	80448cc <_printf_i+0x12c>
 8044996:	3501      	adds	r5, #1
 8044998:	68e3      	ldr	r3, [r4, #12]
 804499a:	9a03      	ldr	r2, [sp, #12]
 804499c:	1a9b      	subs	r3, r3, r2
 804499e:	42ab      	cmp	r3, r5
 80449a0:	dcf2      	bgt.n	8044988 <_printf_i+0x1e8>
 80449a2:	e7eb      	b.n	804497c <_printf_i+0x1dc>
 80449a4:	2500      	movs	r5, #0
 80449a6:	f104 0919 	add.w	r9, r4, #25
 80449aa:	e7f5      	b.n	8044998 <_printf_i+0x1f8>
 80449ac:	2b00      	cmp	r3, #0
 80449ae:	d1ac      	bne.n	804490a <_printf_i+0x16a>
 80449b0:	7803      	ldrb	r3, [r0, #0]
 80449b2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80449b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80449ba:	e76c      	b.n	8044896 <_printf_i+0xf6>
 80449bc:	08044f6b 	.word	0x08044f6b
 80449c0:	08044f7c 	.word	0x08044f7c

080449c4 <_sbrk_r>:
 80449c4:	b538      	push	{r3, r4, r5, lr}
 80449c6:	2300      	movs	r3, #0
 80449c8:	4c05      	ldr	r4, [pc, #20]	; (80449e0 <_sbrk_r+0x1c>)
 80449ca:	4605      	mov	r5, r0
 80449cc:	4608      	mov	r0, r1
 80449ce:	6023      	str	r3, [r4, #0]
 80449d0:	f7fc fed8 	bl	8041784 <_sbrk>
 80449d4:	1c43      	adds	r3, r0, #1
 80449d6:	d102      	bne.n	80449de <_sbrk_r+0x1a>
 80449d8:	6823      	ldr	r3, [r4, #0]
 80449da:	b103      	cbz	r3, 80449de <_sbrk_r+0x1a>
 80449dc:	602b      	str	r3, [r5, #0]
 80449de:	bd38      	pop	{r3, r4, r5, pc}
 80449e0:	20018330 	.word	0x20018330

080449e4 <__ascii_wctomb>:
 80449e4:	b149      	cbz	r1, 80449fa <__ascii_wctomb+0x16>
 80449e6:	2aff      	cmp	r2, #255	; 0xff
 80449e8:	bf8d      	iteet	hi
 80449ea:	238a      	movhi	r3, #138	; 0x8a
 80449ec:	700a      	strbls	r2, [r1, #0]
 80449ee:	2001      	movls	r0, #1
 80449f0:	6003      	strhi	r3, [r0, #0]
 80449f2:	bf88      	it	hi
 80449f4:	f04f 30ff 	movhi.w	r0, #4294967295
 80449f8:	4770      	bx	lr
 80449fa:	4608      	mov	r0, r1
 80449fc:	4770      	bx	lr

080449fe <memchr>:
 80449fe:	b2c9      	uxtb	r1, r1
 8044a00:	4402      	add	r2, r0
 8044a02:	b510      	push	{r4, lr}
 8044a04:	4290      	cmp	r0, r2
 8044a06:	4603      	mov	r3, r0
 8044a08:	d101      	bne.n	8044a0e <memchr+0x10>
 8044a0a:	2300      	movs	r3, #0
 8044a0c:	e003      	b.n	8044a16 <memchr+0x18>
 8044a0e:	781c      	ldrb	r4, [r3, #0]
 8044a10:	3001      	adds	r0, #1
 8044a12:	428c      	cmp	r4, r1
 8044a14:	d1f6      	bne.n	8044a04 <memchr+0x6>
 8044a16:	4618      	mov	r0, r3
 8044a18:	bd10      	pop	{r4, pc}

08044a1a <memcpy>:
 8044a1a:	1e43      	subs	r3, r0, #1
 8044a1c:	440a      	add	r2, r1
 8044a1e:	b510      	push	{r4, lr}
 8044a20:	4291      	cmp	r1, r2
 8044a22:	d100      	bne.n	8044a26 <memcpy+0xc>
 8044a24:	bd10      	pop	{r4, pc}
 8044a26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8044a2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8044a2e:	e7f7      	b.n	8044a20 <memcpy+0x6>

08044a30 <memmove>:
 8044a30:	4288      	cmp	r0, r1
 8044a32:	eb01 0302 	add.w	r3, r1, r2
 8044a36:	b510      	push	{r4, lr}
 8044a38:	d807      	bhi.n	8044a4a <memmove+0x1a>
 8044a3a:	1e42      	subs	r2, r0, #1
 8044a3c:	4299      	cmp	r1, r3
 8044a3e:	d00a      	beq.n	8044a56 <memmove+0x26>
 8044a40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8044a44:	f802 4f01 	strb.w	r4, [r2, #1]!
 8044a48:	e7f8      	b.n	8044a3c <memmove+0xc>
 8044a4a:	4283      	cmp	r3, r0
 8044a4c:	d9f5      	bls.n	8044a3a <memmove+0xa>
 8044a4e:	1881      	adds	r1, r0, r2
 8044a50:	1ad2      	subs	r2, r2, r3
 8044a52:	42d3      	cmn	r3, r2
 8044a54:	d100      	bne.n	8044a58 <memmove+0x28>
 8044a56:	bd10      	pop	{r4, pc}
 8044a58:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8044a5c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8044a60:	e7f7      	b.n	8044a52 <memmove+0x22>

08044a62 <__malloc_lock>:
 8044a62:	4770      	bx	lr

08044a64 <__malloc_unlock>:
 8044a64:	4770      	bx	lr
	...

08044a68 <_free_r>:
 8044a68:	b538      	push	{r3, r4, r5, lr}
 8044a6a:	4605      	mov	r5, r0
 8044a6c:	2900      	cmp	r1, #0
 8044a6e:	d045      	beq.n	8044afc <_free_r+0x94>
 8044a70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8044a74:	1f0c      	subs	r4, r1, #4
 8044a76:	2b00      	cmp	r3, #0
 8044a78:	bfb8      	it	lt
 8044a7a:	18e4      	addlt	r4, r4, r3
 8044a7c:	f7ff fff1 	bl	8044a62 <__malloc_lock>
 8044a80:	4a1f      	ldr	r2, [pc, #124]	; (8044b00 <_free_r+0x98>)
 8044a82:	6813      	ldr	r3, [r2, #0]
 8044a84:	4610      	mov	r0, r2
 8044a86:	b933      	cbnz	r3, 8044a96 <_free_r+0x2e>
 8044a88:	6063      	str	r3, [r4, #4]
 8044a8a:	6014      	str	r4, [r2, #0]
 8044a8c:	4628      	mov	r0, r5
 8044a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8044a92:	f7ff bfe7 	b.w	8044a64 <__malloc_unlock>
 8044a96:	42a3      	cmp	r3, r4
 8044a98:	d90c      	bls.n	8044ab4 <_free_r+0x4c>
 8044a9a:	6821      	ldr	r1, [r4, #0]
 8044a9c:	1862      	adds	r2, r4, r1
 8044a9e:	4293      	cmp	r3, r2
 8044aa0:	bf02      	ittt	eq
 8044aa2:	681a      	ldreq	r2, [r3, #0]
 8044aa4:	685b      	ldreq	r3, [r3, #4]
 8044aa6:	1852      	addeq	r2, r2, r1
 8044aa8:	6063      	str	r3, [r4, #4]
 8044aaa:	bf08      	it	eq
 8044aac:	6022      	streq	r2, [r4, #0]
 8044aae:	6004      	str	r4, [r0, #0]
 8044ab0:	e7ec      	b.n	8044a8c <_free_r+0x24>
 8044ab2:	4613      	mov	r3, r2
 8044ab4:	685a      	ldr	r2, [r3, #4]
 8044ab6:	b10a      	cbz	r2, 8044abc <_free_r+0x54>
 8044ab8:	42a2      	cmp	r2, r4
 8044aba:	d9fa      	bls.n	8044ab2 <_free_r+0x4a>
 8044abc:	6819      	ldr	r1, [r3, #0]
 8044abe:	1858      	adds	r0, r3, r1
 8044ac0:	42a0      	cmp	r0, r4
 8044ac2:	d10b      	bne.n	8044adc <_free_r+0x74>
 8044ac4:	6820      	ldr	r0, [r4, #0]
 8044ac6:	4401      	add	r1, r0
 8044ac8:	1858      	adds	r0, r3, r1
 8044aca:	6019      	str	r1, [r3, #0]
 8044acc:	4282      	cmp	r2, r0
 8044ace:	d1dd      	bne.n	8044a8c <_free_r+0x24>
 8044ad0:	6810      	ldr	r0, [r2, #0]
 8044ad2:	6852      	ldr	r2, [r2, #4]
 8044ad4:	4401      	add	r1, r0
 8044ad6:	605a      	str	r2, [r3, #4]
 8044ad8:	6019      	str	r1, [r3, #0]
 8044ada:	e7d7      	b.n	8044a8c <_free_r+0x24>
 8044adc:	d902      	bls.n	8044ae4 <_free_r+0x7c>
 8044ade:	230c      	movs	r3, #12
 8044ae0:	602b      	str	r3, [r5, #0]
 8044ae2:	e7d3      	b.n	8044a8c <_free_r+0x24>
 8044ae4:	6820      	ldr	r0, [r4, #0]
 8044ae6:	1821      	adds	r1, r4, r0
 8044ae8:	428a      	cmp	r2, r1
 8044aea:	bf02      	ittt	eq
 8044aec:	6811      	ldreq	r1, [r2, #0]
 8044aee:	6852      	ldreq	r2, [r2, #4]
 8044af0:	1809      	addeq	r1, r1, r0
 8044af2:	6062      	str	r2, [r4, #4]
 8044af4:	bf08      	it	eq
 8044af6:	6021      	streq	r1, [r4, #0]
 8044af8:	605c      	str	r4, [r3, #4]
 8044afa:	e7c7      	b.n	8044a8c <_free_r+0x24>
 8044afc:	bd38      	pop	{r3, r4, r5, pc}
 8044afe:	bf00      	nop
 8044b00:	2001827c 	.word	0x2001827c

08044b04 <_realloc_r>:
 8044b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8044b06:	4607      	mov	r7, r0
 8044b08:	4614      	mov	r4, r2
 8044b0a:	460e      	mov	r6, r1
 8044b0c:	b921      	cbnz	r1, 8044b18 <_realloc_r+0x14>
 8044b0e:	4611      	mov	r1, r2
 8044b10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8044b14:	f7ff bc20 	b.w	8044358 <_malloc_r>
 8044b18:	b922      	cbnz	r2, 8044b24 <_realloc_r+0x20>
 8044b1a:	4625      	mov	r5, r4
 8044b1c:	f7ff ffa4 	bl	8044a68 <_free_r>
 8044b20:	4628      	mov	r0, r5
 8044b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8044b24:	f000 f814 	bl	8044b50 <_malloc_usable_size_r>
 8044b28:	42a0      	cmp	r0, r4
 8044b2a:	d20f      	bcs.n	8044b4c <_realloc_r+0x48>
 8044b2c:	4621      	mov	r1, r4
 8044b2e:	4638      	mov	r0, r7
 8044b30:	f7ff fc12 	bl	8044358 <_malloc_r>
 8044b34:	4605      	mov	r5, r0
 8044b36:	2800      	cmp	r0, #0
 8044b38:	d0f2      	beq.n	8044b20 <_realloc_r+0x1c>
 8044b3a:	4631      	mov	r1, r6
 8044b3c:	4622      	mov	r2, r4
 8044b3e:	f7ff ff6c 	bl	8044a1a <memcpy>
 8044b42:	4631      	mov	r1, r6
 8044b44:	4638      	mov	r0, r7
 8044b46:	f7ff ff8f 	bl	8044a68 <_free_r>
 8044b4a:	e7e9      	b.n	8044b20 <_realloc_r+0x1c>
 8044b4c:	4635      	mov	r5, r6
 8044b4e:	e7e7      	b.n	8044b20 <_realloc_r+0x1c>

08044b50 <_malloc_usable_size_r>:
 8044b50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8044b54:	1f18      	subs	r0, r3, #4
 8044b56:	2b00      	cmp	r3, #0
 8044b58:	bfbc      	itt	lt
 8044b5a:	580b      	ldrlt	r3, [r1, r0]
 8044b5c:	18c0      	addlt	r0, r0, r3
 8044b5e:	4770      	bx	lr

08044b60 <_gettimeofday>:
 8044b60:	4b02      	ldr	r3, [pc, #8]	; (8044b6c <_gettimeofday+0xc>)
 8044b62:	2258      	movs	r2, #88	; 0x58
 8044b64:	f04f 30ff 	mov.w	r0, #4294967295
 8044b68:	601a      	str	r2, [r3, #0]
 8044b6a:	4770      	bx	lr
 8044b6c:	20018330 	.word	0x20018330

08044b70 <_init>:
 8044b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8044b72:	bf00      	nop
 8044b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8044b76:	bc08      	pop	{r3}
 8044b78:	469e      	mov	lr, r3
 8044b7a:	4770      	bx	lr

08044b7c <_fini>:
 8044b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8044b7e:	bf00      	nop
 8044b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8044b82:	bc08      	pop	{r3}
 8044b84:	469e      	mov	lr, r3
 8044b86:	4770      	bx	lr

08044b88 <__SECURE_SystemCoreClockUpdate_veneer>:
 8044b88:	b401      	push	{r0}
 8044b8a:	4802      	ldr	r0, [pc, #8]	; (8044b94 <__SECURE_SystemCoreClockUpdate_veneer+0xc>)
 8044b8c:	4684      	mov	ip, r0
 8044b8e:	bc01      	pop	{r0}
 8044b90:	4760      	bx	ip
 8044b92:	bf00      	nop
 8044b94:	0c03e001 	.word	0x0c03e001
