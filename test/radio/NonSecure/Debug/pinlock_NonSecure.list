
pinlock_NonSecure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030d0  080401f8  080401f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  080432c8  080432c8  000132c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080433d8  080433d8  00018014  2**0
                  CONTENTS
  4 .ARM          00000008  080433d8  080433d8  000133d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080433e0  080433e0  00018014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080433e0  080433e0  000133e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080433e4  080433e4  000133e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20018000  080433e8  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20018014  080433fc  00018014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20018134  080433fc  00018134  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00018014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc7d  00000000  00000000  0001804a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001af8  00000000  00000000  00023cc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000908  00000000  00000000  000257c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000870  00000000  00000000  000260c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002421  00000000  00000000  00026938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b09b  00000000  00000000  00028d59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102bbd  00000000  00000000  00033df4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001369b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024d8  00000000  00000000  00136a04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080401f8 <__do_global_dtors_aux>:
 80401f8:	b510      	push	{r4, lr}
 80401fa:	4c05      	ldr	r4, [pc, #20]	; (8040210 <__do_global_dtors_aux+0x18>)
 80401fc:	7823      	ldrb	r3, [r4, #0]
 80401fe:	b933      	cbnz	r3, 804020e <__do_global_dtors_aux+0x16>
 8040200:	4b04      	ldr	r3, [pc, #16]	; (8040214 <__do_global_dtors_aux+0x1c>)
 8040202:	b113      	cbz	r3, 804020a <__do_global_dtors_aux+0x12>
 8040204:	4804      	ldr	r0, [pc, #16]	; (8040218 <__do_global_dtors_aux+0x20>)
 8040206:	e000      	b.n	804020a <__do_global_dtors_aux+0x12>
 8040208:	bf00      	nop
 804020a:	2301      	movs	r3, #1
 804020c:	7023      	strb	r3, [r4, #0]
 804020e:	bd10      	pop	{r4, pc}
 8040210:	20018014 	.word	0x20018014
 8040214:	00000000 	.word	0x00000000
 8040218:	080432a0 	.word	0x080432a0

0804021c <frame_dummy>:
 804021c:	b508      	push	{r3, lr}
 804021e:	4b03      	ldr	r3, [pc, #12]	; (804022c <frame_dummy+0x10>)
 8040220:	b11b      	cbz	r3, 804022a <frame_dummy+0xe>
 8040222:	4903      	ldr	r1, [pc, #12]	; (8040230 <frame_dummy+0x14>)
 8040224:	4803      	ldr	r0, [pc, #12]	; (8040234 <frame_dummy+0x18>)
 8040226:	e000      	b.n	804022a <frame_dummy+0xe>
 8040228:	bf00      	nop
 804022a:	bd08      	pop	{r3, pc}
 804022c:	00000000 	.word	0x00000000
 8040230:	20018018 	.word	0x20018018
 8040234:	080432a0 	.word	0x080432a0

08040238 <strcmp>:
 8040238:	f810 2b01 	ldrb.w	r2, [r0], #1
 804023c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8040240:	2a01      	cmp	r2, #1
 8040242:	bf28      	it	cs
 8040244:	429a      	cmpcs	r2, r3
 8040246:	d0f7      	beq.n	8040238 <strcmp>
 8040248:	1ad0      	subs	r0, r2, r3
 804024a:	4770      	bx	lr

0804024c <__aeabi_uldivmod>:
 804024c:	b953      	cbnz	r3, 8040264 <__aeabi_uldivmod+0x18>
 804024e:	b94a      	cbnz	r2, 8040264 <__aeabi_uldivmod+0x18>
 8040250:	2900      	cmp	r1, #0
 8040252:	bf08      	it	eq
 8040254:	2800      	cmpeq	r0, #0
 8040256:	bf1c      	itt	ne
 8040258:	f04f 31ff 	movne.w	r1, #4294967295
 804025c:	f04f 30ff 	movne.w	r0, #4294967295
 8040260:	f000 b980 	b.w	8040564 <__aeabi_idiv0>
 8040264:	f1ad 0c08 	sub.w	ip, sp, #8
 8040268:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 804026c:	f000 f806 	bl	804027c <__udivmoddi4>
 8040270:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040274:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8040278:	b004      	add	sp, #16
 804027a:	4770      	bx	lr

0804027c <__udivmoddi4>:
 804027c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8040280:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8040282:	4604      	mov	r4, r0
 8040284:	4688      	mov	r8, r1
 8040286:	2b00      	cmp	r3, #0
 8040288:	f040 8084 	bne.w	8040394 <__udivmoddi4+0x118>
 804028c:	428a      	cmp	r2, r1
 804028e:	4617      	mov	r7, r2
 8040290:	d943      	bls.n	804031a <__udivmoddi4+0x9e>
 8040292:	fab2 f282 	clz	r2, r2
 8040296:	b142      	cbz	r2, 80402aa <__udivmoddi4+0x2e>
 8040298:	f1c2 0020 	rsb	r0, r2, #32
 804029c:	4091      	lsls	r1, r2
 804029e:	4097      	lsls	r7, r2
 80402a0:	fa24 f000 	lsr.w	r0, r4, r0
 80402a4:	4094      	lsls	r4, r2
 80402a6:	ea40 0801 	orr.w	r8, r0, r1
 80402aa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80402ae:	0c23      	lsrs	r3, r4, #16
 80402b0:	fa1f fe87 	uxth.w	lr, r7
 80402b4:	fbb8 f6fc 	udiv	r6, r8, ip
 80402b8:	fb0c 8116 	mls	r1, ip, r6, r8
 80402bc:	fb06 f00e 	mul.w	r0, r6, lr
 80402c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80402c4:	4298      	cmp	r0, r3
 80402c6:	d907      	bls.n	80402d8 <__udivmoddi4+0x5c>
 80402c8:	18fb      	adds	r3, r7, r3
 80402ca:	f106 31ff 	add.w	r1, r6, #4294967295
 80402ce:	d202      	bcs.n	80402d6 <__udivmoddi4+0x5a>
 80402d0:	4298      	cmp	r0, r3
 80402d2:	f200 8131 	bhi.w	8040538 <__udivmoddi4+0x2bc>
 80402d6:	460e      	mov	r6, r1
 80402d8:	1a19      	subs	r1, r3, r0
 80402da:	b2a3      	uxth	r3, r4
 80402dc:	fbb1 f0fc 	udiv	r0, r1, ip
 80402e0:	fb0c 1110 	mls	r1, ip, r0, r1
 80402e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80402e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80402ec:	45a6      	cmp	lr, r4
 80402ee:	d907      	bls.n	8040300 <__udivmoddi4+0x84>
 80402f0:	193c      	adds	r4, r7, r4
 80402f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80402f6:	d202      	bcs.n	80402fe <__udivmoddi4+0x82>
 80402f8:	45a6      	cmp	lr, r4
 80402fa:	f200 811a 	bhi.w	8040532 <__udivmoddi4+0x2b6>
 80402fe:	4618      	mov	r0, r3
 8040300:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8040304:	eba4 040e 	sub.w	r4, r4, lr
 8040308:	2600      	movs	r6, #0
 804030a:	b11d      	cbz	r5, 8040314 <__udivmoddi4+0x98>
 804030c:	40d4      	lsrs	r4, r2
 804030e:	2300      	movs	r3, #0
 8040310:	e9c5 4300 	strd	r4, r3, [r5]
 8040314:	4631      	mov	r1, r6
 8040316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804031a:	b902      	cbnz	r2, 804031e <__udivmoddi4+0xa2>
 804031c:	deff      	udf	#255	; 0xff
 804031e:	fab2 f282 	clz	r2, r2
 8040322:	2a00      	cmp	r2, #0
 8040324:	d152      	bne.n	80403cc <__udivmoddi4+0x150>
 8040326:	1bcb      	subs	r3, r1, r7
 8040328:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 804032c:	fa1f f887 	uxth.w	r8, r7
 8040330:	2601      	movs	r6, #1
 8040332:	0c21      	lsrs	r1, r4, #16
 8040334:	fbb3 fcfe 	udiv	ip, r3, lr
 8040338:	fb0e 301c 	mls	r0, lr, ip, r3
 804033c:	fb08 f90c 	mul.w	r9, r8, ip
 8040340:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8040344:	4589      	cmp	r9, r1
 8040346:	d90b      	bls.n	8040360 <__udivmoddi4+0xe4>
 8040348:	1879      	adds	r1, r7, r1
 804034a:	f10c 33ff 	add.w	r3, ip, #4294967295
 804034e:	bf2c      	ite	cs
 8040350:	2001      	movcs	r0, #1
 8040352:	2000      	movcc	r0, #0
 8040354:	4589      	cmp	r9, r1
 8040356:	d902      	bls.n	804035e <__udivmoddi4+0xe2>
 8040358:	2800      	cmp	r0, #0
 804035a:	f000 80f0 	beq.w	804053e <__udivmoddi4+0x2c2>
 804035e:	469c      	mov	ip, r3
 8040360:	eba1 0109 	sub.w	r1, r1, r9
 8040364:	b2a3      	uxth	r3, r4
 8040366:	fbb1 f0fe 	udiv	r0, r1, lr
 804036a:	fb0e 1110 	mls	r1, lr, r0, r1
 804036e:	fb08 f800 	mul.w	r8, r8, r0
 8040372:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8040376:	45a0      	cmp	r8, r4
 8040378:	d907      	bls.n	804038a <__udivmoddi4+0x10e>
 804037a:	193c      	adds	r4, r7, r4
 804037c:	f100 33ff 	add.w	r3, r0, #4294967295
 8040380:	d202      	bcs.n	8040388 <__udivmoddi4+0x10c>
 8040382:	45a0      	cmp	r8, r4
 8040384:	f200 80d2 	bhi.w	804052c <__udivmoddi4+0x2b0>
 8040388:	4618      	mov	r0, r3
 804038a:	eba4 0408 	sub.w	r4, r4, r8
 804038e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8040392:	e7ba      	b.n	804030a <__udivmoddi4+0x8e>
 8040394:	428b      	cmp	r3, r1
 8040396:	d909      	bls.n	80403ac <__udivmoddi4+0x130>
 8040398:	2d00      	cmp	r5, #0
 804039a:	f000 80be 	beq.w	804051a <__udivmoddi4+0x29e>
 804039e:	2600      	movs	r6, #0
 80403a0:	e9c5 0100 	strd	r0, r1, [r5]
 80403a4:	4630      	mov	r0, r6
 80403a6:	4631      	mov	r1, r6
 80403a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80403ac:	fab3 f683 	clz	r6, r3
 80403b0:	2e00      	cmp	r6, #0
 80403b2:	d14d      	bne.n	8040450 <__udivmoddi4+0x1d4>
 80403b4:	428b      	cmp	r3, r1
 80403b6:	f0c0 80b3 	bcc.w	8040520 <__udivmoddi4+0x2a4>
 80403ba:	4282      	cmp	r2, r0
 80403bc:	f240 80b0 	bls.w	8040520 <__udivmoddi4+0x2a4>
 80403c0:	4630      	mov	r0, r6
 80403c2:	2d00      	cmp	r5, #0
 80403c4:	d0a6      	beq.n	8040314 <__udivmoddi4+0x98>
 80403c6:	e9c5 4800 	strd	r4, r8, [r5]
 80403ca:	e7a3      	b.n	8040314 <__udivmoddi4+0x98>
 80403cc:	4097      	lsls	r7, r2
 80403ce:	f1c2 0320 	rsb	r3, r2, #32
 80403d2:	fa01 f002 	lsl.w	r0, r1, r2
 80403d6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80403da:	40d9      	lsrs	r1, r3
 80403dc:	fa24 f303 	lsr.w	r3, r4, r3
 80403e0:	fa1f f887 	uxth.w	r8, r7
 80403e4:	4094      	lsls	r4, r2
 80403e6:	4303      	orrs	r3, r0
 80403e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80403ec:	0c1e      	lsrs	r6, r3, #16
 80403ee:	fb0e 1110 	mls	r1, lr, r0, r1
 80403f2:	fb00 fc08 	mul.w	ip, r0, r8
 80403f6:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
 80403fa:	458c      	cmp	ip, r1
 80403fc:	d90e      	bls.n	804041c <__udivmoddi4+0x1a0>
 80403fe:	1879      	adds	r1, r7, r1
 8040400:	f100 36ff 	add.w	r6, r0, #4294967295
 8040404:	bf2c      	ite	cs
 8040406:	f04f 0901 	movcs.w	r9, #1
 804040a:	f04f 0900 	movcc.w	r9, #0
 804040e:	458c      	cmp	ip, r1
 8040410:	d903      	bls.n	804041a <__udivmoddi4+0x19e>
 8040412:	f1b9 0f00 	cmp.w	r9, #0
 8040416:	f000 8096 	beq.w	8040546 <__udivmoddi4+0x2ca>
 804041a:	4630      	mov	r0, r6
 804041c:	eba1 010c 	sub.w	r1, r1, ip
 8040420:	b29b      	uxth	r3, r3
 8040422:	fbb1 f6fe 	udiv	r6, r1, lr
 8040426:	fb0e 1116 	mls	r1, lr, r6, r1
 804042a:	fb06 fc08 	mul.w	ip, r6, r8
 804042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8040432:	458c      	cmp	ip, r1
 8040434:	d907      	bls.n	8040446 <__udivmoddi4+0x1ca>
 8040436:	1879      	adds	r1, r7, r1
 8040438:	f106 33ff 	add.w	r3, r6, #4294967295
 804043c:	d202      	bcs.n	8040444 <__udivmoddi4+0x1c8>
 804043e:	458c      	cmp	ip, r1
 8040440:	f200 8088 	bhi.w	8040554 <__udivmoddi4+0x2d8>
 8040444:	461e      	mov	r6, r3
 8040446:	eba1 030c 	sub.w	r3, r1, ip
 804044a:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 804044e:	e770      	b.n	8040332 <__udivmoddi4+0xb6>
 8040450:	f1c6 0720 	rsb	r7, r6, #32
 8040454:	fa03 f406 	lsl.w	r4, r3, r6
 8040458:	fa02 fc06 	lsl.w	ip, r2, r6
 804045c:	fa01 fe06 	lsl.w	lr, r1, r6
 8040460:	40fa      	lsrs	r2, r7
 8040462:	fa20 f807 	lsr.w	r8, r0, r7
 8040466:	40f9      	lsrs	r1, r7
 8040468:	fa00 f306 	lsl.w	r3, r0, r6
 804046c:	4322      	orrs	r2, r4
 804046e:	ea48 040e 	orr.w	r4, r8, lr
 8040472:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8040476:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 804047a:	fa1f f982 	uxth.w	r9, r2
 804047e:	fbb1 faf8 	udiv	sl, r1, r8
 8040482:	fb08 111a 	mls	r1, r8, sl, r1
 8040486:	fb0a f009 	mul.w	r0, sl, r9
 804048a:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
 804048e:	4570      	cmp	r0, lr
 8040490:	d90e      	bls.n	80404b0 <__udivmoddi4+0x234>
 8040492:	eb12 0e0e 	adds.w	lr, r2, lr
 8040496:	f10a 31ff 	add.w	r1, sl, #4294967295
 804049a:	bf2c      	ite	cs
 804049c:	f04f 0b01 	movcs.w	fp, #1
 80404a0:	f04f 0b00 	movcc.w	fp, #0
 80404a4:	4570      	cmp	r0, lr
 80404a6:	d902      	bls.n	80404ae <__udivmoddi4+0x232>
 80404a8:	f1bb 0f00 	cmp.w	fp, #0
 80404ac:	d04e      	beq.n	804054c <__udivmoddi4+0x2d0>
 80404ae:	468a      	mov	sl, r1
 80404b0:	ebae 0e00 	sub.w	lr, lr, r0
 80404b4:	b2a4      	uxth	r4, r4
 80404b6:	fbbe f0f8 	udiv	r0, lr, r8
 80404ba:	fb08 ee10 	mls	lr, r8, r0, lr
 80404be:	fb00 f909 	mul.w	r9, r0, r9
 80404c2:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
 80404c6:	45f1      	cmp	r9, lr
 80404c8:	d907      	bls.n	80404da <__udivmoddi4+0x25e>
 80404ca:	eb12 0e0e 	adds.w	lr, r2, lr
 80404ce:	f100 31ff 	add.w	r1, r0, #4294967295
 80404d2:	d201      	bcs.n	80404d8 <__udivmoddi4+0x25c>
 80404d4:	45f1      	cmp	r9, lr
 80404d6:	d840      	bhi.n	804055a <__udivmoddi4+0x2de>
 80404d8:	4608      	mov	r0, r1
 80404da:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
 80404de:	ebae 0e09 	sub.w	lr, lr, r9
 80404e2:	fba0 890c 	umull	r8, r9, r0, ip
 80404e6:	45ce      	cmp	lr, r9
 80404e8:	4641      	mov	r1, r8
 80404ea:	464c      	mov	r4, r9
 80404ec:	d302      	bcc.n	80404f4 <__udivmoddi4+0x278>
 80404ee:	d106      	bne.n	80404fe <__udivmoddi4+0x282>
 80404f0:	4543      	cmp	r3, r8
 80404f2:	d204      	bcs.n	80404fe <__udivmoddi4+0x282>
 80404f4:	3801      	subs	r0, #1
 80404f6:	ebb8 010c 	subs.w	r1, r8, ip
 80404fa:	eb69 0402 	sbc.w	r4, r9, r2
 80404fe:	b37d      	cbz	r5, 8040560 <__udivmoddi4+0x2e4>
 8040500:	1a5a      	subs	r2, r3, r1
 8040502:	eb6e 0e04 	sbc.w	lr, lr, r4
 8040506:	40f2      	lsrs	r2, r6
 8040508:	fa0e f707 	lsl.w	r7, lr, r7
 804050c:	fa2e f306 	lsr.w	r3, lr, r6
 8040510:	2600      	movs	r6, #0
 8040512:	4317      	orrs	r7, r2
 8040514:	e9c5 7300 	strd	r7, r3, [r5]
 8040518:	e6fc      	b.n	8040314 <__udivmoddi4+0x98>
 804051a:	462e      	mov	r6, r5
 804051c:	4628      	mov	r0, r5
 804051e:	e6f9      	b.n	8040314 <__udivmoddi4+0x98>
 8040520:	1a84      	subs	r4, r0, r2
 8040522:	eb61 0103 	sbc.w	r1, r1, r3
 8040526:	2001      	movs	r0, #1
 8040528:	4688      	mov	r8, r1
 804052a:	e74a      	b.n	80403c2 <__udivmoddi4+0x146>
 804052c:	3802      	subs	r0, #2
 804052e:	443c      	add	r4, r7
 8040530:	e72b      	b.n	804038a <__udivmoddi4+0x10e>
 8040532:	3802      	subs	r0, #2
 8040534:	443c      	add	r4, r7
 8040536:	e6e3      	b.n	8040300 <__udivmoddi4+0x84>
 8040538:	3e02      	subs	r6, #2
 804053a:	443b      	add	r3, r7
 804053c:	e6cc      	b.n	80402d8 <__udivmoddi4+0x5c>
 804053e:	f1ac 0c02 	sub.w	ip, ip, #2
 8040542:	4439      	add	r1, r7
 8040544:	e70c      	b.n	8040360 <__udivmoddi4+0xe4>
 8040546:	3802      	subs	r0, #2
 8040548:	4439      	add	r1, r7
 804054a:	e767      	b.n	804041c <__udivmoddi4+0x1a0>
 804054c:	f1aa 0a02 	sub.w	sl, sl, #2
 8040550:	4496      	add	lr, r2
 8040552:	e7ad      	b.n	80404b0 <__udivmoddi4+0x234>
 8040554:	3e02      	subs	r6, #2
 8040556:	4439      	add	r1, r7
 8040558:	e775      	b.n	8040446 <__udivmoddi4+0x1ca>
 804055a:	3802      	subs	r0, #2
 804055c:	4496      	add	lr, r2
 804055e:	e7bc      	b.n	80404da <__udivmoddi4+0x25e>
 8040560:	462e      	mov	r6, r5
 8040562:	e6d7      	b.n	8040314 <__udivmoddi4+0x98>

08040564 <__aeabi_idiv0>:
 8040564:	4770      	bx	lr
 8040566:	bf00      	nop

08040568 <print>:
//    {
//    }
//
//}

static void print(unsigned char* str, int len) {
 8040568:	b580      	push	{r7, lr}
 804056a:	b082      	sub	sp, #8
 804056c:	af00      	add	r7, sp, #0
 804056e:	6078      	str	r0, [r7, #4]
 8040570:	6039      	str	r1, [r7, #0]

  if (HAL_UART_Transmit_IT(&huart1, (uint8_t *) str, len) != HAL_OK) {
 8040572:	683b      	ldr	r3, [r7, #0]
 8040574:	b29b      	uxth	r3, r3
 8040576:	461a      	mov	r2, r3
 8040578:	6879      	ldr	r1, [r7, #4]
 804057a:	480b      	ldr	r0, [pc, #44]	; (80405a8 <print+0x40>)
 804057c:	f001 fc78 	bl	8041e70 <HAL_UART_Transmit_IT>
 8040580:	4603      	mov	r3, r0
 8040582:	2b00      	cmp	r3, #0
 8040584:	d001      	beq.n	804058a <print+0x22>
    Error_Handler();
 8040586:	f000 f98b 	bl	80408a0 <Error_Handler>
  }

  while(HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY)
 804058a:	bf00      	nop
 804058c:	4806      	ldr	r0, [pc, #24]	; (80405a8 <print+0x40>)
 804058e:	f001 ff47 	bl	8042420 <HAL_UART_GetState>
 8040592:	4603      	mov	r3, r0
 8040594:	2b20      	cmp	r3, #32
 8040596:	d1f9      	bne.n	804058c <print+0x24>
  {
  }
  // Reset transmission flag
  UartReady = HAL_UART_STATE_RESET;
 8040598:	4b04      	ldr	r3, [pc, #16]	; (80405ac <print+0x44>)
 804059a:	2200      	movs	r2, #0
 804059c:	701a      	strb	r2, [r3, #0]

}
 804059e:	bf00      	nop
 80405a0:	3708      	adds	r7, #8
 80405a2:	46bd      	mov	sp, r7
 80405a4:	bd80      	pop	{r7, pc}
 80405a6:	bf00      	nop
 80405a8:	20018090 	.word	0x20018090
 80405ac:	20018030 	.word	0x20018030

080405b0 <rf_write_buf>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void rf_write_buf(unsigned char* str) {
 80405b0:	b580      	push	{r7, lr}
 80405b2:	b082      	sub	sp, #8
 80405b4:	af00      	add	r7, sp, #0
 80405b6:	6078      	str	r0, [r7, #4]
	print(str, sizeof(str));
 80405b8:	2104      	movs	r1, #4
 80405ba:	6878      	ldr	r0, [r7, #4]
 80405bc:	f7ff ffd4 	bl	8040568 <print>
}
 80405c0:	bf00      	nop
 80405c2:	3708      	adds	r7, #8
 80405c4:	46bd      	mov	sp, r7
 80405c6:	bd80      	pop	{r7, pc}

080405c8 <unlock>:

void unlock() {
 80405c8:	b580      	push	{r7, lr}
 80405ca:	af00      	add	r7, sp, #0
    print("Unlocked!\r\n", sizeof("Unlocked!\r\n"));
 80405cc:	210c      	movs	r1, #12
 80405ce:	4807      	ldr	r0, [pc, #28]	; (80405ec <unlock+0x24>)
 80405d0:	f7ff ffca 	bl	8040568 <print>
    lock_pin = 1;
 80405d4:	4b06      	ldr	r3, [pc, #24]	; (80405f0 <unlock+0x28>)
 80405d6:	2201      	movs	r2, #1
 80405d8:	601a      	str	r2, [r3, #0]
    HAL_Delay(5);
 80405da:	2005      	movs	r0, #5
 80405dc:	f000 faca 	bl	8040b74 <HAL_Delay>
    lock_pin = 0;
 80405e0:	4b03      	ldr	r3, [pc, #12]	; (80405f0 <unlock+0x28>)
 80405e2:	2200      	movs	r2, #0
 80405e4:	601a      	str	r2, [r3, #0]
}
 80405e6:	bf00      	nop
 80405e8:	bd80      	pop	{r7, pc}
 80405ea:	bf00      	nop
 80405ec:	080432c8 	.word	0x080432c8
 80405f0:	20018068 	.word	0x20018068

080405f4 <read_code>:

char the_pw[] = "UNLOCK";
void read_code() {
 80405f4:	b580      	push	{r7, lr}
 80405f6:	b084      	sub	sp, #16
 80405f8:	af00      	add	r7, sp, #0
//    char buf[16];
    unsigned char yes[] = "yes ";
 80405fa:	4a12      	ldr	r2, [pc, #72]	; (8040644 <read_code+0x50>)
 80405fc:	f107 0308 	add.w	r3, r7, #8
 8040600:	e892 0003 	ldmia.w	r2, {r0, r1}
 8040604:	6018      	str	r0, [r3, #0]
 8040606:	3304      	adds	r3, #4
 8040608:	7019      	strb	r1, [r3, #0]
    unsigned char no[] = "no ";
 804060a:	4b0f      	ldr	r3, [pc, #60]	; (8040648 <read_code+0x54>)
 804060c:	607b      	str	r3, [r7, #4]
//			break;
//		}
//
//    }

    if (strcmp(enterPin, the_pw)==0) {
 804060e:	490f      	ldr	r1, [pc, #60]	; (804064c <read_code+0x58>)
 8040610:	480f      	ldr	r0, [pc, #60]	; (8040650 <read_code+0x5c>)
 8040612:	f7ff fe11 	bl	8040238 <strcmp>
 8040616:	4603      	mov	r3, r0
 8040618:	2b00      	cmp	r3, #0
 804061a:	d107      	bne.n	804062c <read_code+0x38>
        rf_write_buf(yes);
 804061c:	f107 0308 	add.w	r3, r7, #8
 8040620:	4618      	mov	r0, r3
 8040622:	f7ff ffc5 	bl	80405b0 <rf_write_buf>
        unlock();
 8040626:	f7ff ffcf 	bl	80405c8 <unlock>
    else {
    	rf_write_buf(no);
        print("Got a bad code!\r\n", sizeof("Got a bad code!\r\n"));

    }
}
 804062a:	e007      	b.n	804063c <read_code+0x48>
    	rf_write_buf(no);
 804062c:	1d3b      	adds	r3, r7, #4
 804062e:	4618      	mov	r0, r3
 8040630:	f7ff ffbe 	bl	80405b0 <rf_write_buf>
        print("Got a bad code!\r\n", sizeof("Got a bad code!\r\n"));
 8040634:	2112      	movs	r1, #18
 8040636:	4807      	ldr	r0, [pc, #28]	; (8040654 <read_code+0x60>)
 8040638:	f7ff ff96 	bl	8040568 <print>
}
 804063c:	bf00      	nop
 804063e:	3710      	adds	r7, #16
 8040640:	46bd      	mov	sp, r7
 8040642:	bd80      	pop	{r7, pc}
 8040644:	080432e8 	.word	0x080432e8
 8040648:	00206f6e 	.word	0x00206f6e
 804064c:	20018000 	.word	0x20018000
 8040650:	20018120 	.word	0x20018120
 8040654:	080432d4 	.word	0x080432d4

08040658 <set_code>:

void set_code() {
 8040658:	b580      	push	{r7, lr}
 804065a:	af00      	add	r7, sp, #0
//				break;
//			}
//			i++;
//		}
//	}
	strcpy(the_pw, setPin);
 804065c:	4906      	ldr	r1, [pc, #24]	; (8040678 <set_code+0x20>)
 804065e:	4807      	ldr	r0, [pc, #28]	; (804067c <set_code+0x24>)
 8040660:	f002 fe16 	bl	8043290 <strcpy>
	print(the_pw, sizeof(the_pw));
 8040664:	2107      	movs	r1, #7
 8040666:	4805      	ldr	r0, [pc, #20]	; (804067c <set_code+0x24>)
 8040668:	f7ff ff7e 	bl	8040568 <print>
	print("\r\n", sizeof("\r\n"));
 804066c:	2103      	movs	r1, #3
 804066e:	4804      	ldr	r0, [pc, #16]	; (8040680 <set_code+0x28>)
 8040670:	f7ff ff7a 	bl	8040568 <print>
}
 8040674:	bf00      	nop
 8040676:	bd80      	pop	{r7, pc}
 8040678:	20018080 	.word	0x20018080
 804067c:	20018000 	.word	0x20018000
 8040680:	080432f0 	.word	0x080432f0

08040684 <init>:

/* USER CODE END 0 */

void init(){
 8040684:	b580      	push	{r7, lr}
 8040686:	af00      	add	r7, sp, #0

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8040688:	f000 f9fd 	bl	8040a86 <HAL_Init>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 804068c:	f000 f8e4 	bl	8040858 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8040690:	f000 f896 	bl	80407c0 <MX_USART1_UART_Init>
   
 }
 8040694:	bf00      	nop
 8040696:	bd80      	pop	{r7, pc}

08040698 <main>:
// void test_ptr(int *ptr){
//   *ptr += 1;

// }

int main(){
 8040698:	b580      	push	{r7, lr}
 804069a:	af00      	add	r7, sp, #0

  init();
 804069c:	f7ff fff2 	bl	8040684 <init>
  main_logic();
 80406a0:	f000 f804 	bl	80406ac <main_logic>
  return 0;
 80406a4:	2300      	movs	r3, #0
}
 80406a6:	4618      	mov	r0, r3
 80406a8:	bd80      	pop	{r7, pc}
	...

080406ac <main_logic>:



int main_logic(void)
{
 80406ac:	b5b0      	push	{r4, r5, r7, lr}
 80406ae:	b082      	sub	sp, #8
 80406b0:	af00      	add	r7, sp, #0


  /* USER CODE BEGIN Init */

	char cmd;
	unsigned char r[] = "N";
 80406b2:	234e      	movs	r3, #78	; 0x4e
 80406b4:	803b      	strh	r3, [r7, #0]
	print("Setting up radio...\r\n", sizeof("Setting up radio...\r\n"));
 80406b6:	2116      	movs	r1, #22
 80406b8:	4835      	ldr	r0, [pc, #212]	; (8040790 <main_logic+0xe4>)
 80406ba:	f7ff ff55 	bl	8040568 <print>
//	configure_rf();

	print("Ready.\r\n", sizeof("Ready.\r\n"));
 80406be:	2109      	movs	r1, #9
 80406c0:	4834      	ldr	r0, [pc, #208]	; (8040794 <main_logic+0xe8>)
 80406c2:	f7ff ff51 	bl	8040568 <print>

    while(1) {

    	for(int i=0; i<10;i++)
 80406c6:	2300      	movs	r3, #0
 80406c8:	607b      	str	r3, [r7, #4]
 80406ca:	e05d      	b.n	8040788 <main_logic+0xdc>
    	{
        	cmd = 0xBB;
 80406cc:	23bb      	movs	r3, #187	; 0xbb
 80406ce:	70fb      	strb	r3, [r7, #3]
        	cmd = 0xDD;
 80406d0:	23dd      	movs	r3, #221	; 0xdd
 80406d2:	70fb      	strb	r3, [r7, #3]
        	cmd = 0xFF;
 80406d4:	23ff      	movs	r3, #255	; 0xff
 80406d6:	70fb      	strb	r3, [r7, #3]

        	if(i<2)
 80406d8:	687b      	ldr	r3, [r7, #4]
 80406da:	2b01      	cmp	r3, #1
 80406dc:	dc06      	bgt.n	80406ec <main_logic+0x40>
        		strcpy(enterPin, "afbew");
 80406de:	4b2e      	ldr	r3, [pc, #184]	; (8040798 <main_logic+0xec>)
 80406e0:	4a2e      	ldr	r2, [pc, #184]	; (804079c <main_logic+0xf0>)
 80406e2:	6810      	ldr	r0, [r2, #0]
 80406e4:	6018      	str	r0, [r3, #0]
 80406e6:	8892      	ldrh	r2, [r2, #4]
 80406e8:	809a      	strh	r2, [r3, #4]
 80406ea:	e014      	b.n	8040716 <main_logic+0x6a>
        	else if(i<7)
 80406ec:	687b      	ldr	r3, [r7, #4]
 80406ee:	2b06      	cmp	r3, #6
 80406f0:	dc09      	bgt.n	8040706 <main_logic+0x5a>
        		strcpy(enterPin, "psdvjnfejuwhfwo");
 80406f2:	4a29      	ldr	r2, [pc, #164]	; (8040798 <main_logic+0xec>)
 80406f4:	4b2a      	ldr	r3, [pc, #168]	; (80407a0 <main_logic+0xf4>)
 80406f6:	4614      	mov	r4, r2
 80406f8:	461d      	mov	r5, r3
 80406fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80406fc:	6020      	str	r0, [r4, #0]
 80406fe:	6061      	str	r1, [r4, #4]
 8040700:	60a2      	str	r2, [r4, #8]
 8040702:	60e3      	str	r3, [r4, #12]
 8040704:	e007      	b.n	8040716 <main_logic+0x6a>
        	else
        		strcpy(enterPin, "UNLOCK");
 8040706:	4b24      	ldr	r3, [pc, #144]	; (8040798 <main_logic+0xec>)
 8040708:	4a26      	ldr	r2, [pc, #152]	; (80407a4 <main_logic+0xf8>)
 804070a:	6810      	ldr	r0, [r2, #0]
 804070c:	6018      	str	r0, [r3, #0]
 804070e:	8891      	ldrh	r1, [r2, #4]
 8040710:	7992      	ldrb	r2, [r2, #6]
 8040712:	8099      	strh	r1, [r3, #4]
 8040714:	719a      	strb	r2, [r3, #6]

        	if(i<2)
 8040716:	687b      	ldr	r3, [r7, #4]
 8040718:	2b01      	cmp	r3, #1
 804071a:	dc06      	bgt.n	804072a <main_logic+0x7e>
        		strcpy(setPin, "trues");
 804071c:	4b22      	ldr	r3, [pc, #136]	; (80407a8 <main_logic+0xfc>)
 804071e:	4a23      	ldr	r2, [pc, #140]	; (80407ac <main_logic+0x100>)
 8040720:	6810      	ldr	r0, [r2, #0]
 8040722:	6018      	str	r0, [r3, #0]
 8040724:	8892      	ldrh	r2, [r2, #4]
 8040726:	809a      	strh	r2, [r3, #4]
 8040728:	e00f      	b.n	804074a <main_logic+0x9e>
        	else if(i<7)
 804072a:	687b      	ldr	r3, [r7, #4]
 804072c:	2b06      	cmp	r3, #6
 804072e:	dc06      	bgt.n	804073e <main_logic+0x92>
        		strcpy(setPin, "piny");
 8040730:	4b1d      	ldr	r3, [pc, #116]	; (80407a8 <main_logic+0xfc>)
 8040732:	4a1f      	ldr	r2, [pc, #124]	; (80407b0 <main_logic+0x104>)
 8040734:	6810      	ldr	r0, [r2, #0]
 8040736:	6018      	str	r0, [r3, #0]
 8040738:	7912      	ldrb	r2, [r2, #4]
 804073a:	711a      	strb	r2, [r3, #4]
 804073c:	e005      	b.n	804074a <main_logic+0x9e>
        	else
        		strcpy(setPin, "guess");
 804073e:	4b1a      	ldr	r3, [pc, #104]	; (80407a8 <main_logic+0xfc>)
 8040740:	4a1c      	ldr	r2, [pc, #112]	; (80407b4 <main_logic+0x108>)
 8040742:	6810      	ldr	r0, [r2, #0]
 8040744:	6018      	str	r0, [r3, #0]
 8040746:	8892      	ldrh	r2, [r2, #4]
 8040748:	809a      	strh	r2, [r3, #4]

    		switch (cmd) {
 804074a:	78fb      	ldrb	r3, [r7, #3]
 804074c:	2bff      	cmp	r3, #255	; 0xff
 804074e:	d015      	beq.n	804077c <main_logic+0xd0>
 8040750:	2bff      	cmp	r3, #255	; 0xff
 8040752:	dc16      	bgt.n	8040782 <main_logic+0xd6>
 8040754:	2bbb      	cmp	r3, #187	; 0xbb
 8040756:	d002      	beq.n	804075e <main_logic+0xb2>
 8040758:	2bdd      	cmp	r3, #221	; 0xdd
 804075a:	d003      	beq.n	8040764 <main_logic+0xb8>
 804075c:	e011      	b.n	8040782 <main_logic+0xd6>
    			case 0xBB:
    				read_code();
 804075e:	f7ff ff49 	bl	80405f4 <read_code>
    				break;
 8040762:	e00e      	b.n	8040782 <main_logic+0xd6>
    			case 0xDD:
    				strcpy(r, "Y\r\n");
 8040764:	463b      	mov	r3, r7
 8040766:	4a14      	ldr	r2, [pc, #80]	; (80407b8 <main_logic+0x10c>)
 8040768:	601a      	str	r2, [r3, #0]
    				print("PING ", sizeof("PING "));
 804076a:	2106      	movs	r1, #6
 804076c:	4813      	ldr	r0, [pc, #76]	; (80407bc <main_logic+0x110>)
 804076e:	f7ff fefb 	bl	8040568 <print>
    				rf_write_buf(&r);
 8040772:	463b      	mov	r3, r7
 8040774:	4618      	mov	r0, r3
 8040776:	f7ff ff1b 	bl	80405b0 <rf_write_buf>
    				break;
 804077a:	e002      	b.n	8040782 <main_logic+0xd6>
    			case 0xFF:
    				set_code();
 804077c:	f7ff ff6c 	bl	8040658 <set_code>
    				break;
 8040780:	bf00      	nop
    	for(int i=0; i<10;i++)
 8040782:	687b      	ldr	r3, [r7, #4]
 8040784:	3301      	adds	r3, #1
 8040786:	607b      	str	r3, [r7, #4]
 8040788:	687b      	ldr	r3, [r7, #4]
 804078a:	2b09      	cmp	r3, #9
 804078c:	dd9e      	ble.n	80406cc <main_logic+0x20>
    			//    pc.printf("Unknown command %x", cmd);
    		}
    	}


		while(1)
 804078e:	e7fe      	b.n	804078e <main_logic+0xe2>
 8040790:	080432f4 	.word	0x080432f4
 8040794:	0804330c 	.word	0x0804330c
 8040798:	20018120 	.word	0x20018120
 804079c:	08043318 	.word	0x08043318
 80407a0:	08043320 	.word	0x08043320
 80407a4:	08043330 	.word	0x08043330
 80407a8:	20018080 	.word	0x20018080
 80407ac:	08043338 	.word	0x08043338
 80407b0:	08043340 	.word	0x08043340
 80407b4:	08043348 	.word	0x08043348
 80407b8:	000a0d59 	.word	0x000a0d59
 80407bc:	08043350 	.word	0x08043350

080407c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80407c0:	b580      	push	{r7, lr}
 80407c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80407c4:	4b22      	ldr	r3, [pc, #136]	; (8040850 <MX_USART1_UART_Init+0x90>)
 80407c6:	4a23      	ldr	r2, [pc, #140]	; (8040854 <MX_USART1_UART_Init+0x94>)
 80407c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80407ca:	4b21      	ldr	r3, [pc, #132]	; (8040850 <MX_USART1_UART_Init+0x90>)
 80407cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80407d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80407d2:	4b1f      	ldr	r3, [pc, #124]	; (8040850 <MX_USART1_UART_Init+0x90>)
 80407d4:	2200      	movs	r2, #0
 80407d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80407d8:	4b1d      	ldr	r3, [pc, #116]	; (8040850 <MX_USART1_UART_Init+0x90>)
 80407da:	2200      	movs	r2, #0
 80407dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80407de:	4b1c      	ldr	r3, [pc, #112]	; (8040850 <MX_USART1_UART_Init+0x90>)
 80407e0:	2200      	movs	r2, #0
 80407e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80407e4:	4b1a      	ldr	r3, [pc, #104]	; (8040850 <MX_USART1_UART_Init+0x90>)
 80407e6:	220c      	movs	r2, #12
 80407e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80407ea:	4b19      	ldr	r3, [pc, #100]	; (8040850 <MX_USART1_UART_Init+0x90>)
 80407ec:	2200      	movs	r2, #0
 80407ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80407f0:	4b17      	ldr	r3, [pc, #92]	; (8040850 <MX_USART1_UART_Init+0x90>)
 80407f2:	2200      	movs	r2, #0
 80407f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80407f6:	4b16      	ldr	r3, [pc, #88]	; (8040850 <MX_USART1_UART_Init+0x90>)
 80407f8:	2200      	movs	r2, #0
 80407fa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80407fc:	4b14      	ldr	r3, [pc, #80]	; (8040850 <MX_USART1_UART_Init+0x90>)
 80407fe:	2200      	movs	r2, #0
 8040800:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8040802:	4b13      	ldr	r3, [pc, #76]	; (8040850 <MX_USART1_UART_Init+0x90>)
 8040804:	2200      	movs	r2, #0
 8040806:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8040808:	4811      	ldr	r0, [pc, #68]	; (8040850 <MX_USART1_UART_Init+0x90>)
 804080a:	f001 fae1 	bl	8041dd0 <HAL_UART_Init>
 804080e:	4603      	mov	r3, r0
 8040810:	2b00      	cmp	r3, #0
 8040812:	d001      	beq.n	8040818 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8040814:	f000 f844 	bl	80408a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8040818:	2100      	movs	r1, #0
 804081a:	480d      	ldr	r0, [pc, #52]	; (8040850 <MX_USART1_UART_Init+0x90>)
 804081c:	f002 fc28 	bl	8043070 <HAL_UARTEx_SetTxFifoThreshold>
 8040820:	4603      	mov	r3, r0
 8040822:	2b00      	cmp	r3, #0
 8040824:	d001      	beq.n	804082a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8040826:	f000 f83b 	bl	80408a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 804082a:	2100      	movs	r1, #0
 804082c:	4808      	ldr	r0, [pc, #32]	; (8040850 <MX_USART1_UART_Init+0x90>)
 804082e:	f002 fc5d 	bl	80430ec <HAL_UARTEx_SetRxFifoThreshold>
 8040832:	4603      	mov	r3, r0
 8040834:	2b00      	cmp	r3, #0
 8040836:	d001      	beq.n	804083c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8040838:	f000 f832 	bl	80408a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 804083c:	4804      	ldr	r0, [pc, #16]	; (8040850 <MX_USART1_UART_Init+0x90>)
 804083e:	f002 fbde 	bl	8042ffe <HAL_UARTEx_DisableFifoMode>
 8040842:	4603      	mov	r3, r0
 8040844:	2b00      	cmp	r3, #0
 8040846:	d001      	beq.n	804084c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8040848:	f000 f82a 	bl	80408a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 804084c:	bf00      	nop
 804084e:	bd80      	pop	{r7, pc}
 8040850:	20018090 	.word	0x20018090
 8040854:	40013800 	.word	0x40013800

08040858 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8040858:	b480      	push	{r7}
 804085a:	b083      	sub	sp, #12
 804085c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 804085e:	4b0f      	ldr	r3, [pc, #60]	; (804089c <MX_GPIO_Init+0x44>)
 8040860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040862:	4a0e      	ldr	r2, [pc, #56]	; (804089c <MX_GPIO_Init+0x44>)
 8040864:	f043 0304 	orr.w	r3, r3, #4
 8040868:	64d3      	str	r3, [r2, #76]	; 0x4c
 804086a:	4b0c      	ldr	r3, [pc, #48]	; (804089c <MX_GPIO_Init+0x44>)
 804086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804086e:	f003 0304 	and.w	r3, r3, #4
 8040872:	607b      	str	r3, [r7, #4]
 8040874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8040876:	4b09      	ldr	r3, [pc, #36]	; (804089c <MX_GPIO_Init+0x44>)
 8040878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804087a:	4a08      	ldr	r2, [pc, #32]	; (804089c <MX_GPIO_Init+0x44>)
 804087c:	f043 0301 	orr.w	r3, r3, #1
 8040880:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040882:	4b06      	ldr	r3, [pc, #24]	; (804089c <MX_GPIO_Init+0x44>)
 8040884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040886:	f003 0301 	and.w	r3, r3, #1
 804088a:	603b      	str	r3, [r7, #0]
 804088c:	683b      	ldr	r3, [r7, #0]

}
 804088e:	bf00      	nop
 8040890:	370c      	adds	r7, #12
 8040892:	46bd      	mov	sp, r7
 8040894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040898:	4770      	bx	lr
 804089a:	bf00      	nop
 804089c:	40021000 	.word	0x40021000

080408a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80408a0:	b480      	push	{r7}
 80408a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80408a4:	bf00      	nop
 80408a6:	46bd      	mov	sp, r7
 80408a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80408ac:	4770      	bx	lr
	...

080408b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80408b0:	b480      	push	{r7}
 80408b2:	b083      	sub	sp, #12
 80408b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80408b6:	4b0f      	ldr	r3, [pc, #60]	; (80408f4 <HAL_MspInit+0x44>)
 80408b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80408ba:	4a0e      	ldr	r2, [pc, #56]	; (80408f4 <HAL_MspInit+0x44>)
 80408bc:	f043 0301 	orr.w	r3, r3, #1
 80408c0:	6613      	str	r3, [r2, #96]	; 0x60
 80408c2:	4b0c      	ldr	r3, [pc, #48]	; (80408f4 <HAL_MspInit+0x44>)
 80408c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80408c6:	f003 0301 	and.w	r3, r3, #1
 80408ca:	607b      	str	r3, [r7, #4]
 80408cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80408ce:	4b09      	ldr	r3, [pc, #36]	; (80408f4 <HAL_MspInit+0x44>)
 80408d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80408d2:	4a08      	ldr	r2, [pc, #32]	; (80408f4 <HAL_MspInit+0x44>)
 80408d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80408d8:	6593      	str	r3, [r2, #88]	; 0x58
 80408da:	4b06      	ldr	r3, [pc, #24]	; (80408f4 <HAL_MspInit+0x44>)
 80408dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80408de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80408e2:	603b      	str	r3, [r7, #0]
 80408e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80408e6:	bf00      	nop
 80408e8:	370c      	adds	r7, #12
 80408ea:	46bd      	mov	sp, r7
 80408ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80408f0:	4770      	bx	lr
 80408f2:	bf00      	nop
 80408f4:	40021000 	.word	0x40021000

080408f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80408f8:	b580      	push	{r7, lr}
 80408fa:	b0ae      	sub	sp, #184	; 0xb8
 80408fc:	af00      	add	r7, sp, #0
 80408fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040900:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8040904:	2200      	movs	r2, #0
 8040906:	601a      	str	r2, [r3, #0]
 8040908:	605a      	str	r2, [r3, #4]
 804090a:	609a      	str	r2, [r3, #8]
 804090c:	60da      	str	r2, [r3, #12]
 804090e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8040910:	f107 0310 	add.w	r3, r7, #16
 8040914:	2294      	movs	r2, #148	; 0x94
 8040916:	2100      	movs	r1, #0
 8040918:	4618      	mov	r0, r3
 804091a:	f002 fcb1 	bl	8043280 <memset>
  if(huart->Instance==USART1)
 804091e:	687b      	ldr	r3, [r7, #4]
 8040920:	681b      	ldr	r3, [r3, #0]
 8040922:	4a25      	ldr	r2, [pc, #148]	; (80409b8 <HAL_UART_MspInit+0xc0>)
 8040924:	4293      	cmp	r3, r2
 8040926:	d143      	bne.n	80409b0 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8040928:	2301      	movs	r3, #1
 804092a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 804092c:	2300      	movs	r3, #0
 804092e:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8040930:	f107 0310 	add.w	r3, r7, #16
 8040934:	4618      	mov	r0, r3
 8040936:	f000 fd65 	bl	8041404 <HAL_RCCEx_PeriphCLKConfig>
 804093a:	4603      	mov	r3, r0
 804093c:	2b00      	cmp	r3, #0
 804093e:	d001      	beq.n	8040944 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8040940:	f7ff ffae 	bl	80408a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8040944:	4b1d      	ldr	r3, [pc, #116]	; (80409bc <HAL_UART_MspInit+0xc4>)
 8040946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8040948:	4a1c      	ldr	r2, [pc, #112]	; (80409bc <HAL_UART_MspInit+0xc4>)
 804094a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 804094e:	6613      	str	r3, [r2, #96]	; 0x60
 8040950:	4b1a      	ldr	r3, [pc, #104]	; (80409bc <HAL_UART_MspInit+0xc4>)
 8040952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8040954:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8040958:	60fb      	str	r3, [r7, #12]
 804095a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 804095c:	4b17      	ldr	r3, [pc, #92]	; (80409bc <HAL_UART_MspInit+0xc4>)
 804095e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040960:	4a16      	ldr	r2, [pc, #88]	; (80409bc <HAL_UART_MspInit+0xc4>)
 8040962:	f043 0301 	orr.w	r3, r3, #1
 8040966:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040968:	4b14      	ldr	r3, [pc, #80]	; (80409bc <HAL_UART_MspInit+0xc4>)
 804096a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804096c:	f003 0301 	and.w	r3, r3, #1
 8040970:	60bb      	str	r3, [r7, #8]
 8040972:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8040974:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8040978:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804097c:	2302      	movs	r3, #2
 804097e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040982:	2300      	movs	r3, #0
 8040984:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040988:	2300      	movs	r3, #0
 804098a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 804098e:	2307      	movs	r3, #7
 8040990:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8040994:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8040998:	4619      	mov	r1, r3
 804099a:	4809      	ldr	r0, [pc, #36]	; (80409c0 <HAL_UART_MspInit+0xc8>)
 804099c:	f000 fad8 	bl	8040f50 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80409a0:	2200      	movs	r2, #0
 80409a2:	2100      	movs	r1, #0
 80409a4:	203d      	movs	r0, #61	; 0x3d
 80409a6:	f000 f9e4 	bl	8040d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80409aa:	203d      	movs	r0, #61	; 0x3d
 80409ac:	f000 f9fb 	bl	8040da6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80409b0:	bf00      	nop
 80409b2:	37b8      	adds	r7, #184	; 0xb8
 80409b4:	46bd      	mov	sp, r7
 80409b6:	bd80      	pop	{r7, pc}
 80409b8:	40013800 	.word	0x40013800
 80409bc:	40021000 	.word	0x40021000
 80409c0:	42020000 	.word	0x42020000

080409c4 <MemManage_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80409c4:	b480      	push	{r7}
 80409c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80409c8:	e7fe      	b.n	80409c8 <MemManage_Handler+0x4>

080409ca <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80409ca:	b480      	push	{r7}
 80409cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80409ce:	e7fe      	b.n	80409ce <UsageFault_Handler+0x4>

080409d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80409d0:	b480      	push	{r7}
 80409d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80409d4:	bf00      	nop
 80409d6:	46bd      	mov	sp, r7
 80409d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80409dc:	4770      	bx	lr

080409de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80409de:	b480      	push	{r7}
 80409e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80409e2:	bf00      	nop
 80409e4:	46bd      	mov	sp, r7
 80409e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80409ea:	4770      	bx	lr

080409ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80409ec:	b580      	push	{r7, lr}
 80409ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80409f0:	f000 f8a0 	bl	8040b34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80409f4:	bf00      	nop
 80409f6:	bd80      	pop	{r7, pc}

080409f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 26.
  */
void USART1_IRQHandler(void)
{
 80409f8:	b580      	push	{r7, lr}
 80409fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80409fc:	4802      	ldr	r0, [pc, #8]	; (8040a08 <USART1_IRQHandler+0x10>)
 80409fe:	f001 fabb 	bl	8041f78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8040a02:	bf00      	nop
 8040a04:	bd80      	pop	{r7, pc}
 8040a06:	bf00      	nop
 8040a08:	20018090 	.word	0x20018090

08040a0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8040a0c:	b480      	push	{r7}
 8040a0e:	af00      	add	r7, sp, #0
#endif

  /* Non-secure main application shall call SystemCoreClockUpdate() to update */
  /* the SystemCoreClock variable to insure non-secure application relies on  */
  /* the initial clock reference set by secure application.                   */
}
 8040a10:	bf00      	nop
 8040a12:	46bd      	mov	sp, r7
 8040a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040a18:	4770      	bx	lr
	...

08040a1c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8040a1c:	b580      	push	{r7, lr}
 8040a1e:	af00      	add	r7, sp, #0
  /* Get the SystemCoreClock value from the secure domain */
  SystemCoreClock = SECURE_SystemCoreClockUpdate();
 8040a20:	f002 fc4a 	bl	80432b8 <__SECURE_SystemCoreClockUpdate_veneer>
 8040a24:	4603      	mov	r3, r0
 8040a26:	4a02      	ldr	r2, [pc, #8]	; (8040a30 <SystemCoreClockUpdate+0x14>)
 8040a28:	6013      	str	r3, [r2, #0]
}
 8040a2a:	bf00      	nop
 8040a2c:	bd80      	pop	{r7, pc}
 8040a2e:	bf00      	nop
 8040a30:	20018008 	.word	0x20018008

08040a34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8040a34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8040a6c <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8040a38:	f7ff ffe8 	bl	8040a0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8040a3c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8040a3e:	e003      	b.n	8040a48 <LoopCopyDataInit>

08040a40 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8040a40:	4b0b      	ldr	r3, [pc, #44]	; (8040a70 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8040a42:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8040a44:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8040a46:	3104      	adds	r1, #4

08040a48 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8040a48:	480a      	ldr	r0, [pc, #40]	; (8040a74 <LoopForever+0xa>)
	ldr	r3, =_edata
 8040a4a:	4b0b      	ldr	r3, [pc, #44]	; (8040a78 <LoopForever+0xe>)
	adds	r2, r0, r1
 8040a4c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8040a4e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8040a50:	d3f6      	bcc.n	8040a40 <CopyDataInit>
	ldr	r2, =_sbss
 8040a52:	4a0a      	ldr	r2, [pc, #40]	; (8040a7c <LoopForever+0x12>)
	b	LoopFillZerobss
 8040a54:	e002      	b.n	8040a5c <LoopFillZerobss>

08040a56 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8040a56:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8040a58:	f842 3b04 	str.w	r3, [r2], #4

08040a5c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8040a5c:	4b08      	ldr	r3, [pc, #32]	; (8040a80 <LoopForever+0x16>)
	cmp	r2, r3
 8040a5e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8040a60:	d3f9      	bcc.n	8040a56 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8040a62:	f002 fbe9 	bl	8043238 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8040a66:	f7ff fe17 	bl	8040698 <main>

08040a6a <LoopForever>:

LoopForever:
    b LoopForever
 8040a6a:	e7fe      	b.n	8040a6a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8040a6c:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8040a70:	080433e8 	.word	0x080433e8
	ldr	r0, =_sdata
 8040a74:	20018000 	.word	0x20018000
	ldr	r3, =_edata
 8040a78:	20018014 	.word	0x20018014
	ldr	r2, =_sbss
 8040a7c:	20018014 	.word	0x20018014
	ldr	r3, = _ebss
 8040a80:	20018134 	.word	0x20018134

08040a84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8040a84:	e7fe      	b.n	8040a84 <ADC1_2_IRQHandler>

08040a86 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8040a86:	b580      	push	{r7, lr}
 8040a88:	b082      	sub	sp, #8
 8040a8a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8040a8c:	2300      	movs	r3, #0
 8040a8e:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8040a90:	2004      	movs	r0, #4
 8040a92:	f000 f963 	bl	8040d5c <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8040a96:	f7ff ffc1 	bl	8040a1c <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8040a9a:	2000      	movs	r0, #0
 8040a9c:	f000 f80e 	bl	8040abc <HAL_InitTick>
 8040aa0:	4603      	mov	r3, r0
 8040aa2:	2b00      	cmp	r3, #0
 8040aa4:	d002      	beq.n	8040aac <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8040aa6:	2301      	movs	r3, #1
 8040aa8:	71fb      	strb	r3, [r7, #7]
 8040aaa:	e001      	b.n	8040ab0 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8040aac:	f7ff ff00 	bl	80408b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8040ab0:	79fb      	ldrb	r3, [r7, #7]
}
 8040ab2:	4618      	mov	r0, r3
 8040ab4:	3708      	adds	r7, #8
 8040ab6:	46bd      	mov	sp, r7
 8040ab8:	bd80      	pop	{r7, pc}
	...

08040abc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8040abc:	b580      	push	{r7, lr}
 8040abe:	b084      	sub	sp, #16
 8040ac0:	af00      	add	r7, sp, #0
 8040ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8040ac4:	2300      	movs	r3, #0
 8040ac6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8040ac8:	4b17      	ldr	r3, [pc, #92]	; (8040b28 <HAL_InitTick+0x6c>)
 8040aca:	781b      	ldrb	r3, [r3, #0]
 8040acc:	2b00      	cmp	r3, #0
 8040ace:	d023      	beq.n	8040b18 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8040ad0:	4b16      	ldr	r3, [pc, #88]	; (8040b2c <HAL_InitTick+0x70>)
 8040ad2:	681a      	ldr	r2, [r3, #0]
 8040ad4:	4b14      	ldr	r3, [pc, #80]	; (8040b28 <HAL_InitTick+0x6c>)
 8040ad6:	781b      	ldrb	r3, [r3, #0]
 8040ad8:	4619      	mov	r1, r3
 8040ada:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8040ade:	fbb3 f3f1 	udiv	r3, r3, r1
 8040ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8040ae6:	4618      	mov	r0, r3
 8040ae8:	f000 f96b 	bl	8040dc2 <HAL_SYSTICK_Config>
 8040aec:	4603      	mov	r3, r0
 8040aee:	2b00      	cmp	r3, #0
 8040af0:	d10f      	bne.n	8040b12 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8040af2:	687b      	ldr	r3, [r7, #4]
 8040af4:	2b07      	cmp	r3, #7
 8040af6:	d809      	bhi.n	8040b0c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8040af8:	2200      	movs	r2, #0
 8040afa:	6879      	ldr	r1, [r7, #4]
 8040afc:	f04f 30ff 	mov.w	r0, #4294967295
 8040b00:	f000 f937 	bl	8040d72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8040b04:	4a0a      	ldr	r2, [pc, #40]	; (8040b30 <HAL_InitTick+0x74>)
 8040b06:	687b      	ldr	r3, [r7, #4]
 8040b08:	6013      	str	r3, [r2, #0]
 8040b0a:	e007      	b.n	8040b1c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8040b0c:	2301      	movs	r3, #1
 8040b0e:	73fb      	strb	r3, [r7, #15]
 8040b10:	e004      	b.n	8040b1c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8040b12:	2301      	movs	r3, #1
 8040b14:	73fb      	strb	r3, [r7, #15]
 8040b16:	e001      	b.n	8040b1c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8040b18:	2301      	movs	r3, #1
 8040b1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8040b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8040b1e:	4618      	mov	r0, r3
 8040b20:	3710      	adds	r7, #16
 8040b22:	46bd      	mov	sp, r7
 8040b24:	bd80      	pop	{r7, pc}
 8040b26:	bf00      	nop
 8040b28:	20018010 	.word	0x20018010
 8040b2c:	20018008 	.word	0x20018008
 8040b30:	2001800c 	.word	0x2001800c

08040b34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8040b34:	b480      	push	{r7}
 8040b36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8040b38:	4b06      	ldr	r3, [pc, #24]	; (8040b54 <HAL_IncTick+0x20>)
 8040b3a:	781b      	ldrb	r3, [r3, #0]
 8040b3c:	461a      	mov	r2, r3
 8040b3e:	4b06      	ldr	r3, [pc, #24]	; (8040b58 <HAL_IncTick+0x24>)
 8040b40:	681b      	ldr	r3, [r3, #0]
 8040b42:	4413      	add	r3, r2
 8040b44:	4a04      	ldr	r2, [pc, #16]	; (8040b58 <HAL_IncTick+0x24>)
 8040b46:	6013      	str	r3, [r2, #0]
}
 8040b48:	bf00      	nop
 8040b4a:	46bd      	mov	sp, r7
 8040b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040b50:	4770      	bx	lr
 8040b52:	bf00      	nop
 8040b54:	20018010 	.word	0x20018010
 8040b58:	20018130 	.word	0x20018130

08040b5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8040b5c:	b480      	push	{r7}
 8040b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8040b60:	4b03      	ldr	r3, [pc, #12]	; (8040b70 <HAL_GetTick+0x14>)
 8040b62:	681b      	ldr	r3, [r3, #0]
}
 8040b64:	4618      	mov	r0, r3
 8040b66:	46bd      	mov	sp, r7
 8040b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040b6c:	4770      	bx	lr
 8040b6e:	bf00      	nop
 8040b70:	20018130 	.word	0x20018130

08040b74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8040b74:	b580      	push	{r7, lr}
 8040b76:	b084      	sub	sp, #16
 8040b78:	af00      	add	r7, sp, #0
 8040b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8040b7c:	f7ff ffee 	bl	8040b5c <HAL_GetTick>
 8040b80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8040b82:	687b      	ldr	r3, [r7, #4]
 8040b84:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8040b86:	68fb      	ldr	r3, [r7, #12]
 8040b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8040b8c:	d005      	beq.n	8040b9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8040b8e:	4b0a      	ldr	r3, [pc, #40]	; (8040bb8 <HAL_Delay+0x44>)
 8040b90:	781b      	ldrb	r3, [r3, #0]
 8040b92:	461a      	mov	r2, r3
 8040b94:	68fb      	ldr	r3, [r7, #12]
 8040b96:	4413      	add	r3, r2
 8040b98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8040b9a:	bf00      	nop
 8040b9c:	f7ff ffde 	bl	8040b5c <HAL_GetTick>
 8040ba0:	4602      	mov	r2, r0
 8040ba2:	68bb      	ldr	r3, [r7, #8]
 8040ba4:	1ad3      	subs	r3, r2, r3
 8040ba6:	68fa      	ldr	r2, [r7, #12]
 8040ba8:	429a      	cmp	r2, r3
 8040baa:	d8f7      	bhi.n	8040b9c <HAL_Delay+0x28>
  {
  }
}
 8040bac:	bf00      	nop
 8040bae:	bf00      	nop
 8040bb0:	3710      	adds	r7, #16
 8040bb2:	46bd      	mov	sp, r7
 8040bb4:	bd80      	pop	{r7, pc}
 8040bb6:	bf00      	nop
 8040bb8:	20018010 	.word	0x20018010

08040bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040bbc:	b480      	push	{r7}
 8040bbe:	b085      	sub	sp, #20
 8040bc0:	af00      	add	r7, sp, #0
 8040bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8040bc4:	687b      	ldr	r3, [r7, #4]
 8040bc6:	f003 0307 	and.w	r3, r3, #7
 8040bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8040bcc:	4b0c      	ldr	r3, [pc, #48]	; (8040c00 <__NVIC_SetPriorityGrouping+0x44>)
 8040bce:	68db      	ldr	r3, [r3, #12]
 8040bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8040bd2:	68ba      	ldr	r2, [r7, #8]
 8040bd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8040bd8:	4013      	ands	r3, r2
 8040bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8040bdc:	68fb      	ldr	r3, [r7, #12]
 8040bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8040be0:	68bb      	ldr	r3, [r7, #8]
 8040be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8040be4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8040be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8040bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8040bee:	4a04      	ldr	r2, [pc, #16]	; (8040c00 <__NVIC_SetPriorityGrouping+0x44>)
 8040bf0:	68bb      	ldr	r3, [r7, #8]
 8040bf2:	60d3      	str	r3, [r2, #12]
}
 8040bf4:	bf00      	nop
 8040bf6:	3714      	adds	r7, #20
 8040bf8:	46bd      	mov	sp, r7
 8040bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040bfe:	4770      	bx	lr
 8040c00:	e000ed00 	.word	0xe000ed00

08040c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8040c04:	b480      	push	{r7}
 8040c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8040c08:	4b04      	ldr	r3, [pc, #16]	; (8040c1c <__NVIC_GetPriorityGrouping+0x18>)
 8040c0a:	68db      	ldr	r3, [r3, #12]
 8040c0c:	0a1b      	lsrs	r3, r3, #8
 8040c0e:	f003 0307 	and.w	r3, r3, #7
}
 8040c12:	4618      	mov	r0, r3
 8040c14:	46bd      	mov	sp, r7
 8040c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c1a:	4770      	bx	lr
 8040c1c:	e000ed00 	.word	0xe000ed00

08040c20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8040c20:	b480      	push	{r7}
 8040c22:	b083      	sub	sp, #12
 8040c24:	af00      	add	r7, sp, #0
 8040c26:	4603      	mov	r3, r0
 8040c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8040c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040c2e:	2b00      	cmp	r3, #0
 8040c30:	db0b      	blt.n	8040c4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8040c32:	79fb      	ldrb	r3, [r7, #7]
 8040c34:	f003 021f 	and.w	r2, r3, #31
 8040c38:	4907      	ldr	r1, [pc, #28]	; (8040c58 <__NVIC_EnableIRQ+0x38>)
 8040c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040c3e:	095b      	lsrs	r3, r3, #5
 8040c40:	2001      	movs	r0, #1
 8040c42:	fa00 f202 	lsl.w	r2, r0, r2
 8040c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8040c4a:	bf00      	nop
 8040c4c:	370c      	adds	r7, #12
 8040c4e:	46bd      	mov	sp, r7
 8040c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c54:	4770      	bx	lr
 8040c56:	bf00      	nop
 8040c58:	e000e100 	.word	0xe000e100

08040c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8040c5c:	b480      	push	{r7}
 8040c5e:	b083      	sub	sp, #12
 8040c60:	af00      	add	r7, sp, #0
 8040c62:	4603      	mov	r3, r0
 8040c64:	6039      	str	r1, [r7, #0]
 8040c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8040c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040c6c:	2b00      	cmp	r3, #0
 8040c6e:	db0a      	blt.n	8040c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040c70:	683b      	ldr	r3, [r7, #0]
 8040c72:	b2da      	uxtb	r2, r3
 8040c74:	490c      	ldr	r1, [pc, #48]	; (8040ca8 <__NVIC_SetPriority+0x4c>)
 8040c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040c7a:	0152      	lsls	r2, r2, #5
 8040c7c:	b2d2      	uxtb	r2, r2
 8040c7e:	440b      	add	r3, r1
 8040c80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8040c84:	e00a      	b.n	8040c9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040c86:	683b      	ldr	r3, [r7, #0]
 8040c88:	b2da      	uxtb	r2, r3
 8040c8a:	4908      	ldr	r1, [pc, #32]	; (8040cac <__NVIC_SetPriority+0x50>)
 8040c8c:	79fb      	ldrb	r3, [r7, #7]
 8040c8e:	f003 030f 	and.w	r3, r3, #15
 8040c92:	3b04      	subs	r3, #4
 8040c94:	0152      	lsls	r2, r2, #5
 8040c96:	b2d2      	uxtb	r2, r2
 8040c98:	440b      	add	r3, r1
 8040c9a:	761a      	strb	r2, [r3, #24]
}
 8040c9c:	bf00      	nop
 8040c9e:	370c      	adds	r7, #12
 8040ca0:	46bd      	mov	sp, r7
 8040ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040ca6:	4770      	bx	lr
 8040ca8:	e000e100 	.word	0xe000e100
 8040cac:	e000ed00 	.word	0xe000ed00

08040cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8040cb0:	b480      	push	{r7}
 8040cb2:	b089      	sub	sp, #36	; 0x24
 8040cb4:	af00      	add	r7, sp, #0
 8040cb6:	60f8      	str	r0, [r7, #12]
 8040cb8:	60b9      	str	r1, [r7, #8]
 8040cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8040cbc:	68fb      	ldr	r3, [r7, #12]
 8040cbe:	f003 0307 	and.w	r3, r3, #7
 8040cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8040cc4:	69fb      	ldr	r3, [r7, #28]
 8040cc6:	f1c3 0307 	rsb	r3, r3, #7
 8040cca:	2b03      	cmp	r3, #3
 8040ccc:	bf28      	it	cs
 8040cce:	2303      	movcs	r3, #3
 8040cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8040cd2:	69fb      	ldr	r3, [r7, #28]
 8040cd4:	3303      	adds	r3, #3
 8040cd6:	2b06      	cmp	r3, #6
 8040cd8:	d902      	bls.n	8040ce0 <NVIC_EncodePriority+0x30>
 8040cda:	69fb      	ldr	r3, [r7, #28]
 8040cdc:	3b04      	subs	r3, #4
 8040cde:	e000      	b.n	8040ce2 <NVIC_EncodePriority+0x32>
 8040ce0:	2300      	movs	r3, #0
 8040ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8040ce8:	69bb      	ldr	r3, [r7, #24]
 8040cea:	fa02 f303 	lsl.w	r3, r2, r3
 8040cee:	43da      	mvns	r2, r3
 8040cf0:	68bb      	ldr	r3, [r7, #8]
 8040cf2:	401a      	ands	r2, r3
 8040cf4:	697b      	ldr	r3, [r7, #20]
 8040cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8040cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8040cfc:	697b      	ldr	r3, [r7, #20]
 8040cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8040d02:	43d9      	mvns	r1, r3
 8040d04:	687b      	ldr	r3, [r7, #4]
 8040d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040d08:	4313      	orrs	r3, r2
         );
}
 8040d0a:	4618      	mov	r0, r3
 8040d0c:	3724      	adds	r7, #36	; 0x24
 8040d0e:	46bd      	mov	sp, r7
 8040d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040d14:	4770      	bx	lr
	...

08040d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8040d18:	b580      	push	{r7, lr}
 8040d1a:	b082      	sub	sp, #8
 8040d1c:	af00      	add	r7, sp, #0
 8040d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8040d20:	687b      	ldr	r3, [r7, #4]
 8040d22:	3b01      	subs	r3, #1
 8040d24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8040d28:	d301      	bcc.n	8040d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8040d2a:	2301      	movs	r3, #1
 8040d2c:	e00f      	b.n	8040d4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8040d2e:	4a0a      	ldr	r2, [pc, #40]	; (8040d58 <SysTick_Config+0x40>)
 8040d30:	687b      	ldr	r3, [r7, #4]
 8040d32:	3b01      	subs	r3, #1
 8040d34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8040d36:	2107      	movs	r1, #7
 8040d38:	f04f 30ff 	mov.w	r0, #4294967295
 8040d3c:	f7ff ff8e 	bl	8040c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8040d40:	4b05      	ldr	r3, [pc, #20]	; (8040d58 <SysTick_Config+0x40>)
 8040d42:	2200      	movs	r2, #0
 8040d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8040d46:	4b04      	ldr	r3, [pc, #16]	; (8040d58 <SysTick_Config+0x40>)
 8040d48:	2207      	movs	r2, #7
 8040d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8040d4c:	2300      	movs	r3, #0
}
 8040d4e:	4618      	mov	r0, r3
 8040d50:	3708      	adds	r7, #8
 8040d52:	46bd      	mov	sp, r7
 8040d54:	bd80      	pop	{r7, pc}
 8040d56:	bf00      	nop
 8040d58:	e000e010 	.word	0xe000e010

08040d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040d5c:	b580      	push	{r7, lr}
 8040d5e:	b082      	sub	sp, #8
 8040d60:	af00      	add	r7, sp, #0
 8040d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8040d64:	6878      	ldr	r0, [r7, #4]
 8040d66:	f7ff ff29 	bl	8040bbc <__NVIC_SetPriorityGrouping>
}
 8040d6a:	bf00      	nop
 8040d6c:	3708      	adds	r7, #8
 8040d6e:	46bd      	mov	sp, r7
 8040d70:	bd80      	pop	{r7, pc}

08040d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8040d72:	b580      	push	{r7, lr}
 8040d74:	b086      	sub	sp, #24
 8040d76:	af00      	add	r7, sp, #0
 8040d78:	4603      	mov	r3, r0
 8040d7a:	60b9      	str	r1, [r7, #8]
 8040d7c:	607a      	str	r2, [r7, #4]
 8040d7e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8040d80:	f7ff ff40 	bl	8040c04 <__NVIC_GetPriorityGrouping>
 8040d84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8040d86:	687a      	ldr	r2, [r7, #4]
 8040d88:	68b9      	ldr	r1, [r7, #8]
 8040d8a:	6978      	ldr	r0, [r7, #20]
 8040d8c:	f7ff ff90 	bl	8040cb0 <NVIC_EncodePriority>
 8040d90:	4602      	mov	r2, r0
 8040d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8040d96:	4611      	mov	r1, r2
 8040d98:	4618      	mov	r0, r3
 8040d9a:	f7ff ff5f 	bl	8040c5c <__NVIC_SetPriority>
}
 8040d9e:	bf00      	nop
 8040da0:	3718      	adds	r7, #24
 8040da2:	46bd      	mov	sp, r7
 8040da4:	bd80      	pop	{r7, pc}

08040da6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8040da6:	b580      	push	{r7, lr}
 8040da8:	b082      	sub	sp, #8
 8040daa:	af00      	add	r7, sp, #0
 8040dac:	4603      	mov	r3, r0
 8040dae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8040db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040db4:	4618      	mov	r0, r3
 8040db6:	f7ff ff33 	bl	8040c20 <__NVIC_EnableIRQ>
}
 8040dba:	bf00      	nop
 8040dbc:	3708      	adds	r7, #8
 8040dbe:	46bd      	mov	sp, r7
 8040dc0:	bd80      	pop	{r7, pc}

08040dc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8040dc2:	b580      	push	{r7, lr}
 8040dc4:	b082      	sub	sp, #8
 8040dc6:	af00      	add	r7, sp, #0
 8040dc8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8040dca:	6878      	ldr	r0, [r7, #4]
 8040dcc:	f7ff ffa4 	bl	8040d18 <SysTick_Config>
 8040dd0:	4603      	mov	r3, r0
}
 8040dd2:	4618      	mov	r0, r3
 8040dd4:	3708      	adds	r7, #8
 8040dd6:	46bd      	mov	sp, r7
 8040dd8:	bd80      	pop	{r7, pc}

08040dda <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8040dda:	b480      	push	{r7}
 8040ddc:	b085      	sub	sp, #20
 8040dde:	af00      	add	r7, sp, #0
 8040de0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8040de2:	2300      	movs	r3, #0
 8040de4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8040de6:	687b      	ldr	r3, [r7, #4]
 8040de8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8040dec:	b2db      	uxtb	r3, r3
 8040dee:	2b02      	cmp	r3, #2
 8040df0:	d008      	beq.n	8040e04 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8040df2:	687b      	ldr	r3, [r7, #4]
 8040df4:	2204      	movs	r2, #4
 8040df6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8040df8:	687b      	ldr	r3, [r7, #4]
 8040dfa:	2200      	movs	r2, #0
 8040dfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8040e00:	2301      	movs	r3, #1
 8040e02:	e040      	b.n	8040e86 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8040e04:	687b      	ldr	r3, [r7, #4]
 8040e06:	681b      	ldr	r3, [r3, #0]
 8040e08:	681a      	ldr	r2, [r3, #0]
 8040e0a:	687b      	ldr	r3, [r7, #4]
 8040e0c:	681b      	ldr	r3, [r3, #0]
 8040e0e:	f022 020e 	bic.w	r2, r2, #14
 8040e12:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8040e14:	687b      	ldr	r3, [r7, #4]
 8040e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8040e18:	681a      	ldr	r2, [r3, #0]
 8040e1a:	687b      	ldr	r3, [r7, #4]
 8040e1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8040e1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8040e22:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8040e24:	687b      	ldr	r3, [r7, #4]
 8040e26:	681b      	ldr	r3, [r3, #0]
 8040e28:	681a      	ldr	r2, [r3, #0]
 8040e2a:	687b      	ldr	r3, [r7, #4]
 8040e2c:	681b      	ldr	r3, [r3, #0]
 8040e2e:	f022 0201 	bic.w	r2, r2, #1
 8040e32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8040e34:	687b      	ldr	r3, [r7, #4]
 8040e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040e38:	f003 021c 	and.w	r2, r3, #28
 8040e3c:	687b      	ldr	r3, [r7, #4]
 8040e3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8040e40:	2101      	movs	r1, #1
 8040e42:	fa01 f202 	lsl.w	r2, r1, r2
 8040e46:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8040e48:	687b      	ldr	r3, [r7, #4]
 8040e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8040e4c:	687a      	ldr	r2, [r7, #4]
 8040e4e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8040e50:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8040e52:	687b      	ldr	r3, [r7, #4]
 8040e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8040e56:	2b00      	cmp	r3, #0
 8040e58:	d00c      	beq.n	8040e74 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8040e5a:	687b      	ldr	r3, [r7, #4]
 8040e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8040e5e:	681a      	ldr	r2, [r3, #0]
 8040e60:	687b      	ldr	r3, [r7, #4]
 8040e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8040e64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8040e68:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8040e6a:	687b      	ldr	r3, [r7, #4]
 8040e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8040e6e:	687a      	ldr	r2, [r7, #4]
 8040e70:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8040e72:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8040e74:	687b      	ldr	r3, [r7, #4]
 8040e76:	2201      	movs	r2, #1
 8040e78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8040e7c:	687b      	ldr	r3, [r7, #4]
 8040e7e:	2200      	movs	r2, #0
 8040e80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8040e84:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8040e86:	4618      	mov	r0, r3
 8040e88:	3714      	adds	r7, #20
 8040e8a:	46bd      	mov	sp, r7
 8040e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040e90:	4770      	bx	lr

08040e92 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8040e92:	b580      	push	{r7, lr}
 8040e94:	b084      	sub	sp, #16
 8040e96:	af00      	add	r7, sp, #0
 8040e98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8040e9a:	2300      	movs	r3, #0
 8040e9c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8040e9e:	687b      	ldr	r3, [r7, #4]
 8040ea0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8040ea4:	b2db      	uxtb	r3, r3
 8040ea6:	2b02      	cmp	r3, #2
 8040ea8:	d005      	beq.n	8040eb6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8040eaa:	687b      	ldr	r3, [r7, #4]
 8040eac:	2204      	movs	r2, #4
 8040eae:	645a      	str	r2, [r3, #68]	; 0x44

    status = HAL_ERROR;
 8040eb0:	2301      	movs	r3, #1
 8040eb2:	73fb      	strb	r3, [r7, #15]
 8040eb4:	e047      	b.n	8040f46 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8040eb6:	687b      	ldr	r3, [r7, #4]
 8040eb8:	681b      	ldr	r3, [r3, #0]
 8040eba:	681a      	ldr	r2, [r3, #0]
 8040ebc:	687b      	ldr	r3, [r7, #4]
 8040ebe:	681b      	ldr	r3, [r3, #0]
 8040ec0:	f022 020e 	bic.w	r2, r2, #14
 8040ec4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8040ec6:	687b      	ldr	r3, [r7, #4]
 8040ec8:	681b      	ldr	r3, [r3, #0]
 8040eca:	681a      	ldr	r2, [r3, #0]
 8040ecc:	687b      	ldr	r3, [r7, #4]
 8040ece:	681b      	ldr	r3, [r3, #0]
 8040ed0:	f022 0201 	bic.w	r2, r2, #1
 8040ed4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8040ed6:	687b      	ldr	r3, [r7, #4]
 8040ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8040eda:	681a      	ldr	r2, [r3, #0]
 8040edc:	687b      	ldr	r3, [r7, #4]
 8040ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8040ee0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8040ee4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8040ee6:	687b      	ldr	r3, [r7, #4]
 8040ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040eea:	f003 021c 	and.w	r2, r3, #28
 8040eee:	687b      	ldr	r3, [r7, #4]
 8040ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8040ef2:	2101      	movs	r1, #1
 8040ef4:	fa01 f202 	lsl.w	r2, r1, r2
 8040ef8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8040efa:	687b      	ldr	r3, [r7, #4]
 8040efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8040efe:	687a      	ldr	r2, [r7, #4]
 8040f00:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8040f02:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8040f04:	687b      	ldr	r3, [r7, #4]
 8040f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8040f08:	2b00      	cmp	r3, #0
 8040f0a:	d00c      	beq.n	8040f26 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8040f0c:	687b      	ldr	r3, [r7, #4]
 8040f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8040f10:	681a      	ldr	r2, [r3, #0]
 8040f12:	687b      	ldr	r3, [r7, #4]
 8040f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8040f16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8040f1a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8040f1c:	687b      	ldr	r3, [r7, #4]
 8040f1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8040f20:	687a      	ldr	r2, [r7, #4]
 8040f22:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8040f24:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8040f26:	687b      	ldr	r3, [r7, #4]
 8040f28:	2201      	movs	r2, #1
 8040f2a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8040f2e:	687b      	ldr	r3, [r7, #4]
 8040f30:	2200      	movs	r2, #0
 8040f32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8040f36:	687b      	ldr	r3, [r7, #4]
 8040f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040f3a:	2b00      	cmp	r3, #0
 8040f3c:	d003      	beq.n	8040f46 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8040f3e:	687b      	ldr	r3, [r7, #4]
 8040f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040f42:	6878      	ldr	r0, [r7, #4]
 8040f44:	4798      	blx	r3
    }
  }
  return status;
 8040f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8040f48:	4618      	mov	r0, r3
 8040f4a:	3710      	adds	r7, #16
 8040f4c:	46bd      	mov	sp, r7
 8040f4e:	bd80      	pop	{r7, pc}

08040f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8040f50:	b480      	push	{r7}
 8040f52:	b087      	sub	sp, #28
 8040f54:	af00      	add	r7, sp, #0
 8040f56:	6078      	str	r0, [r7, #4]
 8040f58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8040f5a:	2300      	movs	r3, #0
 8040f5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8040f5e:	e158      	b.n	8041212 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8040f60:	683b      	ldr	r3, [r7, #0]
 8040f62:	681a      	ldr	r2, [r3, #0]
 8040f64:	2101      	movs	r1, #1
 8040f66:	697b      	ldr	r3, [r7, #20]
 8040f68:	fa01 f303 	lsl.w	r3, r1, r3
 8040f6c:	4013      	ands	r3, r2
 8040f6e:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 8040f70:	68fb      	ldr	r3, [r7, #12]
 8040f72:	2b00      	cmp	r3, #0
 8040f74:	f000 814a 	beq.w	804120c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8040f78:	683b      	ldr	r3, [r7, #0]
 8040f7a:	685b      	ldr	r3, [r3, #4]
 8040f7c:	2b01      	cmp	r3, #1
 8040f7e:	d00b      	beq.n	8040f98 <HAL_GPIO_Init+0x48>
 8040f80:	683b      	ldr	r3, [r7, #0]
 8040f82:	685b      	ldr	r3, [r3, #4]
 8040f84:	2b02      	cmp	r3, #2
 8040f86:	d007      	beq.n	8040f98 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8040f88:	683b      	ldr	r3, [r7, #0]
 8040f8a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8040f8c:	2b11      	cmp	r3, #17
 8040f8e:	d003      	beq.n	8040f98 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8040f90:	683b      	ldr	r3, [r7, #0]
 8040f92:	685b      	ldr	r3, [r3, #4]
 8040f94:	2b12      	cmp	r3, #18
 8040f96:	d130      	bne.n	8040ffa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8040f98:	687b      	ldr	r3, [r7, #4]
 8040f9a:	689b      	ldr	r3, [r3, #8]
 8040f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8040f9e:	697b      	ldr	r3, [r7, #20]
 8040fa0:	005b      	lsls	r3, r3, #1
 8040fa2:	2203      	movs	r2, #3
 8040fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8040fa8:	43db      	mvns	r3, r3
 8040faa:	693a      	ldr	r2, [r7, #16]
 8040fac:	4013      	ands	r3, r2
 8040fae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8040fb0:	683b      	ldr	r3, [r7, #0]
 8040fb2:	68da      	ldr	r2, [r3, #12]
 8040fb4:	697b      	ldr	r3, [r7, #20]
 8040fb6:	005b      	lsls	r3, r3, #1
 8040fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8040fbc:	693a      	ldr	r2, [r7, #16]
 8040fbe:	4313      	orrs	r3, r2
 8040fc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8040fc2:	687b      	ldr	r3, [r7, #4]
 8040fc4:	693a      	ldr	r2, [r7, #16]
 8040fc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8040fc8:	687b      	ldr	r3, [r7, #4]
 8040fca:	685b      	ldr	r3, [r3, #4]
 8040fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8040fce:	2201      	movs	r2, #1
 8040fd0:	697b      	ldr	r3, [r7, #20]
 8040fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8040fd6:	43db      	mvns	r3, r3
 8040fd8:	693a      	ldr	r2, [r7, #16]
 8040fda:	4013      	ands	r3, r2
 8040fdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8040fde:	683b      	ldr	r3, [r7, #0]
 8040fe0:	685b      	ldr	r3, [r3, #4]
 8040fe2:	091b      	lsrs	r3, r3, #4
 8040fe4:	f003 0201 	and.w	r2, r3, #1
 8040fe8:	697b      	ldr	r3, [r7, #20]
 8040fea:	fa02 f303 	lsl.w	r3, r2, r3
 8040fee:	693a      	ldr	r2, [r7, #16]
 8040ff0:	4313      	orrs	r3, r2
 8040ff2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8040ff4:	687b      	ldr	r3, [r7, #4]
 8040ff6:	693a      	ldr	r2, [r7, #16]
 8040ff8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8040ffa:	687b      	ldr	r3, [r7, #4]
 8040ffc:	68db      	ldr	r3, [r3, #12]
 8040ffe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8041000:	697b      	ldr	r3, [r7, #20]
 8041002:	005b      	lsls	r3, r3, #1
 8041004:	2203      	movs	r2, #3
 8041006:	fa02 f303 	lsl.w	r3, r2, r3
 804100a:	43db      	mvns	r3, r3
 804100c:	693a      	ldr	r2, [r7, #16]
 804100e:	4013      	ands	r3, r2
 8041010:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8041012:	683b      	ldr	r3, [r7, #0]
 8041014:	689a      	ldr	r2, [r3, #8]
 8041016:	697b      	ldr	r3, [r7, #20]
 8041018:	005b      	lsls	r3, r3, #1
 804101a:	fa02 f303 	lsl.w	r3, r2, r3
 804101e:	693a      	ldr	r2, [r7, #16]
 8041020:	4313      	orrs	r3, r2
 8041022:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8041024:	687b      	ldr	r3, [r7, #4]
 8041026:	693a      	ldr	r2, [r7, #16]
 8041028:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 804102a:	683b      	ldr	r3, [r7, #0]
 804102c:	685b      	ldr	r3, [r3, #4]
 804102e:	2b02      	cmp	r3, #2
 8041030:	d003      	beq.n	804103a <HAL_GPIO_Init+0xea>
 8041032:	683b      	ldr	r3, [r7, #0]
 8041034:	685b      	ldr	r3, [r3, #4]
 8041036:	2b12      	cmp	r3, #18
 8041038:	d123      	bne.n	8041082 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 804103a:	697b      	ldr	r3, [r7, #20]
 804103c:	08da      	lsrs	r2, r3, #3
 804103e:	687b      	ldr	r3, [r7, #4]
 8041040:	3208      	adds	r2, #8
 8041042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8041046:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8041048:	697b      	ldr	r3, [r7, #20]
 804104a:	f003 0307 	and.w	r3, r3, #7
 804104e:	009b      	lsls	r3, r3, #2
 8041050:	220f      	movs	r2, #15
 8041052:	fa02 f303 	lsl.w	r3, r2, r3
 8041056:	43db      	mvns	r3, r3
 8041058:	693a      	ldr	r2, [r7, #16]
 804105a:	4013      	ands	r3, r2
 804105c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 804105e:	683b      	ldr	r3, [r7, #0]
 8041060:	691a      	ldr	r2, [r3, #16]
 8041062:	697b      	ldr	r3, [r7, #20]
 8041064:	f003 0307 	and.w	r3, r3, #7
 8041068:	009b      	lsls	r3, r3, #2
 804106a:	fa02 f303 	lsl.w	r3, r2, r3
 804106e:	693a      	ldr	r2, [r7, #16]
 8041070:	4313      	orrs	r3, r2
 8041072:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8041074:	697b      	ldr	r3, [r7, #20]
 8041076:	08da      	lsrs	r2, r3, #3
 8041078:	687b      	ldr	r3, [r7, #4]
 804107a:	3208      	adds	r2, #8
 804107c:	6939      	ldr	r1, [r7, #16]
 804107e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8041082:	687b      	ldr	r3, [r7, #4]
 8041084:	681b      	ldr	r3, [r3, #0]
 8041086:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8041088:	697b      	ldr	r3, [r7, #20]
 804108a:	005b      	lsls	r3, r3, #1
 804108c:	2203      	movs	r2, #3
 804108e:	fa02 f303 	lsl.w	r3, r2, r3
 8041092:	43db      	mvns	r3, r3
 8041094:	693a      	ldr	r2, [r7, #16]
 8041096:	4013      	ands	r3, r2
 8041098:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 804109a:	683b      	ldr	r3, [r7, #0]
 804109c:	685b      	ldr	r3, [r3, #4]
 804109e:	f003 0203 	and.w	r2, r3, #3
 80410a2:	697b      	ldr	r3, [r7, #20]
 80410a4:	005b      	lsls	r3, r3, #1
 80410a6:	fa02 f303 	lsl.w	r3, r2, r3
 80410aa:	693a      	ldr	r2, [r7, #16]
 80410ac:	4313      	orrs	r3, r2
 80410ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80410b0:	687b      	ldr	r3, [r7, #4]
 80410b2:	693a      	ldr	r2, [r7, #16]
 80410b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80410b6:	683b      	ldr	r3, [r7, #0]
 80410b8:	685b      	ldr	r3, [r3, #4]
 80410ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80410be:	2b00      	cmp	r3, #0
 80410c0:	f000 80a4 	beq.w	804120c <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 80410c4:	4a5a      	ldr	r2, [pc, #360]	; (8041230 <HAL_GPIO_Init+0x2e0>)
 80410c6:	697b      	ldr	r3, [r7, #20]
 80410c8:	089b      	lsrs	r3, r3, #2
 80410ca:	3318      	adds	r3, #24
 80410cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80410d0:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 80410d2:	697b      	ldr	r3, [r7, #20]
 80410d4:	f003 0303 	and.w	r3, r3, #3
 80410d8:	00db      	lsls	r3, r3, #3
 80410da:	220f      	movs	r2, #15
 80410dc:	fa02 f303 	lsl.w	r3, r2, r3
 80410e0:	43db      	mvns	r3, r3
 80410e2:	693a      	ldr	r2, [r7, #16]
 80410e4:	4013      	ands	r3, r2
 80410e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80410e8:	687b      	ldr	r3, [r7, #4]
 80410ea:	4a52      	ldr	r2, [pc, #328]	; (8041234 <HAL_GPIO_Init+0x2e4>)
 80410ec:	4293      	cmp	r3, r2
 80410ee:	d025      	beq.n	804113c <HAL_GPIO_Init+0x1ec>
 80410f0:	687b      	ldr	r3, [r7, #4]
 80410f2:	4a51      	ldr	r2, [pc, #324]	; (8041238 <HAL_GPIO_Init+0x2e8>)
 80410f4:	4293      	cmp	r3, r2
 80410f6:	d01f      	beq.n	8041138 <HAL_GPIO_Init+0x1e8>
 80410f8:	687b      	ldr	r3, [r7, #4]
 80410fa:	4a50      	ldr	r2, [pc, #320]	; (804123c <HAL_GPIO_Init+0x2ec>)
 80410fc:	4293      	cmp	r3, r2
 80410fe:	d019      	beq.n	8041134 <HAL_GPIO_Init+0x1e4>
 8041100:	687b      	ldr	r3, [r7, #4]
 8041102:	4a4f      	ldr	r2, [pc, #316]	; (8041240 <HAL_GPIO_Init+0x2f0>)
 8041104:	4293      	cmp	r3, r2
 8041106:	d013      	beq.n	8041130 <HAL_GPIO_Init+0x1e0>
 8041108:	687b      	ldr	r3, [r7, #4]
 804110a:	4a4e      	ldr	r2, [pc, #312]	; (8041244 <HAL_GPIO_Init+0x2f4>)
 804110c:	4293      	cmp	r3, r2
 804110e:	d00d      	beq.n	804112c <HAL_GPIO_Init+0x1dc>
 8041110:	687b      	ldr	r3, [r7, #4]
 8041112:	4a4d      	ldr	r2, [pc, #308]	; (8041248 <HAL_GPIO_Init+0x2f8>)
 8041114:	4293      	cmp	r3, r2
 8041116:	d007      	beq.n	8041128 <HAL_GPIO_Init+0x1d8>
 8041118:	687b      	ldr	r3, [r7, #4]
 804111a:	4a4c      	ldr	r2, [pc, #304]	; (804124c <HAL_GPIO_Init+0x2fc>)
 804111c:	4293      	cmp	r3, r2
 804111e:	d101      	bne.n	8041124 <HAL_GPIO_Init+0x1d4>
 8041120:	2306      	movs	r3, #6
 8041122:	e00c      	b.n	804113e <HAL_GPIO_Init+0x1ee>
 8041124:	2307      	movs	r3, #7
 8041126:	e00a      	b.n	804113e <HAL_GPIO_Init+0x1ee>
 8041128:	2305      	movs	r3, #5
 804112a:	e008      	b.n	804113e <HAL_GPIO_Init+0x1ee>
 804112c:	2304      	movs	r3, #4
 804112e:	e006      	b.n	804113e <HAL_GPIO_Init+0x1ee>
 8041130:	2303      	movs	r3, #3
 8041132:	e004      	b.n	804113e <HAL_GPIO_Init+0x1ee>
 8041134:	2302      	movs	r3, #2
 8041136:	e002      	b.n	804113e <HAL_GPIO_Init+0x1ee>
 8041138:	2301      	movs	r3, #1
 804113a:	e000      	b.n	804113e <HAL_GPIO_Init+0x1ee>
 804113c:	2300      	movs	r3, #0
 804113e:	697a      	ldr	r2, [r7, #20]
 8041140:	f002 0203 	and.w	r2, r2, #3
 8041144:	00d2      	lsls	r2, r2, #3
 8041146:	4093      	lsls	r3, r2
 8041148:	693a      	ldr	r2, [r7, #16]
 804114a:	4313      	orrs	r3, r2
 804114c:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 804114e:	4938      	ldr	r1, [pc, #224]	; (8041230 <HAL_GPIO_Init+0x2e0>)
 8041150:	697b      	ldr	r3, [r7, #20]
 8041152:	089b      	lsrs	r3, r3, #2
 8041154:	3318      	adds	r3, #24
 8041156:	693a      	ldr	r2, [r7, #16]
 8041158:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 804115c:	4b34      	ldr	r3, [pc, #208]	; (8041230 <HAL_GPIO_Init+0x2e0>)
 804115e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8041162:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8041164:	68fb      	ldr	r3, [r7, #12]
 8041166:	43db      	mvns	r3, r3
 8041168:	693a      	ldr	r2, [r7, #16]
 804116a:	4013      	ands	r3, r2
 804116c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 804116e:	683b      	ldr	r3, [r7, #0]
 8041170:	685b      	ldr	r3, [r3, #4]
 8041172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8041176:	2b00      	cmp	r3, #0
 8041178:	d003      	beq.n	8041182 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 804117a:	693a      	ldr	r2, [r7, #16]
 804117c:	68fb      	ldr	r3, [r7, #12]
 804117e:	4313      	orrs	r3, r2
 8041180:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8041182:	4a2b      	ldr	r2, [pc, #172]	; (8041230 <HAL_GPIO_Init+0x2e0>)
 8041184:	693b      	ldr	r3, [r7, #16]
 8041186:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 804118a:	4b29      	ldr	r3, [pc, #164]	; (8041230 <HAL_GPIO_Init+0x2e0>)
 804118c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8041190:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8041192:	68fb      	ldr	r3, [r7, #12]
 8041194:	43db      	mvns	r3, r3
 8041196:	693a      	ldr	r2, [r7, #16]
 8041198:	4013      	ands	r3, r2
 804119a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 804119c:	683b      	ldr	r3, [r7, #0]
 804119e:	685b      	ldr	r3, [r3, #4]
 80411a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80411a4:	2b00      	cmp	r3, #0
 80411a6:	d003      	beq.n	80411b0 <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 80411a8:	693a      	ldr	r2, [r7, #16]
 80411aa:	68fb      	ldr	r3, [r7, #12]
 80411ac:	4313      	orrs	r3, r2
 80411ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80411b0:	4a1f      	ldr	r2, [pc, #124]	; (8041230 <HAL_GPIO_Init+0x2e0>)
 80411b2:	693b      	ldr	r3, [r7, #16]
 80411b4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80411b8:	4b1d      	ldr	r3, [pc, #116]	; (8041230 <HAL_GPIO_Init+0x2e0>)
 80411ba:	681b      	ldr	r3, [r3, #0]
 80411bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80411be:	68fb      	ldr	r3, [r7, #12]
 80411c0:	43db      	mvns	r3, r3
 80411c2:	693a      	ldr	r2, [r7, #16]
 80411c4:	4013      	ands	r3, r2
 80411c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80411c8:	683b      	ldr	r3, [r7, #0]
 80411ca:	685b      	ldr	r3, [r3, #4]
 80411cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80411d0:	2b00      	cmp	r3, #0
 80411d2:	d003      	beq.n	80411dc <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 80411d4:	693a      	ldr	r2, [r7, #16]
 80411d6:	68fb      	ldr	r3, [r7, #12]
 80411d8:	4313      	orrs	r3, r2
 80411da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80411dc:	4a14      	ldr	r2, [pc, #80]	; (8041230 <HAL_GPIO_Init+0x2e0>)
 80411de:	693b      	ldr	r3, [r7, #16]
 80411e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80411e2:	4b13      	ldr	r3, [pc, #76]	; (8041230 <HAL_GPIO_Init+0x2e0>)
 80411e4:	685b      	ldr	r3, [r3, #4]
 80411e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80411e8:	68fb      	ldr	r3, [r7, #12]
 80411ea:	43db      	mvns	r3, r3
 80411ec:	693a      	ldr	r2, [r7, #16]
 80411ee:	4013      	ands	r3, r2
 80411f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80411f2:	683b      	ldr	r3, [r7, #0]
 80411f4:	685b      	ldr	r3, [r3, #4]
 80411f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80411fa:	2b00      	cmp	r3, #0
 80411fc:	d003      	beq.n	8041206 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 80411fe:	693a      	ldr	r2, [r7, #16]
 8041200:	68fb      	ldr	r3, [r7, #12]
 8041202:	4313      	orrs	r3, r2
 8041204:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8041206:	4a0a      	ldr	r2, [pc, #40]	; (8041230 <HAL_GPIO_Init+0x2e0>)
 8041208:	693b      	ldr	r3, [r7, #16]
 804120a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 804120c:	697b      	ldr	r3, [r7, #20]
 804120e:	3301      	adds	r3, #1
 8041210:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8041212:	683b      	ldr	r3, [r7, #0]
 8041214:	681a      	ldr	r2, [r3, #0]
 8041216:	697b      	ldr	r3, [r7, #20]
 8041218:	fa22 f303 	lsr.w	r3, r2, r3
 804121c:	2b00      	cmp	r3, #0
 804121e:	f47f ae9f 	bne.w	8040f60 <HAL_GPIO_Init+0x10>
  }
}
 8041222:	bf00      	nop
 8041224:	bf00      	nop
 8041226:	371c      	adds	r7, #28
 8041228:	46bd      	mov	sp, r7
 804122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804122e:	4770      	bx	lr
 8041230:	4002f400 	.word	0x4002f400
 8041234:	42020000 	.word	0x42020000
 8041238:	42020400 	.word	0x42020400
 804123c:	42020800 	.word	0x42020800
 8041240:	42020c00 	.word	0x42020c00
 8041244:	42021000 	.word	0x42021000
 8041248:	42021400 	.word	0x42021400
 804124c:	42021800 	.word	0x42021800

08041250 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8041250:	b480      	push	{r7}
 8041252:	b089      	sub	sp, #36	; 0x24
 8041254:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8041256:	2300      	movs	r3, #0
 8041258:	61fb      	str	r3, [r7, #28]
 804125a:	2300      	movs	r3, #0
 804125c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 804125e:	4b47      	ldr	r3, [pc, #284]	; (804137c <HAL_RCC_GetSysClockFreq+0x12c>)
 8041260:	689b      	ldr	r3, [r3, #8]
 8041262:	f003 030c 	and.w	r3, r3, #12
 8041266:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8041268:	4b44      	ldr	r3, [pc, #272]	; (804137c <HAL_RCC_GetSysClockFreq+0x12c>)
 804126a:	68db      	ldr	r3, [r3, #12]
 804126c:	f003 0303 	and.w	r3, r3, #3
 8041270:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8041272:	693b      	ldr	r3, [r7, #16]
 8041274:	2b00      	cmp	r3, #0
 8041276:	d005      	beq.n	8041284 <HAL_RCC_GetSysClockFreq+0x34>
 8041278:	693b      	ldr	r3, [r7, #16]
 804127a:	2b0c      	cmp	r3, #12
 804127c:	d121      	bne.n	80412c2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 804127e:	68fb      	ldr	r3, [r7, #12]
 8041280:	2b01      	cmp	r3, #1
 8041282:	d11e      	bne.n	80412c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8041284:	4b3d      	ldr	r3, [pc, #244]	; (804137c <HAL_RCC_GetSysClockFreq+0x12c>)
 8041286:	681b      	ldr	r3, [r3, #0]
 8041288:	f003 0308 	and.w	r3, r3, #8
 804128c:	2b00      	cmp	r3, #0
 804128e:	d107      	bne.n	80412a0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8041290:	4b3a      	ldr	r3, [pc, #232]	; (804137c <HAL_RCC_GetSysClockFreq+0x12c>)
 8041292:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8041296:	0a1b      	lsrs	r3, r3, #8
 8041298:	f003 030f 	and.w	r3, r3, #15
 804129c:	61fb      	str	r3, [r7, #28]
 804129e:	e005      	b.n	80412ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80412a0:	4b36      	ldr	r3, [pc, #216]	; (804137c <HAL_RCC_GetSysClockFreq+0x12c>)
 80412a2:	681b      	ldr	r3, [r3, #0]
 80412a4:	091b      	lsrs	r3, r3, #4
 80412a6:	f003 030f 	and.w	r3, r3, #15
 80412aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 80412ac:	4a34      	ldr	r2, [pc, #208]	; (8041380 <HAL_RCC_GetSysClockFreq+0x130>)
 80412ae:	69fb      	ldr	r3, [r7, #28]
 80412b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80412b4:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80412b6:	693b      	ldr	r3, [r7, #16]
 80412b8:	2b00      	cmp	r3, #0
 80412ba:	d10d      	bne.n	80412d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80412bc:	69fb      	ldr	r3, [r7, #28]
 80412be:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80412c0:	e00a      	b.n	80412d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80412c2:	693b      	ldr	r3, [r7, #16]
 80412c4:	2b04      	cmp	r3, #4
 80412c6:	d102      	bne.n	80412ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80412c8:	4b2e      	ldr	r3, [pc, #184]	; (8041384 <HAL_RCC_GetSysClockFreq+0x134>)
 80412ca:	61bb      	str	r3, [r7, #24]
 80412cc:	e004      	b.n	80412d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80412ce:	693b      	ldr	r3, [r7, #16]
 80412d0:	2b08      	cmp	r3, #8
 80412d2:	d101      	bne.n	80412d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80412d4:	4b2c      	ldr	r3, [pc, #176]	; (8041388 <HAL_RCC_GetSysClockFreq+0x138>)
 80412d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80412d8:	693b      	ldr	r3, [r7, #16]
 80412da:	2b0c      	cmp	r3, #12
 80412dc:	d146      	bne.n	804136c <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80412de:	4b27      	ldr	r3, [pc, #156]	; (804137c <HAL_RCC_GetSysClockFreq+0x12c>)
 80412e0:	68db      	ldr	r3, [r3, #12]
 80412e2:	f003 0303 	and.w	r3, r3, #3
 80412e6:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80412e8:	4b24      	ldr	r3, [pc, #144]	; (804137c <HAL_RCC_GetSysClockFreq+0x12c>)
 80412ea:	68db      	ldr	r3, [r3, #12]
 80412ec:	091b      	lsrs	r3, r3, #4
 80412ee:	f003 030f 	and.w	r3, r3, #15
 80412f2:	3301      	adds	r3, #1
 80412f4:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80412f6:	68bb      	ldr	r3, [r7, #8]
 80412f8:	2b02      	cmp	r3, #2
 80412fa:	d003      	beq.n	8041304 <HAL_RCC_GetSysClockFreq+0xb4>
 80412fc:	68bb      	ldr	r3, [r7, #8]
 80412fe:	2b03      	cmp	r3, #3
 8041300:	d00d      	beq.n	804131e <HAL_RCC_GetSysClockFreq+0xce>
 8041302:	e019      	b.n	8041338 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8041304:	4a1f      	ldr	r2, [pc, #124]	; (8041384 <HAL_RCC_GetSysClockFreq+0x134>)
 8041306:	687b      	ldr	r3, [r7, #4]
 8041308:	fbb2 f3f3 	udiv	r3, r2, r3
 804130c:	4a1b      	ldr	r2, [pc, #108]	; (804137c <HAL_RCC_GetSysClockFreq+0x12c>)
 804130e:	68d2      	ldr	r2, [r2, #12]
 8041310:	0a12      	lsrs	r2, r2, #8
 8041312:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8041316:	fb02 f303 	mul.w	r3, r2, r3
 804131a:	617b      	str	r3, [r7, #20]
        break;
 804131c:	e019      	b.n	8041352 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 804131e:	4a1a      	ldr	r2, [pc, #104]	; (8041388 <HAL_RCC_GetSysClockFreq+0x138>)
 8041320:	687b      	ldr	r3, [r7, #4]
 8041322:	fbb2 f3f3 	udiv	r3, r2, r3
 8041326:	4a15      	ldr	r2, [pc, #84]	; (804137c <HAL_RCC_GetSysClockFreq+0x12c>)
 8041328:	68d2      	ldr	r2, [r2, #12]
 804132a:	0a12      	lsrs	r2, r2, #8
 804132c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8041330:	fb02 f303 	mul.w	r3, r2, r3
 8041334:	617b      	str	r3, [r7, #20]
        break;
 8041336:	e00c      	b.n	8041352 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8041338:	69fa      	ldr	r2, [r7, #28]
 804133a:	687b      	ldr	r3, [r7, #4]
 804133c:	fbb2 f3f3 	udiv	r3, r2, r3
 8041340:	4a0e      	ldr	r2, [pc, #56]	; (804137c <HAL_RCC_GetSysClockFreq+0x12c>)
 8041342:	68d2      	ldr	r2, [r2, #12]
 8041344:	0a12      	lsrs	r2, r2, #8
 8041346:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 804134a:	fb02 f303 	mul.w	r3, r2, r3
 804134e:	617b      	str	r3, [r7, #20]
        break;
 8041350:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8041352:	4b0a      	ldr	r3, [pc, #40]	; (804137c <HAL_RCC_GetSysClockFreq+0x12c>)
 8041354:	68db      	ldr	r3, [r3, #12]
 8041356:	0e5b      	lsrs	r3, r3, #25
 8041358:	f003 0303 	and.w	r3, r3, #3
 804135c:	3301      	adds	r3, #1
 804135e:	005b      	lsls	r3, r3, #1
 8041360:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8041362:	697a      	ldr	r2, [r7, #20]
 8041364:	683b      	ldr	r3, [r7, #0]
 8041366:	fbb2 f3f3 	udiv	r3, r2, r3
 804136a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 804136c:	69bb      	ldr	r3, [r7, #24]
}
 804136e:	4618      	mov	r0, r3
 8041370:	3724      	adds	r7, #36	; 0x24
 8041372:	46bd      	mov	sp, r7
 8041374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041378:	4770      	bx	lr
 804137a:	bf00      	nop
 804137c:	40021000 	.word	0x40021000
 8041380:	08043380 	.word	0x08043380
 8041384:	00f42400 	.word	0x00f42400
 8041388:	007a1200 	.word	0x007a1200

0804138c <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 804138c:	b580      	push	{r7, lr}
 804138e:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8041390:	f7ff ff5e 	bl	8041250 <HAL_RCC_GetSysClockFreq>
 8041394:	4602      	mov	r2, r0
 8041396:	4b05      	ldr	r3, [pc, #20]	; (80413ac <HAL_RCC_GetHCLKFreq+0x20>)
 8041398:	689b      	ldr	r3, [r3, #8]
 804139a:	091b      	lsrs	r3, r3, #4
 804139c:	f003 030f 	and.w	r3, r3, #15
 80413a0:	4903      	ldr	r1, [pc, #12]	; (80413b0 <HAL_RCC_GetHCLKFreq+0x24>)
 80413a2:	5ccb      	ldrb	r3, [r1, r3]
 80413a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80413a8:	4618      	mov	r0, r3
 80413aa:	bd80      	pop	{r7, pc}
 80413ac:	40021000 	.word	0x40021000
 80413b0:	08043368 	.word	0x08043368

080413b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80413b4:	b580      	push	{r7, lr}
 80413b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80413b8:	f7ff ffe8 	bl	804138c <HAL_RCC_GetHCLKFreq>
 80413bc:	4602      	mov	r2, r0
 80413be:	4b05      	ldr	r3, [pc, #20]	; (80413d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80413c0:	689b      	ldr	r3, [r3, #8]
 80413c2:	0a1b      	lsrs	r3, r3, #8
 80413c4:	f003 0307 	and.w	r3, r3, #7
 80413c8:	4903      	ldr	r1, [pc, #12]	; (80413d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80413ca:	5ccb      	ldrb	r3, [r1, r3]
 80413cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80413d0:	4618      	mov	r0, r3
 80413d2:	bd80      	pop	{r7, pc}
 80413d4:	40021000 	.word	0x40021000
 80413d8:	08043378 	.word	0x08043378

080413dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80413dc:	b580      	push	{r7, lr}
 80413de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80413e0:	f7ff ffd4 	bl	804138c <HAL_RCC_GetHCLKFreq>
 80413e4:	4602      	mov	r2, r0
 80413e6:	4b05      	ldr	r3, [pc, #20]	; (80413fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80413e8:	689b      	ldr	r3, [r3, #8]
 80413ea:	0adb      	lsrs	r3, r3, #11
 80413ec:	f003 0307 	and.w	r3, r3, #7
 80413f0:	4903      	ldr	r1, [pc, #12]	; (8041400 <HAL_RCC_GetPCLK2Freq+0x24>)
 80413f2:	5ccb      	ldrb	r3, [r1, r3]
 80413f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80413f8:	4618      	mov	r0, r3
 80413fa:	bd80      	pop	{r7, pc}
 80413fc:	40021000 	.word	0x40021000
 8041400:	08043378 	.word	0x08043378

08041404 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8041404:	b580      	push	{r7, lr}
 8041406:	b088      	sub	sp, #32
 8041408:	af00      	add	r7, sp, #0
 804140a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 804140c:	2300      	movs	r3, #0
 804140e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8041410:	2300      	movs	r3, #0
 8041412:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8041414:	687b      	ldr	r3, [r7, #4]
 8041416:	681b      	ldr	r3, [r3, #0]
 8041418:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 804141c:	2b00      	cmp	r3, #0
 804141e:	d040      	beq.n	80414a2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8041420:	687b      	ldr	r3, [r7, #4]
 8041422:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8041424:	2b80      	cmp	r3, #128	; 0x80
 8041426:	d02a      	beq.n	804147e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8041428:	2b80      	cmp	r3, #128	; 0x80
 804142a:	d825      	bhi.n	8041478 <HAL_RCCEx_PeriphCLKConfig+0x74>
 804142c:	2b60      	cmp	r3, #96	; 0x60
 804142e:	d026      	beq.n	804147e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8041430:	2b60      	cmp	r3, #96	; 0x60
 8041432:	d821      	bhi.n	8041478 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8041434:	2b40      	cmp	r3, #64	; 0x40
 8041436:	d006      	beq.n	8041446 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8041438:	2b40      	cmp	r3, #64	; 0x40
 804143a:	d81d      	bhi.n	8041478 <HAL_RCCEx_PeriphCLKConfig+0x74>
 804143c:	2b00      	cmp	r3, #0
 804143e:	d009      	beq.n	8041454 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8041440:	2b20      	cmp	r3, #32
 8041442:	d010      	beq.n	8041466 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8041444:	e018      	b.n	8041478 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8041446:	4b87      	ldr	r3, [pc, #540]	; (8041664 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8041448:	68db      	ldr	r3, [r3, #12]
 804144a:	4a86      	ldr	r2, [pc, #536]	; (8041664 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804144c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8041450:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8041452:	e015      	b.n	8041480 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8041454:	687b      	ldr	r3, [r7, #4]
 8041456:	3304      	adds	r3, #4
 8041458:	2100      	movs	r1, #0
 804145a:	4618      	mov	r0, r3
 804145c:	f000 fb46 	bl	8041aec <RCCEx_PLLSAI1_Config>
 8041460:	4603      	mov	r3, r0
 8041462:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8041464:	e00c      	b.n	8041480 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8041466:	687b      	ldr	r3, [r7, #4]
 8041468:	3320      	adds	r3, #32
 804146a:	2100      	movs	r1, #0
 804146c:	4618      	mov	r0, r3
 804146e:	f000 fc13 	bl	8041c98 <RCCEx_PLLSAI2_Config>
 8041472:	4603      	mov	r3, r0
 8041474:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8041476:	e003      	b.n	8041480 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8041478:	2301      	movs	r3, #1
 804147a:	77fb      	strb	r3, [r7, #31]
        break;
 804147c:	e000      	b.n	8041480 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 804147e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8041480:	7ffb      	ldrb	r3, [r7, #31]
 8041482:	2b00      	cmp	r3, #0
 8041484:	d10b      	bne.n	804149e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8041486:	4b77      	ldr	r3, [pc, #476]	; (8041664 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8041488:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 804148c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8041490:	687b      	ldr	r3, [r7, #4]
 8041492:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8041494:	4973      	ldr	r1, [pc, #460]	; (8041664 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8041496:	4313      	orrs	r3, r2
 8041498:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 804149c:	e001      	b.n	80414a2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 804149e:	7ffb      	ldrb	r3, [r7, #31]
 80414a0:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80414a2:	687b      	ldr	r3, [r7, #4]
 80414a4:	681b      	ldr	r3, [r3, #0]
 80414a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80414aa:	2b00      	cmp	r3, #0
 80414ac:	d047      	beq.n	804153e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 80414ae:	687b      	ldr	r3, [r7, #4]
 80414b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80414b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80414b6:	d030      	beq.n	804151a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80414b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80414bc:	d82a      	bhi.n	8041514 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80414be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80414c2:	d02a      	beq.n	804151a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80414c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80414c8:	d824      	bhi.n	8041514 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80414ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80414ce:	d008      	beq.n	80414e2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80414d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80414d4:	d81e      	bhi.n	8041514 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80414d6:	2b00      	cmp	r3, #0
 80414d8:	d00a      	beq.n	80414f0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80414da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80414de:	d010      	beq.n	8041502 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80414e0:	e018      	b.n	8041514 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80414e2:	4b60      	ldr	r3, [pc, #384]	; (8041664 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80414e4:	68db      	ldr	r3, [r3, #12]
 80414e6:	4a5f      	ldr	r2, [pc, #380]	; (8041664 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80414e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80414ec:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80414ee:	e015      	b.n	804151c <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80414f0:	687b      	ldr	r3, [r7, #4]
 80414f2:	3304      	adds	r3, #4
 80414f4:	2100      	movs	r1, #0
 80414f6:	4618      	mov	r0, r3
 80414f8:	f000 faf8 	bl	8041aec <RCCEx_PLLSAI1_Config>
 80414fc:	4603      	mov	r3, r0
 80414fe:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8041500:	e00c      	b.n	804151c <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8041502:	687b      	ldr	r3, [r7, #4]
 8041504:	3320      	adds	r3, #32
 8041506:	2100      	movs	r1, #0
 8041508:	4618      	mov	r0, r3
 804150a:	f000 fbc5 	bl	8041c98 <RCCEx_PLLSAI2_Config>
 804150e:	4603      	mov	r3, r0
 8041510:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8041512:	e003      	b.n	804151c <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8041514:	2301      	movs	r3, #1
 8041516:	77fb      	strb	r3, [r7, #31]
        break;
 8041518:	e000      	b.n	804151c <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 804151a:	bf00      	nop
    }

    if (ret == HAL_OK)
 804151c:	7ffb      	ldrb	r3, [r7, #31]
 804151e:	2b00      	cmp	r3, #0
 8041520:	d10b      	bne.n	804153a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8041522:	4b50      	ldr	r3, [pc, #320]	; (8041664 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8041524:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8041528:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 804152c:	687b      	ldr	r3, [r7, #4]
 804152e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041530:	494c      	ldr	r1, [pc, #304]	; (8041664 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8041532:	4313      	orrs	r3, r2
 8041534:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8041538:	e001      	b.n	804153e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 804153a:	7ffb      	ldrb	r3, [r7, #31]
 804153c:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 804153e:	687b      	ldr	r3, [r7, #4]
 8041540:	681b      	ldr	r3, [r3, #0]
 8041542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041546:	2b00      	cmp	r3, #0
 8041548:	f000 809b 	beq.w	8041682 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 804154c:	2300      	movs	r3, #0
 804154e:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8041550:	4b44      	ldr	r3, [pc, #272]	; (8041664 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8041552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041558:	2b00      	cmp	r3, #0
 804155a:	d10d      	bne.n	8041578 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 804155c:	4b41      	ldr	r3, [pc, #260]	; (8041664 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804155e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041560:	4a40      	ldr	r2, [pc, #256]	; (8041664 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8041562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8041566:	6593      	str	r3, [r2, #88]	; 0x58
 8041568:	4b3e      	ldr	r3, [pc, #248]	; (8041664 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804156a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804156c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041570:	60fb      	str	r3, [r7, #12]
 8041572:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8041574:	2301      	movs	r3, #1
 8041576:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8041578:	4b3b      	ldr	r3, [pc, #236]	; (8041668 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 804157a:	681b      	ldr	r3, [r3, #0]
 804157c:	4a3a      	ldr	r2, [pc, #232]	; (8041668 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 804157e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8041582:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8041584:	f7ff faea 	bl	8040b5c <HAL_GetTick>
 8041588:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 804158a:	e009      	b.n	80415a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 804158c:	f7ff fae6 	bl	8040b5c <HAL_GetTick>
 8041590:	4602      	mov	r2, r0
 8041592:	693b      	ldr	r3, [r7, #16]
 8041594:	1ad3      	subs	r3, r2, r3
 8041596:	2b02      	cmp	r3, #2
 8041598:	d902      	bls.n	80415a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 804159a:	2303      	movs	r3, #3
 804159c:	77fb      	strb	r3, [r7, #31]
        break;
 804159e:	e005      	b.n	80415ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80415a0:	4b31      	ldr	r3, [pc, #196]	; (8041668 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80415a2:	681b      	ldr	r3, [r3, #0]
 80415a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80415a8:	2b00      	cmp	r3, #0
 80415aa:	d0ef      	beq.n	804158c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if (ret == HAL_OK)
 80415ac:	7ffb      	ldrb	r3, [r7, #31]
 80415ae:	2b00      	cmp	r3, #0
 80415b0:	d15c      	bne.n	804166c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80415b2:	4b2c      	ldr	r3, [pc, #176]	; (8041664 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80415b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80415b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80415bc:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80415be:	69bb      	ldr	r3, [r7, #24]
 80415c0:	2b00      	cmp	r3, #0
 80415c2:	d01f      	beq.n	8041604 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80415c4:	687b      	ldr	r3, [r7, #4]
 80415c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80415ca:	69ba      	ldr	r2, [r7, #24]
 80415cc:	429a      	cmp	r2, r3
 80415ce:	d019      	beq.n	8041604 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80415d0:	4b24      	ldr	r3, [pc, #144]	; (8041664 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80415d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80415d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80415da:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80415dc:	4b21      	ldr	r3, [pc, #132]	; (8041664 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80415de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80415e2:	4a20      	ldr	r2, [pc, #128]	; (8041664 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80415e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80415e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80415ec:	4b1d      	ldr	r3, [pc, #116]	; (8041664 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80415ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80415f2:	4a1c      	ldr	r2, [pc, #112]	; (8041664 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80415f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80415f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80415fc:	4a19      	ldr	r2, [pc, #100]	; (8041664 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80415fe:	69bb      	ldr	r3, [r7, #24]
 8041600:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8041604:	69bb      	ldr	r3, [r7, #24]
 8041606:	f003 0301 	and.w	r3, r3, #1
 804160a:	2b00      	cmp	r3, #0
 804160c:	d016      	beq.n	804163c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804160e:	f7ff faa5 	bl	8040b5c <HAL_GetTick>
 8041612:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8041614:	e00b      	b.n	804162e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8041616:	f7ff faa1 	bl	8040b5c <HAL_GetTick>
 804161a:	4602      	mov	r2, r0
 804161c:	693b      	ldr	r3, [r7, #16]
 804161e:	1ad3      	subs	r3, r2, r3
 8041620:	f241 3288 	movw	r2, #5000	; 0x1388
 8041624:	4293      	cmp	r3, r2
 8041626:	d902      	bls.n	804162e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8041628:	2303      	movs	r3, #3
 804162a:	77fb      	strb	r3, [r7, #31]
            break;
 804162c:	e006      	b.n	804163c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 804162e:	4b0d      	ldr	r3, [pc, #52]	; (8041664 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8041630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041634:	f003 0302 	and.w	r3, r3, #2
 8041638:	2b00      	cmp	r3, #0
 804163a:	d0ec      	beq.n	8041616 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if (ret == HAL_OK)
 804163c:	7ffb      	ldrb	r3, [r7, #31]
 804163e:	2b00      	cmp	r3, #0
 8041640:	d10c      	bne.n	804165c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8041642:	4b08      	ldr	r3, [pc, #32]	; (8041664 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8041644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041648:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 804164c:	687b      	ldr	r3, [r7, #4]
 804164e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041652:	4904      	ldr	r1, [pc, #16]	; (8041664 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8041654:	4313      	orrs	r3, r2
 8041656:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 804165a:	e009      	b.n	8041670 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 804165c:	7ffb      	ldrb	r3, [r7, #31]
 804165e:	77bb      	strb	r3, [r7, #30]
 8041660:	e006      	b.n	8041670 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8041662:	bf00      	nop
 8041664:	40021000 	.word	0x40021000
 8041668:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 804166c:	7ffb      	ldrb	r3, [r7, #31]
 804166e:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8041670:	7dfb      	ldrb	r3, [r7, #23]
 8041672:	2b01      	cmp	r3, #1
 8041674:	d105      	bne.n	8041682 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8041676:	4baf      	ldr	r3, [pc, #700]	; (8041934 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8041678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804167a:	4aae      	ldr	r2, [pc, #696]	; (8041934 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804167c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8041680:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8041682:	687b      	ldr	r3, [r7, #4]
 8041684:	681b      	ldr	r3, [r3, #0]
 8041686:	f003 0301 	and.w	r3, r3, #1
 804168a:	2b00      	cmp	r3, #0
 804168c:	d00a      	beq.n	80416a4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 804168e:	4ba9      	ldr	r3, [pc, #676]	; (8041934 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8041690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8041694:	f023 0203 	bic.w	r2, r3, #3
 8041698:	687b      	ldr	r3, [r7, #4]
 804169a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 804169c:	49a5      	ldr	r1, [pc, #660]	; (8041934 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804169e:	4313      	orrs	r3, r2
 80416a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80416a4:	687b      	ldr	r3, [r7, #4]
 80416a6:	681b      	ldr	r3, [r3, #0]
 80416a8:	f003 0302 	and.w	r3, r3, #2
 80416ac:	2b00      	cmp	r3, #0
 80416ae:	d00a      	beq.n	80416c6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80416b0:	4ba0      	ldr	r3, [pc, #640]	; (8041934 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 80416b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80416b6:	f023 020c 	bic.w	r2, r3, #12
 80416ba:	687b      	ldr	r3, [r7, #4]
 80416bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80416be:	499d      	ldr	r1, [pc, #628]	; (8041934 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 80416c0:	4313      	orrs	r3, r2
 80416c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80416c6:	687b      	ldr	r3, [r7, #4]
 80416c8:	681b      	ldr	r3, [r3, #0]
 80416ca:	f003 0304 	and.w	r3, r3, #4
 80416ce:	2b00      	cmp	r3, #0
 80416d0:	d00a      	beq.n	80416e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80416d2:	4b98      	ldr	r3, [pc, #608]	; (8041934 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 80416d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80416d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80416dc:	687b      	ldr	r3, [r7, #4]
 80416de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80416e0:	4994      	ldr	r1, [pc, #592]	; (8041934 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 80416e2:	4313      	orrs	r3, r2
 80416e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80416e8:	687b      	ldr	r3, [r7, #4]
 80416ea:	681b      	ldr	r3, [r3, #0]
 80416ec:	f003 0308 	and.w	r3, r3, #8
 80416f0:	2b00      	cmp	r3, #0
 80416f2:	d00a      	beq.n	804170a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80416f4:	4b8f      	ldr	r3, [pc, #572]	; (8041934 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 80416f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80416fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80416fe:	687b      	ldr	r3, [r7, #4]
 8041700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041702:	498c      	ldr	r1, [pc, #560]	; (8041934 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8041704:	4313      	orrs	r3, r2
 8041706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 804170a:	687b      	ldr	r3, [r7, #4]
 804170c:	681b      	ldr	r3, [r3, #0]
 804170e:	f003 0310 	and.w	r3, r3, #16
 8041712:	2b00      	cmp	r3, #0
 8041714:	d00a      	beq.n	804172c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8041716:	4b87      	ldr	r3, [pc, #540]	; (8041934 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8041718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804171c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8041720:	687b      	ldr	r3, [r7, #4]
 8041722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041724:	4983      	ldr	r1, [pc, #524]	; (8041934 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8041726:	4313      	orrs	r3, r2
 8041728:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 804172c:	687b      	ldr	r3, [r7, #4]
 804172e:	681b      	ldr	r3, [r3, #0]
 8041730:	f003 0320 	and.w	r3, r3, #32
 8041734:	2b00      	cmp	r3, #0
 8041736:	d00a      	beq.n	804174e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8041738:	4b7e      	ldr	r3, [pc, #504]	; (8041934 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804173a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804173e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8041742:	687b      	ldr	r3, [r7, #4]
 8041744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8041746:	497b      	ldr	r1, [pc, #492]	; (8041934 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8041748:	4313      	orrs	r3, r2
 804174a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 804174e:	687b      	ldr	r3, [r7, #4]
 8041750:	681b      	ldr	r3, [r3, #0]
 8041752:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8041756:	2b00      	cmp	r3, #0
 8041758:	d00a      	beq.n	8041770 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 804175a:	4b76      	ldr	r3, [pc, #472]	; (8041934 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804175c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8041760:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8041764:	687b      	ldr	r3, [r7, #4]
 8041766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8041768:	4972      	ldr	r1, [pc, #456]	; (8041934 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804176a:	4313      	orrs	r3, r2
 804176c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8041770:	687b      	ldr	r3, [r7, #4]
 8041772:	681b      	ldr	r3, [r3, #0]
 8041774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041778:	2b00      	cmp	r3, #0
 804177a:	d00a      	beq.n	8041792 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 804177c:	4b6d      	ldr	r3, [pc, #436]	; (8041934 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804177e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8041782:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8041786:	687b      	ldr	r3, [r7, #4]
 8041788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804178a:	496a      	ldr	r1, [pc, #424]	; (8041934 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804178c:	4313      	orrs	r3, r2
 804178e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8041792:	687b      	ldr	r3, [r7, #4]
 8041794:	681b      	ldr	r3, [r3, #0]
 8041796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 804179a:	2b00      	cmp	r3, #0
 804179c:	d00a      	beq.n	80417b4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 804179e:	4b65      	ldr	r3, [pc, #404]	; (8041934 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 80417a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80417a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80417a8:	687b      	ldr	r3, [r7, #4]
 80417aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80417ac:	4961      	ldr	r1, [pc, #388]	; (8041934 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 80417ae:	4313      	orrs	r3, r2
 80417b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 80417b4:	687b      	ldr	r3, [r7, #4]
 80417b6:	681b      	ldr	r3, [r3, #0]
 80417b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80417bc:	2b00      	cmp	r3, #0
 80417be:	d031      	beq.n	8041824 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 80417c0:	687b      	ldr	r3, [r7, #4]
 80417c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80417c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80417c8:	d00e      	beq.n	80417e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80417ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80417ce:	d814      	bhi.n	80417fa <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 80417d0:	2b00      	cmp	r3, #0
 80417d2:	d015      	beq.n	8041800 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80417d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80417d8:	d10f      	bne.n	80417fa <HAL_RCCEx_PeriphCLKConfig+0x3f6>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80417da:	4b56      	ldr	r3, [pc, #344]	; (8041934 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 80417dc:	68db      	ldr	r3, [r3, #12]
 80417de:	4a55      	ldr	r2, [pc, #340]	; (8041934 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 80417e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80417e4:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80417e6:	e00c      	b.n	8041802 <HAL_RCCEx_PeriphCLKConfig+0x3fe>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80417e8:	687b      	ldr	r3, [r7, #4]
 80417ea:	3304      	adds	r3, #4
 80417ec:	2100      	movs	r1, #0
 80417ee:	4618      	mov	r0, r3
 80417f0:	f000 f97c 	bl	8041aec <RCCEx_PLLSAI1_Config>
 80417f4:	4603      	mov	r3, r0
 80417f6:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80417f8:	e003      	b.n	8041802 <HAL_RCCEx_PeriphCLKConfig+0x3fe>

      default:
        ret = HAL_ERROR;
 80417fa:	2301      	movs	r3, #1
 80417fc:	77fb      	strb	r3, [r7, #31]
        break;
 80417fe:	e000      	b.n	8041802 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
        break;
 8041800:	bf00      	nop
    }

    if (ret == HAL_OK)
 8041802:	7ffb      	ldrb	r3, [r7, #31]
 8041804:	2b00      	cmp	r3, #0
 8041806:	d10b      	bne.n	8041820 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8041808:	4b4a      	ldr	r3, [pc, #296]	; (8041934 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804180a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804180e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8041812:	687b      	ldr	r3, [r7, #4]
 8041814:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8041816:	4947      	ldr	r1, [pc, #284]	; (8041934 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8041818:	4313      	orrs	r3, r2
 804181a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 804181e:	e001      	b.n	8041824 <HAL_RCCEx_PeriphCLKConfig+0x420>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8041820:	7ffb      	ldrb	r3, [r7, #31]
 8041822:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8041824:	687b      	ldr	r3, [r7, #4]
 8041826:	681b      	ldr	r3, [r3, #0]
 8041828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804182c:	2b00      	cmp	r3, #0
 804182e:	d00a      	beq.n	8041846 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8041830:	4b40      	ldr	r3, [pc, #256]	; (8041934 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8041832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8041836:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 804183a:	687b      	ldr	r3, [r7, #4]
 804183c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804183e:	493d      	ldr	r1, [pc, #244]	; (8041934 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8041840:	4313      	orrs	r3, r2
 8041842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8041846:	687b      	ldr	r3, [r7, #4]
 8041848:	681b      	ldr	r3, [r3, #0]
 804184a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804184e:	2b00      	cmp	r3, #0
 8041850:	d00a      	beq.n	8041868 <HAL_RCCEx_PeriphCLKConfig+0x464>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8041852:	4b38      	ldr	r3, [pc, #224]	; (8041934 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8041854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8041858:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 804185c:	687b      	ldr	r3, [r7, #4]
 804185e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8041860:	4934      	ldr	r1, [pc, #208]	; (8041934 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8041862:	4313      	orrs	r3, r2
 8041864:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8041868:	687b      	ldr	r3, [r7, #4]
 804186a:	681b      	ldr	r3, [r3, #0]
 804186c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041870:	2b00      	cmp	r3, #0
 8041872:	d00a      	beq.n	804188a <HAL_RCCEx_PeriphCLKConfig+0x486>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8041874:	4b2f      	ldr	r3, [pc, #188]	; (8041934 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8041876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804187a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 804187e:	687b      	ldr	r3, [r7, #4]
 8041880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8041882:	492c      	ldr	r1, [pc, #176]	; (8041934 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8041884:	4313      	orrs	r3, r2
 8041886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 804188a:	687b      	ldr	r3, [r7, #4]
 804188c:	681b      	ldr	r3, [r3, #0]
 804188e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8041892:	2b00      	cmp	r3, #0
 8041894:	d00a      	beq.n	80418ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8041896:	4b27      	ldr	r3, [pc, #156]	; (8041934 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8041898:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 804189c:	f023 0203 	bic.w	r2, r3, #3
 80418a0:	687b      	ldr	r3, [r7, #4]
 80418a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80418a4:	4923      	ldr	r1, [pc, #140]	; (8041934 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 80418a6:	4313      	orrs	r3, r2
 80418a8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80418ac:	687b      	ldr	r3, [r7, #4]
 80418ae:	681b      	ldr	r3, [r3, #0]
 80418b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80418b4:	2b00      	cmp	r3, #0
 80418b6:	d028      	beq.n	804190a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80418b8:	4b1e      	ldr	r3, [pc, #120]	; (8041934 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 80418ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80418be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80418c2:	687b      	ldr	r3, [r7, #4]
 80418c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80418c6:	491b      	ldr	r1, [pc, #108]	; (8041934 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 80418c8:	4313      	orrs	r3, r2
 80418ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80418ce:	687b      	ldr	r3, [r7, #4]
 80418d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80418d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80418d6:	d106      	bne.n	80418e6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80418d8:	4b16      	ldr	r3, [pc, #88]	; (8041934 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 80418da:	68db      	ldr	r3, [r3, #12]
 80418dc:	4a15      	ldr	r2, [pc, #84]	; (8041934 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 80418de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80418e2:	60d3      	str	r3, [r2, #12]
 80418e4:	e011      	b.n	804190a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80418e6:	687b      	ldr	r3, [r7, #4]
 80418e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80418ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80418ee:	d10c      	bne.n	804190a <HAL_RCCEx_PeriphCLKConfig+0x506>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80418f0:	687b      	ldr	r3, [r7, #4]
 80418f2:	3304      	adds	r3, #4
 80418f4:	2101      	movs	r1, #1
 80418f6:	4618      	mov	r0, r3
 80418f8:	f000 f8f8 	bl	8041aec <RCCEx_PLLSAI1_Config>
 80418fc:	4603      	mov	r3, r0
 80418fe:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8041900:	7ffb      	ldrb	r3, [r7, #31]
 8041902:	2b00      	cmp	r3, #0
 8041904:	d001      	beq.n	804190a <HAL_RCCEx_PeriphCLKConfig+0x506>
        {
          /* set overall return value */
          status = ret;
 8041906:	7ffb      	ldrb	r3, [r7, #31]
 8041908:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 804190a:	687b      	ldr	r3, [r7, #4]
 804190c:	681b      	ldr	r3, [r3, #0]
 804190e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8041912:	2b00      	cmp	r3, #0
 8041914:	d04d      	beq.n	80419b2 <HAL_RCCEx_PeriphCLKConfig+0x5ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8041916:	687b      	ldr	r3, [r7, #4]
 8041918:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 804191a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 804191e:	d10b      	bne.n	8041938 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8041920:	4b04      	ldr	r3, [pc, #16]	; (8041934 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8041922:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8041926:	4a03      	ldr	r2, [pc, #12]	; (8041934 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8041928:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 804192c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8041930:	e015      	b.n	804195e <HAL_RCCEx_PeriphCLKConfig+0x55a>
 8041932:	bf00      	nop
 8041934:	40021000 	.word	0x40021000
 8041938:	4b6b      	ldr	r3, [pc, #428]	; (8041ae8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804193a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804193e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8041942:	687b      	ldr	r3, [r7, #4]
 8041944:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8041946:	4968      	ldr	r1, [pc, #416]	; (8041ae8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8041948:	4313      	orrs	r3, r2
 804194a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 804194e:	4b66      	ldr	r3, [pc, #408]	; (8041ae8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8041950:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8041954:	4a64      	ldr	r2, [pc, #400]	; (8041ae8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8041956:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 804195a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 804195e:	687b      	ldr	r3, [r7, #4]
 8041960:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8041962:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8041966:	d10d      	bne.n	8041984 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8041968:	687b      	ldr	r3, [r7, #4]
 804196a:	3304      	adds	r3, #4
 804196c:	2101      	movs	r1, #1
 804196e:	4618      	mov	r0, r3
 8041970:	f000 f8bc 	bl	8041aec <RCCEx_PLLSAI1_Config>
 8041974:	4603      	mov	r3, r0
 8041976:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8041978:	7ffb      	ldrb	r3, [r7, #31]
 804197a:	2b00      	cmp	r3, #0
 804197c:	d019      	beq.n	80419b2 <HAL_RCCEx_PeriphCLKConfig+0x5ae>
      {
        /* set overall return value */
        status = ret;
 804197e:	7ffb      	ldrb	r3, [r7, #31]
 8041980:	77bb      	strb	r3, [r7, #30]
 8041982:	e016      	b.n	80419b2 <HAL_RCCEx_PeriphCLKConfig+0x5ae>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8041984:	687b      	ldr	r3, [r7, #4]
 8041986:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8041988:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 804198c:	d106      	bne.n	804199c <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 804198e:	4b56      	ldr	r3, [pc, #344]	; (8041ae8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8041990:	68db      	ldr	r3, [r3, #12]
 8041992:	4a55      	ldr	r2, [pc, #340]	; (8041ae8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8041994:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8041998:	60d3      	str	r3, [r2, #12]
 804199a:	e00a      	b.n	80419b2 <HAL_RCCEx_PeriphCLKConfig+0x5ae>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 804199c:	687b      	ldr	r3, [r7, #4]
 804199e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80419a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80419a4:	d105      	bne.n	80419b2 <HAL_RCCEx_PeriphCLKConfig+0x5ae>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80419a6:	4b50      	ldr	r3, [pc, #320]	; (8041ae8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 80419a8:	68db      	ldr	r3, [r3, #12]
 80419aa:	4a4f      	ldr	r2, [pc, #316]	; (8041ae8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 80419ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80419b0:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80419b2:	687b      	ldr	r3, [r7, #4]
 80419b4:	681b      	ldr	r3, [r3, #0]
 80419b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80419ba:	2b00      	cmp	r3, #0
 80419bc:	d028      	beq.n	8041a10 <HAL_RCCEx_PeriphCLKConfig+0x60c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80419be:	4b4a      	ldr	r3, [pc, #296]	; (8041ae8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 80419c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80419c4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80419c8:	687b      	ldr	r3, [r7, #4]
 80419ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80419cc:	4946      	ldr	r1, [pc, #280]	; (8041ae8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 80419ce:	4313      	orrs	r3, r2
 80419d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80419d4:	687b      	ldr	r3, [r7, #4]
 80419d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80419d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80419dc:	d106      	bne.n	80419ec <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80419de:	4b42      	ldr	r3, [pc, #264]	; (8041ae8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 80419e0:	68db      	ldr	r3, [r3, #12]
 80419e2:	4a41      	ldr	r2, [pc, #260]	; (8041ae8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 80419e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80419e8:	60d3      	str	r3, [r2, #12]
 80419ea:	e011      	b.n	8041a10 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80419ec:	687b      	ldr	r3, [r7, #4]
 80419ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80419f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80419f4:	d10c      	bne.n	8041a10 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80419f6:	687b      	ldr	r3, [r7, #4]
 80419f8:	3304      	adds	r3, #4
 80419fa:	2101      	movs	r1, #1
 80419fc:	4618      	mov	r0, r3
 80419fe:	f000 f875 	bl	8041aec <RCCEx_PLLSAI1_Config>
 8041a02:	4603      	mov	r3, r0
 8041a04:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8041a06:	7ffb      	ldrb	r3, [r7, #31]
 8041a08:	2b00      	cmp	r3, #0
 8041a0a:	d001      	beq.n	8041a10 <HAL_RCCEx_PeriphCLKConfig+0x60c>
      {
        /* set overall return value */
        status = ret;
 8041a0c:	7ffb      	ldrb	r3, [r7, #31]
 8041a0e:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8041a10:	687b      	ldr	r3, [r7, #4]
 8041a12:	681b      	ldr	r3, [r3, #0]
 8041a14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8041a18:	2b00      	cmp	r3, #0
 8041a1a:	d01e      	beq.n	8041a5a <HAL_RCCEx_PeriphCLKConfig+0x656>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8041a1c:	4b32      	ldr	r3, [pc, #200]	; (8041ae8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8041a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8041a22:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8041a26:	687b      	ldr	r3, [r7, #4]
 8041a28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8041a2c:	492e      	ldr	r1, [pc, #184]	; (8041ae8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8041a2e:	4313      	orrs	r3, r2
 8041a30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8041a34:	687b      	ldr	r3, [r7, #4]
 8041a36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8041a3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8041a3e:	d10c      	bne.n	8041a5a <HAL_RCCEx_PeriphCLKConfig+0x656>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8041a40:	687b      	ldr	r3, [r7, #4]
 8041a42:	3304      	adds	r3, #4
 8041a44:	2102      	movs	r1, #2
 8041a46:	4618      	mov	r0, r3
 8041a48:	f000 f850 	bl	8041aec <RCCEx_PLLSAI1_Config>
 8041a4c:	4603      	mov	r3, r0
 8041a4e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8041a50:	7ffb      	ldrb	r3, [r7, #31]
 8041a52:	2b00      	cmp	r3, #0
 8041a54:	d001      	beq.n	8041a5a <HAL_RCCEx_PeriphCLKConfig+0x656>
      {
        /* set overall return value */
        status = ret;
 8041a56:	7ffb      	ldrb	r3, [r7, #31]
 8041a58:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8041a5a:	687b      	ldr	r3, [r7, #4]
 8041a5c:	681b      	ldr	r3, [r3, #0]
 8041a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8041a62:	2b00      	cmp	r3, #0
 8041a64:	d00b      	beq.n	8041a7e <HAL_RCCEx_PeriphCLKConfig+0x67a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8041a66:	4b20      	ldr	r3, [pc, #128]	; (8041ae8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8041a68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8041a6c:	f023 0204 	bic.w	r2, r3, #4
 8041a70:	687b      	ldr	r3, [r7, #4]
 8041a72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8041a76:	491c      	ldr	r1, [pc, #112]	; (8041ae8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8041a78:	4313      	orrs	r3, r2
 8041a7a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8041a7e:	687b      	ldr	r3, [r7, #4]
 8041a80:	681b      	ldr	r3, [r3, #0]
 8041a82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8041a86:	2b00      	cmp	r3, #0
 8041a88:	d00b      	beq.n	8041aa2 <HAL_RCCEx_PeriphCLKConfig+0x69e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8041a8a:	4b17      	ldr	r3, [pc, #92]	; (8041ae8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8041a8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8041a90:	f023 0218 	bic.w	r2, r3, #24
 8041a94:	687b      	ldr	r3, [r7, #4]
 8041a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8041a9a:	4913      	ldr	r1, [pc, #76]	; (8041ae8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8041a9c:	4313      	orrs	r3, r2
 8041a9e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8041aa2:	687b      	ldr	r3, [r7, #4]
 8041aa4:	681b      	ldr	r3, [r3, #0]
 8041aa6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8041aaa:	2b00      	cmp	r3, #0
 8041aac:	d017      	beq.n	8041ade <HAL_RCCEx_PeriphCLKConfig+0x6da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8041aae:	4b0e      	ldr	r3, [pc, #56]	; (8041ae8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8041ab0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8041ab4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8041ab8:	687b      	ldr	r3, [r7, #4]
 8041aba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8041abe:	490a      	ldr	r1, [pc, #40]	; (8041ae8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8041ac0:	4313      	orrs	r3, r2
 8041ac2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
    
    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8041ac6:	687b      	ldr	r3, [r7, #4]
 8041ac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8041acc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8041ad0:	d105      	bne.n	8041ade <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8041ad2:	4b05      	ldr	r3, [pc, #20]	; (8041ae8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8041ad4:	68db      	ldr	r3, [r3, #12]
 8041ad6:	4a04      	ldr	r2, [pc, #16]	; (8041ae8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8041ad8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8041adc:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8041ade:	7fbb      	ldrb	r3, [r7, #30]
}
 8041ae0:	4618      	mov	r0, r3
 8041ae2:	3720      	adds	r7, #32
 8041ae4:	46bd      	mov	sp, r7
 8041ae6:	bd80      	pop	{r7, pc}
 8041ae8:	40021000 	.word	0x40021000

08041aec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8041aec:	b580      	push	{r7, lr}
 8041aee:	b084      	sub	sp, #16
 8041af0:	af00      	add	r7, sp, #0
 8041af2:	6078      	str	r0, [r7, #4]
 8041af4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8041af6:	2300      	movs	r3, #0
 8041af8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8041afa:	687b      	ldr	r3, [r7, #4]
 8041afc:	681b      	ldr	r3, [r3, #0]
 8041afe:	2b03      	cmp	r3, #3
 8041b00:	d018      	beq.n	8041b34 <RCCEx_PLLSAI1_Config+0x48>
 8041b02:	2b03      	cmp	r3, #3
 8041b04:	d81f      	bhi.n	8041b46 <RCCEx_PLLSAI1_Config+0x5a>
 8041b06:	2b01      	cmp	r3, #1
 8041b08:	d002      	beq.n	8041b10 <RCCEx_PLLSAI1_Config+0x24>
 8041b0a:	2b02      	cmp	r3, #2
 8041b0c:	d009      	beq.n	8041b22 <RCCEx_PLLSAI1_Config+0x36>
 8041b0e:	e01a      	b.n	8041b46 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8041b10:	4b5d      	ldr	r3, [pc, #372]	; (8041c88 <RCCEx_PLLSAI1_Config+0x19c>)
 8041b12:	681b      	ldr	r3, [r3, #0]
 8041b14:	f003 0302 	and.w	r3, r3, #2
 8041b18:	2b00      	cmp	r3, #0
 8041b1a:	d117      	bne.n	8041b4c <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8041b1c:	2301      	movs	r3, #1
 8041b1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8041b20:	e014      	b.n	8041b4c <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8041b22:	4b59      	ldr	r3, [pc, #356]	; (8041c88 <RCCEx_PLLSAI1_Config+0x19c>)
 8041b24:	681b      	ldr	r3, [r3, #0]
 8041b26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041b2a:	2b00      	cmp	r3, #0
 8041b2c:	d110      	bne.n	8041b50 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8041b2e:	2301      	movs	r3, #1
 8041b30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8041b32:	e00d      	b.n	8041b50 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8041b34:	4b54      	ldr	r3, [pc, #336]	; (8041c88 <RCCEx_PLLSAI1_Config+0x19c>)
 8041b36:	681b      	ldr	r3, [r3, #0]
 8041b38:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8041b3c:	2b00      	cmp	r3, #0
 8041b3e:	d109      	bne.n	8041b54 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8041b40:	2301      	movs	r3, #1
 8041b42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8041b44:	e006      	b.n	8041b54 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8041b46:	2301      	movs	r3, #1
 8041b48:	73fb      	strb	r3, [r7, #15]
      break;
 8041b4a:	e004      	b.n	8041b56 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8041b4c:	bf00      	nop
 8041b4e:	e002      	b.n	8041b56 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8041b50:	bf00      	nop
 8041b52:	e000      	b.n	8041b56 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8041b54:	bf00      	nop
  }

  if (status == HAL_OK)
 8041b56:	7bfb      	ldrb	r3, [r7, #15]
 8041b58:	2b00      	cmp	r3, #0
 8041b5a:	f040 808f 	bne.w	8041c7c <RCCEx_PLLSAI1_Config+0x190>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8041b5e:	4b4a      	ldr	r3, [pc, #296]	; (8041c88 <RCCEx_PLLSAI1_Config+0x19c>)
 8041b60:	681b      	ldr	r3, [r3, #0]
 8041b62:	4a49      	ldr	r2, [pc, #292]	; (8041c88 <RCCEx_PLLSAI1_Config+0x19c>)
 8041b64:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8041b68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8041b6a:	f7fe fff7 	bl	8040b5c <HAL_GetTick>
 8041b6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8041b70:	e009      	b.n	8041b86 <RCCEx_PLLSAI1_Config+0x9a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8041b72:	f7fe fff3 	bl	8040b5c <HAL_GetTick>
 8041b76:	4602      	mov	r2, r0
 8041b78:	68bb      	ldr	r3, [r7, #8]
 8041b7a:	1ad3      	subs	r3, r2, r3
 8041b7c:	2b02      	cmp	r3, #2
 8041b7e:	d902      	bls.n	8041b86 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_TIMEOUT;
 8041b80:	2303      	movs	r3, #3
 8041b82:	73fb      	strb	r3, [r7, #15]
        break;
 8041b84:	e005      	b.n	8041b92 <RCCEx_PLLSAI1_Config+0xa6>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8041b86:	4b40      	ldr	r3, [pc, #256]	; (8041c88 <RCCEx_PLLSAI1_Config+0x19c>)
 8041b88:	681b      	ldr	r3, [r3, #0]
 8041b8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8041b8e:	2b00      	cmp	r3, #0
 8041b90:	d1ef      	bne.n	8041b72 <RCCEx_PLLSAI1_Config+0x86>
      }
    }

    if (status == HAL_OK)
 8041b92:	7bfb      	ldrb	r3, [r7, #15]
 8041b94:	2b00      	cmp	r3, #0
 8041b96:	d171      	bne.n	8041c7c <RCCEx_PLLSAI1_Config+0x190>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8041b98:	683b      	ldr	r3, [r7, #0]
 8041b9a:	2b00      	cmp	r3, #0
 8041b9c:	d116      	bne.n	8041bcc <RCCEx_PLLSAI1_Config+0xe0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8041b9e:	4b3a      	ldr	r3, [pc, #232]	; (8041c88 <RCCEx_PLLSAI1_Config+0x19c>)
 8041ba0:	691a      	ldr	r2, [r3, #16]
 8041ba2:	4b3a      	ldr	r3, [pc, #232]	; (8041c8c <RCCEx_PLLSAI1_Config+0x1a0>)
 8041ba4:	4013      	ands	r3, r2
 8041ba6:	687a      	ldr	r2, [r7, #4]
 8041ba8:	6892      	ldr	r2, [r2, #8]
 8041baa:	0211      	lsls	r1, r2, #8
 8041bac:	687a      	ldr	r2, [r7, #4]
 8041bae:	68d2      	ldr	r2, [r2, #12]
 8041bb0:	06d2      	lsls	r2, r2, #27
 8041bb2:	4311      	orrs	r1, r2
 8041bb4:	687a      	ldr	r2, [r7, #4]
 8041bb6:	6852      	ldr	r2, [r2, #4]
 8041bb8:	3a01      	subs	r2, #1
 8041bba:	0112      	lsls	r2, r2, #4
 8041bbc:	4311      	orrs	r1, r2
 8041bbe:	687a      	ldr	r2, [r7, #4]
 8041bc0:	6812      	ldr	r2, [r2, #0]
 8041bc2:	430a      	orrs	r2, r1
 8041bc4:	4930      	ldr	r1, [pc, #192]	; (8041c88 <RCCEx_PLLSAI1_Config+0x19c>)
 8041bc6:	4313      	orrs	r3, r2
 8041bc8:	610b      	str	r3, [r1, #16]
 8041bca:	e033      	b.n	8041c34 <RCCEx_PLLSAI1_Config+0x148>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8041bcc:	683b      	ldr	r3, [r7, #0]
 8041bce:	2b01      	cmp	r3, #1
 8041bd0:	d118      	bne.n	8041c04 <RCCEx_PLLSAI1_Config+0x118>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8041bd2:	4b2d      	ldr	r3, [pc, #180]	; (8041c88 <RCCEx_PLLSAI1_Config+0x19c>)
 8041bd4:	691a      	ldr	r2, [r3, #16]
 8041bd6:	4b2e      	ldr	r3, [pc, #184]	; (8041c90 <RCCEx_PLLSAI1_Config+0x1a4>)
 8041bd8:	4013      	ands	r3, r2
 8041bda:	687a      	ldr	r2, [r7, #4]
 8041bdc:	6892      	ldr	r2, [r2, #8]
 8041bde:	0211      	lsls	r1, r2, #8
 8041be0:	687a      	ldr	r2, [r7, #4]
 8041be2:	6912      	ldr	r2, [r2, #16]
 8041be4:	0852      	lsrs	r2, r2, #1
 8041be6:	3a01      	subs	r2, #1
 8041be8:	0552      	lsls	r2, r2, #21
 8041bea:	4311      	orrs	r1, r2
 8041bec:	687a      	ldr	r2, [r7, #4]
 8041bee:	6852      	ldr	r2, [r2, #4]
 8041bf0:	3a01      	subs	r2, #1
 8041bf2:	0112      	lsls	r2, r2, #4
 8041bf4:	4311      	orrs	r1, r2
 8041bf6:	687a      	ldr	r2, [r7, #4]
 8041bf8:	6812      	ldr	r2, [r2, #0]
 8041bfa:	430a      	orrs	r2, r1
 8041bfc:	4922      	ldr	r1, [pc, #136]	; (8041c88 <RCCEx_PLLSAI1_Config+0x19c>)
 8041bfe:	4313      	orrs	r3, r2
 8041c00:	610b      	str	r3, [r1, #16]
 8041c02:	e017      	b.n	8041c34 <RCCEx_PLLSAI1_Config+0x148>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8041c04:	4b20      	ldr	r3, [pc, #128]	; (8041c88 <RCCEx_PLLSAI1_Config+0x19c>)
 8041c06:	691a      	ldr	r2, [r3, #16]
 8041c08:	4b22      	ldr	r3, [pc, #136]	; (8041c94 <RCCEx_PLLSAI1_Config+0x1a8>)
 8041c0a:	4013      	ands	r3, r2
 8041c0c:	687a      	ldr	r2, [r7, #4]
 8041c0e:	6892      	ldr	r2, [r2, #8]
 8041c10:	0211      	lsls	r1, r2, #8
 8041c12:	687a      	ldr	r2, [r7, #4]
 8041c14:	6952      	ldr	r2, [r2, #20]
 8041c16:	0852      	lsrs	r2, r2, #1
 8041c18:	3a01      	subs	r2, #1
 8041c1a:	0652      	lsls	r2, r2, #25
 8041c1c:	4311      	orrs	r1, r2
 8041c1e:	687a      	ldr	r2, [r7, #4]
 8041c20:	6852      	ldr	r2, [r2, #4]
 8041c22:	3a01      	subs	r2, #1
 8041c24:	0112      	lsls	r2, r2, #4
 8041c26:	4311      	orrs	r1, r2
 8041c28:	687a      	ldr	r2, [r7, #4]
 8041c2a:	6812      	ldr	r2, [r2, #0]
 8041c2c:	430a      	orrs	r2, r1
 8041c2e:	4916      	ldr	r1, [pc, #88]	; (8041c88 <RCCEx_PLLSAI1_Config+0x19c>)
 8041c30:	4313      	orrs	r3, r2
 8041c32:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8041c34:	4b14      	ldr	r3, [pc, #80]	; (8041c88 <RCCEx_PLLSAI1_Config+0x19c>)
 8041c36:	681b      	ldr	r3, [r3, #0]
 8041c38:	4a13      	ldr	r2, [pc, #76]	; (8041c88 <RCCEx_PLLSAI1_Config+0x19c>)
 8041c3a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8041c3e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041c40:	f7fe ff8c 	bl	8040b5c <HAL_GetTick>
 8041c44:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8041c46:	e009      	b.n	8041c5c <RCCEx_PLLSAI1_Config+0x170>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8041c48:	f7fe ff88 	bl	8040b5c <HAL_GetTick>
 8041c4c:	4602      	mov	r2, r0
 8041c4e:	68bb      	ldr	r3, [r7, #8]
 8041c50:	1ad3      	subs	r3, r2, r3
 8041c52:	2b02      	cmp	r3, #2
 8041c54:	d902      	bls.n	8041c5c <RCCEx_PLLSAI1_Config+0x170>
        {
          status = HAL_TIMEOUT;
 8041c56:	2303      	movs	r3, #3
 8041c58:	73fb      	strb	r3, [r7, #15]
          break;
 8041c5a:	e005      	b.n	8041c68 <RCCEx_PLLSAI1_Config+0x17c>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8041c5c:	4b0a      	ldr	r3, [pc, #40]	; (8041c88 <RCCEx_PLLSAI1_Config+0x19c>)
 8041c5e:	681b      	ldr	r3, [r3, #0]
 8041c60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8041c64:	2b00      	cmp	r3, #0
 8041c66:	d0ef      	beq.n	8041c48 <RCCEx_PLLSAI1_Config+0x15c>
        }
      }

      if (status == HAL_OK)
 8041c68:	7bfb      	ldrb	r3, [r7, #15]
 8041c6a:	2b00      	cmp	r3, #0
 8041c6c:	d106      	bne.n	8041c7c <RCCEx_PLLSAI1_Config+0x190>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8041c6e:	4b06      	ldr	r3, [pc, #24]	; (8041c88 <RCCEx_PLLSAI1_Config+0x19c>)
 8041c70:	691a      	ldr	r2, [r3, #16]
 8041c72:	687b      	ldr	r3, [r7, #4]
 8041c74:	699b      	ldr	r3, [r3, #24]
 8041c76:	4904      	ldr	r1, [pc, #16]	; (8041c88 <RCCEx_PLLSAI1_Config+0x19c>)
 8041c78:	4313      	orrs	r3, r2
 8041c7a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8041c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8041c7e:	4618      	mov	r0, r3
 8041c80:	3710      	adds	r7, #16
 8041c82:	46bd      	mov	sp, r7
 8041c84:	bd80      	pop	{r7, pc}
 8041c86:	bf00      	nop
 8041c88:	40021000 	.word	0x40021000
 8041c8c:	07ff800c 	.word	0x07ff800c
 8041c90:	ff9f800c 	.word	0xff9f800c
 8041c94:	f9ff800c 	.word	0xf9ff800c

08041c98 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8041c98:	b580      	push	{r7, lr}
 8041c9a:	b084      	sub	sp, #16
 8041c9c:	af00      	add	r7, sp, #0
 8041c9e:	6078      	str	r0, [r7, #4]
 8041ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8041ca2:	2300      	movs	r3, #0
 8041ca4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8041ca6:	687b      	ldr	r3, [r7, #4]
 8041ca8:	681b      	ldr	r3, [r3, #0]
 8041caa:	2b03      	cmp	r3, #3
 8041cac:	d018      	beq.n	8041ce0 <RCCEx_PLLSAI2_Config+0x48>
 8041cae:	2b03      	cmp	r3, #3
 8041cb0:	d81f      	bhi.n	8041cf2 <RCCEx_PLLSAI2_Config+0x5a>
 8041cb2:	2b01      	cmp	r3, #1
 8041cb4:	d002      	beq.n	8041cbc <RCCEx_PLLSAI2_Config+0x24>
 8041cb6:	2b02      	cmp	r3, #2
 8041cb8:	d009      	beq.n	8041cce <RCCEx_PLLSAI2_Config+0x36>
 8041cba:	e01a      	b.n	8041cf2 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8041cbc:	4b42      	ldr	r3, [pc, #264]	; (8041dc8 <RCCEx_PLLSAI2_Config+0x130>)
 8041cbe:	681b      	ldr	r3, [r3, #0]
 8041cc0:	f003 0302 	and.w	r3, r3, #2
 8041cc4:	2b00      	cmp	r3, #0
 8041cc6:	d117      	bne.n	8041cf8 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8041cc8:	2301      	movs	r3, #1
 8041cca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8041ccc:	e014      	b.n	8041cf8 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8041cce:	4b3e      	ldr	r3, [pc, #248]	; (8041dc8 <RCCEx_PLLSAI2_Config+0x130>)
 8041cd0:	681b      	ldr	r3, [r3, #0]
 8041cd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041cd6:	2b00      	cmp	r3, #0
 8041cd8:	d110      	bne.n	8041cfc <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8041cda:	2301      	movs	r3, #1
 8041cdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8041cde:	e00d      	b.n	8041cfc <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8041ce0:	4b39      	ldr	r3, [pc, #228]	; (8041dc8 <RCCEx_PLLSAI2_Config+0x130>)
 8041ce2:	681b      	ldr	r3, [r3, #0]
 8041ce4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8041ce8:	2b00      	cmp	r3, #0
 8041cea:	d109      	bne.n	8041d00 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8041cec:	2301      	movs	r3, #1
 8041cee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8041cf0:	e006      	b.n	8041d00 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8041cf2:	2301      	movs	r3, #1
 8041cf4:	73fb      	strb	r3, [r7, #15]
      break;
 8041cf6:	e004      	b.n	8041d02 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8041cf8:	bf00      	nop
 8041cfa:	e002      	b.n	8041d02 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8041cfc:	bf00      	nop
 8041cfe:	e000      	b.n	8041d02 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8041d00:	bf00      	nop
  }

  if (status == HAL_OK)
 8041d02:	7bfb      	ldrb	r3, [r7, #15]
 8041d04:	2b00      	cmp	r3, #0
 8041d06:	d159      	bne.n	8041dbc <RCCEx_PLLSAI2_Config+0x124>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8041d08:	4b2f      	ldr	r3, [pc, #188]	; (8041dc8 <RCCEx_PLLSAI2_Config+0x130>)
 8041d0a:	681b      	ldr	r3, [r3, #0]
 8041d0c:	4a2e      	ldr	r2, [pc, #184]	; (8041dc8 <RCCEx_PLLSAI2_Config+0x130>)
 8041d0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8041d12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8041d14:	f7fe ff22 	bl	8040b5c <HAL_GetTick>
 8041d18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8041d1a:	e009      	b.n	8041d30 <RCCEx_PLLSAI2_Config+0x98>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8041d1c:	f7fe ff1e 	bl	8040b5c <HAL_GetTick>
 8041d20:	4602      	mov	r2, r0
 8041d22:	68bb      	ldr	r3, [r7, #8]
 8041d24:	1ad3      	subs	r3, r2, r3
 8041d26:	2b02      	cmp	r3, #2
 8041d28:	d902      	bls.n	8041d30 <RCCEx_PLLSAI2_Config+0x98>
      {
        status = HAL_TIMEOUT;
 8041d2a:	2303      	movs	r3, #3
 8041d2c:	73fb      	strb	r3, [r7, #15]
        break;
 8041d2e:	e005      	b.n	8041d3c <RCCEx_PLLSAI2_Config+0xa4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8041d30:	4b25      	ldr	r3, [pc, #148]	; (8041dc8 <RCCEx_PLLSAI2_Config+0x130>)
 8041d32:	681b      	ldr	r3, [r3, #0]
 8041d34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8041d38:	2b00      	cmp	r3, #0
 8041d3a:	d1ef      	bne.n	8041d1c <RCCEx_PLLSAI2_Config+0x84>
      }
    }

    if (status == HAL_OK)
 8041d3c:	7bfb      	ldrb	r3, [r7, #15]
 8041d3e:	2b00      	cmp	r3, #0
 8041d40:	d13c      	bne.n	8041dbc <RCCEx_PLLSAI2_Config+0x124>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8041d42:	683b      	ldr	r3, [r7, #0]
 8041d44:	2b00      	cmp	r3, #0
 8041d46:	d115      	bne.n	8041d74 <RCCEx_PLLSAI2_Config+0xdc>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8041d48:	4b1f      	ldr	r3, [pc, #124]	; (8041dc8 <RCCEx_PLLSAI2_Config+0x130>)
 8041d4a:	695a      	ldr	r2, [r3, #20]
 8041d4c:	4b1f      	ldr	r3, [pc, #124]	; (8041dcc <RCCEx_PLLSAI2_Config+0x134>)
 8041d4e:	4013      	ands	r3, r2
 8041d50:	687a      	ldr	r2, [r7, #4]
 8041d52:	6892      	ldr	r2, [r2, #8]
 8041d54:	0211      	lsls	r1, r2, #8
 8041d56:	687a      	ldr	r2, [r7, #4]
 8041d58:	68d2      	ldr	r2, [r2, #12]
 8041d5a:	06d2      	lsls	r2, r2, #27
 8041d5c:	4311      	orrs	r1, r2
 8041d5e:	687a      	ldr	r2, [r7, #4]
 8041d60:	6852      	ldr	r2, [r2, #4]
 8041d62:	3a01      	subs	r2, #1
 8041d64:	0112      	lsls	r2, r2, #4
 8041d66:	4311      	orrs	r1, r2
 8041d68:	687a      	ldr	r2, [r7, #4]
 8041d6a:	6812      	ldr	r2, [r2, #0]
 8041d6c:	430a      	orrs	r2, r1
 8041d6e:	4916      	ldr	r1, [pc, #88]	; (8041dc8 <RCCEx_PLLSAI2_Config+0x130>)
 8041d70:	4313      	orrs	r3, r2
 8041d72:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8041d74:	4b14      	ldr	r3, [pc, #80]	; (8041dc8 <RCCEx_PLLSAI2_Config+0x130>)
 8041d76:	681b      	ldr	r3, [r3, #0]
 8041d78:	4a13      	ldr	r2, [pc, #76]	; (8041dc8 <RCCEx_PLLSAI2_Config+0x130>)
 8041d7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8041d7e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041d80:	f7fe feec 	bl	8040b5c <HAL_GetTick>
 8041d84:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8041d86:	e009      	b.n	8041d9c <RCCEx_PLLSAI2_Config+0x104>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8041d88:	f7fe fee8 	bl	8040b5c <HAL_GetTick>
 8041d8c:	4602      	mov	r2, r0
 8041d8e:	68bb      	ldr	r3, [r7, #8]
 8041d90:	1ad3      	subs	r3, r2, r3
 8041d92:	2b02      	cmp	r3, #2
 8041d94:	d902      	bls.n	8041d9c <RCCEx_PLLSAI2_Config+0x104>
        {
          status = HAL_TIMEOUT;
 8041d96:	2303      	movs	r3, #3
 8041d98:	73fb      	strb	r3, [r7, #15]
          break;
 8041d9a:	e005      	b.n	8041da8 <RCCEx_PLLSAI2_Config+0x110>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8041d9c:	4b0a      	ldr	r3, [pc, #40]	; (8041dc8 <RCCEx_PLLSAI2_Config+0x130>)
 8041d9e:	681b      	ldr	r3, [r3, #0]
 8041da0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8041da4:	2b00      	cmp	r3, #0
 8041da6:	d0ef      	beq.n	8041d88 <RCCEx_PLLSAI2_Config+0xf0>
        }
      }

      if (status == HAL_OK)
 8041da8:	7bfb      	ldrb	r3, [r7, #15]
 8041daa:	2b00      	cmp	r3, #0
 8041dac:	d106      	bne.n	8041dbc <RCCEx_PLLSAI2_Config+0x124>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8041dae:	4b06      	ldr	r3, [pc, #24]	; (8041dc8 <RCCEx_PLLSAI2_Config+0x130>)
 8041db0:	695a      	ldr	r2, [r3, #20]
 8041db2:	687b      	ldr	r3, [r7, #4]
 8041db4:	691b      	ldr	r3, [r3, #16]
 8041db6:	4904      	ldr	r1, [pc, #16]	; (8041dc8 <RCCEx_PLLSAI2_Config+0x130>)
 8041db8:	4313      	orrs	r3, r2
 8041dba:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8041dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8041dbe:	4618      	mov	r0, r3
 8041dc0:	3710      	adds	r7, #16
 8041dc2:	46bd      	mov	sp, r7
 8041dc4:	bd80      	pop	{r7, pc}
 8041dc6:	bf00      	nop
 8041dc8:	40021000 	.word	0x40021000
 8041dcc:	07ff800c 	.word	0x07ff800c

08041dd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8041dd0:	b580      	push	{r7, lr}
 8041dd2:	b082      	sub	sp, #8
 8041dd4:	af00      	add	r7, sp, #0
 8041dd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8041dd8:	687b      	ldr	r3, [r7, #4]
 8041dda:	2b00      	cmp	r3, #0
 8041ddc:	d101      	bne.n	8041de2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8041dde:	2301      	movs	r3, #1
 8041de0:	e042      	b.n	8041e68 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8041de2:	687b      	ldr	r3, [r7, #4]
 8041de4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8041de8:	2b00      	cmp	r3, #0
 8041dea:	d106      	bne.n	8041dfa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8041dec:	687b      	ldr	r3, [r7, #4]
 8041dee:	2200      	movs	r2, #0
 8041df0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8041df4:	6878      	ldr	r0, [r7, #4]
 8041df6:	f7fe fd7f 	bl	80408f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8041dfa:	687b      	ldr	r3, [r7, #4]
 8041dfc:	2224      	movs	r2, #36	; 0x24
 8041dfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8041e02:	687b      	ldr	r3, [r7, #4]
 8041e04:	681b      	ldr	r3, [r3, #0]
 8041e06:	681a      	ldr	r2, [r3, #0]
 8041e08:	687b      	ldr	r3, [r7, #4]
 8041e0a:	681b      	ldr	r3, [r3, #0]
 8041e0c:	f022 0201 	bic.w	r2, r2, #1
 8041e10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8041e12:	6878      	ldr	r0, [r7, #4]
 8041e14:	f000 fb1a 	bl	804244c <UART_SetConfig>
 8041e18:	4603      	mov	r3, r0
 8041e1a:	2b01      	cmp	r3, #1
 8041e1c:	d101      	bne.n	8041e22 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8041e1e:	2301      	movs	r3, #1
 8041e20:	e022      	b.n	8041e68 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8041e22:	687b      	ldr	r3, [r7, #4]
 8041e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8041e26:	2b00      	cmp	r3, #0
 8041e28:	d002      	beq.n	8041e30 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8041e2a:	6878      	ldr	r0, [r7, #4]
 8041e2c:	f000 fde2 	bl	80429f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8041e30:	687b      	ldr	r3, [r7, #4]
 8041e32:	681b      	ldr	r3, [r3, #0]
 8041e34:	685a      	ldr	r2, [r3, #4]
 8041e36:	687b      	ldr	r3, [r7, #4]
 8041e38:	681b      	ldr	r3, [r3, #0]
 8041e3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8041e3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8041e40:	687b      	ldr	r3, [r7, #4]
 8041e42:	681b      	ldr	r3, [r3, #0]
 8041e44:	689a      	ldr	r2, [r3, #8]
 8041e46:	687b      	ldr	r3, [r7, #4]
 8041e48:	681b      	ldr	r3, [r3, #0]
 8041e4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8041e4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8041e50:	687b      	ldr	r3, [r7, #4]
 8041e52:	681b      	ldr	r3, [r3, #0]
 8041e54:	681a      	ldr	r2, [r3, #0]
 8041e56:	687b      	ldr	r3, [r7, #4]
 8041e58:	681b      	ldr	r3, [r3, #0]
 8041e5a:	f042 0201 	orr.w	r2, r2, #1
 8041e5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8041e60:	6878      	ldr	r0, [r7, #4]
 8041e62:	f000 fe69 	bl	8042b38 <UART_CheckIdleState>
 8041e66:	4603      	mov	r3, r0
}
 8041e68:	4618      	mov	r0, r3
 8041e6a:	3708      	adds	r7, #8
 8041e6c:	46bd      	mov	sp, r7
 8041e6e:	bd80      	pop	{r7, pc}

08041e70 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8041e70:	b480      	push	{r7}
 8041e72:	b085      	sub	sp, #20
 8041e74:	af00      	add	r7, sp, #0
 8041e76:	60f8      	str	r0, [r7, #12]
 8041e78:	60b9      	str	r1, [r7, #8]
 8041e7a:	4613      	mov	r3, r2
 8041e7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8041e7e:	68fb      	ldr	r3, [r7, #12]
 8041e80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8041e84:	2b20      	cmp	r3, #32
 8041e86:	d168      	bne.n	8041f5a <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8041e88:	68bb      	ldr	r3, [r7, #8]
 8041e8a:	2b00      	cmp	r3, #0
 8041e8c:	d002      	beq.n	8041e94 <HAL_UART_Transmit_IT+0x24>
 8041e8e:	88fb      	ldrh	r3, [r7, #6]
 8041e90:	2b00      	cmp	r3, #0
 8041e92:	d101      	bne.n	8041e98 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8041e94:	2301      	movs	r3, #1
 8041e96:	e061      	b.n	8041f5c <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 8041e98:	68fb      	ldr	r3, [r7, #12]
 8041e9a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8041e9e:	2b01      	cmp	r3, #1
 8041ea0:	d101      	bne.n	8041ea6 <HAL_UART_Transmit_IT+0x36>
 8041ea2:	2302      	movs	r3, #2
 8041ea4:	e05a      	b.n	8041f5c <HAL_UART_Transmit_IT+0xec>
 8041ea6:	68fb      	ldr	r3, [r7, #12]
 8041ea8:	2201      	movs	r2, #1
 8041eaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8041eae:	68fb      	ldr	r3, [r7, #12]
 8041eb0:	68ba      	ldr	r2, [r7, #8]
 8041eb2:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8041eb4:	68fb      	ldr	r3, [r7, #12]
 8041eb6:	88fa      	ldrh	r2, [r7, #6]
 8041eb8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8041ebc:	68fb      	ldr	r3, [r7, #12]
 8041ebe:	88fa      	ldrh	r2, [r7, #6]
 8041ec0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8041ec4:	68fb      	ldr	r3, [r7, #12]
 8041ec6:	2200      	movs	r2, #0
 8041ec8:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8041eca:	68fb      	ldr	r3, [r7, #12]
 8041ecc:	2200      	movs	r2, #0
 8041ece:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8041ed2:	68fb      	ldr	r3, [r7, #12]
 8041ed4:	2221      	movs	r2, #33	; 0x21
 8041ed6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8041eda:	68fb      	ldr	r3, [r7, #12]
 8041edc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8041ede:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8041ee2:	d11c      	bne.n	8041f1e <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8041ee4:	68fb      	ldr	r3, [r7, #12]
 8041ee6:	689b      	ldr	r3, [r3, #8]
 8041ee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8041eec:	d107      	bne.n	8041efe <HAL_UART_Transmit_IT+0x8e>
 8041eee:	68fb      	ldr	r3, [r7, #12]
 8041ef0:	691b      	ldr	r3, [r3, #16]
 8041ef2:	2b00      	cmp	r3, #0
 8041ef4:	d103      	bne.n	8041efe <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8041ef6:	68fb      	ldr	r3, [r7, #12]
 8041ef8:	4a1b      	ldr	r2, [pc, #108]	; (8041f68 <HAL_UART_Transmit_IT+0xf8>)
 8041efa:	675a      	str	r2, [r3, #116]	; 0x74
 8041efc:	e002      	b.n	8041f04 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8041efe:	68fb      	ldr	r3, [r7, #12]
 8041f00:	4a1a      	ldr	r2, [pc, #104]	; (8041f6c <HAL_UART_Transmit_IT+0xfc>)
 8041f02:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8041f04:	68fb      	ldr	r3, [r7, #12]
 8041f06:	2200      	movs	r2, #0
 8041f08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8041f0c:	68fb      	ldr	r3, [r7, #12]
 8041f0e:	681b      	ldr	r3, [r3, #0]
 8041f10:	689a      	ldr	r2, [r3, #8]
 8041f12:	68fb      	ldr	r3, [r7, #12]
 8041f14:	681b      	ldr	r3, [r3, #0]
 8041f16:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8041f1a:	609a      	str	r2, [r3, #8]
 8041f1c:	e01b      	b.n	8041f56 <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8041f1e:	68fb      	ldr	r3, [r7, #12]
 8041f20:	689b      	ldr	r3, [r3, #8]
 8041f22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8041f26:	d107      	bne.n	8041f38 <HAL_UART_Transmit_IT+0xc8>
 8041f28:	68fb      	ldr	r3, [r7, #12]
 8041f2a:	691b      	ldr	r3, [r3, #16]
 8041f2c:	2b00      	cmp	r3, #0
 8041f2e:	d103      	bne.n	8041f38 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8041f30:	68fb      	ldr	r3, [r7, #12]
 8041f32:	4a0f      	ldr	r2, [pc, #60]	; (8041f70 <HAL_UART_Transmit_IT+0x100>)
 8041f34:	675a      	str	r2, [r3, #116]	; 0x74
 8041f36:	e002      	b.n	8041f3e <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8041f38:	68fb      	ldr	r3, [r7, #12]
 8041f3a:	4a0e      	ldr	r2, [pc, #56]	; (8041f74 <HAL_UART_Transmit_IT+0x104>)
 8041f3c:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8041f3e:	68fb      	ldr	r3, [r7, #12]
 8041f40:	2200      	movs	r2, #0
 8041f42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8041f46:	68fb      	ldr	r3, [r7, #12]
 8041f48:	681b      	ldr	r3, [r3, #0]
 8041f4a:	681a      	ldr	r2, [r3, #0]
 8041f4c:	68fb      	ldr	r3, [r7, #12]
 8041f4e:	681b      	ldr	r3, [r3, #0]
 8041f50:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8041f54:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8041f56:	2300      	movs	r3, #0
 8041f58:	e000      	b.n	8041f5c <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 8041f5a:	2302      	movs	r3, #2
  }
}
 8041f5c:	4618      	mov	r0, r3
 8041f5e:	3714      	adds	r7, #20
 8041f60:	46bd      	mov	sp, r7
 8041f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041f66:	4770      	bx	lr
 8041f68:	08042eeb 	.word	0x08042eeb
 8041f6c:	08042e51 	.word	0x08042e51
 8041f70:	08042dd3 	.word	0x08042dd3
 8041f74:	08042d5f 	.word	0x08042d5f

08041f78 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8041f78:	b580      	push	{r7, lr}
 8041f7a:	b088      	sub	sp, #32
 8041f7c:	af00      	add	r7, sp, #0
 8041f7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8041f80:	687b      	ldr	r3, [r7, #4]
 8041f82:	681b      	ldr	r3, [r3, #0]
 8041f84:	69db      	ldr	r3, [r3, #28]
 8041f86:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8041f88:	687b      	ldr	r3, [r7, #4]
 8041f8a:	681b      	ldr	r3, [r3, #0]
 8041f8c:	681b      	ldr	r3, [r3, #0]
 8041f8e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8041f90:	687b      	ldr	r3, [r7, #4]
 8041f92:	681b      	ldr	r3, [r3, #0]
 8041f94:	689b      	ldr	r3, [r3, #8]
 8041f96:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8041f98:	69fa      	ldr	r2, [r7, #28]
 8041f9a:	f640 030f 	movw	r3, #2063	; 0x80f
 8041f9e:	4013      	ands	r3, r2
 8041fa0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8041fa2:	693b      	ldr	r3, [r7, #16]
 8041fa4:	2b00      	cmp	r3, #0
 8041fa6:	d118      	bne.n	8041fda <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8041fa8:	69fb      	ldr	r3, [r7, #28]
 8041faa:	f003 0320 	and.w	r3, r3, #32
 8041fae:	2b00      	cmp	r3, #0
 8041fb0:	d013      	beq.n	8041fda <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8041fb2:	69bb      	ldr	r3, [r7, #24]
 8041fb4:	f003 0320 	and.w	r3, r3, #32
 8041fb8:	2b00      	cmp	r3, #0
 8041fba:	d104      	bne.n	8041fc6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8041fbc:	697b      	ldr	r3, [r7, #20]
 8041fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041fc2:	2b00      	cmp	r3, #0
 8041fc4:	d009      	beq.n	8041fda <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8041fc6:	687b      	ldr	r3, [r7, #4]
 8041fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041fca:	2b00      	cmp	r3, #0
 8041fcc:	f000 81fb 	beq.w	80423c6 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8041fd0:	687b      	ldr	r3, [r7, #4]
 8041fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041fd4:	6878      	ldr	r0, [r7, #4]
 8041fd6:	4798      	blx	r3
      }
      return;
 8041fd8:	e1f5      	b.n	80423c6 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8041fda:	693b      	ldr	r3, [r7, #16]
 8041fdc:	2b00      	cmp	r3, #0
 8041fde:	f000 80ef 	beq.w	80421c0 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8041fe2:	697a      	ldr	r2, [r7, #20]
 8041fe4:	4b73      	ldr	r3, [pc, #460]	; (80421b4 <HAL_UART_IRQHandler+0x23c>)
 8041fe6:	4013      	ands	r3, r2
 8041fe8:	2b00      	cmp	r3, #0
 8041fea:	d105      	bne.n	8041ff8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8041fec:	69ba      	ldr	r2, [r7, #24]
 8041fee:	4b72      	ldr	r3, [pc, #456]	; (80421b8 <HAL_UART_IRQHandler+0x240>)
 8041ff0:	4013      	ands	r3, r2
 8041ff2:	2b00      	cmp	r3, #0
 8041ff4:	f000 80e4 	beq.w	80421c0 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8041ff8:	69fb      	ldr	r3, [r7, #28]
 8041ffa:	f003 0301 	and.w	r3, r3, #1
 8041ffe:	2b00      	cmp	r3, #0
 8042000:	d010      	beq.n	8042024 <HAL_UART_IRQHandler+0xac>
 8042002:	69bb      	ldr	r3, [r7, #24]
 8042004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8042008:	2b00      	cmp	r3, #0
 804200a:	d00b      	beq.n	8042024 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 804200c:	687b      	ldr	r3, [r7, #4]
 804200e:	681b      	ldr	r3, [r3, #0]
 8042010:	2201      	movs	r2, #1
 8042012:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8042014:	687b      	ldr	r3, [r7, #4]
 8042016:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804201a:	f043 0201 	orr.w	r2, r3, #1
 804201e:	687b      	ldr	r3, [r7, #4]
 8042020:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8042024:	69fb      	ldr	r3, [r7, #28]
 8042026:	f003 0302 	and.w	r3, r3, #2
 804202a:	2b00      	cmp	r3, #0
 804202c:	d010      	beq.n	8042050 <HAL_UART_IRQHandler+0xd8>
 804202e:	697b      	ldr	r3, [r7, #20]
 8042030:	f003 0301 	and.w	r3, r3, #1
 8042034:	2b00      	cmp	r3, #0
 8042036:	d00b      	beq.n	8042050 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8042038:	687b      	ldr	r3, [r7, #4]
 804203a:	681b      	ldr	r3, [r3, #0]
 804203c:	2202      	movs	r2, #2
 804203e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8042040:	687b      	ldr	r3, [r7, #4]
 8042042:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8042046:	f043 0204 	orr.w	r2, r3, #4
 804204a:	687b      	ldr	r3, [r7, #4]
 804204c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8042050:	69fb      	ldr	r3, [r7, #28]
 8042052:	f003 0304 	and.w	r3, r3, #4
 8042056:	2b00      	cmp	r3, #0
 8042058:	d010      	beq.n	804207c <HAL_UART_IRQHandler+0x104>
 804205a:	697b      	ldr	r3, [r7, #20]
 804205c:	f003 0301 	and.w	r3, r3, #1
 8042060:	2b00      	cmp	r3, #0
 8042062:	d00b      	beq.n	804207c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8042064:	687b      	ldr	r3, [r7, #4]
 8042066:	681b      	ldr	r3, [r3, #0]
 8042068:	2204      	movs	r2, #4
 804206a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 804206c:	687b      	ldr	r3, [r7, #4]
 804206e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8042072:	f043 0202 	orr.w	r2, r3, #2
 8042076:	687b      	ldr	r3, [r7, #4]
 8042078:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 804207c:	69fb      	ldr	r3, [r7, #28]
 804207e:	f003 0308 	and.w	r3, r3, #8
 8042082:	2b00      	cmp	r3, #0
 8042084:	d015      	beq.n	80420b2 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8042086:	69bb      	ldr	r3, [r7, #24]
 8042088:	f003 0320 	and.w	r3, r3, #32
 804208c:	2b00      	cmp	r3, #0
 804208e:	d104      	bne.n	804209a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8042090:	697a      	ldr	r2, [r7, #20]
 8042092:	4b48      	ldr	r3, [pc, #288]	; (80421b4 <HAL_UART_IRQHandler+0x23c>)
 8042094:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8042096:	2b00      	cmp	r3, #0
 8042098:	d00b      	beq.n	80420b2 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 804209a:	687b      	ldr	r3, [r7, #4]
 804209c:	681b      	ldr	r3, [r3, #0]
 804209e:	2208      	movs	r2, #8
 80420a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80420a2:	687b      	ldr	r3, [r7, #4]
 80420a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80420a8:	f043 0208 	orr.w	r2, r3, #8
 80420ac:	687b      	ldr	r3, [r7, #4]
 80420ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80420b2:	69fb      	ldr	r3, [r7, #28]
 80420b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80420b8:	2b00      	cmp	r3, #0
 80420ba:	d011      	beq.n	80420e0 <HAL_UART_IRQHandler+0x168>
 80420bc:	69bb      	ldr	r3, [r7, #24]
 80420be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80420c2:	2b00      	cmp	r3, #0
 80420c4:	d00c      	beq.n	80420e0 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80420c6:	687b      	ldr	r3, [r7, #4]
 80420c8:	681b      	ldr	r3, [r3, #0]
 80420ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80420ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80420d0:	687b      	ldr	r3, [r7, #4]
 80420d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80420d6:	f043 0220 	orr.w	r2, r3, #32
 80420da:	687b      	ldr	r3, [r7, #4]
 80420dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80420e0:	687b      	ldr	r3, [r7, #4]
 80420e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80420e6:	2b00      	cmp	r3, #0
 80420e8:	f000 816f 	beq.w	80423ca <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80420ec:	69fb      	ldr	r3, [r7, #28]
 80420ee:	f003 0320 	and.w	r3, r3, #32
 80420f2:	2b00      	cmp	r3, #0
 80420f4:	d011      	beq.n	804211a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80420f6:	69bb      	ldr	r3, [r7, #24]
 80420f8:	f003 0320 	and.w	r3, r3, #32
 80420fc:	2b00      	cmp	r3, #0
 80420fe:	d104      	bne.n	804210a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8042100:	697b      	ldr	r3, [r7, #20]
 8042102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8042106:	2b00      	cmp	r3, #0
 8042108:	d007      	beq.n	804211a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 804210a:	687b      	ldr	r3, [r7, #4]
 804210c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804210e:	2b00      	cmp	r3, #0
 8042110:	d003      	beq.n	804211a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8042112:	687b      	ldr	r3, [r7, #4]
 8042114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042116:	6878      	ldr	r0, [r7, #4]
 8042118:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 804211a:	687b      	ldr	r3, [r7, #4]
 804211c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8042120:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8042122:	687b      	ldr	r3, [r7, #4]
 8042124:	681b      	ldr	r3, [r3, #0]
 8042126:	689b      	ldr	r3, [r3, #8]
 8042128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804212c:	2b40      	cmp	r3, #64	; 0x40
 804212e:	d004      	beq.n	804213a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8042130:	68fb      	ldr	r3, [r7, #12]
 8042132:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8042136:	2b00      	cmp	r3, #0
 8042138:	d031      	beq.n	804219e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 804213a:	6878      	ldr	r0, [r7, #4]
 804213c:	f000 fdc7 	bl	8042cce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8042140:	687b      	ldr	r3, [r7, #4]
 8042142:	681b      	ldr	r3, [r3, #0]
 8042144:	689b      	ldr	r3, [r3, #8]
 8042146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804214a:	2b40      	cmp	r3, #64	; 0x40
 804214c:	d123      	bne.n	8042196 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 804214e:	687b      	ldr	r3, [r7, #4]
 8042150:	681b      	ldr	r3, [r3, #0]
 8042152:	689a      	ldr	r2, [r3, #8]
 8042154:	687b      	ldr	r3, [r7, #4]
 8042156:	681b      	ldr	r3, [r3, #0]
 8042158:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 804215c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 804215e:	687b      	ldr	r3, [r7, #4]
 8042160:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8042162:	2b00      	cmp	r3, #0
 8042164:	d013      	beq.n	804218e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8042166:	687b      	ldr	r3, [r7, #4]
 8042168:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804216a:	4a14      	ldr	r2, [pc, #80]	; (80421bc <HAL_UART_IRQHandler+0x244>)
 804216c:	641a      	str	r2, [r3, #64]	; 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 804216e:	687b      	ldr	r3, [r7, #4]
 8042170:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8042172:	4618      	mov	r0, r3
 8042174:	f7fe fe8d 	bl	8040e92 <HAL_DMA_Abort_IT>
 8042178:	4603      	mov	r3, r0
 804217a:	2b00      	cmp	r3, #0
 804217c:	d017      	beq.n	80421ae <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 804217e:	687b      	ldr	r3, [r7, #4]
 8042180:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8042182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8042184:	687a      	ldr	r2, [r7, #4]
 8042186:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8042188:	4610      	mov	r0, r2
 804218a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 804218c:	e00f      	b.n	80421ae <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 804218e:	6878      	ldr	r0, [r7, #4]
 8042190:	f000 f930 	bl	80423f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8042194:	e00b      	b.n	80421ae <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8042196:	6878      	ldr	r0, [r7, #4]
 8042198:	f000 f92c 	bl	80423f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 804219c:	e007      	b.n	80421ae <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 804219e:	6878      	ldr	r0, [r7, #4]
 80421a0:	f000 f928 	bl	80423f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80421a4:	687b      	ldr	r3, [r7, #4]
 80421a6:	2200      	movs	r2, #0
 80421a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80421ac:	e10d      	b.n	80423ca <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80421ae:	bf00      	nop
    return;
 80421b0:	e10b      	b.n	80423ca <HAL_UART_IRQHandler+0x452>
 80421b2:	bf00      	nop
 80421b4:	10000001 	.word	0x10000001
 80421b8:	04000120 	.word	0x04000120
 80421bc:	08042d33 	.word	0x08042d33

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80421c0:	687b      	ldr	r3, [r7, #4]
 80421c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80421c4:	2b01      	cmp	r3, #1
 80421c6:	f040 80ab 	bne.w	8042320 <HAL_UART_IRQHandler+0x3a8>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80421ca:	69fb      	ldr	r3, [r7, #28]
 80421cc:	f003 0310 	and.w	r3, r3, #16
 80421d0:	2b00      	cmp	r3, #0
 80421d2:	f000 80a5 	beq.w	8042320 <HAL_UART_IRQHandler+0x3a8>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80421d6:	69bb      	ldr	r3, [r7, #24]
 80421d8:	f003 0310 	and.w	r3, r3, #16
 80421dc:	2b00      	cmp	r3, #0
 80421de:	f000 809f 	beq.w	8042320 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80421e2:	687b      	ldr	r3, [r7, #4]
 80421e4:	681b      	ldr	r3, [r3, #0]
 80421e6:	2210      	movs	r2, #16
 80421e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80421ea:	687b      	ldr	r3, [r7, #4]
 80421ec:	681b      	ldr	r3, [r3, #0]
 80421ee:	689b      	ldr	r3, [r3, #8]
 80421f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80421f4:	2b40      	cmp	r3, #64	; 0x40
 80421f6:	d155      	bne.n	80422a4 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80421f8:	687b      	ldr	r3, [r7, #4]
 80421fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80421fc:	681b      	ldr	r3, [r3, #0]
 80421fe:	685b      	ldr	r3, [r3, #4]
 8042200:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8042202:	893b      	ldrh	r3, [r7, #8]
 8042204:	2b00      	cmp	r3, #0
 8042206:	f000 80e2 	beq.w	80423ce <HAL_UART_IRQHandler+0x456>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 804220a:	687b      	ldr	r3, [r7, #4]
 804220c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8042210:	893a      	ldrh	r2, [r7, #8]
 8042212:	429a      	cmp	r2, r3
 8042214:	f080 80db 	bcs.w	80423ce <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8042218:	687b      	ldr	r3, [r7, #4]
 804221a:	893a      	ldrh	r2, [r7, #8]
 804221c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8042220:	687b      	ldr	r3, [r7, #4]
 8042222:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8042224:	681b      	ldr	r3, [r3, #0]
 8042226:	681b      	ldr	r3, [r3, #0]
 8042228:	f003 0320 	and.w	r3, r3, #32
 804222c:	2b00      	cmp	r3, #0
 804222e:	d12b      	bne.n	8042288 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8042230:	687b      	ldr	r3, [r7, #4]
 8042232:	681b      	ldr	r3, [r3, #0]
 8042234:	681a      	ldr	r2, [r3, #0]
 8042236:	687b      	ldr	r3, [r7, #4]
 8042238:	681b      	ldr	r3, [r3, #0]
 804223a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 804223e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8042240:	687b      	ldr	r3, [r7, #4]
 8042242:	681b      	ldr	r3, [r3, #0]
 8042244:	689a      	ldr	r2, [r3, #8]
 8042246:	687b      	ldr	r3, [r7, #4]
 8042248:	681b      	ldr	r3, [r3, #0]
 804224a:	f022 0201 	bic.w	r2, r2, #1
 804224e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8042250:	687b      	ldr	r3, [r7, #4]
 8042252:	681b      	ldr	r3, [r3, #0]
 8042254:	689a      	ldr	r2, [r3, #8]
 8042256:	687b      	ldr	r3, [r7, #4]
 8042258:	681b      	ldr	r3, [r3, #0]
 804225a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 804225e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8042260:	687b      	ldr	r3, [r7, #4]
 8042262:	2220      	movs	r2, #32
 8042264:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8042268:	687b      	ldr	r3, [r7, #4]
 804226a:	2200      	movs	r2, #0
 804226c:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 804226e:	687b      	ldr	r3, [r7, #4]
 8042270:	681b      	ldr	r3, [r3, #0]
 8042272:	681a      	ldr	r2, [r3, #0]
 8042274:	687b      	ldr	r3, [r7, #4]
 8042276:	681b      	ldr	r3, [r3, #0]
 8042278:	f022 0210 	bic.w	r2, r2, #16
 804227c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 804227e:	687b      	ldr	r3, [r7, #4]
 8042280:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8042282:	4618      	mov	r0, r3
 8042284:	f7fe fda9 	bl	8040dda <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8042288:	687b      	ldr	r3, [r7, #4]
 804228a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 804228e:	687b      	ldr	r3, [r7, #4]
 8042290:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8042294:	b29b      	uxth	r3, r3
 8042296:	1ad3      	subs	r3, r2, r3
 8042298:	b29b      	uxth	r3, r3
 804229a:	4619      	mov	r1, r3
 804229c:	6878      	ldr	r0, [r7, #4]
 804229e:	f000 f8b3 	bl	8042408 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80422a2:	e094      	b.n	80423ce <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80422a4:	687b      	ldr	r3, [r7, #4]
 80422a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80422aa:	687b      	ldr	r3, [r7, #4]
 80422ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80422b0:	b29b      	uxth	r3, r3
 80422b2:	1ad3      	subs	r3, r2, r3
 80422b4:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80422b6:	687b      	ldr	r3, [r7, #4]
 80422b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80422bc:	b29b      	uxth	r3, r3
 80422be:	2b00      	cmp	r3, #0
 80422c0:	f000 8087 	beq.w	80423d2 <HAL_UART_IRQHandler+0x45a>
          &&(nb_rx_data > 0U) )
 80422c4:	897b      	ldrh	r3, [r7, #10]
 80422c6:	2b00      	cmp	r3, #0
 80422c8:	f000 8083 	beq.w	80423d2 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80422cc:	687b      	ldr	r3, [r7, #4]
 80422ce:	681b      	ldr	r3, [r3, #0]
 80422d0:	681a      	ldr	r2, [r3, #0]
 80422d2:	687b      	ldr	r3, [r7, #4]
 80422d4:	681b      	ldr	r3, [r3, #0]
 80422d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80422da:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80422dc:	687b      	ldr	r3, [r7, #4]
 80422de:	681b      	ldr	r3, [r3, #0]
 80422e0:	689b      	ldr	r3, [r3, #8]
 80422e2:	687a      	ldr	r2, [r7, #4]
 80422e4:	6812      	ldr	r2, [r2, #0]
 80422e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80422ea:	f023 0301 	bic.w	r3, r3, #1
 80422ee:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80422f0:	687b      	ldr	r3, [r7, #4]
 80422f2:	2220      	movs	r2, #32
 80422f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80422f8:	687b      	ldr	r3, [r7, #4]
 80422fa:	2200      	movs	r2, #0
 80422fc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80422fe:	687b      	ldr	r3, [r7, #4]
 8042300:	2200      	movs	r2, #0
 8042302:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8042304:	687b      	ldr	r3, [r7, #4]
 8042306:	681b      	ldr	r3, [r3, #0]
 8042308:	681a      	ldr	r2, [r3, #0]
 804230a:	687b      	ldr	r3, [r7, #4]
 804230c:	681b      	ldr	r3, [r3, #0]
 804230e:	f022 0210 	bic.w	r2, r2, #16
 8042312:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8042314:	897b      	ldrh	r3, [r7, #10]
 8042316:	4619      	mov	r1, r3
 8042318:	6878      	ldr	r0, [r7, #4]
 804231a:	f000 f875 	bl	8042408 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 804231e:	e058      	b.n	80423d2 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8042320:	69fb      	ldr	r3, [r7, #28]
 8042322:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8042326:	2b00      	cmp	r3, #0
 8042328:	d00d      	beq.n	8042346 <HAL_UART_IRQHandler+0x3ce>
 804232a:	697b      	ldr	r3, [r7, #20]
 804232c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8042330:	2b00      	cmp	r3, #0
 8042332:	d008      	beq.n	8042346 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8042334:	687b      	ldr	r3, [r7, #4]
 8042336:	681b      	ldr	r3, [r3, #0]
 8042338:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 804233c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 804233e:	6878      	ldr	r0, [r7, #4]
 8042340:	f000 fe3f 	bl	8042fc2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8042344:	e048      	b.n	80423d8 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8042346:	69fb      	ldr	r3, [r7, #28]
 8042348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804234c:	2b00      	cmp	r3, #0
 804234e:	d012      	beq.n	8042376 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8042350:	69bb      	ldr	r3, [r7, #24]
 8042352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8042356:	2b00      	cmp	r3, #0
 8042358:	d104      	bne.n	8042364 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 804235a:	697b      	ldr	r3, [r7, #20]
 804235c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8042360:	2b00      	cmp	r3, #0
 8042362:	d008      	beq.n	8042376 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8042364:	687b      	ldr	r3, [r7, #4]
 8042366:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8042368:	2b00      	cmp	r3, #0
 804236a:	d034      	beq.n	80423d6 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 804236c:	687b      	ldr	r3, [r7, #4]
 804236e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8042370:	6878      	ldr	r0, [r7, #4]
 8042372:	4798      	blx	r3
    }
    return;
 8042374:	e02f      	b.n	80423d6 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8042376:	69fb      	ldr	r3, [r7, #28]
 8042378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804237c:	2b00      	cmp	r3, #0
 804237e:	d008      	beq.n	8042392 <HAL_UART_IRQHandler+0x41a>
 8042380:	69bb      	ldr	r3, [r7, #24]
 8042382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8042386:	2b00      	cmp	r3, #0
 8042388:	d003      	beq.n	8042392 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 804238a:	6878      	ldr	r0, [r7, #4]
 804238c:	f000 fdff 	bl	8042f8e <UART_EndTransmit_IT>
    return;
 8042390:	e022      	b.n	80423d8 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8042392:	69fb      	ldr	r3, [r7, #28]
 8042394:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8042398:	2b00      	cmp	r3, #0
 804239a:	d008      	beq.n	80423ae <HAL_UART_IRQHandler+0x436>
 804239c:	69bb      	ldr	r3, [r7, #24]
 804239e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80423a2:	2b00      	cmp	r3, #0
 80423a4:	d003      	beq.n	80423ae <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80423a6:	6878      	ldr	r0, [r7, #4]
 80423a8:	f000 fe1f 	bl	8042fea <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80423ac:	e014      	b.n	80423d8 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80423ae:	69fb      	ldr	r3, [r7, #28]
 80423b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80423b4:	2b00      	cmp	r3, #0
 80423b6:	d00f      	beq.n	80423d8 <HAL_UART_IRQHandler+0x460>
 80423b8:	69bb      	ldr	r3, [r7, #24]
 80423ba:	2b00      	cmp	r3, #0
 80423bc:	da0c      	bge.n	80423d8 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80423be:	6878      	ldr	r0, [r7, #4]
 80423c0:	f000 fe09 	bl	8042fd6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80423c4:	e008      	b.n	80423d8 <HAL_UART_IRQHandler+0x460>
      return;
 80423c6:	bf00      	nop
 80423c8:	e006      	b.n	80423d8 <HAL_UART_IRQHandler+0x460>
    return;
 80423ca:	bf00      	nop
 80423cc:	e004      	b.n	80423d8 <HAL_UART_IRQHandler+0x460>
      return;
 80423ce:	bf00      	nop
 80423d0:	e002      	b.n	80423d8 <HAL_UART_IRQHandler+0x460>
      return;
 80423d2:	bf00      	nop
 80423d4:	e000      	b.n	80423d8 <HAL_UART_IRQHandler+0x460>
    return;
 80423d6:	bf00      	nop
  }
}
 80423d8:	3720      	adds	r7, #32
 80423da:	46bd      	mov	sp, r7
 80423dc:	bd80      	pop	{r7, pc}
 80423de:	bf00      	nop

080423e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80423e0:	b480      	push	{r7}
 80423e2:	b083      	sub	sp, #12
 80423e4:	af00      	add	r7, sp, #0
 80423e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80423e8:	bf00      	nop
 80423ea:	370c      	adds	r7, #12
 80423ec:	46bd      	mov	sp, r7
 80423ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80423f2:	4770      	bx	lr

080423f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80423f4:	b480      	push	{r7}
 80423f6:	b083      	sub	sp, #12
 80423f8:	af00      	add	r7, sp, #0
 80423fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80423fc:	bf00      	nop
 80423fe:	370c      	adds	r7, #12
 8042400:	46bd      	mov	sp, r7
 8042402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042406:	4770      	bx	lr

08042408 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8042408:	b480      	push	{r7}
 804240a:	b083      	sub	sp, #12
 804240c:	af00      	add	r7, sp, #0
 804240e:	6078      	str	r0, [r7, #4]
 8042410:	460b      	mov	r3, r1
 8042412:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8042414:	bf00      	nop
 8042416:	370c      	adds	r7, #12
 8042418:	46bd      	mov	sp, r7
 804241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804241e:	4770      	bx	lr

08042420 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8042420:	b480      	push	{r7}
 8042422:	b085      	sub	sp, #20
 8042424:	af00      	add	r7, sp, #0
 8042426:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8042428:	687b      	ldr	r3, [r7, #4]
 804242a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 804242e:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8042430:	687b      	ldr	r3, [r7, #4]
 8042432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042436:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8042438:	68fa      	ldr	r2, [r7, #12]
 804243a:	68bb      	ldr	r3, [r7, #8]
 804243c:	4313      	orrs	r3, r2
}
 804243e:	4618      	mov	r0, r3
 8042440:	3714      	adds	r7, #20
 8042442:	46bd      	mov	sp, r7
 8042444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042448:	4770      	bx	lr
	...

0804244c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 804244c:	b5b0      	push	{r4, r5, r7, lr}
 804244e:	b088      	sub	sp, #32
 8042450:	af00      	add	r7, sp, #0
 8042452:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8042454:	2300      	movs	r3, #0
 8042456:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8042458:	687b      	ldr	r3, [r7, #4]
 804245a:	689a      	ldr	r2, [r3, #8]
 804245c:	687b      	ldr	r3, [r7, #4]
 804245e:	691b      	ldr	r3, [r3, #16]
 8042460:	431a      	orrs	r2, r3
 8042462:	687b      	ldr	r3, [r7, #4]
 8042464:	695b      	ldr	r3, [r3, #20]
 8042466:	431a      	orrs	r2, r3
 8042468:	687b      	ldr	r3, [r7, #4]
 804246a:	69db      	ldr	r3, [r3, #28]
 804246c:	4313      	orrs	r3, r2
 804246e:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8042470:	687b      	ldr	r3, [r7, #4]
 8042472:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8042474:	69fa      	ldr	r2, [r7, #28]
 8042476:	4313      	orrs	r3, r2
 8042478:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 804247a:	687b      	ldr	r3, [r7, #4]
 804247c:	681b      	ldr	r3, [r3, #0]
 804247e:	681a      	ldr	r2, [r3, #0]
 8042480:	4bb1      	ldr	r3, [pc, #708]	; (8042748 <UART_SetConfig+0x2fc>)
 8042482:	4013      	ands	r3, r2
 8042484:	687a      	ldr	r2, [r7, #4]
 8042486:	6812      	ldr	r2, [r2, #0]
 8042488:	69f9      	ldr	r1, [r7, #28]
 804248a:	430b      	orrs	r3, r1
 804248c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 804248e:	687b      	ldr	r3, [r7, #4]
 8042490:	681b      	ldr	r3, [r3, #0]
 8042492:	685b      	ldr	r3, [r3, #4]
 8042494:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8042498:	687b      	ldr	r3, [r7, #4]
 804249a:	68da      	ldr	r2, [r3, #12]
 804249c:	687b      	ldr	r3, [r7, #4]
 804249e:	681b      	ldr	r3, [r3, #0]
 80424a0:	430a      	orrs	r2, r1
 80424a2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80424a4:	687b      	ldr	r3, [r7, #4]
 80424a6:	699b      	ldr	r3, [r3, #24]
 80424a8:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80424aa:	687b      	ldr	r3, [r7, #4]
 80424ac:	681b      	ldr	r3, [r3, #0]
 80424ae:	4aa7      	ldr	r2, [pc, #668]	; (804274c <UART_SetConfig+0x300>)
 80424b0:	4293      	cmp	r3, r2
 80424b2:	d004      	beq.n	80424be <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80424b4:	687b      	ldr	r3, [r7, #4]
 80424b6:	6a1b      	ldr	r3, [r3, #32]
 80424b8:	69fa      	ldr	r2, [r7, #28]
 80424ba:	4313      	orrs	r3, r2
 80424bc:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80424be:	687b      	ldr	r3, [r7, #4]
 80424c0:	681b      	ldr	r3, [r3, #0]
 80424c2:	689b      	ldr	r3, [r3, #8]
 80424c4:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80424c8:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80424cc:	687a      	ldr	r2, [r7, #4]
 80424ce:	6812      	ldr	r2, [r2, #0]
 80424d0:	69f9      	ldr	r1, [r7, #28]
 80424d2:	430b      	orrs	r3, r1
 80424d4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80424d6:	687b      	ldr	r3, [r7, #4]
 80424d8:	681b      	ldr	r3, [r3, #0]
 80424da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80424dc:	f023 010f 	bic.w	r1, r3, #15
 80424e0:	687b      	ldr	r3, [r7, #4]
 80424e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80424e4:	687b      	ldr	r3, [r7, #4]
 80424e6:	681b      	ldr	r3, [r3, #0]
 80424e8:	430a      	orrs	r2, r1
 80424ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80424ec:	687b      	ldr	r3, [r7, #4]
 80424ee:	681b      	ldr	r3, [r3, #0]
 80424f0:	4a97      	ldr	r2, [pc, #604]	; (8042750 <UART_SetConfig+0x304>)
 80424f2:	4293      	cmp	r3, r2
 80424f4:	d121      	bne.n	804253a <UART_SetConfig+0xee>
 80424f6:	4b97      	ldr	r3, [pc, #604]	; (8042754 <UART_SetConfig+0x308>)
 80424f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80424fc:	f003 0303 	and.w	r3, r3, #3
 8042500:	2b03      	cmp	r3, #3
 8042502:	d817      	bhi.n	8042534 <UART_SetConfig+0xe8>
 8042504:	a201      	add	r2, pc, #4	; (adr r2, 804250c <UART_SetConfig+0xc0>)
 8042506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804250a:	bf00      	nop
 804250c:	0804251d 	.word	0x0804251d
 8042510:	08042529 	.word	0x08042529
 8042514:	08042523 	.word	0x08042523
 8042518:	0804252f 	.word	0x0804252f
 804251c:	2301      	movs	r3, #1
 804251e:	76fb      	strb	r3, [r7, #27]
 8042520:	e0e7      	b.n	80426f2 <UART_SetConfig+0x2a6>
 8042522:	2302      	movs	r3, #2
 8042524:	76fb      	strb	r3, [r7, #27]
 8042526:	e0e4      	b.n	80426f2 <UART_SetConfig+0x2a6>
 8042528:	2304      	movs	r3, #4
 804252a:	76fb      	strb	r3, [r7, #27]
 804252c:	e0e1      	b.n	80426f2 <UART_SetConfig+0x2a6>
 804252e:	2308      	movs	r3, #8
 8042530:	76fb      	strb	r3, [r7, #27]
 8042532:	e0de      	b.n	80426f2 <UART_SetConfig+0x2a6>
 8042534:	2310      	movs	r3, #16
 8042536:	76fb      	strb	r3, [r7, #27]
 8042538:	e0db      	b.n	80426f2 <UART_SetConfig+0x2a6>
 804253a:	687b      	ldr	r3, [r7, #4]
 804253c:	681b      	ldr	r3, [r3, #0]
 804253e:	4a86      	ldr	r2, [pc, #536]	; (8042758 <UART_SetConfig+0x30c>)
 8042540:	4293      	cmp	r3, r2
 8042542:	d132      	bne.n	80425aa <UART_SetConfig+0x15e>
 8042544:	4b83      	ldr	r3, [pc, #524]	; (8042754 <UART_SetConfig+0x308>)
 8042546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804254a:	f003 030c 	and.w	r3, r3, #12
 804254e:	2b0c      	cmp	r3, #12
 8042550:	d828      	bhi.n	80425a4 <UART_SetConfig+0x158>
 8042552:	a201      	add	r2, pc, #4	; (adr r2, 8042558 <UART_SetConfig+0x10c>)
 8042554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8042558:	0804258d 	.word	0x0804258d
 804255c:	080425a5 	.word	0x080425a5
 8042560:	080425a5 	.word	0x080425a5
 8042564:	080425a5 	.word	0x080425a5
 8042568:	08042599 	.word	0x08042599
 804256c:	080425a5 	.word	0x080425a5
 8042570:	080425a5 	.word	0x080425a5
 8042574:	080425a5 	.word	0x080425a5
 8042578:	08042593 	.word	0x08042593
 804257c:	080425a5 	.word	0x080425a5
 8042580:	080425a5 	.word	0x080425a5
 8042584:	080425a5 	.word	0x080425a5
 8042588:	0804259f 	.word	0x0804259f
 804258c:	2300      	movs	r3, #0
 804258e:	76fb      	strb	r3, [r7, #27]
 8042590:	e0af      	b.n	80426f2 <UART_SetConfig+0x2a6>
 8042592:	2302      	movs	r3, #2
 8042594:	76fb      	strb	r3, [r7, #27]
 8042596:	e0ac      	b.n	80426f2 <UART_SetConfig+0x2a6>
 8042598:	2304      	movs	r3, #4
 804259a:	76fb      	strb	r3, [r7, #27]
 804259c:	e0a9      	b.n	80426f2 <UART_SetConfig+0x2a6>
 804259e:	2308      	movs	r3, #8
 80425a0:	76fb      	strb	r3, [r7, #27]
 80425a2:	e0a6      	b.n	80426f2 <UART_SetConfig+0x2a6>
 80425a4:	2310      	movs	r3, #16
 80425a6:	76fb      	strb	r3, [r7, #27]
 80425a8:	e0a3      	b.n	80426f2 <UART_SetConfig+0x2a6>
 80425aa:	687b      	ldr	r3, [r7, #4]
 80425ac:	681b      	ldr	r3, [r3, #0]
 80425ae:	4a6b      	ldr	r2, [pc, #428]	; (804275c <UART_SetConfig+0x310>)
 80425b0:	4293      	cmp	r3, r2
 80425b2:	d120      	bne.n	80425f6 <UART_SetConfig+0x1aa>
 80425b4:	4b67      	ldr	r3, [pc, #412]	; (8042754 <UART_SetConfig+0x308>)
 80425b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80425ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80425be:	2b30      	cmp	r3, #48	; 0x30
 80425c0:	d013      	beq.n	80425ea <UART_SetConfig+0x19e>
 80425c2:	2b30      	cmp	r3, #48	; 0x30
 80425c4:	d814      	bhi.n	80425f0 <UART_SetConfig+0x1a4>
 80425c6:	2b20      	cmp	r3, #32
 80425c8:	d009      	beq.n	80425de <UART_SetConfig+0x192>
 80425ca:	2b20      	cmp	r3, #32
 80425cc:	d810      	bhi.n	80425f0 <UART_SetConfig+0x1a4>
 80425ce:	2b00      	cmp	r3, #0
 80425d0:	d002      	beq.n	80425d8 <UART_SetConfig+0x18c>
 80425d2:	2b10      	cmp	r3, #16
 80425d4:	d006      	beq.n	80425e4 <UART_SetConfig+0x198>
 80425d6:	e00b      	b.n	80425f0 <UART_SetConfig+0x1a4>
 80425d8:	2300      	movs	r3, #0
 80425da:	76fb      	strb	r3, [r7, #27]
 80425dc:	e089      	b.n	80426f2 <UART_SetConfig+0x2a6>
 80425de:	2302      	movs	r3, #2
 80425e0:	76fb      	strb	r3, [r7, #27]
 80425e2:	e086      	b.n	80426f2 <UART_SetConfig+0x2a6>
 80425e4:	2304      	movs	r3, #4
 80425e6:	76fb      	strb	r3, [r7, #27]
 80425e8:	e083      	b.n	80426f2 <UART_SetConfig+0x2a6>
 80425ea:	2308      	movs	r3, #8
 80425ec:	76fb      	strb	r3, [r7, #27]
 80425ee:	e080      	b.n	80426f2 <UART_SetConfig+0x2a6>
 80425f0:	2310      	movs	r3, #16
 80425f2:	76fb      	strb	r3, [r7, #27]
 80425f4:	e07d      	b.n	80426f2 <UART_SetConfig+0x2a6>
 80425f6:	687b      	ldr	r3, [r7, #4]
 80425f8:	681b      	ldr	r3, [r3, #0]
 80425fa:	4a59      	ldr	r2, [pc, #356]	; (8042760 <UART_SetConfig+0x314>)
 80425fc:	4293      	cmp	r3, r2
 80425fe:	d120      	bne.n	8042642 <UART_SetConfig+0x1f6>
 8042600:	4b54      	ldr	r3, [pc, #336]	; (8042754 <UART_SetConfig+0x308>)
 8042602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042606:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 804260a:	2bc0      	cmp	r3, #192	; 0xc0
 804260c:	d013      	beq.n	8042636 <UART_SetConfig+0x1ea>
 804260e:	2bc0      	cmp	r3, #192	; 0xc0
 8042610:	d814      	bhi.n	804263c <UART_SetConfig+0x1f0>
 8042612:	2b80      	cmp	r3, #128	; 0x80
 8042614:	d009      	beq.n	804262a <UART_SetConfig+0x1de>
 8042616:	2b80      	cmp	r3, #128	; 0x80
 8042618:	d810      	bhi.n	804263c <UART_SetConfig+0x1f0>
 804261a:	2b00      	cmp	r3, #0
 804261c:	d002      	beq.n	8042624 <UART_SetConfig+0x1d8>
 804261e:	2b40      	cmp	r3, #64	; 0x40
 8042620:	d006      	beq.n	8042630 <UART_SetConfig+0x1e4>
 8042622:	e00b      	b.n	804263c <UART_SetConfig+0x1f0>
 8042624:	2300      	movs	r3, #0
 8042626:	76fb      	strb	r3, [r7, #27]
 8042628:	e063      	b.n	80426f2 <UART_SetConfig+0x2a6>
 804262a:	2302      	movs	r3, #2
 804262c:	76fb      	strb	r3, [r7, #27]
 804262e:	e060      	b.n	80426f2 <UART_SetConfig+0x2a6>
 8042630:	2304      	movs	r3, #4
 8042632:	76fb      	strb	r3, [r7, #27]
 8042634:	e05d      	b.n	80426f2 <UART_SetConfig+0x2a6>
 8042636:	2308      	movs	r3, #8
 8042638:	76fb      	strb	r3, [r7, #27]
 804263a:	e05a      	b.n	80426f2 <UART_SetConfig+0x2a6>
 804263c:	2310      	movs	r3, #16
 804263e:	76fb      	strb	r3, [r7, #27]
 8042640:	e057      	b.n	80426f2 <UART_SetConfig+0x2a6>
 8042642:	687b      	ldr	r3, [r7, #4]
 8042644:	681b      	ldr	r3, [r3, #0]
 8042646:	4a47      	ldr	r2, [pc, #284]	; (8042764 <UART_SetConfig+0x318>)
 8042648:	4293      	cmp	r3, r2
 804264a:	d125      	bne.n	8042698 <UART_SetConfig+0x24c>
 804264c:	4b41      	ldr	r3, [pc, #260]	; (8042754 <UART_SetConfig+0x308>)
 804264e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8042656:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 804265a:	d017      	beq.n	804268c <UART_SetConfig+0x240>
 804265c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8042660:	d817      	bhi.n	8042692 <UART_SetConfig+0x246>
 8042662:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8042666:	d00b      	beq.n	8042680 <UART_SetConfig+0x234>
 8042668:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 804266c:	d811      	bhi.n	8042692 <UART_SetConfig+0x246>
 804266e:	2b00      	cmp	r3, #0
 8042670:	d003      	beq.n	804267a <UART_SetConfig+0x22e>
 8042672:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8042676:	d006      	beq.n	8042686 <UART_SetConfig+0x23a>
 8042678:	e00b      	b.n	8042692 <UART_SetConfig+0x246>
 804267a:	2300      	movs	r3, #0
 804267c:	76fb      	strb	r3, [r7, #27]
 804267e:	e038      	b.n	80426f2 <UART_SetConfig+0x2a6>
 8042680:	2302      	movs	r3, #2
 8042682:	76fb      	strb	r3, [r7, #27]
 8042684:	e035      	b.n	80426f2 <UART_SetConfig+0x2a6>
 8042686:	2304      	movs	r3, #4
 8042688:	76fb      	strb	r3, [r7, #27]
 804268a:	e032      	b.n	80426f2 <UART_SetConfig+0x2a6>
 804268c:	2308      	movs	r3, #8
 804268e:	76fb      	strb	r3, [r7, #27]
 8042690:	e02f      	b.n	80426f2 <UART_SetConfig+0x2a6>
 8042692:	2310      	movs	r3, #16
 8042694:	76fb      	strb	r3, [r7, #27]
 8042696:	e02c      	b.n	80426f2 <UART_SetConfig+0x2a6>
 8042698:	687b      	ldr	r3, [r7, #4]
 804269a:	681b      	ldr	r3, [r3, #0]
 804269c:	4a2b      	ldr	r2, [pc, #172]	; (804274c <UART_SetConfig+0x300>)
 804269e:	4293      	cmp	r3, r2
 80426a0:	d125      	bne.n	80426ee <UART_SetConfig+0x2a2>
 80426a2:	4b2c      	ldr	r3, [pc, #176]	; (8042754 <UART_SetConfig+0x308>)
 80426a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80426a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80426ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80426b0:	d017      	beq.n	80426e2 <UART_SetConfig+0x296>
 80426b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80426b6:	d817      	bhi.n	80426e8 <UART_SetConfig+0x29c>
 80426b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80426bc:	d00b      	beq.n	80426d6 <UART_SetConfig+0x28a>
 80426be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80426c2:	d811      	bhi.n	80426e8 <UART_SetConfig+0x29c>
 80426c4:	2b00      	cmp	r3, #0
 80426c6:	d003      	beq.n	80426d0 <UART_SetConfig+0x284>
 80426c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80426cc:	d006      	beq.n	80426dc <UART_SetConfig+0x290>
 80426ce:	e00b      	b.n	80426e8 <UART_SetConfig+0x29c>
 80426d0:	2300      	movs	r3, #0
 80426d2:	76fb      	strb	r3, [r7, #27]
 80426d4:	e00d      	b.n	80426f2 <UART_SetConfig+0x2a6>
 80426d6:	2302      	movs	r3, #2
 80426d8:	76fb      	strb	r3, [r7, #27]
 80426da:	e00a      	b.n	80426f2 <UART_SetConfig+0x2a6>
 80426dc:	2304      	movs	r3, #4
 80426de:	76fb      	strb	r3, [r7, #27]
 80426e0:	e007      	b.n	80426f2 <UART_SetConfig+0x2a6>
 80426e2:	2308      	movs	r3, #8
 80426e4:	76fb      	strb	r3, [r7, #27]
 80426e6:	e004      	b.n	80426f2 <UART_SetConfig+0x2a6>
 80426e8:	2310      	movs	r3, #16
 80426ea:	76fb      	strb	r3, [r7, #27]
 80426ec:	e001      	b.n	80426f2 <UART_SetConfig+0x2a6>
 80426ee:	2310      	movs	r3, #16
 80426f0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80426f2:	687b      	ldr	r3, [r7, #4]
 80426f4:	681b      	ldr	r3, [r3, #0]
 80426f6:	4a15      	ldr	r2, [pc, #84]	; (804274c <UART_SetConfig+0x300>)
 80426f8:	4293      	cmp	r3, r2
 80426fa:	f040 80a3 	bne.w	8042844 <UART_SetConfig+0x3f8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80426fe:	7efb      	ldrb	r3, [r7, #27]
 8042700:	2b08      	cmp	r3, #8
 8042702:	d83b      	bhi.n	804277c <UART_SetConfig+0x330>
 8042704:	a201      	add	r2, pc, #4	; (adr r2, 804270c <UART_SetConfig+0x2c0>)
 8042706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804270a:	bf00      	nop
 804270c:	08042731 	.word	0x08042731
 8042710:	08042739 	.word	0x08042739
 8042714:	08042741 	.word	0x08042741
 8042718:	0804277d 	.word	0x0804277d
 804271c:	0804276d 	.word	0x0804276d
 8042720:	0804277d 	.word	0x0804277d
 8042724:	0804277d 	.word	0x0804277d
 8042728:	0804277d 	.word	0x0804277d
 804272c:	08042775 	.word	0x08042775
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8042730:	f7fe fe40 	bl	80413b4 <HAL_RCC_GetPCLK1Freq>
 8042734:	6178      	str	r0, [r7, #20]
        break;
 8042736:	e026      	b.n	8042786 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8042738:	f7fe fe50 	bl	80413dc <HAL_RCC_GetPCLK2Freq>
 804273c:	6178      	str	r0, [r7, #20]
        break;
 804273e:	e022      	b.n	8042786 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8042740:	4b09      	ldr	r3, [pc, #36]	; (8042768 <UART_SetConfig+0x31c>)
 8042742:	617b      	str	r3, [r7, #20]
        break;
 8042744:	e01f      	b.n	8042786 <UART_SetConfig+0x33a>
 8042746:	bf00      	nop
 8042748:	cfff69f3 	.word	0xcfff69f3
 804274c:	40008000 	.word	0x40008000
 8042750:	40013800 	.word	0x40013800
 8042754:	40021000 	.word	0x40021000
 8042758:	40004400 	.word	0x40004400
 804275c:	40004800 	.word	0x40004800
 8042760:	40004c00 	.word	0x40004c00
 8042764:	40005000 	.word	0x40005000
 8042768:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 804276c:	f7fe fd70 	bl	8041250 <HAL_RCC_GetSysClockFreq>
 8042770:	6178      	str	r0, [r7, #20]
        break;
 8042772:	e008      	b.n	8042786 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8042774:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8042778:	617b      	str	r3, [r7, #20]
        break;
 804277a:	e004      	b.n	8042786 <UART_SetConfig+0x33a>
      default:
        pclk = 0U;
 804277c:	2300      	movs	r3, #0
 804277e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8042780:	2301      	movs	r3, #1
 8042782:	76bb      	strb	r3, [r7, #26]
        break;
 8042784:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8042786:	697b      	ldr	r3, [r7, #20]
 8042788:	2b00      	cmp	r3, #0
 804278a:	f000 811b 	beq.w	80429c4 <UART_SetConfig+0x578>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 804278e:	687b      	ldr	r3, [r7, #4]
 8042790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042792:	4a96      	ldr	r2, [pc, #600]	; (80429ec <UART_SetConfig+0x5a0>)
 8042794:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8042798:	461a      	mov	r2, r3
 804279a:	697b      	ldr	r3, [r7, #20]
 804279c:	fbb3 f3f2 	udiv	r3, r3, r2
 80427a0:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80427a2:	687b      	ldr	r3, [r7, #4]
 80427a4:	685a      	ldr	r2, [r3, #4]
 80427a6:	4613      	mov	r3, r2
 80427a8:	005b      	lsls	r3, r3, #1
 80427aa:	4413      	add	r3, r2
 80427ac:	68ba      	ldr	r2, [r7, #8]
 80427ae:	429a      	cmp	r2, r3
 80427b0:	d305      	bcc.n	80427be <UART_SetConfig+0x372>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80427b2:	687b      	ldr	r3, [r7, #4]
 80427b4:	685b      	ldr	r3, [r3, #4]
 80427b6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80427b8:	68ba      	ldr	r2, [r7, #8]
 80427ba:	429a      	cmp	r2, r3
 80427bc:	d902      	bls.n	80427c4 <UART_SetConfig+0x378>
      {
        ret = HAL_ERROR;
 80427be:	2301      	movs	r3, #1
 80427c0:	76bb      	strb	r3, [r7, #26]
 80427c2:	e0ff      	b.n	80429c4 <UART_SetConfig+0x578>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80427c4:	697b      	ldr	r3, [r7, #20]
 80427c6:	4618      	mov	r0, r3
 80427c8:	f04f 0100 	mov.w	r1, #0
 80427cc:	687b      	ldr	r3, [r7, #4]
 80427ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80427d0:	4a86      	ldr	r2, [pc, #536]	; (80429ec <UART_SetConfig+0x5a0>)
 80427d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80427d6:	b29a      	uxth	r2, r3
 80427d8:	f04f 0300 	mov.w	r3, #0
 80427dc:	f7fd fd36 	bl	804024c <__aeabi_uldivmod>
 80427e0:	4602      	mov	r2, r0
 80427e2:	460b      	mov	r3, r1
 80427e4:	4610      	mov	r0, r2
 80427e6:	4619      	mov	r1, r3
 80427e8:	f04f 0200 	mov.w	r2, #0
 80427ec:	f04f 0300 	mov.w	r3, #0
 80427f0:	020b      	lsls	r3, r1, #8
 80427f2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80427f6:	0202      	lsls	r2, r0, #8
 80427f8:	6879      	ldr	r1, [r7, #4]
 80427fa:	6849      	ldr	r1, [r1, #4]
 80427fc:	0849      	lsrs	r1, r1, #1
 80427fe:	4608      	mov	r0, r1
 8042800:	f04f 0100 	mov.w	r1, #0
 8042804:	1814      	adds	r4, r2, r0
 8042806:	eb43 0501 	adc.w	r5, r3, r1
 804280a:	687b      	ldr	r3, [r7, #4]
 804280c:	685b      	ldr	r3, [r3, #4]
 804280e:	461a      	mov	r2, r3
 8042810:	f04f 0300 	mov.w	r3, #0
 8042814:	4620      	mov	r0, r4
 8042816:	4629      	mov	r1, r5
 8042818:	f7fd fd18 	bl	804024c <__aeabi_uldivmod>
 804281c:	4602      	mov	r2, r0
 804281e:	460b      	mov	r3, r1
 8042820:	4613      	mov	r3, r2
 8042822:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8042824:	693b      	ldr	r3, [r7, #16]
 8042826:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 804282a:	d308      	bcc.n	804283e <UART_SetConfig+0x3f2>
 804282c:	693b      	ldr	r3, [r7, #16]
 804282e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8042832:	d204      	bcs.n	804283e <UART_SetConfig+0x3f2>
        {
          huart->Instance->BRR = usartdiv;
 8042834:	687b      	ldr	r3, [r7, #4]
 8042836:	681b      	ldr	r3, [r3, #0]
 8042838:	693a      	ldr	r2, [r7, #16]
 804283a:	60da      	str	r2, [r3, #12]
 804283c:	e0c2      	b.n	80429c4 <UART_SetConfig+0x578>
        }
        else
        {
          ret = HAL_ERROR;
 804283e:	2301      	movs	r3, #1
 8042840:	76bb      	strb	r3, [r7, #26]
 8042842:	e0bf      	b.n	80429c4 <UART_SetConfig+0x578>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8042844:	687b      	ldr	r3, [r7, #4]
 8042846:	69db      	ldr	r3, [r3, #28]
 8042848:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 804284c:	d165      	bne.n	804291a <UART_SetConfig+0x4ce>
  {
    switch (clocksource)
 804284e:	7efb      	ldrb	r3, [r7, #27]
 8042850:	2b08      	cmp	r3, #8
 8042852:	d828      	bhi.n	80428a6 <UART_SetConfig+0x45a>
 8042854:	a201      	add	r2, pc, #4	; (adr r2, 804285c <UART_SetConfig+0x410>)
 8042856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804285a:	bf00      	nop
 804285c:	08042881 	.word	0x08042881
 8042860:	08042889 	.word	0x08042889
 8042864:	08042891 	.word	0x08042891
 8042868:	080428a7 	.word	0x080428a7
 804286c:	08042897 	.word	0x08042897
 8042870:	080428a7 	.word	0x080428a7
 8042874:	080428a7 	.word	0x080428a7
 8042878:	080428a7 	.word	0x080428a7
 804287c:	0804289f 	.word	0x0804289f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8042880:	f7fe fd98 	bl	80413b4 <HAL_RCC_GetPCLK1Freq>
 8042884:	6178      	str	r0, [r7, #20]
        break;
 8042886:	e013      	b.n	80428b0 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8042888:	f7fe fda8 	bl	80413dc <HAL_RCC_GetPCLK2Freq>
 804288c:	6178      	str	r0, [r7, #20]
        break;
 804288e:	e00f      	b.n	80428b0 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8042890:	4b57      	ldr	r3, [pc, #348]	; (80429f0 <UART_SetConfig+0x5a4>)
 8042892:	617b      	str	r3, [r7, #20]
        break;
 8042894:	e00c      	b.n	80428b0 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8042896:	f7fe fcdb 	bl	8041250 <HAL_RCC_GetSysClockFreq>
 804289a:	6178      	str	r0, [r7, #20]
        break;
 804289c:	e008      	b.n	80428b0 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 804289e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80428a2:	617b      	str	r3, [r7, #20]
        break;
 80428a4:	e004      	b.n	80428b0 <UART_SetConfig+0x464>
      default:
        pclk = 0U;
 80428a6:	2300      	movs	r3, #0
 80428a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80428aa:	2301      	movs	r3, #1
 80428ac:	76bb      	strb	r3, [r7, #26]
        break;
 80428ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80428b0:	697b      	ldr	r3, [r7, #20]
 80428b2:	2b00      	cmp	r3, #0
 80428b4:	f000 8086 	beq.w	80429c4 <UART_SetConfig+0x578>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80428b8:	687b      	ldr	r3, [r7, #4]
 80428ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80428bc:	4a4b      	ldr	r2, [pc, #300]	; (80429ec <UART_SetConfig+0x5a0>)
 80428be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80428c2:	461a      	mov	r2, r3
 80428c4:	697b      	ldr	r3, [r7, #20]
 80428c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80428ca:	005a      	lsls	r2, r3, #1
 80428cc:	687b      	ldr	r3, [r7, #4]
 80428ce:	685b      	ldr	r3, [r3, #4]
 80428d0:	085b      	lsrs	r3, r3, #1
 80428d2:	441a      	add	r2, r3
 80428d4:	687b      	ldr	r3, [r7, #4]
 80428d6:	685b      	ldr	r3, [r3, #4]
 80428d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80428dc:	b29b      	uxth	r3, r3
 80428de:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80428e0:	693b      	ldr	r3, [r7, #16]
 80428e2:	2b0f      	cmp	r3, #15
 80428e4:	d916      	bls.n	8042914 <UART_SetConfig+0x4c8>
 80428e6:	693b      	ldr	r3, [r7, #16]
 80428e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80428ec:	d212      	bcs.n	8042914 <UART_SetConfig+0x4c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80428ee:	693b      	ldr	r3, [r7, #16]
 80428f0:	b29b      	uxth	r3, r3
 80428f2:	f023 030f 	bic.w	r3, r3, #15
 80428f6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80428f8:	693b      	ldr	r3, [r7, #16]
 80428fa:	085b      	lsrs	r3, r3, #1
 80428fc:	b29b      	uxth	r3, r3
 80428fe:	f003 0307 	and.w	r3, r3, #7
 8042902:	b29a      	uxth	r2, r3
 8042904:	89fb      	ldrh	r3, [r7, #14]
 8042906:	4313      	orrs	r3, r2
 8042908:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 804290a:	687b      	ldr	r3, [r7, #4]
 804290c:	681b      	ldr	r3, [r3, #0]
 804290e:	89fa      	ldrh	r2, [r7, #14]
 8042910:	60da      	str	r2, [r3, #12]
 8042912:	e057      	b.n	80429c4 <UART_SetConfig+0x578>
      }
      else
      {
        ret = HAL_ERROR;
 8042914:	2301      	movs	r3, #1
 8042916:	76bb      	strb	r3, [r7, #26]
 8042918:	e054      	b.n	80429c4 <UART_SetConfig+0x578>
      }
    }
  }
  else
  {
    switch (clocksource)
 804291a:	7efb      	ldrb	r3, [r7, #27]
 804291c:	2b08      	cmp	r3, #8
 804291e:	d828      	bhi.n	8042972 <UART_SetConfig+0x526>
 8042920:	a201      	add	r2, pc, #4	; (adr r2, 8042928 <UART_SetConfig+0x4dc>)
 8042922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8042926:	bf00      	nop
 8042928:	0804294d 	.word	0x0804294d
 804292c:	08042955 	.word	0x08042955
 8042930:	0804295d 	.word	0x0804295d
 8042934:	08042973 	.word	0x08042973
 8042938:	08042963 	.word	0x08042963
 804293c:	08042973 	.word	0x08042973
 8042940:	08042973 	.word	0x08042973
 8042944:	08042973 	.word	0x08042973
 8042948:	0804296b 	.word	0x0804296b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 804294c:	f7fe fd32 	bl	80413b4 <HAL_RCC_GetPCLK1Freq>
 8042950:	6178      	str	r0, [r7, #20]
        break;
 8042952:	e013      	b.n	804297c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8042954:	f7fe fd42 	bl	80413dc <HAL_RCC_GetPCLK2Freq>
 8042958:	6178      	str	r0, [r7, #20]
        break;
 804295a:	e00f      	b.n	804297c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 804295c:	4b24      	ldr	r3, [pc, #144]	; (80429f0 <UART_SetConfig+0x5a4>)
 804295e:	617b      	str	r3, [r7, #20]
        break;
 8042960:	e00c      	b.n	804297c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8042962:	f7fe fc75 	bl	8041250 <HAL_RCC_GetSysClockFreq>
 8042966:	6178      	str	r0, [r7, #20]
        break;
 8042968:	e008      	b.n	804297c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 804296a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 804296e:	617b      	str	r3, [r7, #20]
        break;
 8042970:	e004      	b.n	804297c <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8042972:	2300      	movs	r3, #0
 8042974:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8042976:	2301      	movs	r3, #1
 8042978:	76bb      	strb	r3, [r7, #26]
        break;
 804297a:	bf00      	nop
    }

    if (pclk != 0U)
 804297c:	697b      	ldr	r3, [r7, #20]
 804297e:	2b00      	cmp	r3, #0
 8042980:	d020      	beq.n	80429c4 <UART_SetConfig+0x578>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8042982:	687b      	ldr	r3, [r7, #4]
 8042984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042986:	4a19      	ldr	r2, [pc, #100]	; (80429ec <UART_SetConfig+0x5a0>)
 8042988:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 804298c:	461a      	mov	r2, r3
 804298e:	697b      	ldr	r3, [r7, #20]
 8042990:	fbb3 f2f2 	udiv	r2, r3, r2
 8042994:	687b      	ldr	r3, [r7, #4]
 8042996:	685b      	ldr	r3, [r3, #4]
 8042998:	085b      	lsrs	r3, r3, #1
 804299a:	441a      	add	r2, r3
 804299c:	687b      	ldr	r3, [r7, #4]
 804299e:	685b      	ldr	r3, [r3, #4]
 80429a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80429a4:	b29b      	uxth	r3, r3
 80429a6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80429a8:	693b      	ldr	r3, [r7, #16]
 80429aa:	2b0f      	cmp	r3, #15
 80429ac:	d908      	bls.n	80429c0 <UART_SetConfig+0x574>
 80429ae:	693b      	ldr	r3, [r7, #16]
 80429b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80429b4:	d204      	bcs.n	80429c0 <UART_SetConfig+0x574>
      {
        huart->Instance->BRR = usartdiv;
 80429b6:	687b      	ldr	r3, [r7, #4]
 80429b8:	681b      	ldr	r3, [r3, #0]
 80429ba:	693a      	ldr	r2, [r7, #16]
 80429bc:	60da      	str	r2, [r3, #12]
 80429be:	e001      	b.n	80429c4 <UART_SetConfig+0x578>
      }
      else
      {
        ret = HAL_ERROR;
 80429c0:	2301      	movs	r3, #1
 80429c2:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80429c4:	687b      	ldr	r3, [r7, #4]
 80429c6:	2201      	movs	r2, #1
 80429c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80429cc:	687b      	ldr	r3, [r7, #4]
 80429ce:	2201      	movs	r2, #1
 80429d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80429d4:	687b      	ldr	r3, [r7, #4]
 80429d6:	2200      	movs	r2, #0
 80429d8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80429da:	687b      	ldr	r3, [r7, #4]
 80429dc:	2200      	movs	r2, #0
 80429de:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80429e0:	7ebb      	ldrb	r3, [r7, #26]
}
 80429e2:	4618      	mov	r0, r3
 80429e4:	3720      	adds	r7, #32
 80429e6:	46bd      	mov	sp, r7
 80429e8:	bdb0      	pop	{r4, r5, r7, pc}
 80429ea:	bf00      	nop
 80429ec:	080433c0 	.word	0x080433c0
 80429f0:	00f42400 	.word	0x00f42400

080429f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80429f4:	b480      	push	{r7}
 80429f6:	b083      	sub	sp, #12
 80429f8:	af00      	add	r7, sp, #0
 80429fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80429fc:	687b      	ldr	r3, [r7, #4]
 80429fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042a00:	f003 0301 	and.w	r3, r3, #1
 8042a04:	2b00      	cmp	r3, #0
 8042a06:	d00a      	beq.n	8042a1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8042a08:	687b      	ldr	r3, [r7, #4]
 8042a0a:	681b      	ldr	r3, [r3, #0]
 8042a0c:	685b      	ldr	r3, [r3, #4]
 8042a0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8042a12:	687b      	ldr	r3, [r7, #4]
 8042a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8042a16:	687b      	ldr	r3, [r7, #4]
 8042a18:	681b      	ldr	r3, [r3, #0]
 8042a1a:	430a      	orrs	r2, r1
 8042a1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8042a1e:	687b      	ldr	r3, [r7, #4]
 8042a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042a22:	f003 0302 	and.w	r3, r3, #2
 8042a26:	2b00      	cmp	r3, #0
 8042a28:	d00a      	beq.n	8042a40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8042a2a:	687b      	ldr	r3, [r7, #4]
 8042a2c:	681b      	ldr	r3, [r3, #0]
 8042a2e:	685b      	ldr	r3, [r3, #4]
 8042a30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8042a34:	687b      	ldr	r3, [r7, #4]
 8042a36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8042a38:	687b      	ldr	r3, [r7, #4]
 8042a3a:	681b      	ldr	r3, [r3, #0]
 8042a3c:	430a      	orrs	r2, r1
 8042a3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8042a40:	687b      	ldr	r3, [r7, #4]
 8042a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042a44:	f003 0304 	and.w	r3, r3, #4
 8042a48:	2b00      	cmp	r3, #0
 8042a4a:	d00a      	beq.n	8042a62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8042a4c:	687b      	ldr	r3, [r7, #4]
 8042a4e:	681b      	ldr	r3, [r3, #0]
 8042a50:	685b      	ldr	r3, [r3, #4]
 8042a52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8042a56:	687b      	ldr	r3, [r7, #4]
 8042a58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8042a5a:	687b      	ldr	r3, [r7, #4]
 8042a5c:	681b      	ldr	r3, [r3, #0]
 8042a5e:	430a      	orrs	r2, r1
 8042a60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8042a62:	687b      	ldr	r3, [r7, #4]
 8042a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042a66:	f003 0308 	and.w	r3, r3, #8
 8042a6a:	2b00      	cmp	r3, #0
 8042a6c:	d00a      	beq.n	8042a84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8042a6e:	687b      	ldr	r3, [r7, #4]
 8042a70:	681b      	ldr	r3, [r3, #0]
 8042a72:	685b      	ldr	r3, [r3, #4]
 8042a74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8042a78:	687b      	ldr	r3, [r7, #4]
 8042a7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8042a7c:	687b      	ldr	r3, [r7, #4]
 8042a7e:	681b      	ldr	r3, [r3, #0]
 8042a80:	430a      	orrs	r2, r1
 8042a82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8042a84:	687b      	ldr	r3, [r7, #4]
 8042a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042a88:	f003 0310 	and.w	r3, r3, #16
 8042a8c:	2b00      	cmp	r3, #0
 8042a8e:	d00a      	beq.n	8042aa6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8042a90:	687b      	ldr	r3, [r7, #4]
 8042a92:	681b      	ldr	r3, [r3, #0]
 8042a94:	689b      	ldr	r3, [r3, #8]
 8042a96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8042a9a:	687b      	ldr	r3, [r7, #4]
 8042a9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8042a9e:	687b      	ldr	r3, [r7, #4]
 8042aa0:	681b      	ldr	r3, [r3, #0]
 8042aa2:	430a      	orrs	r2, r1
 8042aa4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8042aa6:	687b      	ldr	r3, [r7, #4]
 8042aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042aaa:	f003 0320 	and.w	r3, r3, #32
 8042aae:	2b00      	cmp	r3, #0
 8042ab0:	d00a      	beq.n	8042ac8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8042ab2:	687b      	ldr	r3, [r7, #4]
 8042ab4:	681b      	ldr	r3, [r3, #0]
 8042ab6:	689b      	ldr	r3, [r3, #8]
 8042ab8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8042abc:	687b      	ldr	r3, [r7, #4]
 8042abe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8042ac0:	687b      	ldr	r3, [r7, #4]
 8042ac2:	681b      	ldr	r3, [r3, #0]
 8042ac4:	430a      	orrs	r2, r1
 8042ac6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8042ac8:	687b      	ldr	r3, [r7, #4]
 8042aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8042ad0:	2b00      	cmp	r3, #0
 8042ad2:	d01a      	beq.n	8042b0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8042ad4:	687b      	ldr	r3, [r7, #4]
 8042ad6:	681b      	ldr	r3, [r3, #0]
 8042ad8:	685b      	ldr	r3, [r3, #4]
 8042ada:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8042ade:	687b      	ldr	r3, [r7, #4]
 8042ae0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8042ae2:	687b      	ldr	r3, [r7, #4]
 8042ae4:	681b      	ldr	r3, [r3, #0]
 8042ae6:	430a      	orrs	r2, r1
 8042ae8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8042aea:	687b      	ldr	r3, [r7, #4]
 8042aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8042aee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8042af2:	d10a      	bne.n	8042b0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8042af4:	687b      	ldr	r3, [r7, #4]
 8042af6:	681b      	ldr	r3, [r3, #0]
 8042af8:	685b      	ldr	r3, [r3, #4]
 8042afa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8042afe:	687b      	ldr	r3, [r7, #4]
 8042b00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8042b02:	687b      	ldr	r3, [r7, #4]
 8042b04:	681b      	ldr	r3, [r3, #0]
 8042b06:	430a      	orrs	r2, r1
 8042b08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8042b0a:	687b      	ldr	r3, [r7, #4]
 8042b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8042b12:	2b00      	cmp	r3, #0
 8042b14:	d00a      	beq.n	8042b2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8042b16:	687b      	ldr	r3, [r7, #4]
 8042b18:	681b      	ldr	r3, [r3, #0]
 8042b1a:	685b      	ldr	r3, [r3, #4]
 8042b1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8042b20:	687b      	ldr	r3, [r7, #4]
 8042b22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8042b24:	687b      	ldr	r3, [r7, #4]
 8042b26:	681b      	ldr	r3, [r3, #0]
 8042b28:	430a      	orrs	r2, r1
 8042b2a:	605a      	str	r2, [r3, #4]
  }
}
 8042b2c:	bf00      	nop
 8042b2e:	370c      	adds	r7, #12
 8042b30:	46bd      	mov	sp, r7
 8042b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042b36:	4770      	bx	lr

08042b38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8042b38:	b580      	push	{r7, lr}
 8042b3a:	b086      	sub	sp, #24
 8042b3c:	af02      	add	r7, sp, #8
 8042b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8042b40:	687b      	ldr	r3, [r7, #4]
 8042b42:	2200      	movs	r2, #0
 8042b44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8042b48:	f7fe f808 	bl	8040b5c <HAL_GetTick>
 8042b4c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8042b4e:	687b      	ldr	r3, [r7, #4]
 8042b50:	681b      	ldr	r3, [r3, #0]
 8042b52:	681b      	ldr	r3, [r3, #0]
 8042b54:	f003 0308 	and.w	r3, r3, #8
 8042b58:	2b08      	cmp	r3, #8
 8042b5a:	d10e      	bne.n	8042b7a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8042b5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8042b60:	9300      	str	r3, [sp, #0]
 8042b62:	68fb      	ldr	r3, [r7, #12]
 8042b64:	2200      	movs	r2, #0
 8042b66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8042b6a:	6878      	ldr	r0, [r7, #4]
 8042b6c:	f000 f82f 	bl	8042bce <UART_WaitOnFlagUntilTimeout>
 8042b70:	4603      	mov	r3, r0
 8042b72:	2b00      	cmp	r3, #0
 8042b74:	d001      	beq.n	8042b7a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8042b76:	2303      	movs	r3, #3
 8042b78:	e025      	b.n	8042bc6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8042b7a:	687b      	ldr	r3, [r7, #4]
 8042b7c:	681b      	ldr	r3, [r3, #0]
 8042b7e:	681b      	ldr	r3, [r3, #0]
 8042b80:	f003 0304 	and.w	r3, r3, #4
 8042b84:	2b04      	cmp	r3, #4
 8042b86:	d10e      	bne.n	8042ba6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8042b88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8042b8c:	9300      	str	r3, [sp, #0]
 8042b8e:	68fb      	ldr	r3, [r7, #12]
 8042b90:	2200      	movs	r2, #0
 8042b92:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8042b96:	6878      	ldr	r0, [r7, #4]
 8042b98:	f000 f819 	bl	8042bce <UART_WaitOnFlagUntilTimeout>
 8042b9c:	4603      	mov	r3, r0
 8042b9e:	2b00      	cmp	r3, #0
 8042ba0:	d001      	beq.n	8042ba6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8042ba2:	2303      	movs	r3, #3
 8042ba4:	e00f      	b.n	8042bc6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8042ba6:	687b      	ldr	r3, [r7, #4]
 8042ba8:	2220      	movs	r2, #32
 8042baa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8042bae:	687b      	ldr	r3, [r7, #4]
 8042bb0:	2220      	movs	r2, #32
 8042bb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8042bb6:	687b      	ldr	r3, [r7, #4]
 8042bb8:	2200      	movs	r2, #0
 8042bba:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8042bbc:	687b      	ldr	r3, [r7, #4]
 8042bbe:	2200      	movs	r2, #0
 8042bc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8042bc4:	2300      	movs	r3, #0
}
 8042bc6:	4618      	mov	r0, r3
 8042bc8:	3710      	adds	r7, #16
 8042bca:	46bd      	mov	sp, r7
 8042bcc:	bd80      	pop	{r7, pc}

08042bce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8042bce:	b580      	push	{r7, lr}
 8042bd0:	b084      	sub	sp, #16
 8042bd2:	af00      	add	r7, sp, #0
 8042bd4:	60f8      	str	r0, [r7, #12]
 8042bd6:	60b9      	str	r1, [r7, #8]
 8042bd8:	603b      	str	r3, [r7, #0]
 8042bda:	4613      	mov	r3, r2
 8042bdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8042bde:	e062      	b.n	8042ca6 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8042be0:	69bb      	ldr	r3, [r7, #24]
 8042be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8042be6:	d05e      	beq.n	8042ca6 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8042be8:	f7fd ffb8 	bl	8040b5c <HAL_GetTick>
 8042bec:	4602      	mov	r2, r0
 8042bee:	683b      	ldr	r3, [r7, #0]
 8042bf0:	1ad3      	subs	r3, r2, r3
 8042bf2:	69ba      	ldr	r2, [r7, #24]
 8042bf4:	429a      	cmp	r2, r3
 8042bf6:	d302      	bcc.n	8042bfe <UART_WaitOnFlagUntilTimeout+0x30>
 8042bf8:	69bb      	ldr	r3, [r7, #24]
 8042bfa:	2b00      	cmp	r3, #0
 8042bfc:	d11d      	bne.n	8042c3a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8042bfe:	68fb      	ldr	r3, [r7, #12]
 8042c00:	681b      	ldr	r3, [r3, #0]
 8042c02:	681a      	ldr	r2, [r3, #0]
 8042c04:	68fb      	ldr	r3, [r7, #12]
 8042c06:	681b      	ldr	r3, [r3, #0]
 8042c08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8042c0c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8042c0e:	68fb      	ldr	r3, [r7, #12]
 8042c10:	681b      	ldr	r3, [r3, #0]
 8042c12:	689a      	ldr	r2, [r3, #8]
 8042c14:	68fb      	ldr	r3, [r7, #12]
 8042c16:	681b      	ldr	r3, [r3, #0]
 8042c18:	f022 0201 	bic.w	r2, r2, #1
 8042c1c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8042c1e:	68fb      	ldr	r3, [r7, #12]
 8042c20:	2220      	movs	r2, #32
 8042c22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8042c26:	68fb      	ldr	r3, [r7, #12]
 8042c28:	2220      	movs	r2, #32
 8042c2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8042c2e:	68fb      	ldr	r3, [r7, #12]
 8042c30:	2200      	movs	r2, #0
 8042c32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8042c36:	2303      	movs	r3, #3
 8042c38:	e045      	b.n	8042cc6 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8042c3a:	68fb      	ldr	r3, [r7, #12]
 8042c3c:	681b      	ldr	r3, [r3, #0]
 8042c3e:	681b      	ldr	r3, [r3, #0]
 8042c40:	f003 0304 	and.w	r3, r3, #4
 8042c44:	2b00      	cmp	r3, #0
 8042c46:	d02e      	beq.n	8042ca6 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8042c48:	68fb      	ldr	r3, [r7, #12]
 8042c4a:	681b      	ldr	r3, [r3, #0]
 8042c4c:	69db      	ldr	r3, [r3, #28]
 8042c4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8042c52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8042c56:	d126      	bne.n	8042ca6 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8042c58:	68fb      	ldr	r3, [r7, #12]
 8042c5a:	681b      	ldr	r3, [r3, #0]
 8042c5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8042c60:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8042c62:	68fb      	ldr	r3, [r7, #12]
 8042c64:	681b      	ldr	r3, [r3, #0]
 8042c66:	681a      	ldr	r2, [r3, #0]
 8042c68:	68fb      	ldr	r3, [r7, #12]
 8042c6a:	681b      	ldr	r3, [r3, #0]
 8042c6c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8042c70:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8042c72:	68fb      	ldr	r3, [r7, #12]
 8042c74:	681b      	ldr	r3, [r3, #0]
 8042c76:	689a      	ldr	r2, [r3, #8]
 8042c78:	68fb      	ldr	r3, [r7, #12]
 8042c7a:	681b      	ldr	r3, [r3, #0]
 8042c7c:	f022 0201 	bic.w	r2, r2, #1
 8042c80:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8042c82:	68fb      	ldr	r3, [r7, #12]
 8042c84:	2220      	movs	r2, #32
 8042c86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8042c8a:	68fb      	ldr	r3, [r7, #12]
 8042c8c:	2220      	movs	r2, #32
 8042c8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8042c92:	68fb      	ldr	r3, [r7, #12]
 8042c94:	2220      	movs	r2, #32
 8042c96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8042c9a:	68fb      	ldr	r3, [r7, #12]
 8042c9c:	2200      	movs	r2, #0
 8042c9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8042ca2:	2303      	movs	r3, #3
 8042ca4:	e00f      	b.n	8042cc6 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8042ca6:	68fb      	ldr	r3, [r7, #12]
 8042ca8:	681b      	ldr	r3, [r3, #0]
 8042caa:	69da      	ldr	r2, [r3, #28]
 8042cac:	68bb      	ldr	r3, [r7, #8]
 8042cae:	4013      	ands	r3, r2
 8042cb0:	68ba      	ldr	r2, [r7, #8]
 8042cb2:	429a      	cmp	r2, r3
 8042cb4:	bf0c      	ite	eq
 8042cb6:	2301      	moveq	r3, #1
 8042cb8:	2300      	movne	r3, #0
 8042cba:	b2db      	uxtb	r3, r3
 8042cbc:	461a      	mov	r2, r3
 8042cbe:	79fb      	ldrb	r3, [r7, #7]
 8042cc0:	429a      	cmp	r2, r3
 8042cc2:	d08d      	beq.n	8042be0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8042cc4:	2300      	movs	r3, #0
}
 8042cc6:	4618      	mov	r0, r3
 8042cc8:	3710      	adds	r7, #16
 8042cca:	46bd      	mov	sp, r7
 8042ccc:	bd80      	pop	{r7, pc}

08042cce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8042cce:	b480      	push	{r7}
 8042cd0:	b083      	sub	sp, #12
 8042cd2:	af00      	add	r7, sp, #0
 8042cd4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8042cd6:	687b      	ldr	r3, [r7, #4]
 8042cd8:	681b      	ldr	r3, [r3, #0]
 8042cda:	681a      	ldr	r2, [r3, #0]
 8042cdc:	687b      	ldr	r3, [r7, #4]
 8042cde:	681b      	ldr	r3, [r3, #0]
 8042ce0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8042ce4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8042ce6:	687b      	ldr	r3, [r7, #4]
 8042ce8:	681b      	ldr	r3, [r3, #0]
 8042cea:	689b      	ldr	r3, [r3, #8]
 8042cec:	687a      	ldr	r2, [r7, #4]
 8042cee:	6812      	ldr	r2, [r2, #0]
 8042cf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8042cf4:	f023 0301 	bic.w	r3, r3, #1
 8042cf8:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8042cfa:	687b      	ldr	r3, [r7, #4]
 8042cfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8042cfe:	2b01      	cmp	r3, #1
 8042d00:	d107      	bne.n	8042d12 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8042d02:	687b      	ldr	r3, [r7, #4]
 8042d04:	681b      	ldr	r3, [r3, #0]
 8042d06:	681a      	ldr	r2, [r3, #0]
 8042d08:	687b      	ldr	r3, [r7, #4]
 8042d0a:	681b      	ldr	r3, [r3, #0]
 8042d0c:	f022 0210 	bic.w	r2, r2, #16
 8042d10:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8042d12:	687b      	ldr	r3, [r7, #4]
 8042d14:	2220      	movs	r2, #32
 8042d16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8042d1a:	687b      	ldr	r3, [r7, #4]
 8042d1c:	2200      	movs	r2, #0
 8042d1e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8042d20:	687b      	ldr	r3, [r7, #4]
 8042d22:	2200      	movs	r2, #0
 8042d24:	671a      	str	r2, [r3, #112]	; 0x70
}
 8042d26:	bf00      	nop
 8042d28:	370c      	adds	r7, #12
 8042d2a:	46bd      	mov	sp, r7
 8042d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042d30:	4770      	bx	lr

08042d32 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8042d32:	b580      	push	{r7, lr}
 8042d34:	b084      	sub	sp, #16
 8042d36:	af00      	add	r7, sp, #0
 8042d38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8042d3a:	687b      	ldr	r3, [r7, #4]
 8042d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042d3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8042d40:	68fb      	ldr	r3, [r7, #12]
 8042d42:	2200      	movs	r2, #0
 8042d44:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8042d48:	68fb      	ldr	r3, [r7, #12]
 8042d4a:	2200      	movs	r2, #0
 8042d4c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8042d50:	68f8      	ldr	r0, [r7, #12]
 8042d52:	f7ff fb4f 	bl	80423f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8042d56:	bf00      	nop
 8042d58:	3710      	adds	r7, #16
 8042d5a:	46bd      	mov	sp, r7
 8042d5c:	bd80      	pop	{r7, pc}

08042d5e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8042d5e:	b480      	push	{r7}
 8042d60:	b083      	sub	sp, #12
 8042d62:	af00      	add	r7, sp, #0
 8042d64:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8042d66:	687b      	ldr	r3, [r7, #4]
 8042d68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8042d6c:	2b21      	cmp	r3, #33	; 0x21
 8042d6e:	d12a      	bne.n	8042dc6 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8042d70:	687b      	ldr	r3, [r7, #4]
 8042d72:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8042d76:	b29b      	uxth	r3, r3
 8042d78:	2b00      	cmp	r3, #0
 8042d7a:	d110      	bne.n	8042d9e <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8042d7c:	687b      	ldr	r3, [r7, #4]
 8042d7e:	681b      	ldr	r3, [r3, #0]
 8042d80:	681a      	ldr	r2, [r3, #0]
 8042d82:	687b      	ldr	r3, [r7, #4]
 8042d84:	681b      	ldr	r3, [r3, #0]
 8042d86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8042d8a:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8042d8c:	687b      	ldr	r3, [r7, #4]
 8042d8e:	681b      	ldr	r3, [r3, #0]
 8042d90:	681a      	ldr	r2, [r3, #0]
 8042d92:	687b      	ldr	r3, [r7, #4]
 8042d94:	681b      	ldr	r3, [r3, #0]
 8042d96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8042d9a:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8042d9c:	e013      	b.n	8042dc6 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8042d9e:	687b      	ldr	r3, [r7, #4]
 8042da0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8042da2:	781a      	ldrb	r2, [r3, #0]
 8042da4:	687b      	ldr	r3, [r7, #4]
 8042da6:	681b      	ldr	r3, [r3, #0]
 8042da8:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8042daa:	687b      	ldr	r3, [r7, #4]
 8042dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8042dae:	1c5a      	adds	r2, r3, #1
 8042db0:	687b      	ldr	r3, [r7, #4]
 8042db2:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8042db4:	687b      	ldr	r3, [r7, #4]
 8042db6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8042dba:	b29b      	uxth	r3, r3
 8042dbc:	3b01      	subs	r3, #1
 8042dbe:	b29a      	uxth	r2, r3
 8042dc0:	687b      	ldr	r3, [r7, #4]
 8042dc2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8042dc6:	bf00      	nop
 8042dc8:	370c      	adds	r7, #12
 8042dca:	46bd      	mov	sp, r7
 8042dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042dd0:	4770      	bx	lr

08042dd2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8042dd2:	b480      	push	{r7}
 8042dd4:	b085      	sub	sp, #20
 8042dd6:	af00      	add	r7, sp, #0
 8042dd8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8042dda:	687b      	ldr	r3, [r7, #4]
 8042ddc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8042de0:	2b21      	cmp	r3, #33	; 0x21
 8042de2:	d12f      	bne.n	8042e44 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 8042de4:	687b      	ldr	r3, [r7, #4]
 8042de6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8042dea:	b29b      	uxth	r3, r3
 8042dec:	2b00      	cmp	r3, #0
 8042dee:	d110      	bne.n	8042e12 <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8042df0:	687b      	ldr	r3, [r7, #4]
 8042df2:	681b      	ldr	r3, [r3, #0]
 8042df4:	681a      	ldr	r2, [r3, #0]
 8042df6:	687b      	ldr	r3, [r7, #4]
 8042df8:	681b      	ldr	r3, [r3, #0]
 8042dfa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8042dfe:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8042e00:	687b      	ldr	r3, [r7, #4]
 8042e02:	681b      	ldr	r3, [r3, #0]
 8042e04:	681a      	ldr	r2, [r3, #0]
 8042e06:	687b      	ldr	r3, [r7, #4]
 8042e08:	681b      	ldr	r3, [r3, #0]
 8042e0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8042e0e:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8042e10:	e018      	b.n	8042e44 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8042e12:	687b      	ldr	r3, [r7, #4]
 8042e14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8042e16:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8042e18:	68fb      	ldr	r3, [r7, #12]
 8042e1a:	881b      	ldrh	r3, [r3, #0]
 8042e1c:	461a      	mov	r2, r3
 8042e1e:	687b      	ldr	r3, [r7, #4]
 8042e20:	681b      	ldr	r3, [r3, #0]
 8042e22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8042e26:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8042e28:	687b      	ldr	r3, [r7, #4]
 8042e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8042e2c:	1c9a      	adds	r2, r3, #2
 8042e2e:	687b      	ldr	r3, [r7, #4]
 8042e30:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8042e32:	687b      	ldr	r3, [r7, #4]
 8042e34:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8042e38:	b29b      	uxth	r3, r3
 8042e3a:	3b01      	subs	r3, #1
 8042e3c:	b29a      	uxth	r2, r3
 8042e3e:	687b      	ldr	r3, [r7, #4]
 8042e40:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8042e44:	bf00      	nop
 8042e46:	3714      	adds	r7, #20
 8042e48:	46bd      	mov	sp, r7
 8042e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042e4e:	4770      	bx	lr

08042e50 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8042e50:	b480      	push	{r7}
 8042e52:	b085      	sub	sp, #20
 8042e54:	af00      	add	r7, sp, #0
 8042e56:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8042e58:	687b      	ldr	r3, [r7, #4]
 8042e5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8042e5e:	2b21      	cmp	r3, #33	; 0x21
 8042e60:	d13d      	bne.n	8042ede <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8042e62:	687b      	ldr	r3, [r7, #4]
 8042e64:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8042e68:	81fb      	strh	r3, [r7, #14]
 8042e6a:	e035      	b.n	8042ed8 <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 8042e6c:	687b      	ldr	r3, [r7, #4]
 8042e6e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8042e72:	b29b      	uxth	r3, r3
 8042e74:	2b00      	cmp	r3, #0
 8042e76:	d111      	bne.n	8042e9c <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8042e78:	687b      	ldr	r3, [r7, #4]
 8042e7a:	681b      	ldr	r3, [r3, #0]
 8042e7c:	689a      	ldr	r2, [r3, #8]
 8042e7e:	687b      	ldr	r3, [r7, #4]
 8042e80:	681b      	ldr	r3, [r3, #0]
 8042e82:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8042e86:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8042e88:	687b      	ldr	r3, [r7, #4]
 8042e8a:	681b      	ldr	r3, [r3, #0]
 8042e8c:	681a      	ldr	r2, [r3, #0]
 8042e8e:	687b      	ldr	r3, [r7, #4]
 8042e90:	681b      	ldr	r3, [r3, #0]
 8042e92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8042e96:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8042e98:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8042e9a:	e020      	b.n	8042ede <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8042e9c:	687b      	ldr	r3, [r7, #4]
 8042e9e:	681b      	ldr	r3, [r3, #0]
 8042ea0:	69db      	ldr	r3, [r3, #28]
 8042ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8042ea6:	2b00      	cmp	r3, #0
 8042ea8:	d013      	beq.n	8042ed2 <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8042eaa:	687b      	ldr	r3, [r7, #4]
 8042eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8042eae:	781a      	ldrb	r2, [r3, #0]
 8042eb0:	687b      	ldr	r3, [r7, #4]
 8042eb2:	681b      	ldr	r3, [r3, #0]
 8042eb4:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8042eb6:	687b      	ldr	r3, [r7, #4]
 8042eb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8042eba:	1c5a      	adds	r2, r3, #1
 8042ebc:	687b      	ldr	r3, [r7, #4]
 8042ebe:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8042ec0:	687b      	ldr	r3, [r7, #4]
 8042ec2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8042ec6:	b29b      	uxth	r3, r3
 8042ec8:	3b01      	subs	r3, #1
 8042eca:	b29a      	uxth	r2, r3
 8042ecc:	687b      	ldr	r3, [r7, #4]
 8042ece:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8042ed2:	89fb      	ldrh	r3, [r7, #14]
 8042ed4:	3b01      	subs	r3, #1
 8042ed6:	81fb      	strh	r3, [r7, #14]
 8042ed8:	89fb      	ldrh	r3, [r7, #14]
 8042eda:	2b00      	cmp	r3, #0
 8042edc:	d1c6      	bne.n	8042e6c <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 8042ede:	bf00      	nop
 8042ee0:	3714      	adds	r7, #20
 8042ee2:	46bd      	mov	sp, r7
 8042ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042ee8:	4770      	bx	lr

08042eea <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8042eea:	b480      	push	{r7}
 8042eec:	b085      	sub	sp, #20
 8042eee:	af00      	add	r7, sp, #0
 8042ef0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8042ef2:	687b      	ldr	r3, [r7, #4]
 8042ef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8042ef8:	2b21      	cmp	r3, #33	; 0x21
 8042efa:	d142      	bne.n	8042f82 <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8042efc:	687b      	ldr	r3, [r7, #4]
 8042efe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8042f02:	81fb      	strh	r3, [r7, #14]
 8042f04:	e03a      	b.n	8042f7c <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 8042f06:	687b      	ldr	r3, [r7, #4]
 8042f08:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8042f0c:	b29b      	uxth	r3, r3
 8042f0e:	2b00      	cmp	r3, #0
 8042f10:	d111      	bne.n	8042f36 <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8042f12:	687b      	ldr	r3, [r7, #4]
 8042f14:	681b      	ldr	r3, [r3, #0]
 8042f16:	689a      	ldr	r2, [r3, #8]
 8042f18:	687b      	ldr	r3, [r7, #4]
 8042f1a:	681b      	ldr	r3, [r3, #0]
 8042f1c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8042f20:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8042f22:	687b      	ldr	r3, [r7, #4]
 8042f24:	681b      	ldr	r3, [r3, #0]
 8042f26:	681a      	ldr	r2, [r3, #0]
 8042f28:	687b      	ldr	r3, [r7, #4]
 8042f2a:	681b      	ldr	r3, [r3, #0]
 8042f2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8042f30:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8042f32:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8042f34:	e025      	b.n	8042f82 <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8042f36:	687b      	ldr	r3, [r7, #4]
 8042f38:	681b      	ldr	r3, [r3, #0]
 8042f3a:	69db      	ldr	r3, [r3, #28]
 8042f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8042f40:	2b00      	cmp	r3, #0
 8042f42:	d018      	beq.n	8042f76 <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8042f44:	687b      	ldr	r3, [r7, #4]
 8042f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8042f48:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8042f4a:	68bb      	ldr	r3, [r7, #8]
 8042f4c:	881b      	ldrh	r3, [r3, #0]
 8042f4e:	461a      	mov	r2, r3
 8042f50:	687b      	ldr	r3, [r7, #4]
 8042f52:	681b      	ldr	r3, [r3, #0]
 8042f54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8042f58:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8042f5a:	687b      	ldr	r3, [r7, #4]
 8042f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8042f5e:	1c9a      	adds	r2, r3, #2
 8042f60:	687b      	ldr	r3, [r7, #4]
 8042f62:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8042f64:	687b      	ldr	r3, [r7, #4]
 8042f66:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8042f6a:	b29b      	uxth	r3, r3
 8042f6c:	3b01      	subs	r3, #1
 8042f6e:	b29a      	uxth	r2, r3
 8042f70:	687b      	ldr	r3, [r7, #4]
 8042f72:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8042f76:	89fb      	ldrh	r3, [r7, #14]
 8042f78:	3b01      	subs	r3, #1
 8042f7a:	81fb      	strh	r3, [r7, #14]
 8042f7c:	89fb      	ldrh	r3, [r7, #14]
 8042f7e:	2b00      	cmp	r3, #0
 8042f80:	d1c1      	bne.n	8042f06 <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 8042f82:	bf00      	nop
 8042f84:	3714      	adds	r7, #20
 8042f86:	46bd      	mov	sp, r7
 8042f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042f8c:	4770      	bx	lr

08042f8e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8042f8e:	b580      	push	{r7, lr}
 8042f90:	b082      	sub	sp, #8
 8042f92:	af00      	add	r7, sp, #0
 8042f94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8042f96:	687b      	ldr	r3, [r7, #4]
 8042f98:	681b      	ldr	r3, [r3, #0]
 8042f9a:	681a      	ldr	r2, [r3, #0]
 8042f9c:	687b      	ldr	r3, [r7, #4]
 8042f9e:	681b      	ldr	r3, [r3, #0]
 8042fa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8042fa4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8042fa6:	687b      	ldr	r3, [r7, #4]
 8042fa8:	2220      	movs	r2, #32
 8042faa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8042fae:	687b      	ldr	r3, [r7, #4]
 8042fb0:	2200      	movs	r2, #0
 8042fb2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8042fb4:	6878      	ldr	r0, [r7, #4]
 8042fb6:	f7ff fa13 	bl	80423e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8042fba:	bf00      	nop
 8042fbc:	3708      	adds	r7, #8
 8042fbe:	46bd      	mov	sp, r7
 8042fc0:	bd80      	pop	{r7, pc}

08042fc2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8042fc2:	b480      	push	{r7}
 8042fc4:	b083      	sub	sp, #12
 8042fc6:	af00      	add	r7, sp, #0
 8042fc8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8042fca:	bf00      	nop
 8042fcc:	370c      	adds	r7, #12
 8042fce:	46bd      	mov	sp, r7
 8042fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042fd4:	4770      	bx	lr

08042fd6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8042fd6:	b480      	push	{r7}
 8042fd8:	b083      	sub	sp, #12
 8042fda:	af00      	add	r7, sp, #0
 8042fdc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8042fde:	bf00      	nop
 8042fe0:	370c      	adds	r7, #12
 8042fe2:	46bd      	mov	sp, r7
 8042fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042fe8:	4770      	bx	lr

08042fea <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8042fea:	b480      	push	{r7}
 8042fec:	b083      	sub	sp, #12
 8042fee:	af00      	add	r7, sp, #0
 8042ff0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8042ff2:	bf00      	nop
 8042ff4:	370c      	adds	r7, #12
 8042ff6:	46bd      	mov	sp, r7
 8042ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042ffc:	4770      	bx	lr

08042ffe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8042ffe:	b480      	push	{r7}
 8043000:	b085      	sub	sp, #20
 8043002:	af00      	add	r7, sp, #0
 8043004:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8043006:	687b      	ldr	r3, [r7, #4]
 8043008:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 804300c:	2b01      	cmp	r3, #1
 804300e:	d101      	bne.n	8043014 <HAL_UARTEx_DisableFifoMode+0x16>
 8043010:	2302      	movs	r3, #2
 8043012:	e027      	b.n	8043064 <HAL_UARTEx_DisableFifoMode+0x66>
 8043014:	687b      	ldr	r3, [r7, #4]
 8043016:	2201      	movs	r2, #1
 8043018:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 804301c:	687b      	ldr	r3, [r7, #4]
 804301e:	2224      	movs	r2, #36	; 0x24
 8043020:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8043024:	687b      	ldr	r3, [r7, #4]
 8043026:	681b      	ldr	r3, [r3, #0]
 8043028:	681b      	ldr	r3, [r3, #0]
 804302a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 804302c:	687b      	ldr	r3, [r7, #4]
 804302e:	681b      	ldr	r3, [r3, #0]
 8043030:	681a      	ldr	r2, [r3, #0]
 8043032:	687b      	ldr	r3, [r7, #4]
 8043034:	681b      	ldr	r3, [r3, #0]
 8043036:	f022 0201 	bic.w	r2, r2, #1
 804303a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 804303c:	68fb      	ldr	r3, [r7, #12]
 804303e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8043042:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8043044:	687b      	ldr	r3, [r7, #4]
 8043046:	2200      	movs	r2, #0
 8043048:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 804304a:	687b      	ldr	r3, [r7, #4]
 804304c:	681b      	ldr	r3, [r3, #0]
 804304e:	68fa      	ldr	r2, [r7, #12]
 8043050:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8043052:	687b      	ldr	r3, [r7, #4]
 8043054:	2220      	movs	r2, #32
 8043056:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 804305a:	687b      	ldr	r3, [r7, #4]
 804305c:	2200      	movs	r2, #0
 804305e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8043062:	2300      	movs	r3, #0
}
 8043064:	4618      	mov	r0, r3
 8043066:	3714      	adds	r7, #20
 8043068:	46bd      	mov	sp, r7
 804306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804306e:	4770      	bx	lr

08043070 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8043070:	b580      	push	{r7, lr}
 8043072:	b084      	sub	sp, #16
 8043074:	af00      	add	r7, sp, #0
 8043076:	6078      	str	r0, [r7, #4]
 8043078:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 804307a:	687b      	ldr	r3, [r7, #4]
 804307c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8043080:	2b01      	cmp	r3, #1
 8043082:	d101      	bne.n	8043088 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8043084:	2302      	movs	r3, #2
 8043086:	e02d      	b.n	80430e4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8043088:	687b      	ldr	r3, [r7, #4]
 804308a:	2201      	movs	r2, #1
 804308c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8043090:	687b      	ldr	r3, [r7, #4]
 8043092:	2224      	movs	r2, #36	; 0x24
 8043094:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8043098:	687b      	ldr	r3, [r7, #4]
 804309a:	681b      	ldr	r3, [r3, #0]
 804309c:	681b      	ldr	r3, [r3, #0]
 804309e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80430a0:	687b      	ldr	r3, [r7, #4]
 80430a2:	681b      	ldr	r3, [r3, #0]
 80430a4:	681a      	ldr	r2, [r3, #0]
 80430a6:	687b      	ldr	r3, [r7, #4]
 80430a8:	681b      	ldr	r3, [r3, #0]
 80430aa:	f022 0201 	bic.w	r2, r2, #1
 80430ae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80430b0:	687b      	ldr	r3, [r7, #4]
 80430b2:	681b      	ldr	r3, [r3, #0]
 80430b4:	689b      	ldr	r3, [r3, #8]
 80430b6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80430ba:	687b      	ldr	r3, [r7, #4]
 80430bc:	681b      	ldr	r3, [r3, #0]
 80430be:	683a      	ldr	r2, [r7, #0]
 80430c0:	430a      	orrs	r2, r1
 80430c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80430c4:	6878      	ldr	r0, [r7, #4]
 80430c6:	f000 f84f 	bl	8043168 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80430ca:	687b      	ldr	r3, [r7, #4]
 80430cc:	681b      	ldr	r3, [r3, #0]
 80430ce:	68fa      	ldr	r2, [r7, #12]
 80430d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80430d2:	687b      	ldr	r3, [r7, #4]
 80430d4:	2220      	movs	r2, #32
 80430d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80430da:	687b      	ldr	r3, [r7, #4]
 80430dc:	2200      	movs	r2, #0
 80430de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80430e2:	2300      	movs	r3, #0
}
 80430e4:	4618      	mov	r0, r3
 80430e6:	3710      	adds	r7, #16
 80430e8:	46bd      	mov	sp, r7
 80430ea:	bd80      	pop	{r7, pc}

080430ec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80430ec:	b580      	push	{r7, lr}
 80430ee:	b084      	sub	sp, #16
 80430f0:	af00      	add	r7, sp, #0
 80430f2:	6078      	str	r0, [r7, #4]
 80430f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80430f6:	687b      	ldr	r3, [r7, #4]
 80430f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80430fc:	2b01      	cmp	r3, #1
 80430fe:	d101      	bne.n	8043104 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8043100:	2302      	movs	r3, #2
 8043102:	e02d      	b.n	8043160 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8043104:	687b      	ldr	r3, [r7, #4]
 8043106:	2201      	movs	r2, #1
 8043108:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 804310c:	687b      	ldr	r3, [r7, #4]
 804310e:	2224      	movs	r2, #36	; 0x24
 8043110:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8043114:	687b      	ldr	r3, [r7, #4]
 8043116:	681b      	ldr	r3, [r3, #0]
 8043118:	681b      	ldr	r3, [r3, #0]
 804311a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 804311c:	687b      	ldr	r3, [r7, #4]
 804311e:	681b      	ldr	r3, [r3, #0]
 8043120:	681a      	ldr	r2, [r3, #0]
 8043122:	687b      	ldr	r3, [r7, #4]
 8043124:	681b      	ldr	r3, [r3, #0]
 8043126:	f022 0201 	bic.w	r2, r2, #1
 804312a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 804312c:	687b      	ldr	r3, [r7, #4]
 804312e:	681b      	ldr	r3, [r3, #0]
 8043130:	689b      	ldr	r3, [r3, #8]
 8043132:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8043136:	687b      	ldr	r3, [r7, #4]
 8043138:	681b      	ldr	r3, [r3, #0]
 804313a:	683a      	ldr	r2, [r7, #0]
 804313c:	430a      	orrs	r2, r1
 804313e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8043140:	6878      	ldr	r0, [r7, #4]
 8043142:	f000 f811 	bl	8043168 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8043146:	687b      	ldr	r3, [r7, #4]
 8043148:	681b      	ldr	r3, [r3, #0]
 804314a:	68fa      	ldr	r2, [r7, #12]
 804314c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 804314e:	687b      	ldr	r3, [r7, #4]
 8043150:	2220      	movs	r2, #32
 8043152:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8043156:	687b      	ldr	r3, [r7, #4]
 8043158:	2200      	movs	r2, #0
 804315a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 804315e:	2300      	movs	r3, #0
}
 8043160:	4618      	mov	r0, r3
 8043162:	3710      	adds	r7, #16
 8043164:	46bd      	mov	sp, r7
 8043166:	bd80      	pop	{r7, pc}

08043168 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8043168:	b480      	push	{r7}
 804316a:	b089      	sub	sp, #36	; 0x24
 804316c:	af00      	add	r7, sp, #0
 804316e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8043170:	4a2f      	ldr	r2, [pc, #188]	; (8043230 <UARTEx_SetNbDataToProcess+0xc8>)
 8043172:	f107 0314 	add.w	r3, r7, #20
 8043176:	e892 0003 	ldmia.w	r2, {r0, r1}
 804317a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 804317e:	4a2d      	ldr	r2, [pc, #180]	; (8043234 <UARTEx_SetNbDataToProcess+0xcc>)
 8043180:	f107 030c 	add.w	r3, r7, #12
 8043184:	e892 0003 	ldmia.w	r2, {r0, r1}
 8043188:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 804318c:	687b      	ldr	r3, [r7, #4]
 804318e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8043190:	2b00      	cmp	r3, #0
 8043192:	d108      	bne.n	80431a6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8043194:	687b      	ldr	r3, [r7, #4]
 8043196:	2201      	movs	r2, #1
 8043198:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 804319c:	687b      	ldr	r3, [r7, #4]
 804319e:	2201      	movs	r2, #1
 80431a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80431a4:	e03d      	b.n	8043222 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80431a6:	2308      	movs	r3, #8
 80431a8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80431aa:	2308      	movs	r3, #8
 80431ac:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80431ae:	687b      	ldr	r3, [r7, #4]
 80431b0:	681b      	ldr	r3, [r3, #0]
 80431b2:	689b      	ldr	r3, [r3, #8]
 80431b4:	0e5b      	lsrs	r3, r3, #25
 80431b6:	b2db      	uxtb	r3, r3
 80431b8:	f003 0307 	and.w	r3, r3, #7
 80431bc:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80431be:	687b      	ldr	r3, [r7, #4]
 80431c0:	681b      	ldr	r3, [r3, #0]
 80431c2:	689b      	ldr	r3, [r3, #8]
 80431c4:	0f5b      	lsrs	r3, r3, #29
 80431c6:	b2db      	uxtb	r3, r3
 80431c8:	f003 0307 	and.w	r3, r3, #7
 80431cc:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80431ce:	7fbb      	ldrb	r3, [r7, #30]
 80431d0:	7f3a      	ldrb	r2, [r7, #28]
 80431d2:	f107 0120 	add.w	r1, r7, #32
 80431d6:	440a      	add	r2, r1
 80431d8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80431dc:	fb02 f303 	mul.w	r3, r2, r3
 80431e0:	7f3a      	ldrb	r2, [r7, #28]
 80431e2:	f107 0120 	add.w	r1, r7, #32
 80431e6:	440a      	add	r2, r1
 80431e8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80431ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80431f0:	b29a      	uxth	r2, r3
 80431f2:	687b      	ldr	r3, [r7, #4]
 80431f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80431f8:	7ffb      	ldrb	r3, [r7, #31]
 80431fa:	7f7a      	ldrb	r2, [r7, #29]
 80431fc:	f107 0120 	add.w	r1, r7, #32
 8043200:	440a      	add	r2, r1
 8043202:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8043206:	fb02 f303 	mul.w	r3, r2, r3
 804320a:	7f7a      	ldrb	r2, [r7, #29]
 804320c:	f107 0120 	add.w	r1, r7, #32
 8043210:	440a      	add	r2, r1
 8043212:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8043216:	fb93 f3f2 	sdiv	r3, r3, r2
 804321a:	b29a      	uxth	r2, r3
 804321c:	687b      	ldr	r3, [r7, #4]
 804321e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8043222:	bf00      	nop
 8043224:	3724      	adds	r7, #36	; 0x24
 8043226:	46bd      	mov	sp, r7
 8043228:	f85d 7b04 	ldr.w	r7, [sp], #4
 804322c:	4770      	bx	lr
 804322e:	bf00      	nop
 8043230:	08043358 	.word	0x08043358
 8043234:	08043360 	.word	0x08043360

08043238 <__libc_init_array>:
 8043238:	b570      	push	{r4, r5, r6, lr}
 804323a:	4d0d      	ldr	r5, [pc, #52]	; (8043270 <__libc_init_array+0x38>)
 804323c:	2600      	movs	r6, #0
 804323e:	4c0d      	ldr	r4, [pc, #52]	; (8043274 <__libc_init_array+0x3c>)
 8043240:	1b64      	subs	r4, r4, r5
 8043242:	10a4      	asrs	r4, r4, #2
 8043244:	42a6      	cmp	r6, r4
 8043246:	d109      	bne.n	804325c <__libc_init_array+0x24>
 8043248:	4d0b      	ldr	r5, [pc, #44]	; (8043278 <__libc_init_array+0x40>)
 804324a:	2600      	movs	r6, #0
 804324c:	4c0b      	ldr	r4, [pc, #44]	; (804327c <__libc_init_array+0x44>)
 804324e:	f000 f827 	bl	80432a0 <_init>
 8043252:	1b64      	subs	r4, r4, r5
 8043254:	10a4      	asrs	r4, r4, #2
 8043256:	42a6      	cmp	r6, r4
 8043258:	d105      	bne.n	8043266 <__libc_init_array+0x2e>
 804325a:	bd70      	pop	{r4, r5, r6, pc}
 804325c:	f855 3b04 	ldr.w	r3, [r5], #4
 8043260:	3601      	adds	r6, #1
 8043262:	4798      	blx	r3
 8043264:	e7ee      	b.n	8043244 <__libc_init_array+0xc>
 8043266:	f855 3b04 	ldr.w	r3, [r5], #4
 804326a:	3601      	adds	r6, #1
 804326c:	4798      	blx	r3
 804326e:	e7f2      	b.n	8043256 <__libc_init_array+0x1e>
 8043270:	080433e0 	.word	0x080433e0
 8043274:	080433e0 	.word	0x080433e0
 8043278:	080433e0 	.word	0x080433e0
 804327c:	080433e4 	.word	0x080433e4

08043280 <memset>:
 8043280:	4402      	add	r2, r0
 8043282:	4603      	mov	r3, r0
 8043284:	4293      	cmp	r3, r2
 8043286:	d100      	bne.n	804328a <memset+0xa>
 8043288:	4770      	bx	lr
 804328a:	f803 1b01 	strb.w	r1, [r3], #1
 804328e:	e7f9      	b.n	8043284 <memset+0x4>

08043290 <strcpy>:
 8043290:	4603      	mov	r3, r0
 8043292:	f811 2b01 	ldrb.w	r2, [r1], #1
 8043296:	f803 2b01 	strb.w	r2, [r3], #1
 804329a:	2a00      	cmp	r2, #0
 804329c:	d1f9      	bne.n	8043292 <strcpy+0x2>
 804329e:	4770      	bx	lr

080432a0 <_init>:
 80432a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80432a2:	bf00      	nop
 80432a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80432a6:	bc08      	pop	{r3}
 80432a8:	469e      	mov	lr, r3
 80432aa:	4770      	bx	lr

080432ac <_fini>:
 80432ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80432ae:	bf00      	nop
 80432b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80432b2:	bc08      	pop	{r3}
 80432b4:	469e      	mov	lr, r3
 80432b6:	4770      	bx	lr

080432b8 <__SECURE_SystemCoreClockUpdate_veneer>:
 80432b8:	b401      	push	{r0}
 80432ba:	4802      	ldr	r0, [pc, #8]	; (80432c4 <__SECURE_SystemCoreClockUpdate_veneer+0xc>)
 80432bc:	4684      	mov	ip, r0
 80432be:	bc01      	pop	{r0}
 80432c0:	4760      	bx	ip
 80432c2:	bf00      	nop
 80432c4:	0c03e001 	.word	0x0c03e001
