
light-controller_NonSecure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c00  080401f8  080401f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000804  08043df8  08043df8  00013df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080445fc  080445fc  00018098  2**0
                  CONTENTS
  4 .ARM          00000008  080445fc  080445fc  000145fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08044604  08044604  00018098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08044604  08044604  00014604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08044608  08044608  00014608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20018000  0804460c  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20018098  080446a4  00018098  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2001819c  080446a4  0001819c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00018098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c0cf  00000000  00000000  000180ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a9f  00000000  00000000  0002419d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000908  00000000  00000000  00025c40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000878  00000000  00000000  00026548  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000289f1  00000000  00000000  00026dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008626  00000000  00000000  0004f7b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001029f5  00000000  00000000  00057dd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015a7cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000288c  00000000  00000000  0015a848  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000024  00000000  00000000  0015d0d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  0015d0f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080401f8 <__do_global_dtors_aux>:
 80401f8:	b510      	push	{r4, lr}
 80401fa:	4c05      	ldr	r4, [pc, #20]	; (8040210 <__do_global_dtors_aux+0x18>)
 80401fc:	7823      	ldrb	r3, [r4, #0]
 80401fe:	b933      	cbnz	r3, 804020e <__do_global_dtors_aux+0x16>
 8040200:	4b04      	ldr	r3, [pc, #16]	; (8040214 <__do_global_dtors_aux+0x1c>)
 8040202:	b113      	cbz	r3, 804020a <__do_global_dtors_aux+0x12>
 8040204:	4804      	ldr	r0, [pc, #16]	; (8040218 <__do_global_dtors_aux+0x20>)
 8040206:	e000      	b.n	804020a <__do_global_dtors_aux+0x12>
 8040208:	bf00      	nop
 804020a:	2301      	movs	r3, #1
 804020c:	7023      	strb	r3, [r4, #0]
 804020e:	bd10      	pop	{r4, pc}
 8040210:	20018098 	.word	0x20018098
 8040214:	00000000 	.word	0x00000000
 8040218:	08043dd0 	.word	0x08043dd0

0804021c <frame_dummy>:
 804021c:	b508      	push	{r3, lr}
 804021e:	4b03      	ldr	r3, [pc, #12]	; (804022c <frame_dummy+0x10>)
 8040220:	b11b      	cbz	r3, 804022a <frame_dummy+0xe>
 8040222:	4903      	ldr	r1, [pc, #12]	; (8040230 <frame_dummy+0x14>)
 8040224:	4803      	ldr	r0, [pc, #12]	; (8040234 <frame_dummy+0x18>)
 8040226:	e000      	b.n	804022a <frame_dummy+0xe>
 8040228:	bf00      	nop
 804022a:	bd08      	pop	{r3, pc}
 804022c:	00000000 	.word	0x00000000
 8040230:	2001809c 	.word	0x2001809c
 8040234:	08043dd0 	.word	0x08043dd0

08040238 <strcmp>:
 8040238:	f810 2b01 	ldrb.w	r2, [r0], #1
 804023c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8040240:	2a01      	cmp	r2, #1
 8040242:	bf28      	it	cs
 8040244:	429a      	cmpcs	r2, r3
 8040246:	d0f7      	beq.n	8040238 <strcmp>
 8040248:	1ad0      	subs	r0, r2, r3
 804024a:	4770      	bx	lr

0804024c <strlen>:
 804024c:	4603      	mov	r3, r0
 804024e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8040252:	2a00      	cmp	r2, #0
 8040254:	d1fb      	bne.n	804024e <strlen+0x2>
 8040256:	1a18      	subs	r0, r3, r0
 8040258:	3801      	subs	r0, #1
 804025a:	4770      	bx	lr

0804025c <__aeabi_uldivmod>:
 804025c:	b953      	cbnz	r3, 8040274 <__aeabi_uldivmod+0x18>
 804025e:	b94a      	cbnz	r2, 8040274 <__aeabi_uldivmod+0x18>
 8040260:	2900      	cmp	r1, #0
 8040262:	bf08      	it	eq
 8040264:	2800      	cmpeq	r0, #0
 8040266:	bf1c      	itt	ne
 8040268:	f04f 31ff 	movne.w	r1, #4294967295
 804026c:	f04f 30ff 	movne.w	r0, #4294967295
 8040270:	f000 b97c 	b.w	804056c <__aeabi_idiv0>
 8040274:	f1ad 0c08 	sub.w	ip, sp, #8
 8040278:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 804027c:	f000 f806 	bl	804028c <__udivmoddi4>
 8040280:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040284:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8040288:	b004      	add	sp, #16
 804028a:	4770      	bx	lr

0804028c <__udivmoddi4>:
 804028c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8040290:	468c      	mov	ip, r1
 8040292:	9d08      	ldr	r5, [sp, #32]
 8040294:	4604      	mov	r4, r0
 8040296:	468a      	mov	sl, r1
 8040298:	2b00      	cmp	r3, #0
 804029a:	d14a      	bne.n	8040332 <__udivmoddi4+0xa6>
 804029c:	428a      	cmp	r2, r1
 804029e:	4617      	mov	r7, r2
 80402a0:	d962      	bls.n	8040368 <__udivmoddi4+0xdc>
 80402a2:	fab2 f682 	clz	r6, r2
 80402a6:	b14e      	cbz	r6, 80402bc <__udivmoddi4+0x30>
 80402a8:	f1c6 0e20 	rsb	lr, r6, #32
 80402ac:	fa01 f306 	lsl.w	r3, r1, r6
 80402b0:	40b7      	lsls	r7, r6
 80402b2:	40b4      	lsls	r4, r6
 80402b4:	fa20 fe0e 	lsr.w	lr, r0, lr
 80402b8:	ea4e 0a03 	orr.w	sl, lr, r3
 80402bc:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80402c0:	0c23      	lsrs	r3, r4, #16
 80402c2:	fa1f f987 	uxth.w	r9, r7
 80402c6:	fbba fef8 	udiv	lr, sl, r8
 80402ca:	fb08 aa1e 	mls	sl, r8, lr, sl
 80402ce:	fb0e f209 	mul.w	r2, lr, r9
 80402d2:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80402d6:	429a      	cmp	r2, r3
 80402d8:	d90b      	bls.n	80402f2 <__udivmoddi4+0x66>
 80402da:	18fb      	adds	r3, r7, r3
 80402dc:	f10e 31ff 	add.w	r1, lr, #4294967295
 80402e0:	bf2c      	ite	cs
 80402e2:	2001      	movcs	r0, #1
 80402e4:	2000      	movcc	r0, #0
 80402e6:	429a      	cmp	r2, r3
 80402e8:	d902      	bls.n	80402f0 <__udivmoddi4+0x64>
 80402ea:	2800      	cmp	r0, #0
 80402ec:	f000 812a 	beq.w	8040544 <__udivmoddi4+0x2b8>
 80402f0:	468e      	mov	lr, r1
 80402f2:	1a9a      	subs	r2, r3, r2
 80402f4:	b2a3      	uxth	r3, r4
 80402f6:	fbb2 f0f8 	udiv	r0, r2, r8
 80402fa:	fb08 2210 	mls	r2, r8, r0, r2
 80402fe:	fb00 f909 	mul.w	r9, r0, r9
 8040302:	ea43 4402 	orr.w	r4, r3, r2, lsl #16
 8040306:	45a1      	cmp	r9, r4
 8040308:	d907      	bls.n	804031a <__udivmoddi4+0x8e>
 804030a:	193c      	adds	r4, r7, r4
 804030c:	f100 33ff 	add.w	r3, r0, #4294967295
 8040310:	d202      	bcs.n	8040318 <__udivmoddi4+0x8c>
 8040312:	45a1      	cmp	r9, r4
 8040314:	f200 8110 	bhi.w	8040538 <__udivmoddi4+0x2ac>
 8040318:	4618      	mov	r0, r3
 804031a:	eba4 0409 	sub.w	r4, r4, r9
 804031e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8040322:	2100      	movs	r1, #0
 8040324:	b11d      	cbz	r5, 804032e <__udivmoddi4+0xa2>
 8040326:	40f4      	lsrs	r4, r6
 8040328:	2300      	movs	r3, #0
 804032a:	e9c5 4300 	strd	r4, r3, [r5]
 804032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040332:	428b      	cmp	r3, r1
 8040334:	d908      	bls.n	8040348 <__udivmoddi4+0xbc>
 8040336:	2d00      	cmp	r5, #0
 8040338:	f000 80f2 	beq.w	8040520 <__udivmoddi4+0x294>
 804033c:	2100      	movs	r1, #0
 804033e:	e9c5 0c00 	strd	r0, ip, [r5]
 8040342:	4608      	mov	r0, r1
 8040344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040348:	fab3 f183 	clz	r1, r3
 804034c:	2900      	cmp	r1, #0
 804034e:	d14e      	bne.n	80403ee <__udivmoddi4+0x162>
 8040350:	4563      	cmp	r3, ip
 8040352:	f0c0 80e8 	bcc.w	8040526 <__udivmoddi4+0x29a>
 8040356:	4282      	cmp	r2, r0
 8040358:	f240 80e5 	bls.w	8040526 <__udivmoddi4+0x29a>
 804035c:	4608      	mov	r0, r1
 804035e:	2d00      	cmp	r5, #0
 8040360:	d0e5      	beq.n	804032e <__udivmoddi4+0xa2>
 8040362:	e9c5 4a00 	strd	r4, sl, [r5]
 8040366:	e7e2      	b.n	804032e <__udivmoddi4+0xa2>
 8040368:	b902      	cbnz	r2, 804036c <__udivmoddi4+0xe0>
 804036a:	deff      	udf	#255	; 0xff
 804036c:	fab2 f682 	clz	r6, r2
 8040370:	2e00      	cmp	r6, #0
 8040372:	f040 8099 	bne.w	80404a8 <__udivmoddi4+0x21c>
 8040376:	1a8b      	subs	r3, r1, r2
 8040378:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 804037c:	fa1f f882 	uxth.w	r8, r2
 8040380:	2101      	movs	r1, #1
 8040382:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8040386:	fbb3 f2fe 	udiv	r2, r3, lr
 804038a:	fb0e 3012 	mls	r0, lr, r2, r3
 804038e:	fb08 f902 	mul.w	r9, r8, r2
 8040392:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
 8040396:	45e1      	cmp	r9, ip
 8040398:	d908      	bls.n	80403ac <__udivmoddi4+0x120>
 804039a:	eb17 0c0c 	adds.w	ip, r7, ip
 804039e:	f102 33ff 	add.w	r3, r2, #4294967295
 80403a2:	d202      	bcs.n	80403aa <__udivmoddi4+0x11e>
 80403a4:	45e1      	cmp	r9, ip
 80403a6:	f200 80ca 	bhi.w	804053e <__udivmoddi4+0x2b2>
 80403aa:	461a      	mov	r2, r3
 80403ac:	ebac 0c09 	sub.w	ip, ip, r9
 80403b0:	b2a3      	uxth	r3, r4
 80403b2:	fbbc f0fe 	udiv	r0, ip, lr
 80403b6:	fb0e cc10 	mls	ip, lr, r0, ip
 80403ba:	fb08 f800 	mul.w	r8, r8, r0
 80403be:	ea43 440c 	orr.w	r4, r3, ip, lsl #16
 80403c2:	45a0      	cmp	r8, r4
 80403c4:	d90e      	bls.n	80403e4 <__udivmoddi4+0x158>
 80403c6:	193c      	adds	r4, r7, r4
 80403c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80403cc:	bf2c      	ite	cs
 80403ce:	f04f 0c01 	movcs.w	ip, #1
 80403d2:	f04f 0c00 	movcc.w	ip, #0
 80403d6:	45a0      	cmp	r8, r4
 80403d8:	d903      	bls.n	80403e2 <__udivmoddi4+0x156>
 80403da:	f1bc 0f00 	cmp.w	ip, #0
 80403de:	f000 80a8 	beq.w	8040532 <__udivmoddi4+0x2a6>
 80403e2:	4618      	mov	r0, r3
 80403e4:	eba4 0408 	sub.w	r4, r4, r8
 80403e8:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80403ec:	e79a      	b.n	8040324 <__udivmoddi4+0x98>
 80403ee:	f1c1 0420 	rsb	r4, r1, #32
 80403f2:	408b      	lsls	r3, r1
 80403f4:	fa02 fe01 	lsl.w	lr, r2, r1
 80403f8:	fa0c f601 	lsl.w	r6, ip, r1
 80403fc:	40e2      	lsrs	r2, r4
 80403fe:	fa20 f704 	lsr.w	r7, r0, r4
 8040402:	fa2c fc04 	lsr.w	ip, ip, r4
 8040406:	fa00 f801 	lsl.w	r8, r0, r1
 804040a:	4313      	orrs	r3, r2
 804040c:	433e      	orrs	r6, r7
 804040e:	0c1f      	lsrs	r7, r3, #16
 8040410:	0c32      	lsrs	r2, r6, #16
 8040412:	fa1f f983 	uxth.w	r9, r3
 8040416:	fbbc f0f7 	udiv	r0, ip, r7
 804041a:	fb07 cc10 	mls	ip, r7, r0, ip
 804041e:	fb00 fa09 	mul.w	sl, r0, r9
 8040422:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
 8040426:	45e2      	cmp	sl, ip
 8040428:	d908      	bls.n	804043c <__udivmoddi4+0x1b0>
 804042a:	eb13 0c0c 	adds.w	ip, r3, ip
 804042e:	f100 32ff 	add.w	r2, r0, #4294967295
 8040432:	d202      	bcs.n	804043a <__udivmoddi4+0x1ae>
 8040434:	45e2      	cmp	sl, ip
 8040436:	f200 8089 	bhi.w	804054c <__udivmoddi4+0x2c0>
 804043a:	4610      	mov	r0, r2
 804043c:	ebac 0c0a 	sub.w	ip, ip, sl
 8040440:	b2b6      	uxth	r6, r6
 8040442:	fbbc faf7 	udiv	sl, ip, r7
 8040446:	fb07 cc1a 	mls	ip, r7, sl, ip
 804044a:	fb0a f909 	mul.w	r9, sl, r9
 804044e:	ea46 420c 	orr.w	r2, r6, ip, lsl #16
 8040452:	4591      	cmp	r9, r2
 8040454:	d906      	bls.n	8040464 <__udivmoddi4+0x1d8>
 8040456:	189a      	adds	r2, r3, r2
 8040458:	f10a 36ff 	add.w	r6, sl, #4294967295
 804045c:	d201      	bcs.n	8040462 <__udivmoddi4+0x1d6>
 804045e:	4591      	cmp	r9, r2
 8040460:	d87a      	bhi.n	8040558 <__udivmoddi4+0x2cc>
 8040462:	46b2      	mov	sl, r6
 8040464:	ea4a 4000 	orr.w	r0, sl, r0, lsl #16
 8040468:	eba2 0209 	sub.w	r2, r2, r9
 804046c:	fba0 670e 	umull	r6, r7, r0, lr
 8040470:	42ba      	cmp	r2, r7
 8040472:	46b4      	mov	ip, r6
 8040474:	46b9      	mov	r9, r7
 8040476:	d302      	bcc.n	804047e <__udivmoddi4+0x1f2>
 8040478:	d107      	bne.n	804048a <__udivmoddi4+0x1fe>
 804047a:	45b0      	cmp	r8, r6
 804047c:	d205      	bcs.n	804048a <__udivmoddi4+0x1fe>
 804047e:	ebb6 0c0e 	subs.w	ip, r6, lr
 8040482:	eb67 0303 	sbc.w	r3, r7, r3
 8040486:	3801      	subs	r0, #1
 8040488:	4699      	mov	r9, r3
 804048a:	2d00      	cmp	r5, #0
 804048c:	d06b      	beq.n	8040566 <__udivmoddi4+0x2da>
 804048e:	ebb8 030c 	subs.w	r3, r8, ip
 8040492:	eb62 0209 	sbc.w	r2, r2, r9
 8040496:	fa02 f404 	lsl.w	r4, r2, r4
 804049a:	40cb      	lsrs	r3, r1
 804049c:	40ca      	lsrs	r2, r1
 804049e:	2100      	movs	r1, #0
 80404a0:	431c      	orrs	r4, r3
 80404a2:	e9c5 4200 	strd	r4, r2, [r5]
 80404a6:	e742      	b.n	804032e <__udivmoddi4+0xa2>
 80404a8:	40b7      	lsls	r7, r6
 80404aa:	f1c6 0220 	rsb	r2, r6, #32
 80404ae:	fa01 f306 	lsl.w	r3, r1, r6
 80404b2:	40b4      	lsls	r4, r6
 80404b4:	fa21 fc02 	lsr.w	ip, r1, r2
 80404b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80404bc:	fa20 f202 	lsr.w	r2, r0, r2
 80404c0:	fa1f f887 	uxth.w	r8, r7
 80404c4:	fbbc f1fe 	udiv	r1, ip, lr
 80404c8:	431a      	orrs	r2, r3
 80404ca:	fb0e cc11 	mls	ip, lr, r1, ip
 80404ce:	fb01 f008 	mul.w	r0, r1, r8
 80404d2:	0c13      	lsrs	r3, r2, #16
 80404d4:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
 80404d8:	4560      	cmp	r0, ip
 80404da:	d907      	bls.n	80404ec <__udivmoddi4+0x260>
 80404dc:	eb17 0c0c 	adds.w	ip, r7, ip
 80404e0:	f101 33ff 	add.w	r3, r1, #4294967295
 80404e4:	d201      	bcs.n	80404ea <__udivmoddi4+0x25e>
 80404e6:	4560      	cmp	r0, ip
 80404e8:	d833      	bhi.n	8040552 <__udivmoddi4+0x2c6>
 80404ea:	4619      	mov	r1, r3
 80404ec:	ebac 0c00 	sub.w	ip, ip, r0
 80404f0:	b292      	uxth	r2, r2
 80404f2:	fbbc f0fe 	udiv	r0, ip, lr
 80404f6:	fb0e cc10 	mls	ip, lr, r0, ip
 80404fa:	fb00 f308 	mul.w	r3, r0, r8
 80404fe:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
 8040502:	4563      	cmp	r3, ip
 8040504:	d907      	bls.n	8040516 <__udivmoddi4+0x28a>
 8040506:	eb17 0c0c 	adds.w	ip, r7, ip
 804050a:	f100 32ff 	add.w	r2, r0, #4294967295
 804050e:	d201      	bcs.n	8040514 <__udivmoddi4+0x288>
 8040510:	4563      	cmp	r3, ip
 8040512:	d825      	bhi.n	8040560 <__udivmoddi4+0x2d4>
 8040514:	4610      	mov	r0, r2
 8040516:	ebac 0303 	sub.w	r3, ip, r3
 804051a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 804051e:	e730      	b.n	8040382 <__udivmoddi4+0xf6>
 8040520:	4629      	mov	r1, r5
 8040522:	4628      	mov	r0, r5
 8040524:	e703      	b.n	804032e <__udivmoddi4+0xa2>
 8040526:	1a84      	subs	r4, r0, r2
 8040528:	eb6c 0303 	sbc.w	r3, ip, r3
 804052c:	2001      	movs	r0, #1
 804052e:	469a      	mov	sl, r3
 8040530:	e715      	b.n	804035e <__udivmoddi4+0xd2>
 8040532:	3802      	subs	r0, #2
 8040534:	443c      	add	r4, r7
 8040536:	e755      	b.n	80403e4 <__udivmoddi4+0x158>
 8040538:	3802      	subs	r0, #2
 804053a:	443c      	add	r4, r7
 804053c:	e6ed      	b.n	804031a <__udivmoddi4+0x8e>
 804053e:	3a02      	subs	r2, #2
 8040540:	44bc      	add	ip, r7
 8040542:	e733      	b.n	80403ac <__udivmoddi4+0x120>
 8040544:	f1ae 0e02 	sub.w	lr, lr, #2
 8040548:	443b      	add	r3, r7
 804054a:	e6d2      	b.n	80402f2 <__udivmoddi4+0x66>
 804054c:	3802      	subs	r0, #2
 804054e:	449c      	add	ip, r3
 8040550:	e774      	b.n	804043c <__udivmoddi4+0x1b0>
 8040552:	3902      	subs	r1, #2
 8040554:	44bc      	add	ip, r7
 8040556:	e7c9      	b.n	80404ec <__udivmoddi4+0x260>
 8040558:	f1aa 0a02 	sub.w	sl, sl, #2
 804055c:	441a      	add	r2, r3
 804055e:	e781      	b.n	8040464 <__udivmoddi4+0x1d8>
 8040560:	3802      	subs	r0, #2
 8040562:	44bc      	add	ip, r7
 8040564:	e7d7      	b.n	8040516 <__udivmoddi4+0x28a>
 8040566:	4629      	mov	r1, r5
 8040568:	e6e1      	b.n	804032e <__udivmoddi4+0xa2>
 804056a:	bf00      	nop

0804056c <__aeabi_idiv0>:
 804056c:	4770      	bx	lr
 804056e:	bf00      	nop

08040570 <print>:
const uint64_t PATTERN_TIMEOUT_MS = 4000;

const char METHOD_TURNON[] = "method:turnon;";
const char METHOD_TURNOFF[] = "method:turnoff;";

static void print(unsigned char* str, int len) {
 8040570:	b580      	push	{r7, lr}
 8040572:	b082      	sub	sp, #8
 8040574:	af00      	add	r7, sp, #0
 8040576:	6078      	str	r0, [r7, #4]
 8040578:	6039      	str	r1, [r7, #0]

  // UartReady = HAL_UART_STATE_RESET;

  if (HAL_UART_Transmit_IT(&huart1, (uint8_t *) str, len) != HAL_OK) {
 804057a:	683b      	ldr	r3, [r7, #0]
 804057c:	b29b      	uxth	r3, r3
 804057e:	461a      	mov	r2, r3
 8040580:	6879      	ldr	r1, [r7, #4]
 8040582:	480b      	ldr	r0, [pc, #44]	; (80405b0 <print+0x40>)
 8040584:	f001 fdae 	bl	80420e4 <HAL_UART_Transmit_IT>
 8040588:	4603      	mov	r3, r0
 804058a:	2b00      	cmp	r3, #0
 804058c:	d001      	beq.n	8040592 <print+0x22>
    Error_Handler();
 804058e:	f000 fac3 	bl	8040b18 <Error_Handler>
  }
  //##- Wait for the end of the transfer ###################################
  while(HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY)
 8040592:	bf00      	nop
 8040594:	4806      	ldr	r0, [pc, #24]	; (80405b0 <print+0x40>)
 8040596:	f002 f87d 	bl	8042694 <HAL_UART_GetState>
 804059a:	4603      	mov	r3, r0
 804059c:	2b20      	cmp	r3, #32
 804059e:	d1f9      	bne.n	8040594 <print+0x24>
  {
  }
  // Reset transmission flag
  UartReady = HAL_UART_STATE_RESET;
 80405a0:	4b04      	ldr	r3, [pc, #16]	; (80405b4 <print+0x44>)
 80405a2:	2200      	movs	r2, #0
 80405a4:	701a      	strb	r2, [r3, #0]

}
 80405a6:	bf00      	nop
 80405a8:	3708      	adds	r7, #8
 80405aa:	46bd      	mov	sp, r7
 80405ac:	bd80      	pop	{r7, pc}
 80405ae:	bf00      	nop
 80405b0:	20018104 	.word	0x20018104
 80405b4:	200180b4 	.word	0x200180b4

080405b8 <react_to_pattern>:

static void react_to_pattern(uint64_t now)
{
 80405b8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80405bc:	b0a4      	sub	sp, #144	; 0x90
 80405be:	af00      	add	r7, sp, #0
 80405c0:	e9c7 0100 	strd	r0, r1, [r7]
    uint64_t min_timestamp = now - PATTERN_TIMEOUT_MS;
 80405c4:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80405c8:	f04f 0200 	mov.w	r2, #0
 80405cc:	e9d7 3400 	ldrd	r3, r4, [r7]
 80405d0:	1a5b      	subs	r3, r3, r1
 80405d2:	eb64 0402 	sbc.w	r4, r4, r2
 80405d6:	469b      	mov	fp, r3
 80405d8:	46a4      	mov	ip, r4
 80405da:	e9c7 bc1e 	strd	fp, ip, [r7, #120]	; 0x78

    unsigned char funcstr[50] = {0};
 80405de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80405e2:	2232      	movs	r2, #50	; 0x32
 80405e4:	2100      	movs	r1, #0
 80405e6:	4618      	mov	r0, r3
 80405e8:	f002 ff97 	bl	804351a <memset>
    sprintf(funcstr," %s \r\n", __func__);
 80405ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80405f0:	4a55      	ldr	r2, [pc, #340]	; (8040748 <react_to_pattern+0x190>)
 80405f2:	4956      	ldr	r1, [pc, #344]	; (804074c <react_to_pattern+0x194>)
 80405f4:	4618      	mov	r0, r3
 80405f6:	f002 ff99 	bl	804352c <siprintf>
    print(funcstr, sizeof(funcstr));
 80405fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80405fe:	2132      	movs	r1, #50	; 0x32
 8040600:	4618      	mov	r0, r3
 8040602:	f7ff ffb5 	bl	8040570 <print>

    for (size_t pattern_index = 0; pattern_index < PATTERN_COUNT; pattern_index++) {
 8040606:	2300      	movs	r3, #0
 8040608:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 804060c:	e091      	b.n	8040732 <react_to_pattern+0x17a>
        const SwitchPattern* pattern = &SWITCH_PATTERNS[pattern_index];
 804060e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8040612:	00db      	lsls	r3, r3, #3
 8040614:	4a4e      	ldr	r2, [pc, #312]	; (8040750 <react_to_pattern+0x198>)
 8040616:	4413      	add	r3, r2
 8040618:	677b      	str	r3, [r7, #116]	; 0x74
        bool has_match = true;
 804061a:	2301      	movs	r3, #1
 804061c:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
        for (size_t switch_memory_index = 0;
 8040620:	2300      	movs	r3, #0
 8040622:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8040626:	e03b      	b.n	80406a0 <react_to_pattern+0xe8>
             switch_memory_index < SWITCH_MEMORY_ITEMS;
             switch_memory_index++) {
            const SwitchMemoryItem* memory_item = &g_switch_memory[switch_memory_index];
 8040628:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 804062c:	011b      	lsls	r3, r3, #4
 804062e:	4a49      	ldr	r2, [pc, #292]	; (8040754 <react_to_pattern+0x19c>)
 8040630:	4413      	add	r3, r2
 8040632:	673b      	str	r3, [r7, #112]	; 0x70
            if (memory_item->timestamp < min_timestamp) {
 8040634:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8040636:	e9d3 1200 	ldrd	r1, r2, [r3]
 804063a:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 804063e:	42a2      	cmp	r2, r4
 8040640:	bf08      	it	eq
 8040642:	4299      	cmpeq	r1, r3
 8040644:	d203      	bcs.n	804064e <react_to_pattern+0x96>
                has_match = false;
 8040646:	2300      	movs	r3, #0
 8040648:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
                break;
 804064c:	e02f      	b.n	80406ae <react_to_pattern+0xf6>
            }
            if (!(pattern->react & memory_item->method)) {
 804064e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8040650:	785a      	ldrb	r2, [r3, #1]
 8040652:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8040654:	7a1b      	ldrb	r3, [r3, #8]
 8040656:	4013      	ands	r3, r2
 8040658:	b2db      	uxtb	r3, r3
 804065a:	2b00      	cmp	r3, #0
 804065c:	d103      	bne.n	8040666 <react_to_pattern+0xae>
                has_match = false;
 804065e:	2300      	movs	r3, #0
 8040660:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
                break;
 8040664:	e023      	b.n	80406ae <react_to_pattern+0xf6>
            }
            if (pattern->switchPrefixes[switch_memory_index] == NULL) {
 8040666:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8040668:	685a      	ldr	r2, [r3, #4]
 804066a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 804066e:	009b      	lsls	r3, r3, #2
 8040670:	4413      	add	r3, r2
 8040672:	681b      	ldr	r3, [r3, #0]
 8040674:	2b00      	cmp	r3, #0
 8040676:	d019      	beq.n	80406ac <react_to_pattern+0xf4>
                break;
            }
            if (pattern->switchPrefixes[switch_memory_index] != memory_item->switchPrefix) {
 8040678:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 804067a:	685a      	ldr	r2, [r3, #4]
 804067c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8040680:	009b      	lsls	r3, r3, #2
 8040682:	4413      	add	r3, r2
 8040684:	681a      	ldr	r2, [r3, #0]
 8040686:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8040688:	68db      	ldr	r3, [r3, #12]
 804068a:	429a      	cmp	r2, r3
 804068c:	d003      	beq.n	8040696 <react_to_pattern+0xde>
                has_match = false;
 804068e:	2300      	movs	r3, #0
 8040690:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
                break;
 8040694:	e00b      	b.n	80406ae <react_to_pattern+0xf6>
             switch_memory_index++) {
 8040696:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 804069a:	3301      	adds	r3, #1
 804069c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
             switch_memory_index < SWITCH_MEMORY_ITEMS;
 80406a0:	2204      	movs	r2, #4
        for (size_t switch_memory_index = 0;
 80406a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80406a6:	4293      	cmp	r3, r2
 80406a8:	d3be      	bcc.n	8040628 <react_to_pattern+0x70>
 80406aa:	e000      	b.n	80406ae <react_to_pattern+0xf6>
                break;
 80406ac:	bf00      	nop
            }
        }
        if (has_match) {
 80406ae:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80406b2:	2b00      	cmp	r3, #0
 80406b4:	d038      	beq.n	8040728 <react_to_pattern+0x170>
            if (pattern->react & REACT_TURNON) {
 80406b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80406b8:	785b      	ldrb	r3, [r3, #1]
 80406ba:	f003 0301 	and.w	r3, r3, #1
 80406be:	2b00      	cmp	r3, #0
 80406c0:	d016      	beq.n	80406f0 <react_to_pattern+0x138>
//                printf("PATTERN %zu Turn on %d\n", pattern_index, pattern->targetDevice);

            	unsigned char printstr[50] = {0};
 80406c2:	f107 0308 	add.w	r3, r7, #8
 80406c6:	2232      	movs	r2, #50	; 0x32
 80406c8:	2100      	movs	r1, #0
 80406ca:	4618      	mov	r0, r3
 80406cc:	f002 ff25 	bl	804351a <memset>
                sprintf(printstr,"PATTERN %zu Turn on %d\r\n", pattern_index, pattern->targetDevice);
 80406d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80406d2:	781b      	ldrb	r3, [r3, #0]
 80406d4:	f107 0008 	add.w	r0, r7, #8
 80406d8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80406dc:	491e      	ldr	r1, [pc, #120]	; (8040758 <react_to_pattern+0x1a0>)
 80406de:	f002 ff25 	bl	804352c <siprintf>
                print(printstr, sizeof(printstr));
 80406e2:	f107 0308 	add.w	r3, r7, #8
 80406e6:	2132      	movs	r1, #50	; 0x32
 80406e8:	4618      	mov	r0, r3
 80406ea:	f7ff ff41 	bl	8040570 <print>
 80406ee:	e01b      	b.n	8040728 <react_to_pattern+0x170>


//                tdTurnOn(pattern->targetDevice);
            } else if (pattern->react & REACT_TURNOFF) {
 80406f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80406f2:	785b      	ldrb	r3, [r3, #1]
 80406f4:	f003 0302 	and.w	r3, r3, #2
 80406f8:	2b00      	cmp	r3, #0
 80406fa:	d015      	beq.n	8040728 <react_to_pattern+0x170>
//                printf("PATTERN %zu Turn off %d\n", pattern_index, pattern->targetDevice);

            	unsigned char printstr[50] = {0};
 80406fc:	f107 0308 	add.w	r3, r7, #8
 8040700:	2232      	movs	r2, #50	; 0x32
 8040702:	2100      	movs	r1, #0
 8040704:	4618      	mov	r0, r3
 8040706:	f002 ff08 	bl	804351a <memset>
                sprintf(printstr,"PATTERN %zu Turn off %d\r\n", pattern_index, pattern->targetDevice);
 804070a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 804070c:	781b      	ldrb	r3, [r3, #0]
 804070e:	f107 0008 	add.w	r0, r7, #8
 8040712:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8040716:	4911      	ldr	r1, [pc, #68]	; (804075c <react_to_pattern+0x1a4>)
 8040718:	f002 ff08 	bl	804352c <siprintf>
                print(printstr, sizeof(printstr));
 804071c:	f107 0308 	add.w	r3, r7, #8
 8040720:	2132      	movs	r1, #50	; 0x32
 8040722:	4618      	mov	r0, r3
 8040724:	f7ff ff24 	bl	8040570 <print>
    for (size_t pattern_index = 0; pattern_index < PATTERN_COUNT; pattern_index++) {
 8040728:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 804072c:	3301      	adds	r3, #1
 804072e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8040732:	2206      	movs	r2, #6
 8040734:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8040738:	4293      	cmp	r3, r2
 804073a:	f4ff af68 	bcc.w	804060e <react_to_pattern+0x56>

//                tdTurnOff(pattern->targetDevice);
            }
        }
    }
}
 804073e:	bf00      	nop
 8040740:	3790      	adds	r7, #144	; 0x90
 8040742:	46bd      	mov	sp, r7
 8040744:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8040748:	08044530 	.word	0x08044530
 804074c:	08044098 	.word	0x08044098
 8040750:	080444e0 	.word	0x080444e0
 8040754:	200180b8 	.word	0x200180b8
 8040758:	080440a0 	.word	0x080440a0
 804075c:	080440bc 	.word	0x080440bc

08040760 <listen_to_events>:


void listen_to_events(const char *data, int controllerId, int callbackId, void *context __attribute__((unused)))
{
 8040760:	b590      	push	{r4, r7, lr}
 8040762:	b0b5      	sub	sp, #212	; 0xd4
 8040764:	af00      	add	r7, sp, #0
 8040766:	60f8      	str	r0, [r7, #12]
 8040768:	60b9      	str	r1, [r7, #8]
 804076a:	607a      	str	r2, [r7, #4]
 804076c:	603b      	str	r3, [r7, #0]
//    struct timespec now_ts;
//    clock_gettime(CLOCK_MONOTONIC, &now_ts);
//    uint64_t now = now_ts.tv_sec * 1000 + now_ts.tv_nsec / 1000000;

	time_t seconds;
	seconds = time(NULL);
 804076e:	2000      	movs	r0, #0
 8040770:	f002 ff0e 	bl	8043590 <time>
 8040774:	e9c7 012e 	strd	r0, r1, [r7, #184]	; 0xb8
	uint64_t now = seconds;
 8040778:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 804077c:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
    bool __attribute__((annotate("sensitive"))) memory_added_pattern = false;
 8040780:	2300      	movs	r3, #0
 8040782:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf

    unsigned char funcstr[30] = {0};
 8040786:	f107 0380 	add.w	r3, r7, #128	; 0x80
 804078a:	221e      	movs	r2, #30
 804078c:	2100      	movs	r1, #0
 804078e:	4618      	mov	r0, r3
 8040790:	f002 fec3 	bl	804351a <memset>
    sprintf(funcstr, " %s \r\n", __func__);
 8040794:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8040798:	4a8a      	ldr	r2, [pc, #552]	; (80409c4 <listen_to_events+0x264>)
 804079a:	498b      	ldr	r1, [pc, #556]	; (80409c8 <listen_to_events+0x268>)
 804079c:	4618      	mov	r0, r3
 804079e:	f002 fec5 	bl	804352c <siprintf>
    print(funcstr, sizeof(funcstr));
 80407a2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80407a6:	211e      	movs	r1, #30
 80407a8:	4618      	mov	r0, r3
 80407aa:	f7ff fee1 	bl	8040570 <print>

    for (size_t device_id = 0; device_id < DEVICE_COUNT; device_id++) {
 80407ae:	2300      	movs	r3, #0
 80407b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80407b4:	e0f0      	b.n	8040998 <listen_to_events+0x238>
        const RoutedDevice* __attribute__((annotate("sensitive"))) device_routing = &DEVICE_ROUTINGS[device_id];
 80407b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80407ba:	00db      	lsls	r3, r3, #3
 80407bc:	4a83      	ldr	r2, [pc, #524]	; (80409cc <listen_to_events+0x26c>)
 80407be:	4413      	add	r3, r2
 80407c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        const size_t prefix_length = strlen(device_routing->switchPrefix);
 80407c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80407c8:	685b      	ldr	r3, [r3, #4]
 80407ca:	4618      	mov	r0, r3
 80407cc:	f7ff fd3e 	bl	804024c <strlen>
 80407d0:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
        if (strncmp(data, device_routing->switchPrefix, prefix_length) == 0) {
 80407d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80407d8:	685b      	ldr	r3, [r3, #4]
 80407da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80407de:	4619      	mov	r1, r3
 80407e0:	68f8      	ldr	r0, [r7, #12]
 80407e2:	f002 fec3 	bl	804356c <strncmp>
 80407e6:	4603      	mov	r3, r0
 80407e8:	2b00      	cmp	r3, #0
 80407ea:	d14a      	bne.n	8040882 <listen_to_events+0x122>
            const char* method_start = data + prefix_length;
 80407ec:	68fa      	ldr	r2, [r7, #12]
 80407ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80407f2:	4413      	add	r3, r2
 80407f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            for (size_t i = 1; i < SWITCH_MEMORY_ITEMS ; i++) {
 80407f8:	2301      	movs	r3, #1
 80407fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80407fe:	e013      	b.n	8040828 <listen_to_events+0xc8>
                g_switch_memory[i - 1] = g_switch_memory[i];
 8040800:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8040804:	3b01      	subs	r3, #1
 8040806:	4a72      	ldr	r2, [pc, #456]	; (80409d0 <listen_to_events+0x270>)
 8040808:	011b      	lsls	r3, r3, #4
 804080a:	18d1      	adds	r1, r2, r3
 804080c:	4a70      	ldr	r2, [pc, #448]	; (80409d0 <listen_to_events+0x270>)
 804080e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8040812:	011b      	lsls	r3, r3, #4
 8040814:	4413      	add	r3, r2
 8040816:	460c      	mov	r4, r1
 8040818:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 804081a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            for (size_t i = 1; i < SWITCH_MEMORY_ITEMS ; i++) {
 804081e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8040822:	3301      	adds	r3, #1
 8040824:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8040828:	2204      	movs	r2, #4
 804082a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 804082e:	4293      	cmp	r3, r2
 8040830:	d3e6      	bcc.n	8040800 <listen_to_events+0xa0>
            }
            MethodReact __attribute__((annotate("sensitive"))) method = REACT_TURNON;
 8040832:	2301      	movs	r3, #1
 8040834:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
            if (strcmp(method_start, METHOD_TURNOFF) == 0) {
 8040838:	4966      	ldr	r1, [pc, #408]	; (80409d4 <listen_to_events+0x274>)
 804083a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 804083e:	f7ff fcfb 	bl	8040238 <strcmp>
 8040842:	4603      	mov	r3, r0
 8040844:	2b00      	cmp	r3, #0
 8040846:	d102      	bne.n	804084e <listen_to_events+0xee>
                method = REACT_TURNOFF;
 8040848:	2302      	movs	r3, #2
 804084a:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
            }
            SwitchMemoryItem new_item = {now, method, device_routing->switchPrefix};
 804084e:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8040852:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
 8040856:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 804085a:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
 804085e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8040862:	685b      	ldr	r3, [r3, #4]
 8040864:	67fb      	str	r3, [r7, #124]	; 0x7c
            g_switch_memory[SWITCH_MEMORY_ITEMS - 1] = new_item;
 8040866:	2304      	movs	r3, #4
 8040868:	3b01      	subs	r3, #1
 804086a:	4a59      	ldr	r2, [pc, #356]	; (80409d0 <listen_to_events+0x270>)
 804086c:	011b      	lsls	r3, r3, #4
 804086e:	4413      	add	r3, r2
 8040870:	461c      	mov	r4, r3
 8040872:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8040876:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8040878:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            memory_added_pattern = true;
 804087c:	2301      	movs	r3, #1
 804087e:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
        }
        if (device_routing->targetDevice == DEVICE_NONE) {
 8040882:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8040886:	781b      	ldrb	r3, [r3, #0]
 8040888:	2b00      	cmp	r3, #0
 804088a:	d104      	bne.n	8040896 <listen_to_events+0x136>
//	    printf(" device none\n");
	    print(" device none\r\n", sizeof(" device none\r\n"));
 804088c:	210f      	movs	r1, #15
 804088e:	4852      	ldr	r0, [pc, #328]	; (80409d8 <listen_to_events+0x278>)
 8040890:	f7ff fe6e 	bl	8040570 <print>
            continue;
 8040894:	e07b      	b.n	804098e <listen_to_events+0x22e>
        }
        if (strncmp(data, device_routing->switchPrefix, prefix_length) == 0) {
 8040896:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 804089a:	685b      	ldr	r3, [r3, #4]
 804089c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80408a0:	4619      	mov	r1, r3
 80408a2:	68f8      	ldr	r0, [r7, #12]
 80408a4:	f002 fe62 	bl	804356c <strncmp>
 80408a8:	4603      	mov	r3, r0
 80408aa:	2b00      	cmp	r3, #0
 80408ac:	d16f      	bne.n	804098e <listen_to_events+0x22e>
            const char* __attribute__((annotate("sensitive"))) method_start = data + prefix_length;
 80408ae:	68fa      	ldr	r2, [r7, #12]
 80408b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80408b4:	4413      	add	r3, r2
 80408b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            if (strcmp(method_start, METHOD_TURNON) == 0) {
 80408ba:	4948      	ldr	r1, [pc, #288]	; (80409dc <listen_to_events+0x27c>)
 80408bc:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80408c0:	f7ff fcba 	bl	8040238 <strcmp>
 80408c4:	4603      	mov	r3, r0
 80408c6:	2b00      	cmp	r3, #0
 80408c8:	d122      	bne.n	8040910 <listen_to_events+0x1b0>
//                printf("Turn on %d\n", device_routing->targetDevice);

            	unsigned char printstr[30] = {0};
 80408ca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80408ce:	221e      	movs	r2, #30
 80408d0:	2100      	movs	r1, #0
 80408d2:	4618      	mov	r0, r3
 80408d4:	f002 fe21 	bl	804351a <memset>
                sprintf(printstr,"Turn on %d\r\n", device_routing->targetDevice);
 80408d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80408dc:	781b      	ldrb	r3, [r3, #0]
 80408de:	461a      	mov	r2, r3
 80408e0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80408e4:	493e      	ldr	r1, [pc, #248]	; (80409e0 <listen_to_events+0x280>)
 80408e6:	4618      	mov	r0, r3
 80408e8:	f002 fe20 	bl	804352c <siprintf>
                print(printstr, sizeof(printstr));
 80408ec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80408f0:	211e      	movs	r1, #30
 80408f2:	4618      	mov	r0, r3
 80408f4:	f7ff fe3c 	bl	8040570 <print>

                if (device_routing->react & REACT_TURNON) {
 80408f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80408fc:	785b      	ldrb	r3, [r3, #1]
 80408fe:	f003 0301 	and.w	r3, r3, #1
 8040902:	2b00      	cmp	r3, #0
 8040904:	d143      	bne.n	804098e <listen_to_events+0x22e>
//                    tdTurnOn(device_routing->targetDevice);
                } else {
//                    printf("IGNORED\n");
                    print("IGNORED\r\n", sizeof("IGNORED\r\n"));
 8040906:	210a      	movs	r1, #10
 8040908:	4836      	ldr	r0, [pc, #216]	; (80409e4 <listen_to_events+0x284>)
 804090a:	f7ff fe31 	bl	8040570 <print>
 804090e:	e03e      	b.n	804098e <listen_to_events+0x22e>
                }
            } else if (strcmp(method_start, METHOD_TURNOFF) == 0) {
 8040910:	4930      	ldr	r1, [pc, #192]	; (80409d4 <listen_to_events+0x274>)
 8040912:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8040916:	f7ff fc8f 	bl	8040238 <strcmp>
 804091a:	4603      	mov	r3, r0
 804091c:	2b00      	cmp	r3, #0
 804091e:	d122      	bne.n	8040966 <listen_to_events+0x206>
//                printf("Turn off %d\n", device_routing->targetDevice);
            	unsigned char printstr[30] = {0};
 8040920:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8040924:	221e      	movs	r2, #30
 8040926:	2100      	movs	r1, #0
 8040928:	4618      	mov	r0, r3
 804092a:	f002 fdf6 	bl	804351a <memset>
                sprintf(printstr,"Turn off %d\r\n", device_routing->targetDevice);
 804092e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8040932:	781b      	ldrb	r3, [r3, #0]
 8040934:	461a      	mov	r2, r3
 8040936:	f107 0330 	add.w	r3, r7, #48	; 0x30
 804093a:	492b      	ldr	r1, [pc, #172]	; (80409e8 <listen_to_events+0x288>)
 804093c:	4618      	mov	r0, r3
 804093e:	f002 fdf5 	bl	804352c <siprintf>
                print(printstr, sizeof(printstr));
 8040942:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8040946:	211e      	movs	r1, #30
 8040948:	4618      	mov	r0, r3
 804094a:	f7ff fe11 	bl	8040570 <print>

                if (device_routing->react & REACT_TURNOFF) {
 804094e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8040952:	785b      	ldrb	r3, [r3, #1]
 8040954:	f003 0302 	and.w	r3, r3, #2
 8040958:	2b00      	cmp	r3, #0
 804095a:	d118      	bne.n	804098e <listen_to_events+0x22e>
//                    tdTurnOff(device_routing->targetDevice);
                } else {
//                    printf("IGNORED\n");
                    print("IGNORED\r\n", sizeof("IGNORED\r\n"));
 804095c:	210a      	movs	r1, #10
 804095e:	4821      	ldr	r0, [pc, #132]	; (80409e4 <listen_to_events+0x284>)
 8040960:	f7ff fe06 	bl	8040570 <print>
 8040964:	e013      	b.n	804098e <listen_to_events+0x22e>
                }
            } else {
//                printf("Unknown method %s\n", data);
            	unsigned char printstr[30] = {0};
 8040966:	f107 0310 	add.w	r3, r7, #16
 804096a:	221e      	movs	r2, #30
 804096c:	2100      	movs	r1, #0
 804096e:	4618      	mov	r0, r3
 8040970:	f002 fdd3 	bl	804351a <memset>
                sprintf(printstr,"Unknown method %s\r\n", data);
 8040974:	f107 0310 	add.w	r3, r7, #16
 8040978:	68fa      	ldr	r2, [r7, #12]
 804097a:	491c      	ldr	r1, [pc, #112]	; (80409ec <listen_to_events+0x28c>)
 804097c:	4618      	mov	r0, r3
 804097e:	f002 fdd5 	bl	804352c <siprintf>
                print(printstr, sizeof(printstr));
 8040982:	f107 0310 	add.w	r3, r7, #16
 8040986:	211e      	movs	r1, #30
 8040988:	4618      	mov	r0, r3
 804098a:	f7ff fdf1 	bl	8040570 <print>
    for (size_t device_id = 0; device_id < DEVICE_COUNT; device_id++) {
 804098e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8040992:	3301      	adds	r3, #1
 8040994:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8040998:	2214      	movs	r2, #20
 804099a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 804099e:	4293      	cmp	r3, r2
 80409a0:	f4ff af09 	bcc.w	80407b6 <listen_to_events+0x56>
            }
        }
    }

    if (!memory_added_pattern) {
 80409a4:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80409a8:	f083 0301 	eor.w	r3, r3, #1
 80409ac:	b2db      	uxtb	r3, r3
 80409ae:	2b00      	cmp	r3, #0
 80409b0:	d003      	beq.n	80409ba <listen_to_events+0x25a>
        react_to_pattern(now);
 80409b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80409b6:	f7ff fdff 	bl	80405b8 <react_to_pattern>
    }

//    printf("II %d %d %s\n", controllerId, callbackId, data);
}
 80409ba:	bf00      	nop
 80409bc:	37d4      	adds	r7, #212	; 0xd4
 80409be:	46bd      	mov	sp, r7
 80409c0:	bd90      	pop	{r4, r7, pc}
 80409c2:	bf00      	nop
 80409c4:	08044544 	.word	0x08044544
 80409c8:	08044098 	.word	0x08044098
 80409cc:	08044440 	.word	0x08044440
 80409d0:	200180b8 	.word	0x200180b8
 80409d4:	08044520 	.word	0x08044520
 80409d8:	080440d8 	.word	0x080440d8
 80409dc:	08044510 	.word	0x08044510
 80409e0:	080440e8 	.word	0x080440e8
 80409e4:	080440f8 	.word	0x080440f8
 80409e8:	08044104 	.word	0x08044104
 80409ec:	08044114 	.word	0x08044114

080409f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80409f0:	b580      	push	{r7, lr}
 80409f2:	b09a      	sub	sp, #104	; 0x68
 80409f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80409f6:	f000 f9b8 	bl	8040d6a <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80409fa:	f000 f869 	bl	8040ad0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80409fe:	f000 f81b 	bl	8040a38 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

//  unsigned long start, end;
  int count = 0;
 8040a02:	2300      	movs	r3, #0
 8040a04:	667b      	str	r3, [r7, #100]	; 0x64
  char data[] = "class:command;protocol:arctech;model:selflearning;house:11799578;unit:12;group:0;method:turnon;";
 8040a06:	4a0b      	ldr	r2, [pc, #44]	; (8040a34 <main+0x44>)
 8040a08:	1d3b      	adds	r3, r7, #4
 8040a0a:	4611      	mov	r1, r2
 8040a0c:	2260      	movs	r2, #96	; 0x60
 8040a0e:	4618      	mov	r0, r3
 8040a10:	f002 fd78 	bl	8043504 <memcpy>

//  start = usecs();
  for (count = 0 ; count < 10; count++)
 8040a14:	2300      	movs	r3, #0
 8040a16:	667b      	str	r3, [r7, #100]	; 0x64
 8040a18:	e008      	b.n	8040a2c <main+0x3c>
	  listen_to_events(data,0,0,NULL);
 8040a1a:	1d38      	adds	r0, r7, #4
 8040a1c:	2300      	movs	r3, #0
 8040a1e:	2200      	movs	r2, #0
 8040a20:	2100      	movs	r1, #0
 8040a22:	f7ff fe9d 	bl	8040760 <listen_to_events>
  for (count = 0 ; count < 10; count++)
 8040a26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8040a28:	3301      	adds	r3, #1
 8040a2a:	667b      	str	r3, [r7, #100]	; 0x64
 8040a2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8040a2e:	2b09      	cmp	r3, #9
 8040a30:	ddf3      	ble.n	8040a1a <main+0x2a>
//  printf("round with attestation time usecs: %lu\n", end - start);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8040a32:	e7fe      	b.n	8040a32 <main+0x42>
 8040a34:	08044128 	.word	0x08044128

08040a38 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8040a38:	b580      	push	{r7, lr}
 8040a3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8040a3c:	4b22      	ldr	r3, [pc, #136]	; (8040ac8 <MX_USART1_UART_Init+0x90>)
 8040a3e:	4a23      	ldr	r2, [pc, #140]	; (8040acc <MX_USART1_UART_Init+0x94>)
 8040a40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8040a42:	4b21      	ldr	r3, [pc, #132]	; (8040ac8 <MX_USART1_UART_Init+0x90>)
 8040a44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8040a48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8040a4a:	4b1f      	ldr	r3, [pc, #124]	; (8040ac8 <MX_USART1_UART_Init+0x90>)
 8040a4c:	2200      	movs	r2, #0
 8040a4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8040a50:	4b1d      	ldr	r3, [pc, #116]	; (8040ac8 <MX_USART1_UART_Init+0x90>)
 8040a52:	2200      	movs	r2, #0
 8040a54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8040a56:	4b1c      	ldr	r3, [pc, #112]	; (8040ac8 <MX_USART1_UART_Init+0x90>)
 8040a58:	2200      	movs	r2, #0
 8040a5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8040a5c:	4b1a      	ldr	r3, [pc, #104]	; (8040ac8 <MX_USART1_UART_Init+0x90>)
 8040a5e:	220c      	movs	r2, #12
 8040a60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8040a62:	4b19      	ldr	r3, [pc, #100]	; (8040ac8 <MX_USART1_UART_Init+0x90>)
 8040a64:	2200      	movs	r2, #0
 8040a66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8040a68:	4b17      	ldr	r3, [pc, #92]	; (8040ac8 <MX_USART1_UART_Init+0x90>)
 8040a6a:	2200      	movs	r2, #0
 8040a6c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8040a6e:	4b16      	ldr	r3, [pc, #88]	; (8040ac8 <MX_USART1_UART_Init+0x90>)
 8040a70:	2200      	movs	r2, #0
 8040a72:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8040a74:	4b14      	ldr	r3, [pc, #80]	; (8040ac8 <MX_USART1_UART_Init+0x90>)
 8040a76:	2200      	movs	r2, #0
 8040a78:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8040a7a:	4b13      	ldr	r3, [pc, #76]	; (8040ac8 <MX_USART1_UART_Init+0x90>)
 8040a7c:	2200      	movs	r2, #0
 8040a7e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8040a80:	4811      	ldr	r0, [pc, #68]	; (8040ac8 <MX_USART1_UART_Init+0x90>)
 8040a82:	f001 fadf 	bl	8042044 <HAL_UART_Init>
 8040a86:	4603      	mov	r3, r0
 8040a88:	2b00      	cmp	r3, #0
 8040a8a:	d001      	beq.n	8040a90 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8040a8c:	f000 f844 	bl	8040b18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8040a90:	2100      	movs	r1, #0
 8040a92:	480d      	ldr	r0, [pc, #52]	; (8040ac8 <MX_USART1_UART_Init+0x90>)
 8040a94:	f002 fc28 	bl	80432e8 <HAL_UARTEx_SetTxFifoThreshold>
 8040a98:	4603      	mov	r3, r0
 8040a9a:	2b00      	cmp	r3, #0
 8040a9c:	d001      	beq.n	8040aa2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8040a9e:	f000 f83b 	bl	8040b18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8040aa2:	2100      	movs	r1, #0
 8040aa4:	4808      	ldr	r0, [pc, #32]	; (8040ac8 <MX_USART1_UART_Init+0x90>)
 8040aa6:	f002 fc5d 	bl	8043364 <HAL_UARTEx_SetRxFifoThreshold>
 8040aaa:	4603      	mov	r3, r0
 8040aac:	2b00      	cmp	r3, #0
 8040aae:	d001      	beq.n	8040ab4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8040ab0:	f000 f832 	bl	8040b18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8040ab4:	4804      	ldr	r0, [pc, #16]	; (8040ac8 <MX_USART1_UART_Init+0x90>)
 8040ab6:	f002 fbde 	bl	8043276 <HAL_UARTEx_DisableFifoMode>
 8040aba:	4603      	mov	r3, r0
 8040abc:	2b00      	cmp	r3, #0
 8040abe:	d001      	beq.n	8040ac4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8040ac0:	f000 f82a 	bl	8040b18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8040ac4:	bf00      	nop
 8040ac6:	bd80      	pop	{r7, pc}
 8040ac8:	20018104 	.word	0x20018104
 8040acc:	40013800 	.word	0x40013800

08040ad0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8040ad0:	b480      	push	{r7}
 8040ad2:	b083      	sub	sp, #12
 8040ad4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8040ad6:	4b0f      	ldr	r3, [pc, #60]	; (8040b14 <MX_GPIO_Init+0x44>)
 8040ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040ada:	4a0e      	ldr	r2, [pc, #56]	; (8040b14 <MX_GPIO_Init+0x44>)
 8040adc:	f043 0304 	orr.w	r3, r3, #4
 8040ae0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040ae2:	4b0c      	ldr	r3, [pc, #48]	; (8040b14 <MX_GPIO_Init+0x44>)
 8040ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040ae6:	f003 0304 	and.w	r3, r3, #4
 8040aea:	607b      	str	r3, [r7, #4]
 8040aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8040aee:	4b09      	ldr	r3, [pc, #36]	; (8040b14 <MX_GPIO_Init+0x44>)
 8040af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040af2:	4a08      	ldr	r2, [pc, #32]	; (8040b14 <MX_GPIO_Init+0x44>)
 8040af4:	f043 0301 	orr.w	r3, r3, #1
 8040af8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040afa:	4b06      	ldr	r3, [pc, #24]	; (8040b14 <MX_GPIO_Init+0x44>)
 8040afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040afe:	f003 0301 	and.w	r3, r3, #1
 8040b02:	603b      	str	r3, [r7, #0]
 8040b04:	683b      	ldr	r3, [r7, #0]

}
 8040b06:	bf00      	nop
 8040b08:	370c      	adds	r7, #12
 8040b0a:	46bd      	mov	sp, r7
 8040b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040b10:	4770      	bx	lr
 8040b12:	bf00      	nop
 8040b14:	40021000 	.word	0x40021000

08040b18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8040b18:	b480      	push	{r7}
 8040b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8040b1c:	bf00      	nop
 8040b1e:	46bd      	mov	sp, r7
 8040b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040b24:	4770      	bx	lr
	...

08040b28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8040b28:	b480      	push	{r7}
 8040b2a:	b083      	sub	sp, #12
 8040b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8040b2e:	4b0f      	ldr	r3, [pc, #60]	; (8040b6c <HAL_MspInit+0x44>)
 8040b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8040b32:	4a0e      	ldr	r2, [pc, #56]	; (8040b6c <HAL_MspInit+0x44>)
 8040b34:	f043 0301 	orr.w	r3, r3, #1
 8040b38:	6613      	str	r3, [r2, #96]	; 0x60
 8040b3a:	4b0c      	ldr	r3, [pc, #48]	; (8040b6c <HAL_MspInit+0x44>)
 8040b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8040b3e:	f003 0301 	and.w	r3, r3, #1
 8040b42:	607b      	str	r3, [r7, #4]
 8040b44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8040b46:	4b09      	ldr	r3, [pc, #36]	; (8040b6c <HAL_MspInit+0x44>)
 8040b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8040b4a:	4a08      	ldr	r2, [pc, #32]	; (8040b6c <HAL_MspInit+0x44>)
 8040b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8040b50:	6593      	str	r3, [r2, #88]	; 0x58
 8040b52:	4b06      	ldr	r3, [pc, #24]	; (8040b6c <HAL_MspInit+0x44>)
 8040b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8040b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8040b5a:	603b      	str	r3, [r7, #0]
 8040b5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8040b5e:	bf00      	nop
 8040b60:	370c      	adds	r7, #12
 8040b62:	46bd      	mov	sp, r7
 8040b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040b68:	4770      	bx	lr
 8040b6a:	bf00      	nop
 8040b6c:	40021000 	.word	0x40021000

08040b70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8040b70:	b580      	push	{r7, lr}
 8040b72:	b0ae      	sub	sp, #184	; 0xb8
 8040b74:	af00      	add	r7, sp, #0
 8040b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040b78:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8040b7c:	2200      	movs	r2, #0
 8040b7e:	601a      	str	r2, [r3, #0]
 8040b80:	605a      	str	r2, [r3, #4]
 8040b82:	609a      	str	r2, [r3, #8]
 8040b84:	60da      	str	r2, [r3, #12]
 8040b86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8040b88:	f107 0310 	add.w	r3, r7, #16
 8040b8c:	2294      	movs	r2, #148	; 0x94
 8040b8e:	2100      	movs	r1, #0
 8040b90:	4618      	mov	r0, r3
 8040b92:	f002 fcc2 	bl	804351a <memset>
  if(huart->Instance==USART1)
 8040b96:	687b      	ldr	r3, [r7, #4]
 8040b98:	681b      	ldr	r3, [r3, #0]
 8040b9a:	4a25      	ldr	r2, [pc, #148]	; (8040c30 <HAL_UART_MspInit+0xc0>)
 8040b9c:	4293      	cmp	r3, r2
 8040b9e:	d143      	bne.n	8040c28 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8040ba0:	2301      	movs	r3, #1
 8040ba2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8040ba4:	2300      	movs	r3, #0
 8040ba6:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8040ba8:	f107 0310 	add.w	r3, r7, #16
 8040bac:	4618      	mov	r0, r3
 8040bae:	f000 fd75 	bl	804169c <HAL_RCCEx_PeriphCLKConfig>
 8040bb2:	4603      	mov	r3, r0
 8040bb4:	2b00      	cmp	r3, #0
 8040bb6:	d001      	beq.n	8040bbc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8040bb8:	f7ff ffae 	bl	8040b18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8040bbc:	4b1d      	ldr	r3, [pc, #116]	; (8040c34 <HAL_UART_MspInit+0xc4>)
 8040bbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8040bc0:	4a1c      	ldr	r2, [pc, #112]	; (8040c34 <HAL_UART_MspInit+0xc4>)
 8040bc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8040bc6:	6613      	str	r3, [r2, #96]	; 0x60
 8040bc8:	4b1a      	ldr	r3, [pc, #104]	; (8040c34 <HAL_UART_MspInit+0xc4>)
 8040bca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8040bcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8040bd0:	60fb      	str	r3, [r7, #12]
 8040bd2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8040bd4:	4b17      	ldr	r3, [pc, #92]	; (8040c34 <HAL_UART_MspInit+0xc4>)
 8040bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040bd8:	4a16      	ldr	r2, [pc, #88]	; (8040c34 <HAL_UART_MspInit+0xc4>)
 8040bda:	f043 0301 	orr.w	r3, r3, #1
 8040bde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040be0:	4b14      	ldr	r3, [pc, #80]	; (8040c34 <HAL_UART_MspInit+0xc4>)
 8040be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040be4:	f003 0301 	and.w	r3, r3, #1
 8040be8:	60bb      	str	r3, [r7, #8]
 8040bea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8040bec:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8040bf0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8040bf4:	2302      	movs	r3, #2
 8040bf6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040bfa:	2300      	movs	r3, #0
 8040bfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040c00:	2300      	movs	r3, #0
 8040c02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8040c06:	2307      	movs	r3, #7
 8040c08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8040c0c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8040c10:	4619      	mov	r1, r3
 8040c12:	4809      	ldr	r0, [pc, #36]	; (8040c38 <HAL_UART_MspInit+0xc8>)
 8040c14:	f000 faea 	bl	80411ec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8040c18:	2200      	movs	r2, #0
 8040c1a:	2100      	movs	r1, #0
 8040c1c:	203d      	movs	r0, #61	; 0x3d
 8040c1e:	f000 f9f6 	bl	804100e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8040c22:	203d      	movs	r0, #61	; 0x3d
 8040c24:	f000 fa0d 	bl	8041042 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8040c28:	bf00      	nop
 8040c2a:	37b8      	adds	r7, #184	; 0xb8
 8040c2c:	46bd      	mov	sp, r7
 8040c2e:	bd80      	pop	{r7, pc}
 8040c30:	40013800 	.word	0x40013800
 8040c34:	40021000 	.word	0x40021000
 8040c38:	42020000 	.word	0x42020000

08040c3c <MemManage_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8040c3c:	b480      	push	{r7}
 8040c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8040c40:	e7fe      	b.n	8040c40 <MemManage_Handler+0x4>

08040c42 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8040c42:	b480      	push	{r7}
 8040c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8040c46:	e7fe      	b.n	8040c46 <UsageFault_Handler+0x4>

08040c48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8040c48:	b480      	push	{r7}
 8040c4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8040c4c:	bf00      	nop
 8040c4e:	46bd      	mov	sp, r7
 8040c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c54:	4770      	bx	lr

08040c56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8040c56:	b480      	push	{r7}
 8040c58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8040c5a:	bf00      	nop
 8040c5c:	46bd      	mov	sp, r7
 8040c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c62:	4770      	bx	lr

08040c64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8040c64:	b580      	push	{r7, lr}
 8040c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8040c68:	f000 f8d6 	bl	8040e18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8040c6c:	bf00      	nop
 8040c6e:	bd80      	pop	{r7, pc}

08040c70 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 26.
  */
void USART1_IRQHandler(void)
{
 8040c70:	b580      	push	{r7, lr}
 8040c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8040c74:	4802      	ldr	r0, [pc, #8]	; (8040c80 <USART1_IRQHandler+0x10>)
 8040c76:	f001 fab9 	bl	80421ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8040c7a:	bf00      	nop
 8040c7c:	bd80      	pop	{r7, pc}
 8040c7e:	bf00      	nop
 8040c80:	20018104 	.word	0x20018104

08040c84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8040c84:	b580      	push	{r7, lr}
 8040c86:	b086      	sub	sp, #24
 8040c88:	af00      	add	r7, sp, #0
 8040c8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8040c8c:	4a14      	ldr	r2, [pc, #80]	; (8040ce0 <_sbrk+0x5c>)
 8040c8e:	4b15      	ldr	r3, [pc, #84]	; (8040ce4 <_sbrk+0x60>)
 8040c90:	1ad3      	subs	r3, r2, r3
 8040c92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8040c94:	697b      	ldr	r3, [r7, #20]
 8040c96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8040c98:	4b13      	ldr	r3, [pc, #76]	; (8040ce8 <_sbrk+0x64>)
 8040c9a:	681b      	ldr	r3, [r3, #0]
 8040c9c:	2b00      	cmp	r3, #0
 8040c9e:	d102      	bne.n	8040ca6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8040ca0:	4b11      	ldr	r3, [pc, #68]	; (8040ce8 <_sbrk+0x64>)
 8040ca2:	4a12      	ldr	r2, [pc, #72]	; (8040cec <_sbrk+0x68>)
 8040ca4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8040ca6:	4b10      	ldr	r3, [pc, #64]	; (8040ce8 <_sbrk+0x64>)
 8040ca8:	681a      	ldr	r2, [r3, #0]
 8040caa:	687b      	ldr	r3, [r7, #4]
 8040cac:	4413      	add	r3, r2
 8040cae:	693a      	ldr	r2, [r7, #16]
 8040cb0:	429a      	cmp	r2, r3
 8040cb2:	d207      	bcs.n	8040cc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8040cb4:	f002 fbfc 	bl	80434b0 <__errno>
 8040cb8:	4602      	mov	r2, r0
 8040cba:	230c      	movs	r3, #12
 8040cbc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8040cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8040cc2:	e009      	b.n	8040cd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8040cc4:	4b08      	ldr	r3, [pc, #32]	; (8040ce8 <_sbrk+0x64>)
 8040cc6:	681b      	ldr	r3, [r3, #0]
 8040cc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8040cca:	4b07      	ldr	r3, [pc, #28]	; (8040ce8 <_sbrk+0x64>)
 8040ccc:	681a      	ldr	r2, [r3, #0]
 8040cce:	687b      	ldr	r3, [r7, #4]
 8040cd0:	4413      	add	r3, r2
 8040cd2:	4a05      	ldr	r2, [pc, #20]	; (8040ce8 <_sbrk+0x64>)
 8040cd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8040cd6:	68fb      	ldr	r3, [r7, #12]
}
 8040cd8:	4618      	mov	r0, r3
 8040cda:	3718      	adds	r7, #24
 8040cdc:	46bd      	mov	sp, r7
 8040cde:	bd80      	pop	{r7, pc}
 8040ce0:	20030000 	.word	0x20030000
 8040ce4:	00000400 	.word	0x00000400
 8040ce8:	200180f8 	.word	0x200180f8
 8040cec:	200181a0 	.word	0x200181a0

08040cf0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8040cf0:	b480      	push	{r7}
 8040cf2:	af00      	add	r7, sp, #0
#endif

  /* Non-secure main application shall call SystemCoreClockUpdate() to update */
  /* the SystemCoreClock variable to insure non-secure application relies on  */
  /* the initial clock reference set by secure application.                   */
}
 8040cf4:	bf00      	nop
 8040cf6:	46bd      	mov	sp, r7
 8040cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040cfc:	4770      	bx	lr
	...

08040d00 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8040d00:	b580      	push	{r7, lr}
 8040d02:	af00      	add	r7, sp, #0
  /* Get the SystemCoreClock value from the secure domain */
  SystemCoreClock = SECURE_SystemCoreClockUpdate();
 8040d04:	f003 f870 	bl	8043de8 <__SECURE_SystemCoreClockUpdate_veneer>
 8040d08:	4602      	mov	r2, r0
 8040d0a:	4b02      	ldr	r3, [pc, #8]	; (8040d14 <SystemCoreClockUpdate+0x14>)
 8040d0c:	601a      	str	r2, [r3, #0]
}
 8040d0e:	bf00      	nop
 8040d10:	bd80      	pop	{r7, pc}
 8040d12:	bf00      	nop
 8040d14:	20018028 	.word	0x20018028

08040d18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8040d18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8040d50 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8040d1c:	f7ff ffe8 	bl	8040cf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8040d20:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8040d22:	e003      	b.n	8040d2c <LoopCopyDataInit>

08040d24 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8040d24:	4b0b      	ldr	r3, [pc, #44]	; (8040d54 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8040d26:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8040d28:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8040d2a:	3104      	adds	r1, #4

08040d2c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8040d2c:	480a      	ldr	r0, [pc, #40]	; (8040d58 <LoopForever+0xa>)
	ldr	r3, =_edata
 8040d2e:	4b0b      	ldr	r3, [pc, #44]	; (8040d5c <LoopForever+0xe>)
	adds	r2, r0, r1
 8040d30:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8040d32:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8040d34:	d3f6      	bcc.n	8040d24 <CopyDataInit>
	ldr	r2, =_sbss
 8040d36:	4a0a      	ldr	r2, [pc, #40]	; (8040d60 <LoopForever+0x12>)
	b	LoopFillZerobss
 8040d38:	e002      	b.n	8040d40 <LoopFillZerobss>

08040d3a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8040d3a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8040d3c:	f842 3b04 	str.w	r3, [r2], #4

08040d40 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8040d40:	4b08      	ldr	r3, [pc, #32]	; (8040d64 <LoopForever+0x16>)
	cmp	r2, r3
 8040d42:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8040d44:	d3f9      	bcc.n	8040d3a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8040d46:	f002 fbb9 	bl	80434bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8040d4a:	f7ff fe51 	bl	80409f0 <main>

08040d4e <LoopForever>:

LoopForever:
    b LoopForever
 8040d4e:	e7fe      	b.n	8040d4e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8040d50:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8040d54:	0804460c 	.word	0x0804460c
	ldr	r0, =_sdata
 8040d58:	20018000 	.word	0x20018000
	ldr	r3, =_edata
 8040d5c:	20018098 	.word	0x20018098
	ldr	r2, =_sbss
 8040d60:	20018098 	.word	0x20018098
	ldr	r3, = _ebss
 8040d64:	2001819c 	.word	0x2001819c

08040d68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8040d68:	e7fe      	b.n	8040d68 <ADC1_2_IRQHandler>

08040d6a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8040d6a:	b580      	push	{r7, lr}
 8040d6c:	b082      	sub	sp, #8
 8040d6e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8040d70:	2300      	movs	r3, #0
 8040d72:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8040d74:	2004      	movs	r0, #4
 8040d76:	f000 f93f 	bl	8040ff8 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8040d7a:	f7ff ffc1 	bl	8040d00 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8040d7e:	2000      	movs	r0, #0
 8040d80:	f000 f80e 	bl	8040da0 <HAL_InitTick>
 8040d84:	4603      	mov	r3, r0
 8040d86:	2b00      	cmp	r3, #0
 8040d88:	d002      	beq.n	8040d90 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8040d8a:	2301      	movs	r3, #1
 8040d8c:	71fb      	strb	r3, [r7, #7]
 8040d8e:	e001      	b.n	8040d94 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8040d90:	f7ff feca 	bl	8040b28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8040d94:	79fb      	ldrb	r3, [r7, #7]
}
 8040d96:	4618      	mov	r0, r3
 8040d98:	3708      	adds	r7, #8
 8040d9a:	46bd      	mov	sp, r7
 8040d9c:	bd80      	pop	{r7, pc}
	...

08040da0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8040da0:	b580      	push	{r7, lr}
 8040da2:	b084      	sub	sp, #16
 8040da4:	af00      	add	r7, sp, #0
 8040da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8040da8:	2300      	movs	r3, #0
 8040daa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8040dac:	4b17      	ldr	r3, [pc, #92]	; (8040e0c <HAL_InitTick+0x6c>)
 8040dae:	781b      	ldrb	r3, [r3, #0]
 8040db0:	2b00      	cmp	r3, #0
 8040db2:	d023      	beq.n	8040dfc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8040db4:	4b16      	ldr	r3, [pc, #88]	; (8040e10 <HAL_InitTick+0x70>)
 8040db6:	681a      	ldr	r2, [r3, #0]
 8040db8:	4b14      	ldr	r3, [pc, #80]	; (8040e0c <HAL_InitTick+0x6c>)
 8040dba:	781b      	ldrb	r3, [r3, #0]
 8040dbc:	4619      	mov	r1, r3
 8040dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8040dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8040dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8040dca:	4618      	mov	r0, r3
 8040dcc:	f000 f947 	bl	804105e <HAL_SYSTICK_Config>
 8040dd0:	4603      	mov	r3, r0
 8040dd2:	2b00      	cmp	r3, #0
 8040dd4:	d10f      	bne.n	8040df6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8040dd6:	687b      	ldr	r3, [r7, #4]
 8040dd8:	2b07      	cmp	r3, #7
 8040dda:	d809      	bhi.n	8040df0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8040ddc:	2200      	movs	r2, #0
 8040dde:	6879      	ldr	r1, [r7, #4]
 8040de0:	f04f 30ff 	mov.w	r0, #4294967295
 8040de4:	f000 f913 	bl	804100e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8040de8:	4a0a      	ldr	r2, [pc, #40]	; (8040e14 <HAL_InitTick+0x74>)
 8040dea:	687b      	ldr	r3, [r7, #4]
 8040dec:	6013      	str	r3, [r2, #0]
 8040dee:	e007      	b.n	8040e00 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8040df0:	2301      	movs	r3, #1
 8040df2:	73fb      	strb	r3, [r7, #15]
 8040df4:	e004      	b.n	8040e00 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8040df6:	2301      	movs	r3, #1
 8040df8:	73fb      	strb	r3, [r7, #15]
 8040dfa:	e001      	b.n	8040e00 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8040dfc:	2301      	movs	r3, #1
 8040dfe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8040e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8040e02:	4618      	mov	r0, r3
 8040e04:	3710      	adds	r7, #16
 8040e06:	46bd      	mov	sp, r7
 8040e08:	bd80      	pop	{r7, pc}
 8040e0a:	bf00      	nop
 8040e0c:	20018030 	.word	0x20018030
 8040e10:	20018028 	.word	0x20018028
 8040e14:	2001802c 	.word	0x2001802c

08040e18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8040e18:	b480      	push	{r7}
 8040e1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8040e1c:	4b06      	ldr	r3, [pc, #24]	; (8040e38 <HAL_IncTick+0x20>)
 8040e1e:	781b      	ldrb	r3, [r3, #0]
 8040e20:	461a      	mov	r2, r3
 8040e22:	4b06      	ldr	r3, [pc, #24]	; (8040e3c <HAL_IncTick+0x24>)
 8040e24:	681b      	ldr	r3, [r3, #0]
 8040e26:	4413      	add	r3, r2
 8040e28:	4a04      	ldr	r2, [pc, #16]	; (8040e3c <HAL_IncTick+0x24>)
 8040e2a:	6013      	str	r3, [r2, #0]
}
 8040e2c:	bf00      	nop
 8040e2e:	46bd      	mov	sp, r7
 8040e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040e34:	4770      	bx	lr
 8040e36:	bf00      	nop
 8040e38:	20018030 	.word	0x20018030
 8040e3c:	20018194 	.word	0x20018194

08040e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8040e40:	b480      	push	{r7}
 8040e42:	af00      	add	r7, sp, #0
  return uwTick;
 8040e44:	4b03      	ldr	r3, [pc, #12]	; (8040e54 <HAL_GetTick+0x14>)
 8040e46:	681b      	ldr	r3, [r3, #0]
}
 8040e48:	4618      	mov	r0, r3
 8040e4a:	46bd      	mov	sp, r7
 8040e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040e50:	4770      	bx	lr
 8040e52:	bf00      	nop
 8040e54:	20018194 	.word	0x20018194

08040e58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040e58:	b480      	push	{r7}
 8040e5a:	b085      	sub	sp, #20
 8040e5c:	af00      	add	r7, sp, #0
 8040e5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8040e60:	687b      	ldr	r3, [r7, #4]
 8040e62:	f003 0307 	and.w	r3, r3, #7
 8040e66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8040e68:	4b0c      	ldr	r3, [pc, #48]	; (8040e9c <__NVIC_SetPriorityGrouping+0x44>)
 8040e6a:	68db      	ldr	r3, [r3, #12]
 8040e6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8040e6e:	68ba      	ldr	r2, [r7, #8]
 8040e70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8040e74:	4013      	ands	r3, r2
 8040e76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8040e78:	68fb      	ldr	r3, [r7, #12]
 8040e7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8040e7c:	68bb      	ldr	r3, [r7, #8]
 8040e7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8040e80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8040e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8040e88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8040e8a:	4a04      	ldr	r2, [pc, #16]	; (8040e9c <__NVIC_SetPriorityGrouping+0x44>)
 8040e8c:	68bb      	ldr	r3, [r7, #8]
 8040e8e:	60d3      	str	r3, [r2, #12]
}
 8040e90:	bf00      	nop
 8040e92:	3714      	adds	r7, #20
 8040e94:	46bd      	mov	sp, r7
 8040e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040e9a:	4770      	bx	lr
 8040e9c:	e000ed00 	.word	0xe000ed00

08040ea0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8040ea0:	b480      	push	{r7}
 8040ea2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8040ea4:	4b04      	ldr	r3, [pc, #16]	; (8040eb8 <__NVIC_GetPriorityGrouping+0x18>)
 8040ea6:	68db      	ldr	r3, [r3, #12]
 8040ea8:	0a1b      	lsrs	r3, r3, #8
 8040eaa:	f003 0307 	and.w	r3, r3, #7
}
 8040eae:	4618      	mov	r0, r3
 8040eb0:	46bd      	mov	sp, r7
 8040eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040eb6:	4770      	bx	lr
 8040eb8:	e000ed00 	.word	0xe000ed00

08040ebc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8040ebc:	b480      	push	{r7}
 8040ebe:	b083      	sub	sp, #12
 8040ec0:	af00      	add	r7, sp, #0
 8040ec2:	4603      	mov	r3, r0
 8040ec4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8040ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040eca:	2b00      	cmp	r3, #0
 8040ecc:	db0b      	blt.n	8040ee6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8040ece:	79fb      	ldrb	r3, [r7, #7]
 8040ed0:	f003 021f 	and.w	r2, r3, #31
 8040ed4:	4907      	ldr	r1, [pc, #28]	; (8040ef4 <__NVIC_EnableIRQ+0x38>)
 8040ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040eda:	095b      	lsrs	r3, r3, #5
 8040edc:	2001      	movs	r0, #1
 8040ede:	fa00 f202 	lsl.w	r2, r0, r2
 8040ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8040ee6:	bf00      	nop
 8040ee8:	370c      	adds	r7, #12
 8040eea:	46bd      	mov	sp, r7
 8040eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040ef0:	4770      	bx	lr
 8040ef2:	bf00      	nop
 8040ef4:	e000e100 	.word	0xe000e100

08040ef8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8040ef8:	b480      	push	{r7}
 8040efa:	b083      	sub	sp, #12
 8040efc:	af00      	add	r7, sp, #0
 8040efe:	4603      	mov	r3, r0
 8040f00:	6039      	str	r1, [r7, #0]
 8040f02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8040f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040f08:	2b00      	cmp	r3, #0
 8040f0a:	db0a      	blt.n	8040f22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040f0c:	683b      	ldr	r3, [r7, #0]
 8040f0e:	b2da      	uxtb	r2, r3
 8040f10:	490c      	ldr	r1, [pc, #48]	; (8040f44 <__NVIC_SetPriority+0x4c>)
 8040f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040f16:	0152      	lsls	r2, r2, #5
 8040f18:	b2d2      	uxtb	r2, r2
 8040f1a:	440b      	add	r3, r1
 8040f1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8040f20:	e00a      	b.n	8040f38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040f22:	683b      	ldr	r3, [r7, #0]
 8040f24:	b2da      	uxtb	r2, r3
 8040f26:	4908      	ldr	r1, [pc, #32]	; (8040f48 <__NVIC_SetPriority+0x50>)
 8040f28:	79fb      	ldrb	r3, [r7, #7]
 8040f2a:	f003 030f 	and.w	r3, r3, #15
 8040f2e:	3b04      	subs	r3, #4
 8040f30:	0152      	lsls	r2, r2, #5
 8040f32:	b2d2      	uxtb	r2, r2
 8040f34:	440b      	add	r3, r1
 8040f36:	761a      	strb	r2, [r3, #24]
}
 8040f38:	bf00      	nop
 8040f3a:	370c      	adds	r7, #12
 8040f3c:	46bd      	mov	sp, r7
 8040f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040f42:	4770      	bx	lr
 8040f44:	e000e100 	.word	0xe000e100
 8040f48:	e000ed00 	.word	0xe000ed00

08040f4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8040f4c:	b480      	push	{r7}
 8040f4e:	b089      	sub	sp, #36	; 0x24
 8040f50:	af00      	add	r7, sp, #0
 8040f52:	60f8      	str	r0, [r7, #12]
 8040f54:	60b9      	str	r1, [r7, #8]
 8040f56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8040f58:	68fb      	ldr	r3, [r7, #12]
 8040f5a:	f003 0307 	and.w	r3, r3, #7
 8040f5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8040f60:	69fb      	ldr	r3, [r7, #28]
 8040f62:	f1c3 0307 	rsb	r3, r3, #7
 8040f66:	2b03      	cmp	r3, #3
 8040f68:	bf28      	it	cs
 8040f6a:	2303      	movcs	r3, #3
 8040f6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8040f6e:	69fb      	ldr	r3, [r7, #28]
 8040f70:	3303      	adds	r3, #3
 8040f72:	2b06      	cmp	r3, #6
 8040f74:	d902      	bls.n	8040f7c <NVIC_EncodePriority+0x30>
 8040f76:	69fb      	ldr	r3, [r7, #28]
 8040f78:	3b04      	subs	r3, #4
 8040f7a:	e000      	b.n	8040f7e <NVIC_EncodePriority+0x32>
 8040f7c:	2300      	movs	r3, #0
 8040f7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040f80:	f04f 32ff 	mov.w	r2, #4294967295
 8040f84:	69bb      	ldr	r3, [r7, #24]
 8040f86:	fa02 f303 	lsl.w	r3, r2, r3
 8040f8a:	43da      	mvns	r2, r3
 8040f8c:	68bb      	ldr	r3, [r7, #8]
 8040f8e:	401a      	ands	r2, r3
 8040f90:	697b      	ldr	r3, [r7, #20]
 8040f92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8040f94:	f04f 31ff 	mov.w	r1, #4294967295
 8040f98:	697b      	ldr	r3, [r7, #20]
 8040f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8040f9e:	43d9      	mvns	r1, r3
 8040fa0:	687b      	ldr	r3, [r7, #4]
 8040fa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040fa4:	4313      	orrs	r3, r2
         );
}
 8040fa6:	4618      	mov	r0, r3
 8040fa8:	3724      	adds	r7, #36	; 0x24
 8040faa:	46bd      	mov	sp, r7
 8040fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040fb0:	4770      	bx	lr
	...

08040fb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8040fb4:	b580      	push	{r7, lr}
 8040fb6:	b082      	sub	sp, #8
 8040fb8:	af00      	add	r7, sp, #0
 8040fba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8040fbc:	687b      	ldr	r3, [r7, #4]
 8040fbe:	3b01      	subs	r3, #1
 8040fc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8040fc4:	d301      	bcc.n	8040fca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8040fc6:	2301      	movs	r3, #1
 8040fc8:	e00f      	b.n	8040fea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8040fca:	4a0a      	ldr	r2, [pc, #40]	; (8040ff4 <SysTick_Config+0x40>)
 8040fcc:	687b      	ldr	r3, [r7, #4]
 8040fce:	3b01      	subs	r3, #1
 8040fd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8040fd2:	2107      	movs	r1, #7
 8040fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8040fd8:	f7ff ff8e 	bl	8040ef8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8040fdc:	4b05      	ldr	r3, [pc, #20]	; (8040ff4 <SysTick_Config+0x40>)
 8040fde:	2200      	movs	r2, #0
 8040fe0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8040fe2:	4b04      	ldr	r3, [pc, #16]	; (8040ff4 <SysTick_Config+0x40>)
 8040fe4:	2207      	movs	r2, #7
 8040fe6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8040fe8:	2300      	movs	r3, #0
}
 8040fea:	4618      	mov	r0, r3
 8040fec:	3708      	adds	r7, #8
 8040fee:	46bd      	mov	sp, r7
 8040ff0:	bd80      	pop	{r7, pc}
 8040ff2:	bf00      	nop
 8040ff4:	e000e010 	.word	0xe000e010

08040ff8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040ff8:	b580      	push	{r7, lr}
 8040ffa:	b082      	sub	sp, #8
 8040ffc:	af00      	add	r7, sp, #0
 8040ffe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8041000:	6878      	ldr	r0, [r7, #4]
 8041002:	f7ff ff29 	bl	8040e58 <__NVIC_SetPriorityGrouping>
}
 8041006:	bf00      	nop
 8041008:	3708      	adds	r7, #8
 804100a:	46bd      	mov	sp, r7
 804100c:	bd80      	pop	{r7, pc}

0804100e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 804100e:	b580      	push	{r7, lr}
 8041010:	b086      	sub	sp, #24
 8041012:	af00      	add	r7, sp, #0
 8041014:	4603      	mov	r3, r0
 8041016:	60b9      	str	r1, [r7, #8]
 8041018:	607a      	str	r2, [r7, #4]
 804101a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 804101c:	f7ff ff40 	bl	8040ea0 <__NVIC_GetPriorityGrouping>
 8041020:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8041022:	687a      	ldr	r2, [r7, #4]
 8041024:	68b9      	ldr	r1, [r7, #8]
 8041026:	6978      	ldr	r0, [r7, #20]
 8041028:	f7ff ff90 	bl	8040f4c <NVIC_EncodePriority>
 804102c:	4602      	mov	r2, r0
 804102e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8041032:	4611      	mov	r1, r2
 8041034:	4618      	mov	r0, r3
 8041036:	f7ff ff5f 	bl	8040ef8 <__NVIC_SetPriority>
}
 804103a:	bf00      	nop
 804103c:	3718      	adds	r7, #24
 804103e:	46bd      	mov	sp, r7
 8041040:	bd80      	pop	{r7, pc}

08041042 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8041042:	b580      	push	{r7, lr}
 8041044:	b082      	sub	sp, #8
 8041046:	af00      	add	r7, sp, #0
 8041048:	4603      	mov	r3, r0
 804104a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 804104c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8041050:	4618      	mov	r0, r3
 8041052:	f7ff ff33 	bl	8040ebc <__NVIC_EnableIRQ>
}
 8041056:	bf00      	nop
 8041058:	3708      	adds	r7, #8
 804105a:	46bd      	mov	sp, r7
 804105c:	bd80      	pop	{r7, pc}

0804105e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 804105e:	b580      	push	{r7, lr}
 8041060:	b082      	sub	sp, #8
 8041062:	af00      	add	r7, sp, #0
 8041064:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8041066:	6878      	ldr	r0, [r7, #4]
 8041068:	f7ff ffa4 	bl	8040fb4 <SysTick_Config>
 804106c:	4603      	mov	r3, r0
}
 804106e:	4618      	mov	r0, r3
 8041070:	3708      	adds	r7, #8
 8041072:	46bd      	mov	sp, r7
 8041074:	bd80      	pop	{r7, pc}

08041076 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8041076:	b480      	push	{r7}
 8041078:	b085      	sub	sp, #20
 804107a:	af00      	add	r7, sp, #0
 804107c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 804107e:	2300      	movs	r3, #0
 8041080:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8041082:	687b      	ldr	r3, [r7, #4]
 8041084:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8041088:	b2db      	uxtb	r3, r3
 804108a:	2b02      	cmp	r3, #2
 804108c:	d008      	beq.n	80410a0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 804108e:	687b      	ldr	r3, [r7, #4]
 8041090:	2204      	movs	r2, #4
 8041092:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8041094:	687b      	ldr	r3, [r7, #4]
 8041096:	2200      	movs	r2, #0
 8041098:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 804109c:	2301      	movs	r3, #1
 804109e:	e040      	b.n	8041122 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80410a0:	687b      	ldr	r3, [r7, #4]
 80410a2:	681b      	ldr	r3, [r3, #0]
 80410a4:	681a      	ldr	r2, [r3, #0]
 80410a6:	687b      	ldr	r3, [r7, #4]
 80410a8:	681b      	ldr	r3, [r3, #0]
 80410aa:	f022 020e 	bic.w	r2, r2, #14
 80410ae:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80410b0:	687b      	ldr	r3, [r7, #4]
 80410b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80410b4:	681a      	ldr	r2, [r3, #0]
 80410b6:	687b      	ldr	r3, [r7, #4]
 80410b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80410ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80410be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80410c0:	687b      	ldr	r3, [r7, #4]
 80410c2:	681b      	ldr	r3, [r3, #0]
 80410c4:	681a      	ldr	r2, [r3, #0]
 80410c6:	687b      	ldr	r3, [r7, #4]
 80410c8:	681b      	ldr	r3, [r3, #0]
 80410ca:	f022 0201 	bic.w	r2, r2, #1
 80410ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80410d0:	687b      	ldr	r3, [r7, #4]
 80410d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80410d4:	f003 021c 	and.w	r2, r3, #28
 80410d8:	687b      	ldr	r3, [r7, #4]
 80410da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80410dc:	2101      	movs	r1, #1
 80410de:	fa01 f202 	lsl.w	r2, r1, r2
 80410e2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80410e4:	687b      	ldr	r3, [r7, #4]
 80410e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80410e8:	687a      	ldr	r2, [r7, #4]
 80410ea:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80410ec:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80410ee:	687b      	ldr	r3, [r7, #4]
 80410f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80410f2:	2b00      	cmp	r3, #0
 80410f4:	d00c      	beq.n	8041110 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80410f6:	687b      	ldr	r3, [r7, #4]
 80410f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80410fa:	681a      	ldr	r2, [r3, #0]
 80410fc:	687b      	ldr	r3, [r7, #4]
 80410fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8041100:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8041104:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8041106:	687b      	ldr	r3, [r7, #4]
 8041108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804110a:	687a      	ldr	r2, [r7, #4]
 804110c:	6e52      	ldr	r2, [r2, #100]	; 0x64
 804110e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8041110:	687b      	ldr	r3, [r7, #4]
 8041112:	2201      	movs	r2, #1
 8041114:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8041118:	687b      	ldr	r3, [r7, #4]
 804111a:	2200      	movs	r2, #0
 804111c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8041120:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8041122:	4618      	mov	r0, r3
 8041124:	3714      	adds	r7, #20
 8041126:	46bd      	mov	sp, r7
 8041128:	f85d 7b04 	ldr.w	r7, [sp], #4
 804112c:	4770      	bx	lr

0804112e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 804112e:	b580      	push	{r7, lr}
 8041130:	b084      	sub	sp, #16
 8041132:	af00      	add	r7, sp, #0
 8041134:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8041136:	2300      	movs	r3, #0
 8041138:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 804113a:	687b      	ldr	r3, [r7, #4]
 804113c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8041140:	b2db      	uxtb	r3, r3
 8041142:	2b02      	cmp	r3, #2
 8041144:	d005      	beq.n	8041152 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8041146:	687b      	ldr	r3, [r7, #4]
 8041148:	2204      	movs	r2, #4
 804114a:	645a      	str	r2, [r3, #68]	; 0x44

    status = HAL_ERROR;
 804114c:	2301      	movs	r3, #1
 804114e:	73fb      	strb	r3, [r7, #15]
 8041150:	e047      	b.n	80411e2 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8041152:	687b      	ldr	r3, [r7, #4]
 8041154:	681b      	ldr	r3, [r3, #0]
 8041156:	681a      	ldr	r2, [r3, #0]
 8041158:	687b      	ldr	r3, [r7, #4]
 804115a:	681b      	ldr	r3, [r3, #0]
 804115c:	f022 020e 	bic.w	r2, r2, #14
 8041160:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8041162:	687b      	ldr	r3, [r7, #4]
 8041164:	681b      	ldr	r3, [r3, #0]
 8041166:	681a      	ldr	r2, [r3, #0]
 8041168:	687b      	ldr	r3, [r7, #4]
 804116a:	681b      	ldr	r3, [r3, #0]
 804116c:	f022 0201 	bic.w	r2, r2, #1
 8041170:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8041172:	687b      	ldr	r3, [r7, #4]
 8041174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8041176:	681a      	ldr	r2, [r3, #0]
 8041178:	687b      	ldr	r3, [r7, #4]
 804117a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 804117c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8041180:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8041182:	687b      	ldr	r3, [r7, #4]
 8041184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8041186:	f003 021c 	and.w	r2, r3, #28
 804118a:	687b      	ldr	r3, [r7, #4]
 804118c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804118e:	2101      	movs	r1, #1
 8041190:	fa01 f202 	lsl.w	r2, r1, r2
 8041194:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8041196:	687b      	ldr	r3, [r7, #4]
 8041198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804119a:	687a      	ldr	r2, [r7, #4]
 804119c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 804119e:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80411a0:	687b      	ldr	r3, [r7, #4]
 80411a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80411a4:	2b00      	cmp	r3, #0
 80411a6:	d00c      	beq.n	80411c2 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80411a8:	687b      	ldr	r3, [r7, #4]
 80411aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80411ac:	681a      	ldr	r2, [r3, #0]
 80411ae:	687b      	ldr	r3, [r7, #4]
 80411b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80411b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80411b6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80411b8:	687b      	ldr	r3, [r7, #4]
 80411ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80411bc:	687a      	ldr	r2, [r7, #4]
 80411be:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80411c0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80411c2:	687b      	ldr	r3, [r7, #4]
 80411c4:	2201      	movs	r2, #1
 80411c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80411ca:	687b      	ldr	r3, [r7, #4]
 80411cc:	2200      	movs	r2, #0
 80411ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80411d2:	687b      	ldr	r3, [r7, #4]
 80411d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80411d6:	2b00      	cmp	r3, #0
 80411d8:	d003      	beq.n	80411e2 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80411da:	687b      	ldr	r3, [r7, #4]
 80411dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80411de:	6878      	ldr	r0, [r7, #4]
 80411e0:	4798      	blx	r3
    }
  }
  return status;
 80411e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80411e4:	4618      	mov	r0, r3
 80411e6:	3710      	adds	r7, #16
 80411e8:	46bd      	mov	sp, r7
 80411ea:	bd80      	pop	{r7, pc}

080411ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80411ec:	b480      	push	{r7}
 80411ee:	b087      	sub	sp, #28
 80411f0:	af00      	add	r7, sp, #0
 80411f2:	6078      	str	r0, [r7, #4]
 80411f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 80411f6:	2300      	movs	r3, #0
 80411f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80411fa:	e158      	b.n	80414ae <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80411fc:	683b      	ldr	r3, [r7, #0]
 80411fe:	681a      	ldr	r2, [r3, #0]
 8041200:	2101      	movs	r1, #1
 8041202:	697b      	ldr	r3, [r7, #20]
 8041204:	fa01 f303 	lsl.w	r3, r1, r3
 8041208:	4013      	ands	r3, r2
 804120a:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 804120c:	68fb      	ldr	r3, [r7, #12]
 804120e:	2b00      	cmp	r3, #0
 8041210:	f000 814a 	beq.w	80414a8 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8041214:	683b      	ldr	r3, [r7, #0]
 8041216:	685b      	ldr	r3, [r3, #4]
 8041218:	2b01      	cmp	r3, #1
 804121a:	d00b      	beq.n	8041234 <HAL_GPIO_Init+0x48>
 804121c:	683b      	ldr	r3, [r7, #0]
 804121e:	685b      	ldr	r3, [r3, #4]
 8041220:	2b02      	cmp	r3, #2
 8041222:	d007      	beq.n	8041234 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8041224:	683b      	ldr	r3, [r7, #0]
 8041226:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8041228:	2b11      	cmp	r3, #17
 804122a:	d003      	beq.n	8041234 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 804122c:	683b      	ldr	r3, [r7, #0]
 804122e:	685b      	ldr	r3, [r3, #4]
 8041230:	2b12      	cmp	r3, #18
 8041232:	d130      	bne.n	8041296 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8041234:	687b      	ldr	r3, [r7, #4]
 8041236:	689b      	ldr	r3, [r3, #8]
 8041238:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 804123a:	697b      	ldr	r3, [r7, #20]
 804123c:	005b      	lsls	r3, r3, #1
 804123e:	2203      	movs	r2, #3
 8041240:	fa02 f303 	lsl.w	r3, r2, r3
 8041244:	43db      	mvns	r3, r3
 8041246:	693a      	ldr	r2, [r7, #16]
 8041248:	4013      	ands	r3, r2
 804124a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 804124c:	683b      	ldr	r3, [r7, #0]
 804124e:	68da      	ldr	r2, [r3, #12]
 8041250:	697b      	ldr	r3, [r7, #20]
 8041252:	005b      	lsls	r3, r3, #1
 8041254:	fa02 f303 	lsl.w	r3, r2, r3
 8041258:	693a      	ldr	r2, [r7, #16]
 804125a:	4313      	orrs	r3, r2
 804125c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 804125e:	687b      	ldr	r3, [r7, #4]
 8041260:	693a      	ldr	r2, [r7, #16]
 8041262:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8041264:	687b      	ldr	r3, [r7, #4]
 8041266:	685b      	ldr	r3, [r3, #4]
 8041268:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 804126a:	2201      	movs	r2, #1
 804126c:	697b      	ldr	r3, [r7, #20]
 804126e:	fa02 f303 	lsl.w	r3, r2, r3
 8041272:	43db      	mvns	r3, r3
 8041274:	693a      	ldr	r2, [r7, #16]
 8041276:	4013      	ands	r3, r2
 8041278:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 804127a:	683b      	ldr	r3, [r7, #0]
 804127c:	685b      	ldr	r3, [r3, #4]
 804127e:	091b      	lsrs	r3, r3, #4
 8041280:	f003 0201 	and.w	r2, r3, #1
 8041284:	697b      	ldr	r3, [r7, #20]
 8041286:	fa02 f303 	lsl.w	r3, r2, r3
 804128a:	693a      	ldr	r2, [r7, #16]
 804128c:	4313      	orrs	r3, r2
 804128e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8041290:	687b      	ldr	r3, [r7, #4]
 8041292:	693a      	ldr	r2, [r7, #16]
 8041294:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8041296:	687b      	ldr	r3, [r7, #4]
 8041298:	68db      	ldr	r3, [r3, #12]
 804129a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 804129c:	697b      	ldr	r3, [r7, #20]
 804129e:	005b      	lsls	r3, r3, #1
 80412a0:	2203      	movs	r2, #3
 80412a2:	fa02 f303 	lsl.w	r3, r2, r3
 80412a6:	43db      	mvns	r3, r3
 80412a8:	693a      	ldr	r2, [r7, #16]
 80412aa:	4013      	ands	r3, r2
 80412ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80412ae:	683b      	ldr	r3, [r7, #0]
 80412b0:	689a      	ldr	r2, [r3, #8]
 80412b2:	697b      	ldr	r3, [r7, #20]
 80412b4:	005b      	lsls	r3, r3, #1
 80412b6:	fa02 f303 	lsl.w	r3, r2, r3
 80412ba:	693a      	ldr	r2, [r7, #16]
 80412bc:	4313      	orrs	r3, r2
 80412be:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80412c0:	687b      	ldr	r3, [r7, #4]
 80412c2:	693a      	ldr	r2, [r7, #16]
 80412c4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80412c6:	683b      	ldr	r3, [r7, #0]
 80412c8:	685b      	ldr	r3, [r3, #4]
 80412ca:	2b02      	cmp	r3, #2
 80412cc:	d003      	beq.n	80412d6 <HAL_GPIO_Init+0xea>
 80412ce:	683b      	ldr	r3, [r7, #0]
 80412d0:	685b      	ldr	r3, [r3, #4]
 80412d2:	2b12      	cmp	r3, #18
 80412d4:	d123      	bne.n	804131e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80412d6:	697b      	ldr	r3, [r7, #20]
 80412d8:	08da      	lsrs	r2, r3, #3
 80412da:	687b      	ldr	r3, [r7, #4]
 80412dc:	3208      	adds	r2, #8
 80412de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80412e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 80412e4:	697b      	ldr	r3, [r7, #20]
 80412e6:	f003 0307 	and.w	r3, r3, #7
 80412ea:	009b      	lsls	r3, r3, #2
 80412ec:	220f      	movs	r2, #15
 80412ee:	fa02 f303 	lsl.w	r3, r2, r3
 80412f2:	43db      	mvns	r3, r3
 80412f4:	693a      	ldr	r2, [r7, #16]
 80412f6:	4013      	ands	r3, r2
 80412f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80412fa:	683b      	ldr	r3, [r7, #0]
 80412fc:	691a      	ldr	r2, [r3, #16]
 80412fe:	697b      	ldr	r3, [r7, #20]
 8041300:	f003 0307 	and.w	r3, r3, #7
 8041304:	009b      	lsls	r3, r3, #2
 8041306:	fa02 f303 	lsl.w	r3, r2, r3
 804130a:	693a      	ldr	r2, [r7, #16]
 804130c:	4313      	orrs	r3, r2
 804130e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8041310:	697b      	ldr	r3, [r7, #20]
 8041312:	08da      	lsrs	r2, r3, #3
 8041314:	687b      	ldr	r3, [r7, #4]
 8041316:	3208      	adds	r2, #8
 8041318:	6939      	ldr	r1, [r7, #16]
 804131a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 804131e:	687b      	ldr	r3, [r7, #4]
 8041320:	681b      	ldr	r3, [r3, #0]
 8041322:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8041324:	697b      	ldr	r3, [r7, #20]
 8041326:	005b      	lsls	r3, r3, #1
 8041328:	2203      	movs	r2, #3
 804132a:	fa02 f303 	lsl.w	r3, r2, r3
 804132e:	43db      	mvns	r3, r3
 8041330:	693a      	ldr	r2, [r7, #16]
 8041332:	4013      	ands	r3, r2
 8041334:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8041336:	683b      	ldr	r3, [r7, #0]
 8041338:	685b      	ldr	r3, [r3, #4]
 804133a:	f003 0203 	and.w	r2, r3, #3
 804133e:	697b      	ldr	r3, [r7, #20]
 8041340:	005b      	lsls	r3, r3, #1
 8041342:	fa02 f303 	lsl.w	r3, r2, r3
 8041346:	693a      	ldr	r2, [r7, #16]
 8041348:	4313      	orrs	r3, r2
 804134a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 804134c:	687b      	ldr	r3, [r7, #4]
 804134e:	693a      	ldr	r2, [r7, #16]
 8041350:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8041352:	683b      	ldr	r3, [r7, #0]
 8041354:	685b      	ldr	r3, [r3, #4]
 8041356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804135a:	2b00      	cmp	r3, #0
 804135c:	f000 80a4 	beq.w	80414a8 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8041360:	4a5a      	ldr	r2, [pc, #360]	; (80414cc <HAL_GPIO_Init+0x2e0>)
 8041362:	697b      	ldr	r3, [r7, #20]
 8041364:	089b      	lsrs	r3, r3, #2
 8041366:	3318      	adds	r3, #24
 8041368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804136c:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 804136e:	697b      	ldr	r3, [r7, #20]
 8041370:	f003 0303 	and.w	r3, r3, #3
 8041374:	00db      	lsls	r3, r3, #3
 8041376:	220f      	movs	r2, #15
 8041378:	fa02 f303 	lsl.w	r3, r2, r3
 804137c:	43db      	mvns	r3, r3
 804137e:	693a      	ldr	r2, [r7, #16]
 8041380:	4013      	ands	r3, r2
 8041382:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8041384:	687b      	ldr	r3, [r7, #4]
 8041386:	4a52      	ldr	r2, [pc, #328]	; (80414d0 <HAL_GPIO_Init+0x2e4>)
 8041388:	4293      	cmp	r3, r2
 804138a:	d025      	beq.n	80413d8 <HAL_GPIO_Init+0x1ec>
 804138c:	687b      	ldr	r3, [r7, #4]
 804138e:	4a51      	ldr	r2, [pc, #324]	; (80414d4 <HAL_GPIO_Init+0x2e8>)
 8041390:	4293      	cmp	r3, r2
 8041392:	d01f      	beq.n	80413d4 <HAL_GPIO_Init+0x1e8>
 8041394:	687b      	ldr	r3, [r7, #4]
 8041396:	4a50      	ldr	r2, [pc, #320]	; (80414d8 <HAL_GPIO_Init+0x2ec>)
 8041398:	4293      	cmp	r3, r2
 804139a:	d019      	beq.n	80413d0 <HAL_GPIO_Init+0x1e4>
 804139c:	687b      	ldr	r3, [r7, #4]
 804139e:	4a4f      	ldr	r2, [pc, #316]	; (80414dc <HAL_GPIO_Init+0x2f0>)
 80413a0:	4293      	cmp	r3, r2
 80413a2:	d013      	beq.n	80413cc <HAL_GPIO_Init+0x1e0>
 80413a4:	687b      	ldr	r3, [r7, #4]
 80413a6:	4a4e      	ldr	r2, [pc, #312]	; (80414e0 <HAL_GPIO_Init+0x2f4>)
 80413a8:	4293      	cmp	r3, r2
 80413aa:	d00d      	beq.n	80413c8 <HAL_GPIO_Init+0x1dc>
 80413ac:	687b      	ldr	r3, [r7, #4]
 80413ae:	4a4d      	ldr	r2, [pc, #308]	; (80414e4 <HAL_GPIO_Init+0x2f8>)
 80413b0:	4293      	cmp	r3, r2
 80413b2:	d007      	beq.n	80413c4 <HAL_GPIO_Init+0x1d8>
 80413b4:	687b      	ldr	r3, [r7, #4]
 80413b6:	4a4c      	ldr	r2, [pc, #304]	; (80414e8 <HAL_GPIO_Init+0x2fc>)
 80413b8:	4293      	cmp	r3, r2
 80413ba:	d101      	bne.n	80413c0 <HAL_GPIO_Init+0x1d4>
 80413bc:	2306      	movs	r3, #6
 80413be:	e00c      	b.n	80413da <HAL_GPIO_Init+0x1ee>
 80413c0:	2307      	movs	r3, #7
 80413c2:	e00a      	b.n	80413da <HAL_GPIO_Init+0x1ee>
 80413c4:	2305      	movs	r3, #5
 80413c6:	e008      	b.n	80413da <HAL_GPIO_Init+0x1ee>
 80413c8:	2304      	movs	r3, #4
 80413ca:	e006      	b.n	80413da <HAL_GPIO_Init+0x1ee>
 80413cc:	2303      	movs	r3, #3
 80413ce:	e004      	b.n	80413da <HAL_GPIO_Init+0x1ee>
 80413d0:	2302      	movs	r3, #2
 80413d2:	e002      	b.n	80413da <HAL_GPIO_Init+0x1ee>
 80413d4:	2301      	movs	r3, #1
 80413d6:	e000      	b.n	80413da <HAL_GPIO_Init+0x1ee>
 80413d8:	2300      	movs	r3, #0
 80413da:	697a      	ldr	r2, [r7, #20]
 80413dc:	f002 0203 	and.w	r2, r2, #3
 80413e0:	00d2      	lsls	r2, r2, #3
 80413e2:	4093      	lsls	r3, r2
 80413e4:	693a      	ldr	r2, [r7, #16]
 80413e6:	4313      	orrs	r3, r2
 80413e8:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 80413ea:	4938      	ldr	r1, [pc, #224]	; (80414cc <HAL_GPIO_Init+0x2e0>)
 80413ec:	697b      	ldr	r3, [r7, #20]
 80413ee:	089b      	lsrs	r3, r3, #2
 80413f0:	3318      	adds	r3, #24
 80413f2:	693a      	ldr	r2, [r7, #16]
 80413f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80413f8:	4b34      	ldr	r3, [pc, #208]	; (80414cc <HAL_GPIO_Init+0x2e0>)
 80413fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80413fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8041400:	68fb      	ldr	r3, [r7, #12]
 8041402:	43db      	mvns	r3, r3
 8041404:	693a      	ldr	r2, [r7, #16]
 8041406:	4013      	ands	r3, r2
 8041408:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 804140a:	683b      	ldr	r3, [r7, #0]
 804140c:	685b      	ldr	r3, [r3, #4]
 804140e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8041412:	2b00      	cmp	r3, #0
 8041414:	d003      	beq.n	804141e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8041416:	693a      	ldr	r2, [r7, #16]
 8041418:	68fb      	ldr	r3, [r7, #12]
 804141a:	4313      	orrs	r3, r2
 804141c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 804141e:	4a2b      	ldr	r2, [pc, #172]	; (80414cc <HAL_GPIO_Init+0x2e0>)
 8041420:	693b      	ldr	r3, [r7, #16]
 8041422:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8041426:	4b29      	ldr	r3, [pc, #164]	; (80414cc <HAL_GPIO_Init+0x2e0>)
 8041428:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 804142c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 804142e:	68fb      	ldr	r3, [r7, #12]
 8041430:	43db      	mvns	r3, r3
 8041432:	693a      	ldr	r2, [r7, #16]
 8041434:	4013      	ands	r3, r2
 8041436:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8041438:	683b      	ldr	r3, [r7, #0]
 804143a:	685b      	ldr	r3, [r3, #4]
 804143c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041440:	2b00      	cmp	r3, #0
 8041442:	d003      	beq.n	804144c <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 8041444:	693a      	ldr	r2, [r7, #16]
 8041446:	68fb      	ldr	r3, [r7, #12]
 8041448:	4313      	orrs	r3, r2
 804144a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 804144c:	4a1f      	ldr	r2, [pc, #124]	; (80414cc <HAL_GPIO_Init+0x2e0>)
 804144e:	693b      	ldr	r3, [r7, #16]
 8041450:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8041454:	4b1d      	ldr	r3, [pc, #116]	; (80414cc <HAL_GPIO_Init+0x2e0>)
 8041456:	681b      	ldr	r3, [r3, #0]
 8041458:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 804145a:	68fb      	ldr	r3, [r7, #12]
 804145c:	43db      	mvns	r3, r3
 804145e:	693a      	ldr	r2, [r7, #16]
 8041460:	4013      	ands	r3, r2
 8041462:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8041464:	683b      	ldr	r3, [r7, #0]
 8041466:	685b      	ldr	r3, [r3, #4]
 8041468:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 804146c:	2b00      	cmp	r3, #0
 804146e:	d003      	beq.n	8041478 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8041470:	693a      	ldr	r2, [r7, #16]
 8041472:	68fb      	ldr	r3, [r7, #12]
 8041474:	4313      	orrs	r3, r2
 8041476:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8041478:	4a14      	ldr	r2, [pc, #80]	; (80414cc <HAL_GPIO_Init+0x2e0>)
 804147a:	693b      	ldr	r3, [r7, #16]
 804147c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 804147e:	4b13      	ldr	r3, [pc, #76]	; (80414cc <HAL_GPIO_Init+0x2e0>)
 8041480:	685b      	ldr	r3, [r3, #4]
 8041482:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8041484:	68fb      	ldr	r3, [r7, #12]
 8041486:	43db      	mvns	r3, r3
 8041488:	693a      	ldr	r2, [r7, #16]
 804148a:	4013      	ands	r3, r2
 804148c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 804148e:	683b      	ldr	r3, [r7, #0]
 8041490:	685b      	ldr	r3, [r3, #4]
 8041492:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8041496:	2b00      	cmp	r3, #0
 8041498:	d003      	beq.n	80414a2 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 804149a:	693a      	ldr	r2, [r7, #16]
 804149c:	68fb      	ldr	r3, [r7, #12]
 804149e:	4313      	orrs	r3, r2
 80414a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80414a2:	4a0a      	ldr	r2, [pc, #40]	; (80414cc <HAL_GPIO_Init+0x2e0>)
 80414a4:	693b      	ldr	r3, [r7, #16]
 80414a6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80414a8:	697b      	ldr	r3, [r7, #20]
 80414aa:	3301      	adds	r3, #1
 80414ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80414ae:	683b      	ldr	r3, [r7, #0]
 80414b0:	681a      	ldr	r2, [r3, #0]
 80414b2:	697b      	ldr	r3, [r7, #20]
 80414b4:	fa22 f303 	lsr.w	r3, r2, r3
 80414b8:	2b00      	cmp	r3, #0
 80414ba:	f47f ae9f 	bne.w	80411fc <HAL_GPIO_Init+0x10>
  }
}
 80414be:	bf00      	nop
 80414c0:	371c      	adds	r7, #28
 80414c2:	46bd      	mov	sp, r7
 80414c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80414c8:	4770      	bx	lr
 80414ca:	bf00      	nop
 80414cc:	4002f400 	.word	0x4002f400
 80414d0:	42020000 	.word	0x42020000
 80414d4:	42020400 	.word	0x42020400
 80414d8:	42020800 	.word	0x42020800
 80414dc:	42020c00 	.word	0x42020c00
 80414e0:	42021000 	.word	0x42021000
 80414e4:	42021400 	.word	0x42021400
 80414e8:	42021800 	.word	0x42021800

080414ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80414ec:	b480      	push	{r7}
 80414ee:	b089      	sub	sp, #36	; 0x24
 80414f0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80414f2:	2300      	movs	r3, #0
 80414f4:	61fb      	str	r3, [r7, #28]
 80414f6:	2300      	movs	r3, #0
 80414f8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80414fa:	4b46      	ldr	r3, [pc, #280]	; (8041614 <HAL_RCC_GetSysClockFreq+0x128>)
 80414fc:	689b      	ldr	r3, [r3, #8]
 80414fe:	f003 030c 	and.w	r3, r3, #12
 8041502:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8041504:	4b43      	ldr	r3, [pc, #268]	; (8041614 <HAL_RCC_GetSysClockFreq+0x128>)
 8041506:	68db      	ldr	r3, [r3, #12]
 8041508:	f003 0303 	and.w	r3, r3, #3
 804150c:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 804150e:	693b      	ldr	r3, [r7, #16]
 8041510:	2b00      	cmp	r3, #0
 8041512:	d005      	beq.n	8041520 <HAL_RCC_GetSysClockFreq+0x34>
 8041514:	693b      	ldr	r3, [r7, #16]
 8041516:	2b0c      	cmp	r3, #12
 8041518:	d121      	bne.n	804155e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 804151a:	68fb      	ldr	r3, [r7, #12]
 804151c:	2b01      	cmp	r3, #1
 804151e:	d11e      	bne.n	804155e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8041520:	4b3c      	ldr	r3, [pc, #240]	; (8041614 <HAL_RCC_GetSysClockFreq+0x128>)
 8041522:	681b      	ldr	r3, [r3, #0]
 8041524:	f003 0308 	and.w	r3, r3, #8
 8041528:	2b00      	cmp	r3, #0
 804152a:	d107      	bne.n	804153c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 804152c:	4b39      	ldr	r3, [pc, #228]	; (8041614 <HAL_RCC_GetSysClockFreq+0x128>)
 804152e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8041532:	0a1b      	lsrs	r3, r3, #8
 8041534:	f003 030f 	and.w	r3, r3, #15
 8041538:	61fb      	str	r3, [r7, #28]
 804153a:	e005      	b.n	8041548 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 804153c:	4b35      	ldr	r3, [pc, #212]	; (8041614 <HAL_RCC_GetSysClockFreq+0x128>)
 804153e:	681b      	ldr	r3, [r3, #0]
 8041540:	091b      	lsrs	r3, r3, #4
 8041542:	f003 030f 	and.w	r3, r3, #15
 8041546:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8041548:	4a33      	ldr	r2, [pc, #204]	; (8041618 <HAL_RCC_GetSysClockFreq+0x12c>)
 804154a:	69fb      	ldr	r3, [r7, #28]
 804154c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8041550:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8041552:	693b      	ldr	r3, [r7, #16]
 8041554:	2b00      	cmp	r3, #0
 8041556:	d10d      	bne.n	8041574 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8041558:	69fb      	ldr	r3, [r7, #28]
 804155a:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 804155c:	e00a      	b.n	8041574 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 804155e:	693b      	ldr	r3, [r7, #16]
 8041560:	2b04      	cmp	r3, #4
 8041562:	d102      	bne.n	804156a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8041564:	4b2d      	ldr	r3, [pc, #180]	; (804161c <HAL_RCC_GetSysClockFreq+0x130>)
 8041566:	61bb      	str	r3, [r7, #24]
 8041568:	e004      	b.n	8041574 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 804156a:	693b      	ldr	r3, [r7, #16]
 804156c:	2b08      	cmp	r3, #8
 804156e:	d101      	bne.n	8041574 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8041570:	4b2b      	ldr	r3, [pc, #172]	; (8041620 <HAL_RCC_GetSysClockFreq+0x134>)
 8041572:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8041574:	693b      	ldr	r3, [r7, #16]
 8041576:	2b0c      	cmp	r3, #12
 8041578:	d145      	bne.n	8041606 <HAL_RCC_GetSysClockFreq+0x11a>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 804157a:	4b26      	ldr	r3, [pc, #152]	; (8041614 <HAL_RCC_GetSysClockFreq+0x128>)
 804157c:	68db      	ldr	r3, [r3, #12]
 804157e:	f003 0303 	and.w	r3, r3, #3
 8041582:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8041584:	4b23      	ldr	r3, [pc, #140]	; (8041614 <HAL_RCC_GetSysClockFreq+0x128>)
 8041586:	68db      	ldr	r3, [r3, #12]
 8041588:	091b      	lsrs	r3, r3, #4
 804158a:	f003 030f 	and.w	r3, r3, #15
 804158e:	3301      	adds	r3, #1
 8041590:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8041592:	68bb      	ldr	r3, [r7, #8]
 8041594:	2b02      	cmp	r3, #2
 8041596:	d002      	beq.n	804159e <HAL_RCC_GetSysClockFreq+0xb2>
 8041598:	2b03      	cmp	r3, #3
 804159a:	d00d      	beq.n	80415b8 <HAL_RCC_GetSysClockFreq+0xcc>
 804159c:	e019      	b.n	80415d2 <HAL_RCC_GetSysClockFreq+0xe6>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 804159e:	4a1f      	ldr	r2, [pc, #124]	; (804161c <HAL_RCC_GetSysClockFreq+0x130>)
 80415a0:	687b      	ldr	r3, [r7, #4]
 80415a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80415a6:	4a1b      	ldr	r2, [pc, #108]	; (8041614 <HAL_RCC_GetSysClockFreq+0x128>)
 80415a8:	68d2      	ldr	r2, [r2, #12]
 80415aa:	0a12      	lsrs	r2, r2, #8
 80415ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80415b0:	fb02 f303 	mul.w	r3, r2, r3
 80415b4:	617b      	str	r3, [r7, #20]
        break;
 80415b6:	e019      	b.n	80415ec <HAL_RCC_GetSysClockFreq+0x100>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80415b8:	4a19      	ldr	r2, [pc, #100]	; (8041620 <HAL_RCC_GetSysClockFreq+0x134>)
 80415ba:	687b      	ldr	r3, [r7, #4]
 80415bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80415c0:	4a14      	ldr	r2, [pc, #80]	; (8041614 <HAL_RCC_GetSysClockFreq+0x128>)
 80415c2:	68d2      	ldr	r2, [r2, #12]
 80415c4:	0a12      	lsrs	r2, r2, #8
 80415c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80415ca:	fb02 f303 	mul.w	r3, r2, r3
 80415ce:	617b      	str	r3, [r7, #20]
        break;
 80415d0:	e00c      	b.n	80415ec <HAL_RCC_GetSysClockFreq+0x100>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80415d2:	69fa      	ldr	r2, [r7, #28]
 80415d4:	687b      	ldr	r3, [r7, #4]
 80415d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80415da:	4a0e      	ldr	r2, [pc, #56]	; (8041614 <HAL_RCC_GetSysClockFreq+0x128>)
 80415dc:	68d2      	ldr	r2, [r2, #12]
 80415de:	0a12      	lsrs	r2, r2, #8
 80415e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80415e4:	fb02 f303 	mul.w	r3, r2, r3
 80415e8:	617b      	str	r3, [r7, #20]
        break;
 80415ea:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80415ec:	4b09      	ldr	r3, [pc, #36]	; (8041614 <HAL_RCC_GetSysClockFreq+0x128>)
 80415ee:	68db      	ldr	r3, [r3, #12]
 80415f0:	0e5b      	lsrs	r3, r3, #25
 80415f2:	f003 0303 	and.w	r3, r3, #3
 80415f6:	3301      	adds	r3, #1
 80415f8:	005b      	lsls	r3, r3, #1
 80415fa:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80415fc:	697a      	ldr	r2, [r7, #20]
 80415fe:	683b      	ldr	r3, [r7, #0]
 8041600:	fbb2 f3f3 	udiv	r3, r2, r3
 8041604:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8041606:	69bb      	ldr	r3, [r7, #24]
}
 8041608:	4618      	mov	r0, r3
 804160a:	3724      	adds	r7, #36	; 0x24
 804160c:	46bd      	mov	sp, r7
 804160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041612:	4770      	bx	lr
 8041614:	40021000 	.word	0x40021000
 8041618:	08044570 	.word	0x08044570
 804161c:	00f42400 	.word	0x00f42400
 8041620:	007a1200 	.word	0x007a1200

08041624 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8041624:	b580      	push	{r7, lr}
 8041626:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8041628:	f7ff ff60 	bl	80414ec <HAL_RCC_GetSysClockFreq>
 804162c:	4601      	mov	r1, r0
 804162e:	4b05      	ldr	r3, [pc, #20]	; (8041644 <HAL_RCC_GetHCLKFreq+0x20>)
 8041630:	689b      	ldr	r3, [r3, #8]
 8041632:	091b      	lsrs	r3, r3, #4
 8041634:	f003 030f 	and.w	r3, r3, #15
 8041638:	4a03      	ldr	r2, [pc, #12]	; (8041648 <HAL_RCC_GetHCLKFreq+0x24>)
 804163a:	5cd3      	ldrb	r3, [r2, r3]
 804163c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8041640:	4618      	mov	r0, r3
 8041642:	bd80      	pop	{r7, pc}
 8041644:	40021000 	.word	0x40021000
 8041648:	08044558 	.word	0x08044558

0804164c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 804164c:	b580      	push	{r7, lr}
 804164e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8041650:	f7ff ffe8 	bl	8041624 <HAL_RCC_GetHCLKFreq>
 8041654:	4601      	mov	r1, r0
 8041656:	4b05      	ldr	r3, [pc, #20]	; (804166c <HAL_RCC_GetPCLK1Freq+0x20>)
 8041658:	689b      	ldr	r3, [r3, #8]
 804165a:	0a1b      	lsrs	r3, r3, #8
 804165c:	f003 0307 	and.w	r3, r3, #7
 8041660:	4a03      	ldr	r2, [pc, #12]	; (8041670 <HAL_RCC_GetPCLK1Freq+0x24>)
 8041662:	5cd3      	ldrb	r3, [r2, r3]
 8041664:	fa21 f303 	lsr.w	r3, r1, r3
}
 8041668:	4618      	mov	r0, r3
 804166a:	bd80      	pop	{r7, pc}
 804166c:	40021000 	.word	0x40021000
 8041670:	08044568 	.word	0x08044568

08041674 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8041674:	b580      	push	{r7, lr}
 8041676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8041678:	f7ff ffd4 	bl	8041624 <HAL_RCC_GetHCLKFreq>
 804167c:	4601      	mov	r1, r0
 804167e:	4b05      	ldr	r3, [pc, #20]	; (8041694 <HAL_RCC_GetPCLK2Freq+0x20>)
 8041680:	689b      	ldr	r3, [r3, #8]
 8041682:	0adb      	lsrs	r3, r3, #11
 8041684:	f003 0307 	and.w	r3, r3, #7
 8041688:	4a03      	ldr	r2, [pc, #12]	; (8041698 <HAL_RCC_GetPCLK2Freq+0x24>)
 804168a:	5cd3      	ldrb	r3, [r2, r3]
 804168c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8041690:	4618      	mov	r0, r3
 8041692:	bd80      	pop	{r7, pc}
 8041694:	40021000 	.word	0x40021000
 8041698:	08044568 	.word	0x08044568

0804169c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 804169c:	b580      	push	{r7, lr}
 804169e:	b088      	sub	sp, #32
 80416a0:	af00      	add	r7, sp, #0
 80416a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80416a4:	2300      	movs	r3, #0
 80416a6:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80416a8:	2300      	movs	r3, #0
 80416aa:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80416ac:	687b      	ldr	r3, [r7, #4]
 80416ae:	681b      	ldr	r3, [r3, #0]
 80416b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80416b4:	2b00      	cmp	r3, #0
 80416b6:	d03d      	beq.n	8041734 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80416b8:	687b      	ldr	r3, [r7, #4]
 80416ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80416bc:	2b40      	cmp	r3, #64	; 0x40
 80416be:	d00b      	beq.n	80416d8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80416c0:	2b40      	cmp	r3, #64	; 0x40
 80416c2:	d804      	bhi.n	80416ce <HAL_RCCEx_PeriphCLKConfig+0x32>
 80416c4:	2b00      	cmp	r3, #0
 80416c6:	d00e      	beq.n	80416e6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 80416c8:	2b20      	cmp	r3, #32
 80416ca:	d015      	beq.n	80416f8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80416cc:	e01d      	b.n	804170a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80416ce:	2b60      	cmp	r3, #96	; 0x60
 80416d0:	d01e      	beq.n	8041710 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80416d2:	2b80      	cmp	r3, #128	; 0x80
 80416d4:	d01c      	beq.n	8041710 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80416d6:	e018      	b.n	804170a <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80416d8:	4b84      	ldr	r3, [pc, #528]	; (80418ec <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80416da:	68db      	ldr	r3, [r3, #12]
 80416dc:	4a83      	ldr	r2, [pc, #524]	; (80418ec <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80416de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80416e2:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80416e4:	e015      	b.n	8041712 <HAL_RCCEx_PeriphCLKConfig+0x76>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80416e6:	687b      	ldr	r3, [r7, #4]
 80416e8:	3304      	adds	r3, #4
 80416ea:	2100      	movs	r1, #0
 80416ec:	4618      	mov	r0, r3
 80416ee:	f000 fb3f 	bl	8041d70 <RCCEx_PLLSAI1_Config>
 80416f2:	4603      	mov	r3, r0
 80416f4:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80416f6:	e00c      	b.n	8041712 <HAL_RCCEx_PeriphCLKConfig+0x76>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80416f8:	687b      	ldr	r3, [r7, #4]
 80416fa:	3320      	adds	r3, #32
 80416fc:	2100      	movs	r1, #0
 80416fe:	4618      	mov	r0, r3
 8041700:	f000 fc08 	bl	8041f14 <RCCEx_PLLSAI2_Config>
 8041704:	4603      	mov	r3, r0
 8041706:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8041708:	e003      	b.n	8041712 <HAL_RCCEx_PeriphCLKConfig+0x76>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 804170a:	2301      	movs	r3, #1
 804170c:	77fb      	strb	r3, [r7, #31]
        break;
 804170e:	e000      	b.n	8041712 <HAL_RCCEx_PeriphCLKConfig+0x76>
        break;
 8041710:	bf00      	nop
    }

    if (ret == HAL_OK)
 8041712:	7ffb      	ldrb	r3, [r7, #31]
 8041714:	2b00      	cmp	r3, #0
 8041716:	d10b      	bne.n	8041730 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8041718:	4b74      	ldr	r3, [pc, #464]	; (80418ec <HAL_RCCEx_PeriphCLKConfig+0x250>)
 804171a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 804171e:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8041722:	687b      	ldr	r3, [r7, #4]
 8041724:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8041726:	4971      	ldr	r1, [pc, #452]	; (80418ec <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8041728:	4313      	orrs	r3, r2
 804172a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 804172e:	e001      	b.n	8041734 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8041730:	7ffb      	ldrb	r3, [r7, #31]
 8041732:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8041734:	687b      	ldr	r3, [r7, #4]
 8041736:	681b      	ldr	r3, [r3, #0]
 8041738:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 804173c:	2b00      	cmp	r3, #0
 804173e:	d042      	beq.n	80417c6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8041740:	687b      	ldr	r3, [r7, #4]
 8041742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8041748:	d00f      	beq.n	804176a <HAL_RCCEx_PeriphCLKConfig+0xce>
 804174a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 804174e:	d805      	bhi.n	804175c <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8041750:	2b00      	cmp	r3, #0
 8041752:	d011      	beq.n	8041778 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8041754:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8041758:	d017      	beq.n	804178a <HAL_RCCEx_PeriphCLKConfig+0xee>
 804175a:	e01f      	b.n	804179c <HAL_RCCEx_PeriphCLKConfig+0x100>
 804175c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8041760:	d01f      	beq.n	80417a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8041762:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8041766:	d01c      	beq.n	80417a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8041768:	e018      	b.n	804179c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 804176a:	4b60      	ldr	r3, [pc, #384]	; (80418ec <HAL_RCCEx_PeriphCLKConfig+0x250>)
 804176c:	68db      	ldr	r3, [r3, #12]
 804176e:	4a5f      	ldr	r2, [pc, #380]	; (80418ec <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8041770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8041774:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8041776:	e015      	b.n	80417a4 <HAL_RCCEx_PeriphCLKConfig+0x108>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8041778:	687b      	ldr	r3, [r7, #4]
 804177a:	3304      	adds	r3, #4
 804177c:	2100      	movs	r1, #0
 804177e:	4618      	mov	r0, r3
 8041780:	f000 faf6 	bl	8041d70 <RCCEx_PLLSAI1_Config>
 8041784:	4603      	mov	r3, r0
 8041786:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8041788:	e00c      	b.n	80417a4 <HAL_RCCEx_PeriphCLKConfig+0x108>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 804178a:	687b      	ldr	r3, [r7, #4]
 804178c:	3320      	adds	r3, #32
 804178e:	2100      	movs	r1, #0
 8041790:	4618      	mov	r0, r3
 8041792:	f000 fbbf 	bl	8041f14 <RCCEx_PLLSAI2_Config>
 8041796:	4603      	mov	r3, r0
 8041798:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 804179a:	e003      	b.n	80417a4 <HAL_RCCEx_PeriphCLKConfig+0x108>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 804179c:	2301      	movs	r3, #1
 804179e:	77fb      	strb	r3, [r7, #31]
        break;
 80417a0:	e000      	b.n	80417a4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        break;
 80417a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80417a4:	7ffb      	ldrb	r3, [r7, #31]
 80417a6:	2b00      	cmp	r3, #0
 80417a8:	d10b      	bne.n	80417c2 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80417aa:	4b50      	ldr	r3, [pc, #320]	; (80418ec <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80417ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80417b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80417b4:	687b      	ldr	r3, [r7, #4]
 80417b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80417b8:	494c      	ldr	r1, [pc, #304]	; (80418ec <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80417ba:	4313      	orrs	r3, r2
 80417bc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80417c0:	e001      	b.n	80417c6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80417c2:	7ffb      	ldrb	r3, [r7, #31]
 80417c4:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80417c6:	687b      	ldr	r3, [r7, #4]
 80417c8:	681b      	ldr	r3, [r3, #0]
 80417ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80417ce:	2b00      	cmp	r3, #0
 80417d0:	f000 809b 	beq.w	804190a <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80417d4:	2300      	movs	r3, #0
 80417d6:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80417d8:	4b44      	ldr	r3, [pc, #272]	; (80418ec <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80417da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80417dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80417e0:	2b00      	cmp	r3, #0
 80417e2:	d10d      	bne.n	8041800 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80417e4:	4b41      	ldr	r3, [pc, #260]	; (80418ec <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80417e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80417e8:	4a40      	ldr	r2, [pc, #256]	; (80418ec <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80417ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80417ee:	6593      	str	r3, [r2, #88]	; 0x58
 80417f0:	4b3e      	ldr	r3, [pc, #248]	; (80418ec <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80417f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80417f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80417f8:	60fb      	str	r3, [r7, #12]
 80417fa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80417fc:	2301      	movs	r3, #1
 80417fe:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8041800:	4b3b      	ldr	r3, [pc, #236]	; (80418f0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8041802:	681b      	ldr	r3, [r3, #0]
 8041804:	4a3a      	ldr	r2, [pc, #232]	; (80418f0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8041806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 804180a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 804180c:	f7ff fb18 	bl	8040e40 <HAL_GetTick>
 8041810:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8041812:	e009      	b.n	8041828 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8041814:	f7ff fb14 	bl	8040e40 <HAL_GetTick>
 8041818:	4602      	mov	r2, r0
 804181a:	693b      	ldr	r3, [r7, #16]
 804181c:	1ad3      	subs	r3, r2, r3
 804181e:	2b02      	cmp	r3, #2
 8041820:	d902      	bls.n	8041828 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      {
        ret = HAL_TIMEOUT;
 8041822:	2303      	movs	r3, #3
 8041824:	77fb      	strb	r3, [r7, #31]
        break;
 8041826:	e005      	b.n	8041834 <HAL_RCCEx_PeriphCLKConfig+0x198>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8041828:	4b31      	ldr	r3, [pc, #196]	; (80418f0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 804182a:	681b      	ldr	r3, [r3, #0]
 804182c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041830:	2b00      	cmp	r3, #0
 8041832:	d0ef      	beq.n	8041814 <HAL_RCCEx_PeriphCLKConfig+0x178>
      }
    }

    if (ret == HAL_OK)
 8041834:	7ffb      	ldrb	r3, [r7, #31]
 8041836:	2b00      	cmp	r3, #0
 8041838:	d15c      	bne.n	80418f4 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 804183a:	4b2c      	ldr	r3, [pc, #176]	; (80418ec <HAL_RCCEx_PeriphCLKConfig+0x250>)
 804183c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041840:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8041844:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8041846:	69bb      	ldr	r3, [r7, #24]
 8041848:	2b00      	cmp	r3, #0
 804184a:	d01f      	beq.n	804188c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 804184c:	687b      	ldr	r3, [r7, #4]
 804184e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041852:	69ba      	ldr	r2, [r7, #24]
 8041854:	429a      	cmp	r2, r3
 8041856:	d019      	beq.n	804188c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8041858:	4b24      	ldr	r3, [pc, #144]	; (80418ec <HAL_RCCEx_PeriphCLKConfig+0x250>)
 804185a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804185e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8041862:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8041864:	4b21      	ldr	r3, [pc, #132]	; (80418ec <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8041866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804186a:	4a20      	ldr	r2, [pc, #128]	; (80418ec <HAL_RCCEx_PeriphCLKConfig+0x250>)
 804186c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8041870:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8041874:	4b1d      	ldr	r3, [pc, #116]	; (80418ec <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8041876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804187a:	4a1c      	ldr	r2, [pc, #112]	; (80418ec <HAL_RCCEx_PeriphCLKConfig+0x250>)
 804187c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8041880:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8041884:	4a19      	ldr	r2, [pc, #100]	; (80418ec <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8041886:	69bb      	ldr	r3, [r7, #24]
 8041888:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 804188c:	69bb      	ldr	r3, [r7, #24]
 804188e:	f003 0301 	and.w	r3, r3, #1
 8041892:	2b00      	cmp	r3, #0
 8041894:	d016      	beq.n	80418c4 <HAL_RCCEx_PeriphCLKConfig+0x228>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041896:	f7ff fad3 	bl	8040e40 <HAL_GetTick>
 804189a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 804189c:	e00b      	b.n	80418b6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 804189e:	f7ff facf 	bl	8040e40 <HAL_GetTick>
 80418a2:	4602      	mov	r2, r0
 80418a4:	693b      	ldr	r3, [r7, #16]
 80418a6:	1ad3      	subs	r3, r2, r3
 80418a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80418ac:	4293      	cmp	r3, r2
 80418ae:	d902      	bls.n	80418b6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
          {
            ret = HAL_TIMEOUT;
 80418b0:	2303      	movs	r3, #3
 80418b2:	77fb      	strb	r3, [r7, #31]
            break;
 80418b4:	e006      	b.n	80418c4 <HAL_RCCEx_PeriphCLKConfig+0x228>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80418b6:	4b0d      	ldr	r3, [pc, #52]	; (80418ec <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80418b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80418bc:	f003 0302 	and.w	r3, r3, #2
 80418c0:	2b00      	cmp	r3, #0
 80418c2:	d0ec      	beq.n	804189e <HAL_RCCEx_PeriphCLKConfig+0x202>
          }
        }
      }

      if (ret == HAL_OK)
 80418c4:	7ffb      	ldrb	r3, [r7, #31]
 80418c6:	2b00      	cmp	r3, #0
 80418c8:	d10c      	bne.n	80418e4 <HAL_RCCEx_PeriphCLKConfig+0x248>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80418ca:	4b08      	ldr	r3, [pc, #32]	; (80418ec <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80418cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80418d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80418d4:	687b      	ldr	r3, [r7, #4]
 80418d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80418da:	4904      	ldr	r1, [pc, #16]	; (80418ec <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80418dc:	4313      	orrs	r3, r2
 80418de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80418e2:	e009      	b.n	80418f8 <HAL_RCCEx_PeriphCLKConfig+0x25c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80418e4:	7ffb      	ldrb	r3, [r7, #31]
 80418e6:	77bb      	strb	r3, [r7, #30]
 80418e8:	e006      	b.n	80418f8 <HAL_RCCEx_PeriphCLKConfig+0x25c>
 80418ea:	bf00      	nop
 80418ec:	40021000 	.word	0x40021000
 80418f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80418f4:	7ffb      	ldrb	r3, [r7, #31]
 80418f6:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80418f8:	7dfb      	ldrb	r3, [r7, #23]
 80418fa:	2b01      	cmp	r3, #1
 80418fc:	d105      	bne.n	804190a <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80418fe:	4bae      	ldr	r3, [pc, #696]	; (8041bb8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8041900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041902:	4aad      	ldr	r2, [pc, #692]	; (8041bb8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8041904:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8041908:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 804190a:	687b      	ldr	r3, [r7, #4]
 804190c:	681b      	ldr	r3, [r3, #0]
 804190e:	f003 0301 	and.w	r3, r3, #1
 8041912:	2b00      	cmp	r3, #0
 8041914:	d00a      	beq.n	804192c <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8041916:	4ba8      	ldr	r3, [pc, #672]	; (8041bb8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8041918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804191c:	f023 0203 	bic.w	r2, r3, #3
 8041920:	687b      	ldr	r3, [r7, #4]
 8041922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8041924:	49a4      	ldr	r1, [pc, #656]	; (8041bb8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8041926:	4313      	orrs	r3, r2
 8041928:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 804192c:	687b      	ldr	r3, [r7, #4]
 804192e:	681b      	ldr	r3, [r3, #0]
 8041930:	f003 0302 	and.w	r3, r3, #2
 8041934:	2b00      	cmp	r3, #0
 8041936:	d00a      	beq.n	804194e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8041938:	4b9f      	ldr	r3, [pc, #636]	; (8041bb8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 804193a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804193e:	f023 020c 	bic.w	r2, r3, #12
 8041942:	687b      	ldr	r3, [r7, #4]
 8041944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8041946:	499c      	ldr	r1, [pc, #624]	; (8041bb8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8041948:	4313      	orrs	r3, r2
 804194a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 804194e:	687b      	ldr	r3, [r7, #4]
 8041950:	681b      	ldr	r3, [r3, #0]
 8041952:	f003 0304 	and.w	r3, r3, #4
 8041956:	2b00      	cmp	r3, #0
 8041958:	d00a      	beq.n	8041970 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 804195a:	4b97      	ldr	r3, [pc, #604]	; (8041bb8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 804195c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8041960:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8041964:	687b      	ldr	r3, [r7, #4]
 8041966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8041968:	4993      	ldr	r1, [pc, #588]	; (8041bb8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 804196a:	4313      	orrs	r3, r2
 804196c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8041970:	687b      	ldr	r3, [r7, #4]
 8041972:	681b      	ldr	r3, [r3, #0]
 8041974:	f003 0308 	and.w	r3, r3, #8
 8041978:	2b00      	cmp	r3, #0
 804197a:	d00a      	beq.n	8041992 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 804197c:	4b8e      	ldr	r3, [pc, #568]	; (8041bb8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 804197e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8041982:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8041986:	687b      	ldr	r3, [r7, #4]
 8041988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804198a:	498b      	ldr	r1, [pc, #556]	; (8041bb8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 804198c:	4313      	orrs	r3, r2
 804198e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8041992:	687b      	ldr	r3, [r7, #4]
 8041994:	681b      	ldr	r3, [r3, #0]
 8041996:	f003 0310 	and.w	r3, r3, #16
 804199a:	2b00      	cmp	r3, #0
 804199c:	d00a      	beq.n	80419b4 <HAL_RCCEx_PeriphCLKConfig+0x318>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 804199e:	4b86      	ldr	r3, [pc, #536]	; (8041bb8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80419a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80419a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80419a8:	687b      	ldr	r3, [r7, #4]
 80419aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80419ac:	4982      	ldr	r1, [pc, #520]	; (8041bb8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80419ae:	4313      	orrs	r3, r2
 80419b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80419b4:	687b      	ldr	r3, [r7, #4]
 80419b6:	681b      	ldr	r3, [r3, #0]
 80419b8:	f003 0320 	and.w	r3, r3, #32
 80419bc:	2b00      	cmp	r3, #0
 80419be:	d00a      	beq.n	80419d6 <HAL_RCCEx_PeriphCLKConfig+0x33a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80419c0:	4b7d      	ldr	r3, [pc, #500]	; (8041bb8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80419c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80419c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80419ca:	687b      	ldr	r3, [r7, #4]
 80419cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80419ce:	497a      	ldr	r1, [pc, #488]	; (8041bb8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80419d0:	4313      	orrs	r3, r2
 80419d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80419d6:	687b      	ldr	r3, [r7, #4]
 80419d8:	681b      	ldr	r3, [r3, #0]
 80419da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80419de:	2b00      	cmp	r3, #0
 80419e0:	d00a      	beq.n	80419f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80419e2:	4b75      	ldr	r3, [pc, #468]	; (8041bb8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80419e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80419e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80419ec:	687b      	ldr	r3, [r7, #4]
 80419ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80419f0:	4971      	ldr	r1, [pc, #452]	; (8041bb8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 80419f2:	4313      	orrs	r3, r2
 80419f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80419f8:	687b      	ldr	r3, [r7, #4]
 80419fa:	681b      	ldr	r3, [r3, #0]
 80419fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041a00:	2b00      	cmp	r3, #0
 8041a02:	d00a      	beq.n	8041a1a <HAL_RCCEx_PeriphCLKConfig+0x37e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8041a04:	4b6c      	ldr	r3, [pc, #432]	; (8041bb8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8041a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8041a0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8041a0e:	687b      	ldr	r3, [r7, #4]
 8041a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8041a12:	4969      	ldr	r1, [pc, #420]	; (8041bb8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8041a14:	4313      	orrs	r3, r2
 8041a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8041a1a:	687b      	ldr	r3, [r7, #4]
 8041a1c:	681b      	ldr	r3, [r3, #0]
 8041a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8041a22:	2b00      	cmp	r3, #0
 8041a24:	d00a      	beq.n	8041a3c <HAL_RCCEx_PeriphCLKConfig+0x3a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8041a26:	4b64      	ldr	r3, [pc, #400]	; (8041bb8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8041a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8041a2c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8041a30:	687b      	ldr	r3, [r7, #4]
 8041a32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8041a34:	4960      	ldr	r1, [pc, #384]	; (8041bb8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8041a36:	4313      	orrs	r3, r2
 8041a38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8041a3c:	687b      	ldr	r3, [r7, #4]
 8041a3e:	681b      	ldr	r3, [r3, #0]
 8041a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041a44:	2b00      	cmp	r3, #0
 8041a46:	d02f      	beq.n	8041aa8 <HAL_RCCEx_PeriphCLKConfig+0x40c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8041a48:	687b      	ldr	r3, [r7, #4]
 8041a4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8041a4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8041a50:	d005      	beq.n	8041a5e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8041a52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8041a56:	d009      	beq.n	8041a6c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8041a58:	2b00      	cmp	r3, #0
 8041a5a:	d013      	beq.n	8041a84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8041a5c:	e00f      	b.n	8041a7e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8041a5e:	4b56      	ldr	r3, [pc, #344]	; (8041bb8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8041a60:	68db      	ldr	r3, [r3, #12]
 8041a62:	4a55      	ldr	r2, [pc, #340]	; (8041bb8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8041a64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8041a68:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8041a6a:	e00c      	b.n	8041a86 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8041a6c:	687b      	ldr	r3, [r7, #4]
 8041a6e:	3304      	adds	r3, #4
 8041a70:	2100      	movs	r1, #0
 8041a72:	4618      	mov	r0, r3
 8041a74:	f000 f97c 	bl	8041d70 <RCCEx_PLLSAI1_Config>
 8041a78:	4603      	mov	r3, r0
 8041a7a:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8041a7c:	e003      	b.n	8041a86 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

      default:
        ret = HAL_ERROR;
 8041a7e:	2301      	movs	r3, #1
 8041a80:	77fb      	strb	r3, [r7, #31]
        break;
 8041a82:	e000      	b.n	8041a86 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
        break;
 8041a84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8041a86:	7ffb      	ldrb	r3, [r7, #31]
 8041a88:	2b00      	cmp	r3, #0
 8041a8a:	d10b      	bne.n	8041aa4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8041a8c:	4b4a      	ldr	r3, [pc, #296]	; (8041bb8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8041a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8041a92:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8041a96:	687b      	ldr	r3, [r7, #4]
 8041a98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8041a9a:	4947      	ldr	r1, [pc, #284]	; (8041bb8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8041a9c:	4313      	orrs	r3, r2
 8041a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8041aa2:	e001      	b.n	8041aa8 <HAL_RCCEx_PeriphCLKConfig+0x40c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8041aa4:	7ffb      	ldrb	r3, [r7, #31]
 8041aa6:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8041aa8:	687b      	ldr	r3, [r7, #4]
 8041aaa:	681b      	ldr	r3, [r3, #0]
 8041aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8041ab0:	2b00      	cmp	r3, #0
 8041ab2:	d00a      	beq.n	8041aca <HAL_RCCEx_PeriphCLKConfig+0x42e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8041ab4:	4b40      	ldr	r3, [pc, #256]	; (8041bb8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8041ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8041aba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8041abe:	687b      	ldr	r3, [r7, #4]
 8041ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8041ac2:	493d      	ldr	r1, [pc, #244]	; (8041bb8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8041ac4:	4313      	orrs	r3, r2
 8041ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8041aca:	687b      	ldr	r3, [r7, #4]
 8041acc:	681b      	ldr	r3, [r3, #0]
 8041ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8041ad2:	2b00      	cmp	r3, #0
 8041ad4:	d00a      	beq.n	8041aec <HAL_RCCEx_PeriphCLKConfig+0x450>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8041ad6:	4b38      	ldr	r3, [pc, #224]	; (8041bb8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8041ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8041adc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8041ae0:	687b      	ldr	r3, [r7, #4]
 8041ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8041ae4:	4934      	ldr	r1, [pc, #208]	; (8041bb8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8041ae6:	4313      	orrs	r3, r2
 8041ae8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8041aec:	687b      	ldr	r3, [r7, #4]
 8041aee:	681b      	ldr	r3, [r3, #0]
 8041af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041af4:	2b00      	cmp	r3, #0
 8041af6:	d00a      	beq.n	8041b0e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8041af8:	4b2f      	ldr	r3, [pc, #188]	; (8041bb8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8041afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8041afe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8041b02:	687b      	ldr	r3, [r7, #4]
 8041b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8041b06:	492c      	ldr	r1, [pc, #176]	; (8041bb8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8041b08:	4313      	orrs	r3, r2
 8041b0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8041b0e:	687b      	ldr	r3, [r7, #4]
 8041b10:	681b      	ldr	r3, [r3, #0]
 8041b12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8041b16:	2b00      	cmp	r3, #0
 8041b18:	d00a      	beq.n	8041b30 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8041b1a:	4b27      	ldr	r3, [pc, #156]	; (8041bb8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8041b1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8041b20:	f023 0203 	bic.w	r2, r3, #3
 8041b24:	687b      	ldr	r3, [r7, #4]
 8041b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041b28:	4923      	ldr	r1, [pc, #140]	; (8041bb8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8041b2a:	4313      	orrs	r3, r2
 8041b2c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8041b30:	687b      	ldr	r3, [r7, #4]
 8041b32:	681b      	ldr	r3, [r3, #0]
 8041b34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8041b38:	2b00      	cmp	r3, #0
 8041b3a:	d028      	beq.n	8041b8e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8041b3c:	4b1e      	ldr	r3, [pc, #120]	; (8041bb8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8041b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8041b42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8041b46:	687b      	ldr	r3, [r7, #4]
 8041b48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8041b4a:	491b      	ldr	r1, [pc, #108]	; (8041bb8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8041b4c:	4313      	orrs	r3, r2
 8041b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8041b52:	687b      	ldr	r3, [r7, #4]
 8041b54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8041b56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8041b5a:	d106      	bne.n	8041b6a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8041b5c:	4b16      	ldr	r3, [pc, #88]	; (8041bb8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8041b5e:	68db      	ldr	r3, [r3, #12]
 8041b60:	4a15      	ldr	r2, [pc, #84]	; (8041bb8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8041b62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8041b66:	60d3      	str	r3, [r2, #12]
 8041b68:	e011      	b.n	8041b8e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8041b6a:	687b      	ldr	r3, [r7, #4]
 8041b6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8041b6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8041b72:	d10c      	bne.n	8041b8e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8041b74:	687b      	ldr	r3, [r7, #4]
 8041b76:	3304      	adds	r3, #4
 8041b78:	2101      	movs	r1, #1
 8041b7a:	4618      	mov	r0, r3
 8041b7c:	f000 f8f8 	bl	8041d70 <RCCEx_PLLSAI1_Config>
 8041b80:	4603      	mov	r3, r0
 8041b82:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8041b84:	7ffb      	ldrb	r3, [r7, #31]
 8041b86:	2b00      	cmp	r3, #0
 8041b88:	d001      	beq.n	8041b8e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
        {
          /* set overall return value */
          status = ret;
 8041b8a:	7ffb      	ldrb	r3, [r7, #31]
 8041b8c:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8041b8e:	687b      	ldr	r3, [r7, #4]
 8041b90:	681b      	ldr	r3, [r3, #0]
 8041b92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8041b96:	2b00      	cmp	r3, #0
 8041b98:	d04d      	beq.n	8041c36 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8041b9a:	687b      	ldr	r3, [r7, #4]
 8041b9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8041b9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8041ba2:	d10b      	bne.n	8041bbc <HAL_RCCEx_PeriphCLKConfig+0x520>
 8041ba4:	4b04      	ldr	r3, [pc, #16]	; (8041bb8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8041ba6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8041baa:	4a03      	ldr	r2, [pc, #12]	; (8041bb8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8041bac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8041bb0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8041bb4:	e015      	b.n	8041be2 <HAL_RCCEx_PeriphCLKConfig+0x546>
 8041bb6:	bf00      	nop
 8041bb8:	40021000 	.word	0x40021000
 8041bbc:	4b6b      	ldr	r3, [pc, #428]	; (8041d6c <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8041bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8041bc2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8041bc6:	687b      	ldr	r3, [r7, #4]
 8041bc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8041bca:	4968      	ldr	r1, [pc, #416]	; (8041d6c <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8041bcc:	4313      	orrs	r3, r2
 8041bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8041bd2:	4b66      	ldr	r3, [pc, #408]	; (8041d6c <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8041bd4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8041bd8:	4a64      	ldr	r2, [pc, #400]	; (8041d6c <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8041bda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8041bde:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8041be2:	687b      	ldr	r3, [r7, #4]
 8041be4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8041be6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8041bea:	d10d      	bne.n	8041c08 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8041bec:	687b      	ldr	r3, [r7, #4]
 8041bee:	3304      	adds	r3, #4
 8041bf0:	2101      	movs	r1, #1
 8041bf2:	4618      	mov	r0, r3
 8041bf4:	f000 f8bc 	bl	8041d70 <RCCEx_PLLSAI1_Config>
 8041bf8:	4603      	mov	r3, r0
 8041bfa:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8041bfc:	7ffb      	ldrb	r3, [r7, #31]
 8041bfe:	2b00      	cmp	r3, #0
 8041c00:	d019      	beq.n	8041c36 <HAL_RCCEx_PeriphCLKConfig+0x59a>
      {
        /* set overall return value */
        status = ret;
 8041c02:	7ffb      	ldrb	r3, [r7, #31]
 8041c04:	77bb      	strb	r3, [r7, #30]
 8041c06:	e016      	b.n	8041c36 <HAL_RCCEx_PeriphCLKConfig+0x59a>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8041c08:	687b      	ldr	r3, [r7, #4]
 8041c0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8041c0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8041c10:	d106      	bne.n	8041c20 <HAL_RCCEx_PeriphCLKConfig+0x584>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8041c12:	4b56      	ldr	r3, [pc, #344]	; (8041d6c <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8041c14:	68db      	ldr	r3, [r3, #12]
 8041c16:	4a55      	ldr	r2, [pc, #340]	; (8041d6c <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8041c18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8041c1c:	60d3      	str	r3, [r2, #12]
 8041c1e:	e00a      	b.n	8041c36 <HAL_RCCEx_PeriphCLKConfig+0x59a>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8041c20:	687b      	ldr	r3, [r7, #4]
 8041c22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8041c24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8041c28:	d105      	bne.n	8041c36 <HAL_RCCEx_PeriphCLKConfig+0x59a>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8041c2a:	4b50      	ldr	r3, [pc, #320]	; (8041d6c <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8041c2c:	68db      	ldr	r3, [r3, #12]
 8041c2e:	4a4f      	ldr	r2, [pc, #316]	; (8041d6c <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8041c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8041c34:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8041c36:	687b      	ldr	r3, [r7, #4]
 8041c38:	681b      	ldr	r3, [r3, #0]
 8041c3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8041c3e:	2b00      	cmp	r3, #0
 8041c40:	d028      	beq.n	8041c94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8041c42:	4b4a      	ldr	r3, [pc, #296]	; (8041d6c <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8041c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8041c48:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8041c4c:	687b      	ldr	r3, [r7, #4]
 8041c4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8041c50:	4946      	ldr	r1, [pc, #280]	; (8041d6c <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8041c52:	4313      	orrs	r3, r2
 8041c54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8041c58:	687b      	ldr	r3, [r7, #4]
 8041c5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8041c5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8041c60:	d106      	bne.n	8041c70 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8041c62:	4b42      	ldr	r3, [pc, #264]	; (8041d6c <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8041c64:	68db      	ldr	r3, [r3, #12]
 8041c66:	4a41      	ldr	r2, [pc, #260]	; (8041d6c <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8041c68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8041c6c:	60d3      	str	r3, [r2, #12]
 8041c6e:	e011      	b.n	8041c94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8041c70:	687b      	ldr	r3, [r7, #4]
 8041c72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8041c74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8041c78:	d10c      	bne.n	8041c94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8041c7a:	687b      	ldr	r3, [r7, #4]
 8041c7c:	3304      	adds	r3, #4
 8041c7e:	2101      	movs	r1, #1
 8041c80:	4618      	mov	r0, r3
 8041c82:	f000 f875 	bl	8041d70 <RCCEx_PLLSAI1_Config>
 8041c86:	4603      	mov	r3, r0
 8041c88:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8041c8a:	7ffb      	ldrb	r3, [r7, #31]
 8041c8c:	2b00      	cmp	r3, #0
 8041c8e:	d001      	beq.n	8041c94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        /* set overall return value */
        status = ret;
 8041c90:	7ffb      	ldrb	r3, [r7, #31]
 8041c92:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8041c94:	687b      	ldr	r3, [r7, #4]
 8041c96:	681b      	ldr	r3, [r3, #0]
 8041c98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8041c9c:	2b00      	cmp	r3, #0
 8041c9e:	d01e      	beq.n	8041cde <HAL_RCCEx_PeriphCLKConfig+0x642>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8041ca0:	4b32      	ldr	r3, [pc, #200]	; (8041d6c <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8041ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8041ca6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8041caa:	687b      	ldr	r3, [r7, #4]
 8041cac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8041cb0:	492e      	ldr	r1, [pc, #184]	; (8041d6c <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8041cb2:	4313      	orrs	r3, r2
 8041cb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8041cb8:	687b      	ldr	r3, [r7, #4]
 8041cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8041cbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8041cc2:	d10c      	bne.n	8041cde <HAL_RCCEx_PeriphCLKConfig+0x642>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8041cc4:	687b      	ldr	r3, [r7, #4]
 8041cc6:	3304      	adds	r3, #4
 8041cc8:	2102      	movs	r1, #2
 8041cca:	4618      	mov	r0, r3
 8041ccc:	f000 f850 	bl	8041d70 <RCCEx_PLLSAI1_Config>
 8041cd0:	4603      	mov	r3, r0
 8041cd2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8041cd4:	7ffb      	ldrb	r3, [r7, #31]
 8041cd6:	2b00      	cmp	r3, #0
 8041cd8:	d001      	beq.n	8041cde <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* set overall return value */
        status = ret;
 8041cda:	7ffb      	ldrb	r3, [r7, #31]
 8041cdc:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8041cde:	687b      	ldr	r3, [r7, #4]
 8041ce0:	681b      	ldr	r3, [r3, #0]
 8041ce2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8041ce6:	2b00      	cmp	r3, #0
 8041ce8:	d00b      	beq.n	8041d02 <HAL_RCCEx_PeriphCLKConfig+0x666>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8041cea:	4b20      	ldr	r3, [pc, #128]	; (8041d6c <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8041cec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8041cf0:	f023 0204 	bic.w	r2, r3, #4
 8041cf4:	687b      	ldr	r3, [r7, #4]
 8041cf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8041cfa:	491c      	ldr	r1, [pc, #112]	; (8041d6c <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8041cfc:	4313      	orrs	r3, r2
 8041cfe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8041d02:	687b      	ldr	r3, [r7, #4]
 8041d04:	681b      	ldr	r3, [r3, #0]
 8041d06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8041d0a:	2b00      	cmp	r3, #0
 8041d0c:	d00b      	beq.n	8041d26 <HAL_RCCEx_PeriphCLKConfig+0x68a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8041d0e:	4b17      	ldr	r3, [pc, #92]	; (8041d6c <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8041d10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8041d14:	f023 0218 	bic.w	r2, r3, #24
 8041d18:	687b      	ldr	r3, [r7, #4]
 8041d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8041d1e:	4913      	ldr	r1, [pc, #76]	; (8041d6c <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8041d20:	4313      	orrs	r3, r2
 8041d22:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8041d26:	687b      	ldr	r3, [r7, #4]
 8041d28:	681b      	ldr	r3, [r3, #0]
 8041d2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8041d2e:	2b00      	cmp	r3, #0
 8041d30:	d017      	beq.n	8041d62 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8041d32:	4b0e      	ldr	r3, [pc, #56]	; (8041d6c <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8041d34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8041d38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8041d3c:	687b      	ldr	r3, [r7, #4]
 8041d3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8041d42:	490a      	ldr	r1, [pc, #40]	; (8041d6c <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8041d44:	4313      	orrs	r3, r2
 8041d46:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
    
    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8041d4a:	687b      	ldr	r3, [r7, #4]
 8041d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8041d50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8041d54:	d105      	bne.n	8041d62 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8041d56:	4b05      	ldr	r3, [pc, #20]	; (8041d6c <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8041d58:	68db      	ldr	r3, [r3, #12]
 8041d5a:	4a04      	ldr	r2, [pc, #16]	; (8041d6c <HAL_RCCEx_PeriphCLKConfig+0x6d0>)
 8041d5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8041d60:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8041d62:	7fbb      	ldrb	r3, [r7, #30]
}
 8041d64:	4618      	mov	r0, r3
 8041d66:	3720      	adds	r7, #32
 8041d68:	46bd      	mov	sp, r7
 8041d6a:	bd80      	pop	{r7, pc}
 8041d6c:	40021000 	.word	0x40021000

08041d70 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8041d70:	b580      	push	{r7, lr}
 8041d72:	b084      	sub	sp, #16
 8041d74:	af00      	add	r7, sp, #0
 8041d76:	6078      	str	r0, [r7, #4]
 8041d78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8041d7a:	2300      	movs	r3, #0
 8041d7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8041d7e:	687b      	ldr	r3, [r7, #4]
 8041d80:	681b      	ldr	r3, [r3, #0]
 8041d82:	2b02      	cmp	r3, #2
 8041d84:	d00c      	beq.n	8041da0 <RCCEx_PLLSAI1_Config+0x30>
 8041d86:	2b03      	cmp	r3, #3
 8041d88:	d013      	beq.n	8041db2 <RCCEx_PLLSAI1_Config+0x42>
 8041d8a:	2b01      	cmp	r3, #1
 8041d8c:	d11a      	bne.n	8041dc4 <RCCEx_PLLSAI1_Config+0x54>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8041d8e:	4b5d      	ldr	r3, [pc, #372]	; (8041f04 <RCCEx_PLLSAI1_Config+0x194>)
 8041d90:	681b      	ldr	r3, [r3, #0]
 8041d92:	f003 0302 	and.w	r3, r3, #2
 8041d96:	2b00      	cmp	r3, #0
 8041d98:	d117      	bne.n	8041dca <RCCEx_PLLSAI1_Config+0x5a>
      {
        status = HAL_ERROR;
 8041d9a:	2301      	movs	r3, #1
 8041d9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8041d9e:	e014      	b.n	8041dca <RCCEx_PLLSAI1_Config+0x5a>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8041da0:	4b58      	ldr	r3, [pc, #352]	; (8041f04 <RCCEx_PLLSAI1_Config+0x194>)
 8041da2:	681b      	ldr	r3, [r3, #0]
 8041da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041da8:	2b00      	cmp	r3, #0
 8041daa:	d110      	bne.n	8041dce <RCCEx_PLLSAI1_Config+0x5e>
      {
        status = HAL_ERROR;
 8041dac:	2301      	movs	r3, #1
 8041dae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8041db0:	e00d      	b.n	8041dce <RCCEx_PLLSAI1_Config+0x5e>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8041db2:	4b54      	ldr	r3, [pc, #336]	; (8041f04 <RCCEx_PLLSAI1_Config+0x194>)
 8041db4:	681b      	ldr	r3, [r3, #0]
 8041db6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8041dba:	2b00      	cmp	r3, #0
 8041dbc:	d109      	bne.n	8041dd2 <RCCEx_PLLSAI1_Config+0x62>
      {
        status = HAL_ERROR;
 8041dbe:	2301      	movs	r3, #1
 8041dc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8041dc2:	e006      	b.n	8041dd2 <RCCEx_PLLSAI1_Config+0x62>
    default:
      status = HAL_ERROR;
 8041dc4:	2301      	movs	r3, #1
 8041dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8041dc8:	e004      	b.n	8041dd4 <RCCEx_PLLSAI1_Config+0x64>
      break;
 8041dca:	bf00      	nop
 8041dcc:	e002      	b.n	8041dd4 <RCCEx_PLLSAI1_Config+0x64>
      break;
 8041dce:	bf00      	nop
 8041dd0:	e000      	b.n	8041dd4 <RCCEx_PLLSAI1_Config+0x64>
      break;
 8041dd2:	bf00      	nop
  }

  if (status == HAL_OK)
 8041dd4:	7bfb      	ldrb	r3, [r7, #15]
 8041dd6:	2b00      	cmp	r3, #0
 8041dd8:	f040 808f 	bne.w	8041efa <RCCEx_PLLSAI1_Config+0x18a>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8041ddc:	4b49      	ldr	r3, [pc, #292]	; (8041f04 <RCCEx_PLLSAI1_Config+0x194>)
 8041dde:	681b      	ldr	r3, [r3, #0]
 8041de0:	4a48      	ldr	r2, [pc, #288]	; (8041f04 <RCCEx_PLLSAI1_Config+0x194>)
 8041de2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8041de6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8041de8:	f7ff f82a 	bl	8040e40 <HAL_GetTick>
 8041dec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8041dee:	e009      	b.n	8041e04 <RCCEx_PLLSAI1_Config+0x94>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8041df0:	f7ff f826 	bl	8040e40 <HAL_GetTick>
 8041df4:	4602      	mov	r2, r0
 8041df6:	68bb      	ldr	r3, [r7, #8]
 8041df8:	1ad3      	subs	r3, r2, r3
 8041dfa:	2b02      	cmp	r3, #2
 8041dfc:	d902      	bls.n	8041e04 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_TIMEOUT;
 8041dfe:	2303      	movs	r3, #3
 8041e00:	73fb      	strb	r3, [r7, #15]
        break;
 8041e02:	e005      	b.n	8041e10 <RCCEx_PLLSAI1_Config+0xa0>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8041e04:	4b3f      	ldr	r3, [pc, #252]	; (8041f04 <RCCEx_PLLSAI1_Config+0x194>)
 8041e06:	681b      	ldr	r3, [r3, #0]
 8041e08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8041e0c:	2b00      	cmp	r3, #0
 8041e0e:	d1ef      	bne.n	8041df0 <RCCEx_PLLSAI1_Config+0x80>
      }
    }

    if (status == HAL_OK)
 8041e10:	7bfb      	ldrb	r3, [r7, #15]
 8041e12:	2b00      	cmp	r3, #0
 8041e14:	d171      	bne.n	8041efa <RCCEx_PLLSAI1_Config+0x18a>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8041e16:	683b      	ldr	r3, [r7, #0]
 8041e18:	2b00      	cmp	r3, #0
 8041e1a:	d116      	bne.n	8041e4a <RCCEx_PLLSAI1_Config+0xda>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8041e1c:	4b39      	ldr	r3, [pc, #228]	; (8041f04 <RCCEx_PLLSAI1_Config+0x194>)
 8041e1e:	691a      	ldr	r2, [r3, #16]
 8041e20:	4b39      	ldr	r3, [pc, #228]	; (8041f08 <RCCEx_PLLSAI1_Config+0x198>)
 8041e22:	4013      	ands	r3, r2
 8041e24:	687a      	ldr	r2, [r7, #4]
 8041e26:	6892      	ldr	r2, [r2, #8]
 8041e28:	0211      	lsls	r1, r2, #8
 8041e2a:	687a      	ldr	r2, [r7, #4]
 8041e2c:	68d2      	ldr	r2, [r2, #12]
 8041e2e:	06d2      	lsls	r2, r2, #27
 8041e30:	4311      	orrs	r1, r2
 8041e32:	687a      	ldr	r2, [r7, #4]
 8041e34:	6852      	ldr	r2, [r2, #4]
 8041e36:	3a01      	subs	r2, #1
 8041e38:	0112      	lsls	r2, r2, #4
 8041e3a:	4311      	orrs	r1, r2
 8041e3c:	687a      	ldr	r2, [r7, #4]
 8041e3e:	6812      	ldr	r2, [r2, #0]
 8041e40:	430a      	orrs	r2, r1
 8041e42:	4930      	ldr	r1, [pc, #192]	; (8041f04 <RCCEx_PLLSAI1_Config+0x194>)
 8041e44:	4313      	orrs	r3, r2
 8041e46:	610b      	str	r3, [r1, #16]
 8041e48:	e033      	b.n	8041eb2 <RCCEx_PLLSAI1_Config+0x142>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8041e4a:	683b      	ldr	r3, [r7, #0]
 8041e4c:	2b01      	cmp	r3, #1
 8041e4e:	d118      	bne.n	8041e82 <RCCEx_PLLSAI1_Config+0x112>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8041e50:	4b2c      	ldr	r3, [pc, #176]	; (8041f04 <RCCEx_PLLSAI1_Config+0x194>)
 8041e52:	691a      	ldr	r2, [r3, #16]
 8041e54:	4b2d      	ldr	r3, [pc, #180]	; (8041f0c <RCCEx_PLLSAI1_Config+0x19c>)
 8041e56:	4013      	ands	r3, r2
 8041e58:	687a      	ldr	r2, [r7, #4]
 8041e5a:	6892      	ldr	r2, [r2, #8]
 8041e5c:	0211      	lsls	r1, r2, #8
 8041e5e:	687a      	ldr	r2, [r7, #4]
 8041e60:	6912      	ldr	r2, [r2, #16]
 8041e62:	0852      	lsrs	r2, r2, #1
 8041e64:	3a01      	subs	r2, #1
 8041e66:	0552      	lsls	r2, r2, #21
 8041e68:	4311      	orrs	r1, r2
 8041e6a:	687a      	ldr	r2, [r7, #4]
 8041e6c:	6852      	ldr	r2, [r2, #4]
 8041e6e:	3a01      	subs	r2, #1
 8041e70:	0112      	lsls	r2, r2, #4
 8041e72:	4311      	orrs	r1, r2
 8041e74:	687a      	ldr	r2, [r7, #4]
 8041e76:	6812      	ldr	r2, [r2, #0]
 8041e78:	430a      	orrs	r2, r1
 8041e7a:	4922      	ldr	r1, [pc, #136]	; (8041f04 <RCCEx_PLLSAI1_Config+0x194>)
 8041e7c:	4313      	orrs	r3, r2
 8041e7e:	610b      	str	r3, [r1, #16]
 8041e80:	e017      	b.n	8041eb2 <RCCEx_PLLSAI1_Config+0x142>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8041e82:	4b20      	ldr	r3, [pc, #128]	; (8041f04 <RCCEx_PLLSAI1_Config+0x194>)
 8041e84:	691a      	ldr	r2, [r3, #16]
 8041e86:	4b22      	ldr	r3, [pc, #136]	; (8041f10 <RCCEx_PLLSAI1_Config+0x1a0>)
 8041e88:	4013      	ands	r3, r2
 8041e8a:	687a      	ldr	r2, [r7, #4]
 8041e8c:	6892      	ldr	r2, [r2, #8]
 8041e8e:	0211      	lsls	r1, r2, #8
 8041e90:	687a      	ldr	r2, [r7, #4]
 8041e92:	6952      	ldr	r2, [r2, #20]
 8041e94:	0852      	lsrs	r2, r2, #1
 8041e96:	3a01      	subs	r2, #1
 8041e98:	0652      	lsls	r2, r2, #25
 8041e9a:	4311      	orrs	r1, r2
 8041e9c:	687a      	ldr	r2, [r7, #4]
 8041e9e:	6852      	ldr	r2, [r2, #4]
 8041ea0:	3a01      	subs	r2, #1
 8041ea2:	0112      	lsls	r2, r2, #4
 8041ea4:	4311      	orrs	r1, r2
 8041ea6:	687a      	ldr	r2, [r7, #4]
 8041ea8:	6812      	ldr	r2, [r2, #0]
 8041eaa:	430a      	orrs	r2, r1
 8041eac:	4915      	ldr	r1, [pc, #84]	; (8041f04 <RCCEx_PLLSAI1_Config+0x194>)
 8041eae:	4313      	orrs	r3, r2
 8041eb0:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8041eb2:	4b14      	ldr	r3, [pc, #80]	; (8041f04 <RCCEx_PLLSAI1_Config+0x194>)
 8041eb4:	681b      	ldr	r3, [r3, #0]
 8041eb6:	4a13      	ldr	r2, [pc, #76]	; (8041f04 <RCCEx_PLLSAI1_Config+0x194>)
 8041eb8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8041ebc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041ebe:	f7fe ffbf 	bl	8040e40 <HAL_GetTick>
 8041ec2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8041ec4:	e009      	b.n	8041eda <RCCEx_PLLSAI1_Config+0x16a>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8041ec6:	f7fe ffbb 	bl	8040e40 <HAL_GetTick>
 8041eca:	4602      	mov	r2, r0
 8041ecc:	68bb      	ldr	r3, [r7, #8]
 8041ece:	1ad3      	subs	r3, r2, r3
 8041ed0:	2b02      	cmp	r3, #2
 8041ed2:	d902      	bls.n	8041eda <RCCEx_PLLSAI1_Config+0x16a>
        {
          status = HAL_TIMEOUT;
 8041ed4:	2303      	movs	r3, #3
 8041ed6:	73fb      	strb	r3, [r7, #15]
          break;
 8041ed8:	e005      	b.n	8041ee6 <RCCEx_PLLSAI1_Config+0x176>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8041eda:	4b0a      	ldr	r3, [pc, #40]	; (8041f04 <RCCEx_PLLSAI1_Config+0x194>)
 8041edc:	681b      	ldr	r3, [r3, #0]
 8041ede:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8041ee2:	2b00      	cmp	r3, #0
 8041ee4:	d0ef      	beq.n	8041ec6 <RCCEx_PLLSAI1_Config+0x156>
        }
      }

      if (status == HAL_OK)
 8041ee6:	7bfb      	ldrb	r3, [r7, #15]
 8041ee8:	2b00      	cmp	r3, #0
 8041eea:	d106      	bne.n	8041efa <RCCEx_PLLSAI1_Config+0x18a>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8041eec:	4b05      	ldr	r3, [pc, #20]	; (8041f04 <RCCEx_PLLSAI1_Config+0x194>)
 8041eee:	691a      	ldr	r2, [r3, #16]
 8041ef0:	687b      	ldr	r3, [r7, #4]
 8041ef2:	699b      	ldr	r3, [r3, #24]
 8041ef4:	4903      	ldr	r1, [pc, #12]	; (8041f04 <RCCEx_PLLSAI1_Config+0x194>)
 8041ef6:	4313      	orrs	r3, r2
 8041ef8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8041efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8041efc:	4618      	mov	r0, r3
 8041efe:	3710      	adds	r7, #16
 8041f00:	46bd      	mov	sp, r7
 8041f02:	bd80      	pop	{r7, pc}
 8041f04:	40021000 	.word	0x40021000
 8041f08:	07ff800c 	.word	0x07ff800c
 8041f0c:	ff9f800c 	.word	0xff9f800c
 8041f10:	f9ff800c 	.word	0xf9ff800c

08041f14 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8041f14:	b580      	push	{r7, lr}
 8041f16:	b084      	sub	sp, #16
 8041f18:	af00      	add	r7, sp, #0
 8041f1a:	6078      	str	r0, [r7, #4]
 8041f1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8041f1e:	2300      	movs	r3, #0
 8041f20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8041f22:	687b      	ldr	r3, [r7, #4]
 8041f24:	681b      	ldr	r3, [r3, #0]
 8041f26:	2b02      	cmp	r3, #2
 8041f28:	d00c      	beq.n	8041f44 <RCCEx_PLLSAI2_Config+0x30>
 8041f2a:	2b03      	cmp	r3, #3
 8041f2c:	d013      	beq.n	8041f56 <RCCEx_PLLSAI2_Config+0x42>
 8041f2e:	2b01      	cmp	r3, #1
 8041f30:	d11a      	bne.n	8041f68 <RCCEx_PLLSAI2_Config+0x54>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8041f32:	4b42      	ldr	r3, [pc, #264]	; (804203c <RCCEx_PLLSAI2_Config+0x128>)
 8041f34:	681b      	ldr	r3, [r3, #0]
 8041f36:	f003 0302 	and.w	r3, r3, #2
 8041f3a:	2b00      	cmp	r3, #0
 8041f3c:	d117      	bne.n	8041f6e <RCCEx_PLLSAI2_Config+0x5a>
      {
        status = HAL_ERROR;
 8041f3e:	2301      	movs	r3, #1
 8041f40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8041f42:	e014      	b.n	8041f6e <RCCEx_PLLSAI2_Config+0x5a>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8041f44:	4b3d      	ldr	r3, [pc, #244]	; (804203c <RCCEx_PLLSAI2_Config+0x128>)
 8041f46:	681b      	ldr	r3, [r3, #0]
 8041f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041f4c:	2b00      	cmp	r3, #0
 8041f4e:	d110      	bne.n	8041f72 <RCCEx_PLLSAI2_Config+0x5e>
      {
        status = HAL_ERROR;
 8041f50:	2301      	movs	r3, #1
 8041f52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8041f54:	e00d      	b.n	8041f72 <RCCEx_PLLSAI2_Config+0x5e>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8041f56:	4b39      	ldr	r3, [pc, #228]	; (804203c <RCCEx_PLLSAI2_Config+0x128>)
 8041f58:	681b      	ldr	r3, [r3, #0]
 8041f5a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8041f5e:	2b00      	cmp	r3, #0
 8041f60:	d109      	bne.n	8041f76 <RCCEx_PLLSAI2_Config+0x62>
      {
        status = HAL_ERROR;
 8041f62:	2301      	movs	r3, #1
 8041f64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8041f66:	e006      	b.n	8041f76 <RCCEx_PLLSAI2_Config+0x62>
    default:
      status = HAL_ERROR;
 8041f68:	2301      	movs	r3, #1
 8041f6a:	73fb      	strb	r3, [r7, #15]
      break;
 8041f6c:	e004      	b.n	8041f78 <RCCEx_PLLSAI2_Config+0x64>
      break;
 8041f6e:	bf00      	nop
 8041f70:	e002      	b.n	8041f78 <RCCEx_PLLSAI2_Config+0x64>
      break;
 8041f72:	bf00      	nop
 8041f74:	e000      	b.n	8041f78 <RCCEx_PLLSAI2_Config+0x64>
      break;
 8041f76:	bf00      	nop
  }

  if (status == HAL_OK)
 8041f78:	7bfb      	ldrb	r3, [r7, #15]
 8041f7a:	2b00      	cmp	r3, #0
 8041f7c:	d159      	bne.n	8042032 <RCCEx_PLLSAI2_Config+0x11e>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8041f7e:	4b2f      	ldr	r3, [pc, #188]	; (804203c <RCCEx_PLLSAI2_Config+0x128>)
 8041f80:	681b      	ldr	r3, [r3, #0]
 8041f82:	4a2e      	ldr	r2, [pc, #184]	; (804203c <RCCEx_PLLSAI2_Config+0x128>)
 8041f84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8041f88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8041f8a:	f7fe ff59 	bl	8040e40 <HAL_GetTick>
 8041f8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8041f90:	e009      	b.n	8041fa6 <RCCEx_PLLSAI2_Config+0x92>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8041f92:	f7fe ff55 	bl	8040e40 <HAL_GetTick>
 8041f96:	4602      	mov	r2, r0
 8041f98:	68bb      	ldr	r3, [r7, #8]
 8041f9a:	1ad3      	subs	r3, r2, r3
 8041f9c:	2b02      	cmp	r3, #2
 8041f9e:	d902      	bls.n	8041fa6 <RCCEx_PLLSAI2_Config+0x92>
      {
        status = HAL_TIMEOUT;
 8041fa0:	2303      	movs	r3, #3
 8041fa2:	73fb      	strb	r3, [r7, #15]
        break;
 8041fa4:	e005      	b.n	8041fb2 <RCCEx_PLLSAI2_Config+0x9e>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8041fa6:	4b25      	ldr	r3, [pc, #148]	; (804203c <RCCEx_PLLSAI2_Config+0x128>)
 8041fa8:	681b      	ldr	r3, [r3, #0]
 8041faa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8041fae:	2b00      	cmp	r3, #0
 8041fb0:	d1ef      	bne.n	8041f92 <RCCEx_PLLSAI2_Config+0x7e>
      }
    }

    if (status == HAL_OK)
 8041fb2:	7bfb      	ldrb	r3, [r7, #15]
 8041fb4:	2b00      	cmp	r3, #0
 8041fb6:	d13c      	bne.n	8042032 <RCCEx_PLLSAI2_Config+0x11e>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8041fb8:	683b      	ldr	r3, [r7, #0]
 8041fba:	2b00      	cmp	r3, #0
 8041fbc:	d115      	bne.n	8041fea <RCCEx_PLLSAI2_Config+0xd6>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8041fbe:	4b1f      	ldr	r3, [pc, #124]	; (804203c <RCCEx_PLLSAI2_Config+0x128>)
 8041fc0:	695a      	ldr	r2, [r3, #20]
 8041fc2:	4b1f      	ldr	r3, [pc, #124]	; (8042040 <RCCEx_PLLSAI2_Config+0x12c>)
 8041fc4:	4013      	ands	r3, r2
 8041fc6:	687a      	ldr	r2, [r7, #4]
 8041fc8:	6892      	ldr	r2, [r2, #8]
 8041fca:	0211      	lsls	r1, r2, #8
 8041fcc:	687a      	ldr	r2, [r7, #4]
 8041fce:	68d2      	ldr	r2, [r2, #12]
 8041fd0:	06d2      	lsls	r2, r2, #27
 8041fd2:	4311      	orrs	r1, r2
 8041fd4:	687a      	ldr	r2, [r7, #4]
 8041fd6:	6852      	ldr	r2, [r2, #4]
 8041fd8:	3a01      	subs	r2, #1
 8041fda:	0112      	lsls	r2, r2, #4
 8041fdc:	4311      	orrs	r1, r2
 8041fde:	687a      	ldr	r2, [r7, #4]
 8041fe0:	6812      	ldr	r2, [r2, #0]
 8041fe2:	430a      	orrs	r2, r1
 8041fe4:	4915      	ldr	r1, [pc, #84]	; (804203c <RCCEx_PLLSAI2_Config+0x128>)
 8041fe6:	4313      	orrs	r3, r2
 8041fe8:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8041fea:	4b14      	ldr	r3, [pc, #80]	; (804203c <RCCEx_PLLSAI2_Config+0x128>)
 8041fec:	681b      	ldr	r3, [r3, #0]
 8041fee:	4a13      	ldr	r2, [pc, #76]	; (804203c <RCCEx_PLLSAI2_Config+0x128>)
 8041ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8041ff4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041ff6:	f7fe ff23 	bl	8040e40 <HAL_GetTick>
 8041ffa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8041ffc:	e009      	b.n	8042012 <RCCEx_PLLSAI2_Config+0xfe>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8041ffe:	f7fe ff1f 	bl	8040e40 <HAL_GetTick>
 8042002:	4602      	mov	r2, r0
 8042004:	68bb      	ldr	r3, [r7, #8]
 8042006:	1ad3      	subs	r3, r2, r3
 8042008:	2b02      	cmp	r3, #2
 804200a:	d902      	bls.n	8042012 <RCCEx_PLLSAI2_Config+0xfe>
        {
          status = HAL_TIMEOUT;
 804200c:	2303      	movs	r3, #3
 804200e:	73fb      	strb	r3, [r7, #15]
          break;
 8042010:	e005      	b.n	804201e <RCCEx_PLLSAI2_Config+0x10a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8042012:	4b0a      	ldr	r3, [pc, #40]	; (804203c <RCCEx_PLLSAI2_Config+0x128>)
 8042014:	681b      	ldr	r3, [r3, #0]
 8042016:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 804201a:	2b00      	cmp	r3, #0
 804201c:	d0ef      	beq.n	8041ffe <RCCEx_PLLSAI2_Config+0xea>
        }
      }

      if (status == HAL_OK)
 804201e:	7bfb      	ldrb	r3, [r7, #15]
 8042020:	2b00      	cmp	r3, #0
 8042022:	d106      	bne.n	8042032 <RCCEx_PLLSAI2_Config+0x11e>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8042024:	4b05      	ldr	r3, [pc, #20]	; (804203c <RCCEx_PLLSAI2_Config+0x128>)
 8042026:	695a      	ldr	r2, [r3, #20]
 8042028:	687b      	ldr	r3, [r7, #4]
 804202a:	691b      	ldr	r3, [r3, #16]
 804202c:	4903      	ldr	r1, [pc, #12]	; (804203c <RCCEx_PLLSAI2_Config+0x128>)
 804202e:	4313      	orrs	r3, r2
 8042030:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8042032:	7bfb      	ldrb	r3, [r7, #15]
}
 8042034:	4618      	mov	r0, r3
 8042036:	3710      	adds	r7, #16
 8042038:	46bd      	mov	sp, r7
 804203a:	bd80      	pop	{r7, pc}
 804203c:	40021000 	.word	0x40021000
 8042040:	07ff800c 	.word	0x07ff800c

08042044 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8042044:	b580      	push	{r7, lr}
 8042046:	b082      	sub	sp, #8
 8042048:	af00      	add	r7, sp, #0
 804204a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 804204c:	687b      	ldr	r3, [r7, #4]
 804204e:	2b00      	cmp	r3, #0
 8042050:	d101      	bne.n	8042056 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8042052:	2301      	movs	r3, #1
 8042054:	e042      	b.n	80420dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8042056:	687b      	ldr	r3, [r7, #4]
 8042058:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 804205c:	2b00      	cmp	r3, #0
 804205e:	d106      	bne.n	804206e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8042060:	687b      	ldr	r3, [r7, #4]
 8042062:	2200      	movs	r2, #0
 8042064:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8042068:	6878      	ldr	r0, [r7, #4]
 804206a:	f7fe fd81 	bl	8040b70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 804206e:	687b      	ldr	r3, [r7, #4]
 8042070:	2224      	movs	r2, #36	; 0x24
 8042072:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8042076:	687b      	ldr	r3, [r7, #4]
 8042078:	681b      	ldr	r3, [r3, #0]
 804207a:	681a      	ldr	r2, [r3, #0]
 804207c:	687b      	ldr	r3, [r7, #4]
 804207e:	681b      	ldr	r3, [r3, #0]
 8042080:	f022 0201 	bic.w	r2, r2, #1
 8042084:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8042086:	6878      	ldr	r0, [r7, #4]
 8042088:	f000 fb1a 	bl	80426c0 <UART_SetConfig>
 804208c:	4603      	mov	r3, r0
 804208e:	2b01      	cmp	r3, #1
 8042090:	d101      	bne.n	8042096 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8042092:	2301      	movs	r3, #1
 8042094:	e022      	b.n	80420dc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8042096:	687b      	ldr	r3, [r7, #4]
 8042098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804209a:	2b00      	cmp	r3, #0
 804209c:	d002      	beq.n	80420a4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 804209e:	6878      	ldr	r0, [r7, #4]
 80420a0:	f000 fde4 	bl	8042c6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80420a4:	687b      	ldr	r3, [r7, #4]
 80420a6:	681b      	ldr	r3, [r3, #0]
 80420a8:	685a      	ldr	r2, [r3, #4]
 80420aa:	687b      	ldr	r3, [r7, #4]
 80420ac:	681b      	ldr	r3, [r3, #0]
 80420ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80420b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80420b4:	687b      	ldr	r3, [r7, #4]
 80420b6:	681b      	ldr	r3, [r3, #0]
 80420b8:	689a      	ldr	r2, [r3, #8]
 80420ba:	687b      	ldr	r3, [r7, #4]
 80420bc:	681b      	ldr	r3, [r3, #0]
 80420be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80420c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80420c4:	687b      	ldr	r3, [r7, #4]
 80420c6:	681b      	ldr	r3, [r3, #0]
 80420c8:	681a      	ldr	r2, [r3, #0]
 80420ca:	687b      	ldr	r3, [r7, #4]
 80420cc:	681b      	ldr	r3, [r3, #0]
 80420ce:	f042 0201 	orr.w	r2, r2, #1
 80420d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80420d4:	6878      	ldr	r0, [r7, #4]
 80420d6:	f000 fe6b 	bl	8042db0 <UART_CheckIdleState>
 80420da:	4603      	mov	r3, r0
}
 80420dc:	4618      	mov	r0, r3
 80420de:	3708      	adds	r7, #8
 80420e0:	46bd      	mov	sp, r7
 80420e2:	bd80      	pop	{r7, pc}

080420e4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80420e4:	b480      	push	{r7}
 80420e6:	b085      	sub	sp, #20
 80420e8:	af00      	add	r7, sp, #0
 80420ea:	60f8      	str	r0, [r7, #12]
 80420ec:	60b9      	str	r1, [r7, #8]
 80420ee:	4613      	mov	r3, r2
 80420f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80420f2:	68fb      	ldr	r3, [r7, #12]
 80420f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80420f8:	2b20      	cmp	r3, #32
 80420fa:	d168      	bne.n	80421ce <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 80420fc:	68bb      	ldr	r3, [r7, #8]
 80420fe:	2b00      	cmp	r3, #0
 8042100:	d002      	beq.n	8042108 <HAL_UART_Transmit_IT+0x24>
 8042102:	88fb      	ldrh	r3, [r7, #6]
 8042104:	2b00      	cmp	r3, #0
 8042106:	d101      	bne.n	804210c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8042108:	2301      	movs	r3, #1
 804210a:	e061      	b.n	80421d0 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 804210c:	68fb      	ldr	r3, [r7, #12]
 804210e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8042112:	2b01      	cmp	r3, #1
 8042114:	d101      	bne.n	804211a <HAL_UART_Transmit_IT+0x36>
 8042116:	2302      	movs	r3, #2
 8042118:	e05a      	b.n	80421d0 <HAL_UART_Transmit_IT+0xec>
 804211a:	68fb      	ldr	r3, [r7, #12]
 804211c:	2201      	movs	r2, #1
 804211e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8042122:	68fb      	ldr	r3, [r7, #12]
 8042124:	68ba      	ldr	r2, [r7, #8]
 8042126:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8042128:	68fb      	ldr	r3, [r7, #12]
 804212a:	88fa      	ldrh	r2, [r7, #6]
 804212c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8042130:	68fb      	ldr	r3, [r7, #12]
 8042132:	88fa      	ldrh	r2, [r7, #6]
 8042134:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8042138:	68fb      	ldr	r3, [r7, #12]
 804213a:	2200      	movs	r2, #0
 804213c:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 804213e:	68fb      	ldr	r3, [r7, #12]
 8042140:	2200      	movs	r2, #0
 8042142:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8042146:	68fb      	ldr	r3, [r7, #12]
 8042148:	2221      	movs	r2, #33	; 0x21
 804214a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 804214e:	68fb      	ldr	r3, [r7, #12]
 8042150:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8042152:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8042156:	d11c      	bne.n	8042192 <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8042158:	68fb      	ldr	r3, [r7, #12]
 804215a:	689b      	ldr	r3, [r3, #8]
 804215c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8042160:	d107      	bne.n	8042172 <HAL_UART_Transmit_IT+0x8e>
 8042162:	68fb      	ldr	r3, [r7, #12]
 8042164:	691b      	ldr	r3, [r3, #16]
 8042166:	2b00      	cmp	r3, #0
 8042168:	d103      	bne.n	8042172 <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 804216a:	68fb      	ldr	r3, [r7, #12]
 804216c:	4a1b      	ldr	r2, [pc, #108]	; (80421dc <HAL_UART_Transmit_IT+0xf8>)
 804216e:	675a      	str	r2, [r3, #116]	; 0x74
 8042170:	e002      	b.n	8042178 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8042172:	68fb      	ldr	r3, [r7, #12]
 8042174:	4a1a      	ldr	r2, [pc, #104]	; (80421e0 <HAL_UART_Transmit_IT+0xfc>)
 8042176:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8042178:	68fb      	ldr	r3, [r7, #12]
 804217a:	2200      	movs	r2, #0
 804217c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8042180:	68fb      	ldr	r3, [r7, #12]
 8042182:	681b      	ldr	r3, [r3, #0]
 8042184:	689a      	ldr	r2, [r3, #8]
 8042186:	68fb      	ldr	r3, [r7, #12]
 8042188:	681b      	ldr	r3, [r3, #0]
 804218a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 804218e:	609a      	str	r2, [r3, #8]
 8042190:	e01b      	b.n	80421ca <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8042192:	68fb      	ldr	r3, [r7, #12]
 8042194:	689b      	ldr	r3, [r3, #8]
 8042196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 804219a:	d107      	bne.n	80421ac <HAL_UART_Transmit_IT+0xc8>
 804219c:	68fb      	ldr	r3, [r7, #12]
 804219e:	691b      	ldr	r3, [r3, #16]
 80421a0:	2b00      	cmp	r3, #0
 80421a2:	d103      	bne.n	80421ac <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80421a4:	68fb      	ldr	r3, [r7, #12]
 80421a6:	4a0f      	ldr	r2, [pc, #60]	; (80421e4 <HAL_UART_Transmit_IT+0x100>)
 80421a8:	675a      	str	r2, [r3, #116]	; 0x74
 80421aa:	e002      	b.n	80421b2 <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80421ac:	68fb      	ldr	r3, [r7, #12]
 80421ae:	4a0e      	ldr	r2, [pc, #56]	; (80421e8 <HAL_UART_Transmit_IT+0x104>)
 80421b0:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 80421b2:	68fb      	ldr	r3, [r7, #12]
 80421b4:	2200      	movs	r2, #0
 80421b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80421ba:	68fb      	ldr	r3, [r7, #12]
 80421bc:	681b      	ldr	r3, [r3, #0]
 80421be:	681a      	ldr	r2, [r3, #0]
 80421c0:	68fb      	ldr	r3, [r7, #12]
 80421c2:	681b      	ldr	r3, [r3, #0]
 80421c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80421c8:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 80421ca:	2300      	movs	r3, #0
 80421cc:	e000      	b.n	80421d0 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 80421ce:	2302      	movs	r3, #2
  }
}
 80421d0:	4618      	mov	r0, r3
 80421d2:	3714      	adds	r7, #20
 80421d4:	46bd      	mov	sp, r7
 80421d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80421da:	4770      	bx	lr
 80421dc:	08043163 	.word	0x08043163
 80421e0:	080430c9 	.word	0x080430c9
 80421e4:	0804304b 	.word	0x0804304b
 80421e8:	08042fd7 	.word	0x08042fd7

080421ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80421ec:	b580      	push	{r7, lr}
 80421ee:	b088      	sub	sp, #32
 80421f0:	af00      	add	r7, sp, #0
 80421f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80421f4:	687b      	ldr	r3, [r7, #4]
 80421f6:	681b      	ldr	r3, [r3, #0]
 80421f8:	69db      	ldr	r3, [r3, #28]
 80421fa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80421fc:	687b      	ldr	r3, [r7, #4]
 80421fe:	681b      	ldr	r3, [r3, #0]
 8042200:	681b      	ldr	r3, [r3, #0]
 8042202:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8042204:	687b      	ldr	r3, [r7, #4]
 8042206:	681b      	ldr	r3, [r3, #0]
 8042208:	689b      	ldr	r3, [r3, #8]
 804220a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 804220c:	69fa      	ldr	r2, [r7, #28]
 804220e:	f640 030f 	movw	r3, #2063	; 0x80f
 8042212:	4013      	ands	r3, r2
 8042214:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8042216:	693b      	ldr	r3, [r7, #16]
 8042218:	2b00      	cmp	r3, #0
 804221a:	d118      	bne.n	804224e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 804221c:	69fb      	ldr	r3, [r7, #28]
 804221e:	f003 0320 	and.w	r3, r3, #32
 8042222:	2b00      	cmp	r3, #0
 8042224:	d013      	beq.n	804224e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8042226:	69bb      	ldr	r3, [r7, #24]
 8042228:	f003 0320 	and.w	r3, r3, #32
 804222c:	2b00      	cmp	r3, #0
 804222e:	d104      	bne.n	804223a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8042230:	697b      	ldr	r3, [r7, #20]
 8042232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8042236:	2b00      	cmp	r3, #0
 8042238:	d009      	beq.n	804224e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 804223a:	687b      	ldr	r3, [r7, #4]
 804223c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804223e:	2b00      	cmp	r3, #0
 8042240:	f000 81fc 	beq.w	804263c <HAL_UART_IRQHandler+0x450>
      {
        huart->RxISR(huart);
 8042244:	687b      	ldr	r3, [r7, #4]
 8042246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042248:	6878      	ldr	r0, [r7, #4]
 804224a:	4798      	blx	r3
      }
      return;
 804224c:	e1f6      	b.n	804263c <HAL_UART_IRQHandler+0x450>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 804224e:	693b      	ldr	r3, [r7, #16]
 8042250:	2b00      	cmp	r3, #0
 8042252:	f000 80ef 	beq.w	8042434 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8042256:	697a      	ldr	r2, [r7, #20]
 8042258:	4b73      	ldr	r3, [pc, #460]	; (8042428 <HAL_UART_IRQHandler+0x23c>)
 804225a:	4013      	ands	r3, r2
 804225c:	2b00      	cmp	r3, #0
 804225e:	d105      	bne.n	804226c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8042260:	69ba      	ldr	r2, [r7, #24]
 8042262:	4b72      	ldr	r3, [pc, #456]	; (804242c <HAL_UART_IRQHandler+0x240>)
 8042264:	4013      	ands	r3, r2
 8042266:	2b00      	cmp	r3, #0
 8042268:	f000 80e4 	beq.w	8042434 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 804226c:	69fb      	ldr	r3, [r7, #28]
 804226e:	f003 0301 	and.w	r3, r3, #1
 8042272:	2b00      	cmp	r3, #0
 8042274:	d010      	beq.n	8042298 <HAL_UART_IRQHandler+0xac>
 8042276:	69bb      	ldr	r3, [r7, #24]
 8042278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804227c:	2b00      	cmp	r3, #0
 804227e:	d00b      	beq.n	8042298 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8042280:	687b      	ldr	r3, [r7, #4]
 8042282:	681b      	ldr	r3, [r3, #0]
 8042284:	2201      	movs	r2, #1
 8042286:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8042288:	687b      	ldr	r3, [r7, #4]
 804228a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804228e:	f043 0201 	orr.w	r2, r3, #1
 8042292:	687b      	ldr	r3, [r7, #4]
 8042294:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8042298:	69fb      	ldr	r3, [r7, #28]
 804229a:	f003 0302 	and.w	r3, r3, #2
 804229e:	2b00      	cmp	r3, #0
 80422a0:	d010      	beq.n	80422c4 <HAL_UART_IRQHandler+0xd8>
 80422a2:	697b      	ldr	r3, [r7, #20]
 80422a4:	f003 0301 	and.w	r3, r3, #1
 80422a8:	2b00      	cmp	r3, #0
 80422aa:	d00b      	beq.n	80422c4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80422ac:	687b      	ldr	r3, [r7, #4]
 80422ae:	681b      	ldr	r3, [r3, #0]
 80422b0:	2202      	movs	r2, #2
 80422b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80422b4:	687b      	ldr	r3, [r7, #4]
 80422b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80422ba:	f043 0204 	orr.w	r2, r3, #4
 80422be:	687b      	ldr	r3, [r7, #4]
 80422c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80422c4:	69fb      	ldr	r3, [r7, #28]
 80422c6:	f003 0304 	and.w	r3, r3, #4
 80422ca:	2b00      	cmp	r3, #0
 80422cc:	d010      	beq.n	80422f0 <HAL_UART_IRQHandler+0x104>
 80422ce:	697b      	ldr	r3, [r7, #20]
 80422d0:	f003 0301 	and.w	r3, r3, #1
 80422d4:	2b00      	cmp	r3, #0
 80422d6:	d00b      	beq.n	80422f0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80422d8:	687b      	ldr	r3, [r7, #4]
 80422da:	681b      	ldr	r3, [r3, #0]
 80422dc:	2204      	movs	r2, #4
 80422de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80422e0:	687b      	ldr	r3, [r7, #4]
 80422e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80422e6:	f043 0202 	orr.w	r2, r3, #2
 80422ea:	687b      	ldr	r3, [r7, #4]
 80422ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80422f0:	69fb      	ldr	r3, [r7, #28]
 80422f2:	f003 0308 	and.w	r3, r3, #8
 80422f6:	2b00      	cmp	r3, #0
 80422f8:	d015      	beq.n	8042326 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80422fa:	69bb      	ldr	r3, [r7, #24]
 80422fc:	f003 0320 	and.w	r3, r3, #32
 8042300:	2b00      	cmp	r3, #0
 8042302:	d104      	bne.n	804230e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8042304:	697a      	ldr	r2, [r7, #20]
 8042306:	4b48      	ldr	r3, [pc, #288]	; (8042428 <HAL_UART_IRQHandler+0x23c>)
 8042308:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 804230a:	2b00      	cmp	r3, #0
 804230c:	d00b      	beq.n	8042326 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 804230e:	687b      	ldr	r3, [r7, #4]
 8042310:	681b      	ldr	r3, [r3, #0]
 8042312:	2208      	movs	r2, #8
 8042314:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8042316:	687b      	ldr	r3, [r7, #4]
 8042318:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804231c:	f043 0208 	orr.w	r2, r3, #8
 8042320:	687b      	ldr	r3, [r7, #4]
 8042322:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8042326:	69fb      	ldr	r3, [r7, #28]
 8042328:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 804232c:	2b00      	cmp	r3, #0
 804232e:	d011      	beq.n	8042354 <HAL_UART_IRQHandler+0x168>
 8042330:	69bb      	ldr	r3, [r7, #24]
 8042332:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8042336:	2b00      	cmp	r3, #0
 8042338:	d00c      	beq.n	8042354 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 804233a:	687b      	ldr	r3, [r7, #4]
 804233c:	681b      	ldr	r3, [r3, #0]
 804233e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8042342:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8042344:	687b      	ldr	r3, [r7, #4]
 8042346:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804234a:	f043 0220 	orr.w	r2, r3, #32
 804234e:	687b      	ldr	r3, [r7, #4]
 8042350:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8042354:	687b      	ldr	r3, [r7, #4]
 8042356:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804235a:	2b00      	cmp	r3, #0
 804235c:	f000 8170 	beq.w	8042640 <HAL_UART_IRQHandler+0x454>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8042360:	69fb      	ldr	r3, [r7, #28]
 8042362:	f003 0320 	and.w	r3, r3, #32
 8042366:	2b00      	cmp	r3, #0
 8042368:	d011      	beq.n	804238e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 804236a:	69bb      	ldr	r3, [r7, #24]
 804236c:	f003 0320 	and.w	r3, r3, #32
 8042370:	2b00      	cmp	r3, #0
 8042372:	d104      	bne.n	804237e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8042374:	697b      	ldr	r3, [r7, #20]
 8042376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804237a:	2b00      	cmp	r3, #0
 804237c:	d007      	beq.n	804238e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 804237e:	687b      	ldr	r3, [r7, #4]
 8042380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042382:	2b00      	cmp	r3, #0
 8042384:	d003      	beq.n	804238e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8042386:	687b      	ldr	r3, [r7, #4]
 8042388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804238a:	6878      	ldr	r0, [r7, #4]
 804238c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 804238e:	687b      	ldr	r3, [r7, #4]
 8042390:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8042394:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8042396:	687b      	ldr	r3, [r7, #4]
 8042398:	681b      	ldr	r3, [r3, #0]
 804239a:	689b      	ldr	r3, [r3, #8]
 804239c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80423a0:	2b40      	cmp	r3, #64	; 0x40
 80423a2:	d004      	beq.n	80423ae <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80423a4:	68fb      	ldr	r3, [r7, #12]
 80423a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80423aa:	2b00      	cmp	r3, #0
 80423ac:	d031      	beq.n	8042412 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80423ae:	6878      	ldr	r0, [r7, #4]
 80423b0:	f000 fdc9 	bl	8042f46 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80423b4:	687b      	ldr	r3, [r7, #4]
 80423b6:	681b      	ldr	r3, [r3, #0]
 80423b8:	689b      	ldr	r3, [r3, #8]
 80423ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80423be:	2b40      	cmp	r3, #64	; 0x40
 80423c0:	d123      	bne.n	804240a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80423c2:	687b      	ldr	r3, [r7, #4]
 80423c4:	681b      	ldr	r3, [r3, #0]
 80423c6:	689a      	ldr	r2, [r3, #8]
 80423c8:	687b      	ldr	r3, [r7, #4]
 80423ca:	681b      	ldr	r3, [r3, #0]
 80423cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80423d0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80423d2:	687b      	ldr	r3, [r7, #4]
 80423d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80423d6:	2b00      	cmp	r3, #0
 80423d8:	d013      	beq.n	8042402 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80423da:	687b      	ldr	r3, [r7, #4]
 80423dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80423de:	4a14      	ldr	r2, [pc, #80]	; (8042430 <HAL_UART_IRQHandler+0x244>)
 80423e0:	641a      	str	r2, [r3, #64]	; 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80423e2:	687b      	ldr	r3, [r7, #4]
 80423e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80423e6:	4618      	mov	r0, r3
 80423e8:	f7fe fea1 	bl	804112e <HAL_DMA_Abort_IT>
 80423ec:	4603      	mov	r3, r0
 80423ee:	2b00      	cmp	r3, #0
 80423f0:	d017      	beq.n	8042422 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80423f2:	687b      	ldr	r3, [r7, #4]
 80423f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80423f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80423f8:	687a      	ldr	r2, [r7, #4]
 80423fa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80423fc:	4610      	mov	r0, r2
 80423fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8042400:	e00f      	b.n	8042422 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8042402:	6878      	ldr	r0, [r7, #4]
 8042404:	f000 f930 	bl	8042668 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8042408:	e00b      	b.n	8042422 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 804240a:	6878      	ldr	r0, [r7, #4]
 804240c:	f000 f92c 	bl	8042668 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8042410:	e007      	b.n	8042422 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8042412:	6878      	ldr	r0, [r7, #4]
 8042414:	f000 f928 	bl	8042668 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8042418:	687b      	ldr	r3, [r7, #4]
 804241a:	2200      	movs	r2, #0
 804241c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8042420:	e10e      	b.n	8042640 <HAL_UART_IRQHandler+0x454>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8042422:	bf00      	nop
    return;
 8042424:	e10c      	b.n	8042640 <HAL_UART_IRQHandler+0x454>
 8042426:	bf00      	nop
 8042428:	10000001 	.word	0x10000001
 804242c:	04000120 	.word	0x04000120
 8042430:	08042fab 	.word	0x08042fab

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8042434:	687b      	ldr	r3, [r7, #4]
 8042436:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8042438:	2b01      	cmp	r3, #1
 804243a:	f040 80ab 	bne.w	8042594 <HAL_UART_IRQHandler+0x3a8>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 804243e:	69fb      	ldr	r3, [r7, #28]
 8042440:	f003 0310 	and.w	r3, r3, #16
 8042444:	2b00      	cmp	r3, #0
 8042446:	f000 80a5 	beq.w	8042594 <HAL_UART_IRQHandler+0x3a8>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 804244a:	69bb      	ldr	r3, [r7, #24]
 804244c:	f003 0310 	and.w	r3, r3, #16
 8042450:	2b00      	cmp	r3, #0
 8042452:	f000 809f 	beq.w	8042594 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8042456:	687b      	ldr	r3, [r7, #4]
 8042458:	681b      	ldr	r3, [r3, #0]
 804245a:	2210      	movs	r2, #16
 804245c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 804245e:	687b      	ldr	r3, [r7, #4]
 8042460:	681b      	ldr	r3, [r3, #0]
 8042462:	689b      	ldr	r3, [r3, #8]
 8042464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8042468:	2b40      	cmp	r3, #64	; 0x40
 804246a:	d155      	bne.n	8042518 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 804246c:	687b      	ldr	r3, [r7, #4]
 804246e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8042470:	681b      	ldr	r3, [r3, #0]
 8042472:	685b      	ldr	r3, [r3, #4]
 8042474:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8042476:	893b      	ldrh	r3, [r7, #8]
 8042478:	2b00      	cmp	r3, #0
 804247a:	f000 80e3 	beq.w	8042644 <HAL_UART_IRQHandler+0x458>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 804247e:	687b      	ldr	r3, [r7, #4]
 8042480:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8042484:	893a      	ldrh	r2, [r7, #8]
 8042486:	429a      	cmp	r2, r3
 8042488:	f080 80dc 	bcs.w	8042644 <HAL_UART_IRQHandler+0x458>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 804248c:	687b      	ldr	r3, [r7, #4]
 804248e:	893a      	ldrh	r2, [r7, #8]
 8042490:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8042494:	687b      	ldr	r3, [r7, #4]
 8042496:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8042498:	681b      	ldr	r3, [r3, #0]
 804249a:	681b      	ldr	r3, [r3, #0]
 804249c:	f003 0320 	and.w	r3, r3, #32
 80424a0:	2b00      	cmp	r3, #0
 80424a2:	d12b      	bne.n	80424fc <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80424a4:	687b      	ldr	r3, [r7, #4]
 80424a6:	681b      	ldr	r3, [r3, #0]
 80424a8:	681a      	ldr	r2, [r3, #0]
 80424aa:	687b      	ldr	r3, [r7, #4]
 80424ac:	681b      	ldr	r3, [r3, #0]
 80424ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80424b2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80424b4:	687b      	ldr	r3, [r7, #4]
 80424b6:	681b      	ldr	r3, [r3, #0]
 80424b8:	689a      	ldr	r2, [r3, #8]
 80424ba:	687b      	ldr	r3, [r7, #4]
 80424bc:	681b      	ldr	r3, [r3, #0]
 80424be:	f022 0201 	bic.w	r2, r2, #1
 80424c2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80424c4:	687b      	ldr	r3, [r7, #4]
 80424c6:	681b      	ldr	r3, [r3, #0]
 80424c8:	689a      	ldr	r2, [r3, #8]
 80424ca:	687b      	ldr	r3, [r7, #4]
 80424cc:	681b      	ldr	r3, [r3, #0]
 80424ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80424d2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80424d4:	687b      	ldr	r3, [r7, #4]
 80424d6:	2220      	movs	r2, #32
 80424d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80424dc:	687b      	ldr	r3, [r7, #4]
 80424de:	2200      	movs	r2, #0
 80424e0:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80424e2:	687b      	ldr	r3, [r7, #4]
 80424e4:	681b      	ldr	r3, [r3, #0]
 80424e6:	681a      	ldr	r2, [r3, #0]
 80424e8:	687b      	ldr	r3, [r7, #4]
 80424ea:	681b      	ldr	r3, [r3, #0]
 80424ec:	f022 0210 	bic.w	r2, r2, #16
 80424f0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80424f2:	687b      	ldr	r3, [r7, #4]
 80424f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80424f6:	4618      	mov	r0, r3
 80424f8:	f7fe fdbd 	bl	8041076 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80424fc:	687b      	ldr	r3, [r7, #4]
 80424fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8042502:	687b      	ldr	r3, [r7, #4]
 8042504:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8042508:	b29b      	uxth	r3, r3
 804250a:	1ad3      	subs	r3, r2, r3
 804250c:	b29b      	uxth	r3, r3
 804250e:	4619      	mov	r1, r3
 8042510:	6878      	ldr	r0, [r7, #4]
 8042512:	f000 f8b3 	bl	804267c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8042516:	e095      	b.n	8042644 <HAL_UART_IRQHandler+0x458>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8042518:	687b      	ldr	r3, [r7, #4]
 804251a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 804251e:	687b      	ldr	r3, [r7, #4]
 8042520:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8042524:	b29b      	uxth	r3, r3
 8042526:	1ad3      	subs	r3, r2, r3
 8042528:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 804252a:	687b      	ldr	r3, [r7, #4]
 804252c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8042530:	b29b      	uxth	r3, r3
 8042532:	2b00      	cmp	r3, #0
 8042534:	f000 8088 	beq.w	8042648 <HAL_UART_IRQHandler+0x45c>
          &&(nb_rx_data > 0U) )
 8042538:	897b      	ldrh	r3, [r7, #10]
 804253a:	2b00      	cmp	r3, #0
 804253c:	f000 8084 	beq.w	8042648 <HAL_UART_IRQHandler+0x45c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8042540:	687b      	ldr	r3, [r7, #4]
 8042542:	681b      	ldr	r3, [r3, #0]
 8042544:	681a      	ldr	r2, [r3, #0]
 8042546:	687b      	ldr	r3, [r7, #4]
 8042548:	681b      	ldr	r3, [r3, #0]
 804254a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 804254e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8042550:	687b      	ldr	r3, [r7, #4]
 8042552:	681b      	ldr	r3, [r3, #0]
 8042554:	689b      	ldr	r3, [r3, #8]
 8042556:	687a      	ldr	r2, [r7, #4]
 8042558:	6812      	ldr	r2, [r2, #0]
 804255a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 804255e:	f023 0301 	bic.w	r3, r3, #1
 8042562:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8042564:	687b      	ldr	r3, [r7, #4]
 8042566:	2220      	movs	r2, #32
 8042568:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 804256c:	687b      	ldr	r3, [r7, #4]
 804256e:	2200      	movs	r2, #0
 8042570:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8042572:	687b      	ldr	r3, [r7, #4]
 8042574:	2200      	movs	r2, #0
 8042576:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8042578:	687b      	ldr	r3, [r7, #4]
 804257a:	681b      	ldr	r3, [r3, #0]
 804257c:	681a      	ldr	r2, [r3, #0]
 804257e:	687b      	ldr	r3, [r7, #4]
 8042580:	681b      	ldr	r3, [r3, #0]
 8042582:	f022 0210 	bic.w	r2, r2, #16
 8042586:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8042588:	897b      	ldrh	r3, [r7, #10]
 804258a:	4619      	mov	r1, r3
 804258c:	6878      	ldr	r0, [r7, #4]
 804258e:	f000 f875 	bl	804267c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8042592:	e059      	b.n	8042648 <HAL_UART_IRQHandler+0x45c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8042594:	69fb      	ldr	r3, [r7, #28]
 8042596:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 804259a:	2b00      	cmp	r3, #0
 804259c:	d00d      	beq.n	80425ba <HAL_UART_IRQHandler+0x3ce>
 804259e:	697b      	ldr	r3, [r7, #20]
 80425a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80425a4:	2b00      	cmp	r3, #0
 80425a6:	d008      	beq.n	80425ba <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80425a8:	687b      	ldr	r3, [r7, #4]
 80425aa:	681b      	ldr	r3, [r3, #0]
 80425ac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80425b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80425b2:	6878      	ldr	r0, [r7, #4]
 80425b4:	f000 fe41 	bl	804323a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80425b8:	e049      	b.n	804264e <HAL_UART_IRQHandler+0x462>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80425ba:	69fb      	ldr	r3, [r7, #28]
 80425bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80425c0:	2b00      	cmp	r3, #0
 80425c2:	d012      	beq.n	80425ea <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80425c4:	69bb      	ldr	r3, [r7, #24]
 80425c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80425ca:	2b00      	cmp	r3, #0
 80425cc:	d104      	bne.n	80425d8 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80425ce:	697b      	ldr	r3, [r7, #20]
 80425d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80425d4:	2b00      	cmp	r3, #0
 80425d6:	d008      	beq.n	80425ea <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 80425d8:	687b      	ldr	r3, [r7, #4]
 80425da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80425dc:	2b00      	cmp	r3, #0
 80425de:	d035      	beq.n	804264c <HAL_UART_IRQHandler+0x460>
    {
      huart->TxISR(huart);
 80425e0:	687b      	ldr	r3, [r7, #4]
 80425e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80425e4:	6878      	ldr	r0, [r7, #4]
 80425e6:	4798      	blx	r3
    }
    return;
 80425e8:	e030      	b.n	804264c <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80425ea:	69fb      	ldr	r3, [r7, #28]
 80425ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80425f0:	2b00      	cmp	r3, #0
 80425f2:	d008      	beq.n	8042606 <HAL_UART_IRQHandler+0x41a>
 80425f4:	69bb      	ldr	r3, [r7, #24]
 80425f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80425fa:	2b00      	cmp	r3, #0
 80425fc:	d003      	beq.n	8042606 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 80425fe:	6878      	ldr	r0, [r7, #4]
 8042600:	f000 fe01 	bl	8043206 <UART_EndTransmit_IT>
    return;
 8042604:	e023      	b.n	804264e <HAL_UART_IRQHandler+0x462>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8042606:	69fb      	ldr	r3, [r7, #28]
 8042608:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 804260c:	2b00      	cmp	r3, #0
 804260e:	d008      	beq.n	8042622 <HAL_UART_IRQHandler+0x436>
 8042610:	69bb      	ldr	r3, [r7, #24]
 8042612:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8042616:	2b00      	cmp	r3, #0
 8042618:	d003      	beq.n	8042622 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 804261a:	6878      	ldr	r0, [r7, #4]
 804261c:	f000 fe21 	bl	8043262 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8042620:	e015      	b.n	804264e <HAL_UART_IRQHandler+0x462>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8042622:	69fb      	ldr	r3, [r7, #28]
 8042624:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8042628:	2b00      	cmp	r3, #0
 804262a:	d010      	beq.n	804264e <HAL_UART_IRQHandler+0x462>
 804262c:	69bb      	ldr	r3, [r7, #24]
 804262e:	2b00      	cmp	r3, #0
 8042630:	da0d      	bge.n	804264e <HAL_UART_IRQHandler+0x462>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8042632:	6878      	ldr	r0, [r7, #4]
 8042634:	f000 fe0b 	bl	804324e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8042638:	bf00      	nop
 804263a:	e008      	b.n	804264e <HAL_UART_IRQHandler+0x462>
      return;
 804263c:	bf00      	nop
 804263e:	e006      	b.n	804264e <HAL_UART_IRQHandler+0x462>
    return;
 8042640:	bf00      	nop
 8042642:	e004      	b.n	804264e <HAL_UART_IRQHandler+0x462>
      return;
 8042644:	bf00      	nop
 8042646:	e002      	b.n	804264e <HAL_UART_IRQHandler+0x462>
      return;
 8042648:	bf00      	nop
 804264a:	e000      	b.n	804264e <HAL_UART_IRQHandler+0x462>
    return;
 804264c:	bf00      	nop
  }
}
 804264e:	3720      	adds	r7, #32
 8042650:	46bd      	mov	sp, r7
 8042652:	bd80      	pop	{r7, pc}

08042654 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8042654:	b480      	push	{r7}
 8042656:	b083      	sub	sp, #12
 8042658:	af00      	add	r7, sp, #0
 804265a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 804265c:	bf00      	nop
 804265e:	370c      	adds	r7, #12
 8042660:	46bd      	mov	sp, r7
 8042662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042666:	4770      	bx	lr

08042668 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8042668:	b480      	push	{r7}
 804266a:	b083      	sub	sp, #12
 804266c:	af00      	add	r7, sp, #0
 804266e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8042670:	bf00      	nop
 8042672:	370c      	adds	r7, #12
 8042674:	46bd      	mov	sp, r7
 8042676:	f85d 7b04 	ldr.w	r7, [sp], #4
 804267a:	4770      	bx	lr

0804267c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 804267c:	b480      	push	{r7}
 804267e:	b083      	sub	sp, #12
 8042680:	af00      	add	r7, sp, #0
 8042682:	6078      	str	r0, [r7, #4]
 8042684:	460b      	mov	r3, r1
 8042686:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8042688:	bf00      	nop
 804268a:	370c      	adds	r7, #12
 804268c:	46bd      	mov	sp, r7
 804268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042692:	4770      	bx	lr

08042694 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8042694:	b480      	push	{r7}
 8042696:	b085      	sub	sp, #20
 8042698:	af00      	add	r7, sp, #0
 804269a:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 804269c:	687b      	ldr	r3, [r7, #4]
 804269e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80426a2:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80426a4:	687b      	ldr	r3, [r7, #4]
 80426a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80426aa:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80426ac:	68fa      	ldr	r2, [r7, #12]
 80426ae:	68bb      	ldr	r3, [r7, #8]
 80426b0:	4313      	orrs	r3, r2
}
 80426b2:	4618      	mov	r0, r3
 80426b4:	3714      	adds	r7, #20
 80426b6:	46bd      	mov	sp, r7
 80426b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80426bc:	4770      	bx	lr
	...

080426c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80426c0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80426c4:	b088      	sub	sp, #32
 80426c6:	af00      	add	r7, sp, #0
 80426c8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80426ca:	2300      	movs	r3, #0
 80426cc:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80426ce:	687b      	ldr	r3, [r7, #4]
 80426d0:	689a      	ldr	r2, [r3, #8]
 80426d2:	687b      	ldr	r3, [r7, #4]
 80426d4:	691b      	ldr	r3, [r3, #16]
 80426d6:	431a      	orrs	r2, r3
 80426d8:	687b      	ldr	r3, [r7, #4]
 80426da:	695b      	ldr	r3, [r3, #20]
 80426dc:	431a      	orrs	r2, r3
 80426de:	687b      	ldr	r3, [r7, #4]
 80426e0:	69db      	ldr	r3, [r3, #28]
 80426e2:	4313      	orrs	r3, r2
 80426e4:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 80426e6:	687b      	ldr	r3, [r7, #4]
 80426e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80426ea:	69fa      	ldr	r2, [r7, #28]
 80426ec:	4313      	orrs	r3, r2
 80426ee:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80426f0:	687b      	ldr	r3, [r7, #4]
 80426f2:	681b      	ldr	r3, [r3, #0]
 80426f4:	681a      	ldr	r2, [r3, #0]
 80426f6:	4bb1      	ldr	r3, [pc, #708]	; (80429bc <UART_SetConfig+0x2fc>)
 80426f8:	4013      	ands	r3, r2
 80426fa:	687a      	ldr	r2, [r7, #4]
 80426fc:	6812      	ldr	r2, [r2, #0]
 80426fe:	69f9      	ldr	r1, [r7, #28]
 8042700:	430b      	orrs	r3, r1
 8042702:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8042704:	687b      	ldr	r3, [r7, #4]
 8042706:	681b      	ldr	r3, [r3, #0]
 8042708:	685b      	ldr	r3, [r3, #4]
 804270a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 804270e:	687b      	ldr	r3, [r7, #4]
 8042710:	68da      	ldr	r2, [r3, #12]
 8042712:	687b      	ldr	r3, [r7, #4]
 8042714:	681b      	ldr	r3, [r3, #0]
 8042716:	430a      	orrs	r2, r1
 8042718:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 804271a:	687b      	ldr	r3, [r7, #4]
 804271c:	699b      	ldr	r3, [r3, #24]
 804271e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8042720:	687b      	ldr	r3, [r7, #4]
 8042722:	681b      	ldr	r3, [r3, #0]
 8042724:	4aa6      	ldr	r2, [pc, #664]	; (80429c0 <UART_SetConfig+0x300>)
 8042726:	4293      	cmp	r3, r2
 8042728:	d004      	beq.n	8042734 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 804272a:	687b      	ldr	r3, [r7, #4]
 804272c:	6a1b      	ldr	r3, [r3, #32]
 804272e:	69fa      	ldr	r2, [r7, #28]
 8042730:	4313      	orrs	r3, r2
 8042732:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8042734:	687b      	ldr	r3, [r7, #4]
 8042736:	681b      	ldr	r3, [r3, #0]
 8042738:	689b      	ldr	r3, [r3, #8]
 804273a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 804273e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8042742:	687a      	ldr	r2, [r7, #4]
 8042744:	6812      	ldr	r2, [r2, #0]
 8042746:	69f9      	ldr	r1, [r7, #28]
 8042748:	430b      	orrs	r3, r1
 804274a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 804274c:	687b      	ldr	r3, [r7, #4]
 804274e:	681b      	ldr	r3, [r3, #0]
 8042750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8042752:	f023 010f 	bic.w	r1, r3, #15
 8042756:	687b      	ldr	r3, [r7, #4]
 8042758:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 804275a:	687b      	ldr	r3, [r7, #4]
 804275c:	681b      	ldr	r3, [r3, #0]
 804275e:	430a      	orrs	r2, r1
 8042760:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8042762:	687b      	ldr	r3, [r7, #4]
 8042764:	681b      	ldr	r3, [r3, #0]
 8042766:	4a97      	ldr	r2, [pc, #604]	; (80429c4 <UART_SetConfig+0x304>)
 8042768:	4293      	cmp	r3, r2
 804276a:	d121      	bne.n	80427b0 <UART_SetConfig+0xf0>
 804276c:	4b96      	ldr	r3, [pc, #600]	; (80429c8 <UART_SetConfig+0x308>)
 804276e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042772:	f003 0303 	and.w	r3, r3, #3
 8042776:	2b03      	cmp	r3, #3
 8042778:	d816      	bhi.n	80427a8 <UART_SetConfig+0xe8>
 804277a:	a201      	add	r2, pc, #4	; (adr r2, 8042780 <UART_SetConfig+0xc0>)
 804277c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8042780:	08042791 	.word	0x08042791
 8042784:	0804279d 	.word	0x0804279d
 8042788:	08042797 	.word	0x08042797
 804278c:	080427a3 	.word	0x080427a3
 8042790:	2301      	movs	r3, #1
 8042792:	76fb      	strb	r3, [r7, #27]
 8042794:	e0e8      	b.n	8042968 <UART_SetConfig+0x2a8>
 8042796:	2302      	movs	r3, #2
 8042798:	76fb      	strb	r3, [r7, #27]
 804279a:	e0e5      	b.n	8042968 <UART_SetConfig+0x2a8>
 804279c:	2304      	movs	r3, #4
 804279e:	76fb      	strb	r3, [r7, #27]
 80427a0:	e0e2      	b.n	8042968 <UART_SetConfig+0x2a8>
 80427a2:	2308      	movs	r3, #8
 80427a4:	76fb      	strb	r3, [r7, #27]
 80427a6:	e0df      	b.n	8042968 <UART_SetConfig+0x2a8>
 80427a8:	2310      	movs	r3, #16
 80427aa:	76fb      	strb	r3, [r7, #27]
 80427ac:	bf00      	nop
 80427ae:	e0db      	b.n	8042968 <UART_SetConfig+0x2a8>
 80427b0:	687b      	ldr	r3, [r7, #4]
 80427b2:	681b      	ldr	r3, [r3, #0]
 80427b4:	4a85      	ldr	r2, [pc, #532]	; (80429cc <UART_SetConfig+0x30c>)
 80427b6:	4293      	cmp	r3, r2
 80427b8:	d134      	bne.n	8042824 <UART_SetConfig+0x164>
 80427ba:	4b83      	ldr	r3, [pc, #524]	; (80429c8 <UART_SetConfig+0x308>)
 80427bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80427c0:	f003 030c 	and.w	r3, r3, #12
 80427c4:	2b0c      	cmp	r3, #12
 80427c6:	d829      	bhi.n	804281c <UART_SetConfig+0x15c>
 80427c8:	a201      	add	r2, pc, #4	; (adr r2, 80427d0 <UART_SetConfig+0x110>)
 80427ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80427ce:	bf00      	nop
 80427d0:	08042805 	.word	0x08042805
 80427d4:	0804281d 	.word	0x0804281d
 80427d8:	0804281d 	.word	0x0804281d
 80427dc:	0804281d 	.word	0x0804281d
 80427e0:	08042811 	.word	0x08042811
 80427e4:	0804281d 	.word	0x0804281d
 80427e8:	0804281d 	.word	0x0804281d
 80427ec:	0804281d 	.word	0x0804281d
 80427f0:	0804280b 	.word	0x0804280b
 80427f4:	0804281d 	.word	0x0804281d
 80427f8:	0804281d 	.word	0x0804281d
 80427fc:	0804281d 	.word	0x0804281d
 8042800:	08042817 	.word	0x08042817
 8042804:	2300      	movs	r3, #0
 8042806:	76fb      	strb	r3, [r7, #27]
 8042808:	e0ae      	b.n	8042968 <UART_SetConfig+0x2a8>
 804280a:	2302      	movs	r3, #2
 804280c:	76fb      	strb	r3, [r7, #27]
 804280e:	e0ab      	b.n	8042968 <UART_SetConfig+0x2a8>
 8042810:	2304      	movs	r3, #4
 8042812:	76fb      	strb	r3, [r7, #27]
 8042814:	e0a8      	b.n	8042968 <UART_SetConfig+0x2a8>
 8042816:	2308      	movs	r3, #8
 8042818:	76fb      	strb	r3, [r7, #27]
 804281a:	e0a5      	b.n	8042968 <UART_SetConfig+0x2a8>
 804281c:	2310      	movs	r3, #16
 804281e:	76fb      	strb	r3, [r7, #27]
 8042820:	bf00      	nop
 8042822:	e0a1      	b.n	8042968 <UART_SetConfig+0x2a8>
 8042824:	687b      	ldr	r3, [r7, #4]
 8042826:	681b      	ldr	r3, [r3, #0]
 8042828:	4a69      	ldr	r2, [pc, #420]	; (80429d0 <UART_SetConfig+0x310>)
 804282a:	4293      	cmp	r3, r2
 804282c:	d120      	bne.n	8042870 <UART_SetConfig+0x1b0>
 804282e:	4b66      	ldr	r3, [pc, #408]	; (80429c8 <UART_SetConfig+0x308>)
 8042830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042834:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8042838:	2b10      	cmp	r3, #16
 804283a:	d00f      	beq.n	804285c <UART_SetConfig+0x19c>
 804283c:	2b10      	cmp	r3, #16
 804283e:	d802      	bhi.n	8042846 <UART_SetConfig+0x186>
 8042840:	2b00      	cmp	r3, #0
 8042842:	d005      	beq.n	8042850 <UART_SetConfig+0x190>
 8042844:	e010      	b.n	8042868 <UART_SetConfig+0x1a8>
 8042846:	2b20      	cmp	r3, #32
 8042848:	d005      	beq.n	8042856 <UART_SetConfig+0x196>
 804284a:	2b30      	cmp	r3, #48	; 0x30
 804284c:	d009      	beq.n	8042862 <UART_SetConfig+0x1a2>
 804284e:	e00b      	b.n	8042868 <UART_SetConfig+0x1a8>
 8042850:	2300      	movs	r3, #0
 8042852:	76fb      	strb	r3, [r7, #27]
 8042854:	e088      	b.n	8042968 <UART_SetConfig+0x2a8>
 8042856:	2302      	movs	r3, #2
 8042858:	76fb      	strb	r3, [r7, #27]
 804285a:	e085      	b.n	8042968 <UART_SetConfig+0x2a8>
 804285c:	2304      	movs	r3, #4
 804285e:	76fb      	strb	r3, [r7, #27]
 8042860:	e082      	b.n	8042968 <UART_SetConfig+0x2a8>
 8042862:	2308      	movs	r3, #8
 8042864:	76fb      	strb	r3, [r7, #27]
 8042866:	e07f      	b.n	8042968 <UART_SetConfig+0x2a8>
 8042868:	2310      	movs	r3, #16
 804286a:	76fb      	strb	r3, [r7, #27]
 804286c:	bf00      	nop
 804286e:	e07b      	b.n	8042968 <UART_SetConfig+0x2a8>
 8042870:	687b      	ldr	r3, [r7, #4]
 8042872:	681b      	ldr	r3, [r3, #0]
 8042874:	4a57      	ldr	r2, [pc, #348]	; (80429d4 <UART_SetConfig+0x314>)
 8042876:	4293      	cmp	r3, r2
 8042878:	d120      	bne.n	80428bc <UART_SetConfig+0x1fc>
 804287a:	4b53      	ldr	r3, [pc, #332]	; (80429c8 <UART_SetConfig+0x308>)
 804287c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042880:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8042884:	2b40      	cmp	r3, #64	; 0x40
 8042886:	d00f      	beq.n	80428a8 <UART_SetConfig+0x1e8>
 8042888:	2b40      	cmp	r3, #64	; 0x40
 804288a:	d802      	bhi.n	8042892 <UART_SetConfig+0x1d2>
 804288c:	2b00      	cmp	r3, #0
 804288e:	d005      	beq.n	804289c <UART_SetConfig+0x1dc>
 8042890:	e010      	b.n	80428b4 <UART_SetConfig+0x1f4>
 8042892:	2b80      	cmp	r3, #128	; 0x80
 8042894:	d005      	beq.n	80428a2 <UART_SetConfig+0x1e2>
 8042896:	2bc0      	cmp	r3, #192	; 0xc0
 8042898:	d009      	beq.n	80428ae <UART_SetConfig+0x1ee>
 804289a:	e00b      	b.n	80428b4 <UART_SetConfig+0x1f4>
 804289c:	2300      	movs	r3, #0
 804289e:	76fb      	strb	r3, [r7, #27]
 80428a0:	e062      	b.n	8042968 <UART_SetConfig+0x2a8>
 80428a2:	2302      	movs	r3, #2
 80428a4:	76fb      	strb	r3, [r7, #27]
 80428a6:	e05f      	b.n	8042968 <UART_SetConfig+0x2a8>
 80428a8:	2304      	movs	r3, #4
 80428aa:	76fb      	strb	r3, [r7, #27]
 80428ac:	e05c      	b.n	8042968 <UART_SetConfig+0x2a8>
 80428ae:	2308      	movs	r3, #8
 80428b0:	76fb      	strb	r3, [r7, #27]
 80428b2:	e059      	b.n	8042968 <UART_SetConfig+0x2a8>
 80428b4:	2310      	movs	r3, #16
 80428b6:	76fb      	strb	r3, [r7, #27]
 80428b8:	bf00      	nop
 80428ba:	e055      	b.n	8042968 <UART_SetConfig+0x2a8>
 80428bc:	687b      	ldr	r3, [r7, #4]
 80428be:	681b      	ldr	r3, [r3, #0]
 80428c0:	4a45      	ldr	r2, [pc, #276]	; (80429d8 <UART_SetConfig+0x318>)
 80428c2:	4293      	cmp	r3, r2
 80428c4:	d124      	bne.n	8042910 <UART_SetConfig+0x250>
 80428c6:	4b40      	ldr	r3, [pc, #256]	; (80429c8 <UART_SetConfig+0x308>)
 80428c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80428cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80428d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80428d4:	d012      	beq.n	80428fc <UART_SetConfig+0x23c>
 80428d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80428da:	d802      	bhi.n	80428e2 <UART_SetConfig+0x222>
 80428dc:	2b00      	cmp	r3, #0
 80428de:	d007      	beq.n	80428f0 <UART_SetConfig+0x230>
 80428e0:	e012      	b.n	8042908 <UART_SetConfig+0x248>
 80428e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80428e6:	d006      	beq.n	80428f6 <UART_SetConfig+0x236>
 80428e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80428ec:	d009      	beq.n	8042902 <UART_SetConfig+0x242>
 80428ee:	e00b      	b.n	8042908 <UART_SetConfig+0x248>
 80428f0:	2300      	movs	r3, #0
 80428f2:	76fb      	strb	r3, [r7, #27]
 80428f4:	e038      	b.n	8042968 <UART_SetConfig+0x2a8>
 80428f6:	2302      	movs	r3, #2
 80428f8:	76fb      	strb	r3, [r7, #27]
 80428fa:	e035      	b.n	8042968 <UART_SetConfig+0x2a8>
 80428fc:	2304      	movs	r3, #4
 80428fe:	76fb      	strb	r3, [r7, #27]
 8042900:	e032      	b.n	8042968 <UART_SetConfig+0x2a8>
 8042902:	2308      	movs	r3, #8
 8042904:	76fb      	strb	r3, [r7, #27]
 8042906:	e02f      	b.n	8042968 <UART_SetConfig+0x2a8>
 8042908:	2310      	movs	r3, #16
 804290a:	76fb      	strb	r3, [r7, #27]
 804290c:	bf00      	nop
 804290e:	e02b      	b.n	8042968 <UART_SetConfig+0x2a8>
 8042910:	687b      	ldr	r3, [r7, #4]
 8042912:	681b      	ldr	r3, [r3, #0]
 8042914:	4a2a      	ldr	r2, [pc, #168]	; (80429c0 <UART_SetConfig+0x300>)
 8042916:	4293      	cmp	r3, r2
 8042918:	d124      	bne.n	8042964 <UART_SetConfig+0x2a4>
 804291a:	4b2b      	ldr	r3, [pc, #172]	; (80429c8 <UART_SetConfig+0x308>)
 804291c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042920:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8042924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8042928:	d012      	beq.n	8042950 <UART_SetConfig+0x290>
 804292a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 804292e:	d802      	bhi.n	8042936 <UART_SetConfig+0x276>
 8042930:	2b00      	cmp	r3, #0
 8042932:	d007      	beq.n	8042944 <UART_SetConfig+0x284>
 8042934:	e012      	b.n	804295c <UART_SetConfig+0x29c>
 8042936:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 804293a:	d006      	beq.n	804294a <UART_SetConfig+0x28a>
 804293c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8042940:	d009      	beq.n	8042956 <UART_SetConfig+0x296>
 8042942:	e00b      	b.n	804295c <UART_SetConfig+0x29c>
 8042944:	2300      	movs	r3, #0
 8042946:	76fb      	strb	r3, [r7, #27]
 8042948:	e00e      	b.n	8042968 <UART_SetConfig+0x2a8>
 804294a:	2302      	movs	r3, #2
 804294c:	76fb      	strb	r3, [r7, #27]
 804294e:	e00b      	b.n	8042968 <UART_SetConfig+0x2a8>
 8042950:	2304      	movs	r3, #4
 8042952:	76fb      	strb	r3, [r7, #27]
 8042954:	e008      	b.n	8042968 <UART_SetConfig+0x2a8>
 8042956:	2308      	movs	r3, #8
 8042958:	76fb      	strb	r3, [r7, #27]
 804295a:	e005      	b.n	8042968 <UART_SetConfig+0x2a8>
 804295c:	2310      	movs	r3, #16
 804295e:	76fb      	strb	r3, [r7, #27]
 8042960:	bf00      	nop
 8042962:	e001      	b.n	8042968 <UART_SetConfig+0x2a8>
 8042964:	2310      	movs	r3, #16
 8042966:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8042968:	687b      	ldr	r3, [r7, #4]
 804296a:	681b      	ldr	r3, [r3, #0]
 804296c:	4a14      	ldr	r2, [pc, #80]	; (80429c0 <UART_SetConfig+0x300>)
 804296e:	4293      	cmp	r3, r2
 8042970:	f040 80a5 	bne.w	8042abe <UART_SetConfig+0x3fe>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8042974:	7efb      	ldrb	r3, [r7, #27]
 8042976:	2b08      	cmp	r3, #8
 8042978:	d83a      	bhi.n	80429f0 <UART_SetConfig+0x330>
 804297a:	a201      	add	r2, pc, #4	; (adr r2, 8042980 <UART_SetConfig+0x2c0>)
 804297c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8042980:	080429a5 	.word	0x080429a5
 8042984:	080429ad 	.word	0x080429ad
 8042988:	080429b5 	.word	0x080429b5
 804298c:	080429f1 	.word	0x080429f1
 8042990:	080429e1 	.word	0x080429e1
 8042994:	080429f1 	.word	0x080429f1
 8042998:	080429f1 	.word	0x080429f1
 804299c:	080429f1 	.word	0x080429f1
 80429a0:	080429e9 	.word	0x080429e9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80429a4:	f7fe fe52 	bl	804164c <HAL_RCC_GetPCLK1Freq>
 80429a8:	6178      	str	r0, [r7, #20]
        break;
 80429aa:	e026      	b.n	80429fa <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80429ac:	f7fe fe62 	bl	8041674 <HAL_RCC_GetPCLK2Freq>
 80429b0:	6178      	str	r0, [r7, #20]
        break;
 80429b2:	e022      	b.n	80429fa <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80429b4:	4b09      	ldr	r3, [pc, #36]	; (80429dc <UART_SetConfig+0x31c>)
 80429b6:	617b      	str	r3, [r7, #20]
        break;
 80429b8:	e01f      	b.n	80429fa <UART_SetConfig+0x33a>
 80429ba:	bf00      	nop
 80429bc:	cfff69f3 	.word	0xcfff69f3
 80429c0:	40008000 	.word	0x40008000
 80429c4:	40013800 	.word	0x40013800
 80429c8:	40021000 	.word	0x40021000
 80429cc:	40004400 	.word	0x40004400
 80429d0:	40004800 	.word	0x40004800
 80429d4:	40004c00 	.word	0x40004c00
 80429d8:	40005000 	.word	0x40005000
 80429dc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80429e0:	f7fe fd84 	bl	80414ec <HAL_RCC_GetSysClockFreq>
 80429e4:	6178      	str	r0, [r7, #20]
        break;
 80429e6:	e008      	b.n	80429fa <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80429e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80429ec:	617b      	str	r3, [r7, #20]
        break;
 80429ee:	e004      	b.n	80429fa <UART_SetConfig+0x33a>
      default:
        pclk = 0U;
 80429f0:	2300      	movs	r3, #0
 80429f2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80429f4:	2301      	movs	r3, #1
 80429f6:	76bb      	strb	r3, [r7, #26]
        break;
 80429f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80429fa:	697b      	ldr	r3, [r7, #20]
 80429fc:	2b00      	cmp	r3, #0
 80429fe:	f000 811d 	beq.w	8042c3c <UART_SetConfig+0x57c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8042a02:	687b      	ldr	r3, [r7, #4]
 8042a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042a06:	4a97      	ldr	r2, [pc, #604]	; (8042c64 <UART_SetConfig+0x5a4>)
 8042a08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8042a0c:	461a      	mov	r2, r3
 8042a0e:	697b      	ldr	r3, [r7, #20]
 8042a10:	fbb3 f3f2 	udiv	r3, r3, r2
 8042a14:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8042a16:	687b      	ldr	r3, [r7, #4]
 8042a18:	685a      	ldr	r2, [r3, #4]
 8042a1a:	4613      	mov	r3, r2
 8042a1c:	005b      	lsls	r3, r3, #1
 8042a1e:	4413      	add	r3, r2
 8042a20:	68ba      	ldr	r2, [r7, #8]
 8042a22:	429a      	cmp	r2, r3
 8042a24:	d305      	bcc.n	8042a32 <UART_SetConfig+0x372>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8042a26:	687b      	ldr	r3, [r7, #4]
 8042a28:	685b      	ldr	r3, [r3, #4]
 8042a2a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8042a2c:	68ba      	ldr	r2, [r7, #8]
 8042a2e:	429a      	cmp	r2, r3
 8042a30:	d902      	bls.n	8042a38 <UART_SetConfig+0x378>
      {
        ret = HAL_ERROR;
 8042a32:	2301      	movs	r3, #1
 8042a34:	76bb      	strb	r3, [r7, #26]
 8042a36:	e101      	b.n	8042c3c <UART_SetConfig+0x57c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8042a38:	697b      	ldr	r3, [r7, #20]
 8042a3a:	4618      	mov	r0, r3
 8042a3c:	f04f 0100 	mov.w	r1, #0
 8042a40:	687b      	ldr	r3, [r7, #4]
 8042a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042a44:	4a87      	ldr	r2, [pc, #540]	; (8042c64 <UART_SetConfig+0x5a4>)
 8042a46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8042a4a:	b29b      	uxth	r3, r3
 8042a4c:	f04f 0400 	mov.w	r4, #0
 8042a50:	461a      	mov	r2, r3
 8042a52:	4623      	mov	r3, r4
 8042a54:	f7fd fc02 	bl	804025c <__aeabi_uldivmod>
 8042a58:	4603      	mov	r3, r0
 8042a5a:	460c      	mov	r4, r1
 8042a5c:	4619      	mov	r1, r3
 8042a5e:	4622      	mov	r2, r4
 8042a60:	f04f 0300 	mov.w	r3, #0
 8042a64:	f04f 0400 	mov.w	r4, #0
 8042a68:	0214      	lsls	r4, r2, #8
 8042a6a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8042a6e:	020b      	lsls	r3, r1, #8
 8042a70:	687a      	ldr	r2, [r7, #4]
 8042a72:	6852      	ldr	r2, [r2, #4]
 8042a74:	0852      	lsrs	r2, r2, #1
 8042a76:	4611      	mov	r1, r2
 8042a78:	f04f 0200 	mov.w	r2, #0
 8042a7c:	eb13 0b01 	adds.w	fp, r3, r1
 8042a80:	eb44 0c02 	adc.w	ip, r4, r2
 8042a84:	4658      	mov	r0, fp
 8042a86:	4661      	mov	r1, ip
 8042a88:	687b      	ldr	r3, [r7, #4]
 8042a8a:	685b      	ldr	r3, [r3, #4]
 8042a8c:	f04f 0400 	mov.w	r4, #0
 8042a90:	461a      	mov	r2, r3
 8042a92:	4623      	mov	r3, r4
 8042a94:	f7fd fbe2 	bl	804025c <__aeabi_uldivmod>
 8042a98:	4603      	mov	r3, r0
 8042a9a:	460c      	mov	r4, r1
 8042a9c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8042a9e:	693b      	ldr	r3, [r7, #16]
 8042aa0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8042aa4:	d308      	bcc.n	8042ab8 <UART_SetConfig+0x3f8>
 8042aa6:	693b      	ldr	r3, [r7, #16]
 8042aa8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8042aac:	d204      	bcs.n	8042ab8 <UART_SetConfig+0x3f8>
        {
          huart->Instance->BRR = usartdiv;
 8042aae:	687b      	ldr	r3, [r7, #4]
 8042ab0:	681b      	ldr	r3, [r3, #0]
 8042ab2:	693a      	ldr	r2, [r7, #16]
 8042ab4:	60da      	str	r2, [r3, #12]
 8042ab6:	e0c1      	b.n	8042c3c <UART_SetConfig+0x57c>
        }
        else
        {
          ret = HAL_ERROR;
 8042ab8:	2301      	movs	r3, #1
 8042aba:	76bb      	strb	r3, [r7, #26]
 8042abc:	e0be      	b.n	8042c3c <UART_SetConfig+0x57c>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8042abe:	687b      	ldr	r3, [r7, #4]
 8042ac0:	69db      	ldr	r3, [r3, #28]
 8042ac2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8042ac6:	d164      	bne.n	8042b92 <UART_SetConfig+0x4d2>
  {
    switch (clocksource)
 8042ac8:	7efb      	ldrb	r3, [r7, #27]
 8042aca:	2b08      	cmp	r3, #8
 8042acc:	d827      	bhi.n	8042b1e <UART_SetConfig+0x45e>
 8042ace:	a201      	add	r2, pc, #4	; (adr r2, 8042ad4 <UART_SetConfig+0x414>)
 8042ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8042ad4:	08042af9 	.word	0x08042af9
 8042ad8:	08042b01 	.word	0x08042b01
 8042adc:	08042b09 	.word	0x08042b09
 8042ae0:	08042b1f 	.word	0x08042b1f
 8042ae4:	08042b0f 	.word	0x08042b0f
 8042ae8:	08042b1f 	.word	0x08042b1f
 8042aec:	08042b1f 	.word	0x08042b1f
 8042af0:	08042b1f 	.word	0x08042b1f
 8042af4:	08042b17 	.word	0x08042b17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8042af8:	f7fe fda8 	bl	804164c <HAL_RCC_GetPCLK1Freq>
 8042afc:	6178      	str	r0, [r7, #20]
        break;
 8042afe:	e013      	b.n	8042b28 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8042b00:	f7fe fdb8 	bl	8041674 <HAL_RCC_GetPCLK2Freq>
 8042b04:	6178      	str	r0, [r7, #20]
        break;
 8042b06:	e00f      	b.n	8042b28 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8042b08:	4b57      	ldr	r3, [pc, #348]	; (8042c68 <UART_SetConfig+0x5a8>)
 8042b0a:	617b      	str	r3, [r7, #20]
        break;
 8042b0c:	e00c      	b.n	8042b28 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8042b0e:	f7fe fced 	bl	80414ec <HAL_RCC_GetSysClockFreq>
 8042b12:	6178      	str	r0, [r7, #20]
        break;
 8042b14:	e008      	b.n	8042b28 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8042b16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8042b1a:	617b      	str	r3, [r7, #20]
        break;
 8042b1c:	e004      	b.n	8042b28 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8042b1e:	2300      	movs	r3, #0
 8042b20:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8042b22:	2301      	movs	r3, #1
 8042b24:	76bb      	strb	r3, [r7, #26]
        break;
 8042b26:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8042b28:	697b      	ldr	r3, [r7, #20]
 8042b2a:	2b00      	cmp	r3, #0
 8042b2c:	f000 8086 	beq.w	8042c3c <UART_SetConfig+0x57c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8042b30:	687b      	ldr	r3, [r7, #4]
 8042b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042b34:	4a4b      	ldr	r2, [pc, #300]	; (8042c64 <UART_SetConfig+0x5a4>)
 8042b36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8042b3a:	461a      	mov	r2, r3
 8042b3c:	697b      	ldr	r3, [r7, #20]
 8042b3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8042b42:	005a      	lsls	r2, r3, #1
 8042b44:	687b      	ldr	r3, [r7, #4]
 8042b46:	685b      	ldr	r3, [r3, #4]
 8042b48:	085b      	lsrs	r3, r3, #1
 8042b4a:	441a      	add	r2, r3
 8042b4c:	687b      	ldr	r3, [r7, #4]
 8042b4e:	685b      	ldr	r3, [r3, #4]
 8042b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8042b54:	b29b      	uxth	r3, r3
 8042b56:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8042b58:	693b      	ldr	r3, [r7, #16]
 8042b5a:	2b0f      	cmp	r3, #15
 8042b5c:	d916      	bls.n	8042b8c <UART_SetConfig+0x4cc>
 8042b5e:	693b      	ldr	r3, [r7, #16]
 8042b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8042b64:	d212      	bcs.n	8042b8c <UART_SetConfig+0x4cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8042b66:	693b      	ldr	r3, [r7, #16]
 8042b68:	b29b      	uxth	r3, r3
 8042b6a:	f023 030f 	bic.w	r3, r3, #15
 8042b6e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8042b70:	693b      	ldr	r3, [r7, #16]
 8042b72:	085b      	lsrs	r3, r3, #1
 8042b74:	b29b      	uxth	r3, r3
 8042b76:	f003 0307 	and.w	r3, r3, #7
 8042b7a:	b29a      	uxth	r2, r3
 8042b7c:	89fb      	ldrh	r3, [r7, #14]
 8042b7e:	4313      	orrs	r3, r2
 8042b80:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8042b82:	687b      	ldr	r3, [r7, #4]
 8042b84:	681b      	ldr	r3, [r3, #0]
 8042b86:	89fa      	ldrh	r2, [r7, #14]
 8042b88:	60da      	str	r2, [r3, #12]
 8042b8a:	e057      	b.n	8042c3c <UART_SetConfig+0x57c>
      }
      else
      {
        ret = HAL_ERROR;
 8042b8c:	2301      	movs	r3, #1
 8042b8e:	76bb      	strb	r3, [r7, #26]
 8042b90:	e054      	b.n	8042c3c <UART_SetConfig+0x57c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8042b92:	7efb      	ldrb	r3, [r7, #27]
 8042b94:	2b08      	cmp	r3, #8
 8042b96:	d828      	bhi.n	8042bea <UART_SetConfig+0x52a>
 8042b98:	a201      	add	r2, pc, #4	; (adr r2, 8042ba0 <UART_SetConfig+0x4e0>)
 8042b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8042b9e:	bf00      	nop
 8042ba0:	08042bc5 	.word	0x08042bc5
 8042ba4:	08042bcd 	.word	0x08042bcd
 8042ba8:	08042bd5 	.word	0x08042bd5
 8042bac:	08042beb 	.word	0x08042beb
 8042bb0:	08042bdb 	.word	0x08042bdb
 8042bb4:	08042beb 	.word	0x08042beb
 8042bb8:	08042beb 	.word	0x08042beb
 8042bbc:	08042beb 	.word	0x08042beb
 8042bc0:	08042be3 	.word	0x08042be3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8042bc4:	f7fe fd42 	bl	804164c <HAL_RCC_GetPCLK1Freq>
 8042bc8:	6178      	str	r0, [r7, #20]
        break;
 8042bca:	e013      	b.n	8042bf4 <UART_SetConfig+0x534>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8042bcc:	f7fe fd52 	bl	8041674 <HAL_RCC_GetPCLK2Freq>
 8042bd0:	6178      	str	r0, [r7, #20]
        break;
 8042bd2:	e00f      	b.n	8042bf4 <UART_SetConfig+0x534>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8042bd4:	4b24      	ldr	r3, [pc, #144]	; (8042c68 <UART_SetConfig+0x5a8>)
 8042bd6:	617b      	str	r3, [r7, #20]
        break;
 8042bd8:	e00c      	b.n	8042bf4 <UART_SetConfig+0x534>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8042bda:	f7fe fc87 	bl	80414ec <HAL_RCC_GetSysClockFreq>
 8042bde:	6178      	str	r0, [r7, #20]
        break;
 8042be0:	e008      	b.n	8042bf4 <UART_SetConfig+0x534>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8042be2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8042be6:	617b      	str	r3, [r7, #20]
        break;
 8042be8:	e004      	b.n	8042bf4 <UART_SetConfig+0x534>
      default:
        pclk = 0U;
 8042bea:	2300      	movs	r3, #0
 8042bec:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8042bee:	2301      	movs	r3, #1
 8042bf0:	76bb      	strb	r3, [r7, #26]
        break;
 8042bf2:	bf00      	nop
    }

    if (pclk != 0U)
 8042bf4:	697b      	ldr	r3, [r7, #20]
 8042bf6:	2b00      	cmp	r3, #0
 8042bf8:	d020      	beq.n	8042c3c <UART_SetConfig+0x57c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8042bfa:	687b      	ldr	r3, [r7, #4]
 8042bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042bfe:	4a19      	ldr	r2, [pc, #100]	; (8042c64 <UART_SetConfig+0x5a4>)
 8042c00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8042c04:	461a      	mov	r2, r3
 8042c06:	697b      	ldr	r3, [r7, #20]
 8042c08:	fbb3 f2f2 	udiv	r2, r3, r2
 8042c0c:	687b      	ldr	r3, [r7, #4]
 8042c0e:	685b      	ldr	r3, [r3, #4]
 8042c10:	085b      	lsrs	r3, r3, #1
 8042c12:	441a      	add	r2, r3
 8042c14:	687b      	ldr	r3, [r7, #4]
 8042c16:	685b      	ldr	r3, [r3, #4]
 8042c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8042c1c:	b29b      	uxth	r3, r3
 8042c1e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8042c20:	693b      	ldr	r3, [r7, #16]
 8042c22:	2b0f      	cmp	r3, #15
 8042c24:	d908      	bls.n	8042c38 <UART_SetConfig+0x578>
 8042c26:	693b      	ldr	r3, [r7, #16]
 8042c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8042c2c:	d204      	bcs.n	8042c38 <UART_SetConfig+0x578>
      {
        huart->Instance->BRR = usartdiv;
 8042c2e:	687b      	ldr	r3, [r7, #4]
 8042c30:	681b      	ldr	r3, [r3, #0]
 8042c32:	693a      	ldr	r2, [r7, #16]
 8042c34:	60da      	str	r2, [r3, #12]
 8042c36:	e001      	b.n	8042c3c <UART_SetConfig+0x57c>
      }
      else
      {
        ret = HAL_ERROR;
 8042c38:	2301      	movs	r3, #1
 8042c3a:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8042c3c:	687b      	ldr	r3, [r7, #4]
 8042c3e:	2201      	movs	r2, #1
 8042c40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8042c44:	687b      	ldr	r3, [r7, #4]
 8042c46:	2201      	movs	r2, #1
 8042c48:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8042c4c:	687b      	ldr	r3, [r7, #4]
 8042c4e:	2200      	movs	r2, #0
 8042c50:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8042c52:	687b      	ldr	r3, [r7, #4]
 8042c54:	2200      	movs	r2, #0
 8042c56:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8042c58:	7ebb      	ldrb	r3, [r7, #26]
}
 8042c5a:	4618      	mov	r0, r3
 8042c5c:	3720      	adds	r7, #32
 8042c5e:	46bd      	mov	sp, r7
 8042c60:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8042c64:	080445b0 	.word	0x080445b0
 8042c68:	00f42400 	.word	0x00f42400

08042c6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8042c6c:	b480      	push	{r7}
 8042c6e:	b083      	sub	sp, #12
 8042c70:	af00      	add	r7, sp, #0
 8042c72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8042c74:	687b      	ldr	r3, [r7, #4]
 8042c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042c78:	f003 0301 	and.w	r3, r3, #1
 8042c7c:	2b00      	cmp	r3, #0
 8042c7e:	d00a      	beq.n	8042c96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8042c80:	687b      	ldr	r3, [r7, #4]
 8042c82:	681b      	ldr	r3, [r3, #0]
 8042c84:	685b      	ldr	r3, [r3, #4]
 8042c86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8042c8a:	687b      	ldr	r3, [r7, #4]
 8042c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8042c8e:	687b      	ldr	r3, [r7, #4]
 8042c90:	681b      	ldr	r3, [r3, #0]
 8042c92:	430a      	orrs	r2, r1
 8042c94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8042c96:	687b      	ldr	r3, [r7, #4]
 8042c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042c9a:	f003 0302 	and.w	r3, r3, #2
 8042c9e:	2b00      	cmp	r3, #0
 8042ca0:	d00a      	beq.n	8042cb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8042ca2:	687b      	ldr	r3, [r7, #4]
 8042ca4:	681b      	ldr	r3, [r3, #0]
 8042ca6:	685b      	ldr	r3, [r3, #4]
 8042ca8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8042cac:	687b      	ldr	r3, [r7, #4]
 8042cae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8042cb0:	687b      	ldr	r3, [r7, #4]
 8042cb2:	681b      	ldr	r3, [r3, #0]
 8042cb4:	430a      	orrs	r2, r1
 8042cb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8042cb8:	687b      	ldr	r3, [r7, #4]
 8042cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042cbc:	f003 0304 	and.w	r3, r3, #4
 8042cc0:	2b00      	cmp	r3, #0
 8042cc2:	d00a      	beq.n	8042cda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8042cc4:	687b      	ldr	r3, [r7, #4]
 8042cc6:	681b      	ldr	r3, [r3, #0]
 8042cc8:	685b      	ldr	r3, [r3, #4]
 8042cca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8042cce:	687b      	ldr	r3, [r7, #4]
 8042cd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8042cd2:	687b      	ldr	r3, [r7, #4]
 8042cd4:	681b      	ldr	r3, [r3, #0]
 8042cd6:	430a      	orrs	r2, r1
 8042cd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8042cda:	687b      	ldr	r3, [r7, #4]
 8042cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042cde:	f003 0308 	and.w	r3, r3, #8
 8042ce2:	2b00      	cmp	r3, #0
 8042ce4:	d00a      	beq.n	8042cfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8042ce6:	687b      	ldr	r3, [r7, #4]
 8042ce8:	681b      	ldr	r3, [r3, #0]
 8042cea:	685b      	ldr	r3, [r3, #4]
 8042cec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8042cf0:	687b      	ldr	r3, [r7, #4]
 8042cf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8042cf4:	687b      	ldr	r3, [r7, #4]
 8042cf6:	681b      	ldr	r3, [r3, #0]
 8042cf8:	430a      	orrs	r2, r1
 8042cfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8042cfc:	687b      	ldr	r3, [r7, #4]
 8042cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042d00:	f003 0310 	and.w	r3, r3, #16
 8042d04:	2b00      	cmp	r3, #0
 8042d06:	d00a      	beq.n	8042d1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8042d08:	687b      	ldr	r3, [r7, #4]
 8042d0a:	681b      	ldr	r3, [r3, #0]
 8042d0c:	689b      	ldr	r3, [r3, #8]
 8042d0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8042d12:	687b      	ldr	r3, [r7, #4]
 8042d14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8042d16:	687b      	ldr	r3, [r7, #4]
 8042d18:	681b      	ldr	r3, [r3, #0]
 8042d1a:	430a      	orrs	r2, r1
 8042d1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8042d1e:	687b      	ldr	r3, [r7, #4]
 8042d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042d22:	f003 0320 	and.w	r3, r3, #32
 8042d26:	2b00      	cmp	r3, #0
 8042d28:	d00a      	beq.n	8042d40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8042d2a:	687b      	ldr	r3, [r7, #4]
 8042d2c:	681b      	ldr	r3, [r3, #0]
 8042d2e:	689b      	ldr	r3, [r3, #8]
 8042d30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8042d34:	687b      	ldr	r3, [r7, #4]
 8042d36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8042d38:	687b      	ldr	r3, [r7, #4]
 8042d3a:	681b      	ldr	r3, [r3, #0]
 8042d3c:	430a      	orrs	r2, r1
 8042d3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8042d40:	687b      	ldr	r3, [r7, #4]
 8042d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8042d48:	2b00      	cmp	r3, #0
 8042d4a:	d01a      	beq.n	8042d82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8042d4c:	687b      	ldr	r3, [r7, #4]
 8042d4e:	681b      	ldr	r3, [r3, #0]
 8042d50:	685b      	ldr	r3, [r3, #4]
 8042d52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8042d56:	687b      	ldr	r3, [r7, #4]
 8042d58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8042d5a:	687b      	ldr	r3, [r7, #4]
 8042d5c:	681b      	ldr	r3, [r3, #0]
 8042d5e:	430a      	orrs	r2, r1
 8042d60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8042d62:	687b      	ldr	r3, [r7, #4]
 8042d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8042d66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8042d6a:	d10a      	bne.n	8042d82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8042d6c:	687b      	ldr	r3, [r7, #4]
 8042d6e:	681b      	ldr	r3, [r3, #0]
 8042d70:	685b      	ldr	r3, [r3, #4]
 8042d72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8042d76:	687b      	ldr	r3, [r7, #4]
 8042d78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8042d7a:	687b      	ldr	r3, [r7, #4]
 8042d7c:	681b      	ldr	r3, [r3, #0]
 8042d7e:	430a      	orrs	r2, r1
 8042d80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8042d82:	687b      	ldr	r3, [r7, #4]
 8042d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8042d8a:	2b00      	cmp	r3, #0
 8042d8c:	d00a      	beq.n	8042da4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8042d8e:	687b      	ldr	r3, [r7, #4]
 8042d90:	681b      	ldr	r3, [r3, #0]
 8042d92:	685b      	ldr	r3, [r3, #4]
 8042d94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8042d98:	687b      	ldr	r3, [r7, #4]
 8042d9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8042d9c:	687b      	ldr	r3, [r7, #4]
 8042d9e:	681b      	ldr	r3, [r3, #0]
 8042da0:	430a      	orrs	r2, r1
 8042da2:	605a      	str	r2, [r3, #4]
  }
}
 8042da4:	bf00      	nop
 8042da6:	370c      	adds	r7, #12
 8042da8:	46bd      	mov	sp, r7
 8042daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042dae:	4770      	bx	lr

08042db0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8042db0:	b580      	push	{r7, lr}
 8042db2:	b086      	sub	sp, #24
 8042db4:	af02      	add	r7, sp, #8
 8042db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8042db8:	687b      	ldr	r3, [r7, #4]
 8042dba:	2200      	movs	r2, #0
 8042dbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8042dc0:	f7fe f83e 	bl	8040e40 <HAL_GetTick>
 8042dc4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8042dc6:	687b      	ldr	r3, [r7, #4]
 8042dc8:	681b      	ldr	r3, [r3, #0]
 8042dca:	681b      	ldr	r3, [r3, #0]
 8042dcc:	f003 0308 	and.w	r3, r3, #8
 8042dd0:	2b08      	cmp	r3, #8
 8042dd2:	d10e      	bne.n	8042df2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8042dd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8042dd8:	9300      	str	r3, [sp, #0]
 8042dda:	68fb      	ldr	r3, [r7, #12]
 8042ddc:	2200      	movs	r2, #0
 8042dde:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8042de2:	6878      	ldr	r0, [r7, #4]
 8042de4:	f000 f82f 	bl	8042e46 <UART_WaitOnFlagUntilTimeout>
 8042de8:	4603      	mov	r3, r0
 8042dea:	2b00      	cmp	r3, #0
 8042dec:	d001      	beq.n	8042df2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8042dee:	2303      	movs	r3, #3
 8042df0:	e025      	b.n	8042e3e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8042df2:	687b      	ldr	r3, [r7, #4]
 8042df4:	681b      	ldr	r3, [r3, #0]
 8042df6:	681b      	ldr	r3, [r3, #0]
 8042df8:	f003 0304 	and.w	r3, r3, #4
 8042dfc:	2b04      	cmp	r3, #4
 8042dfe:	d10e      	bne.n	8042e1e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8042e00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8042e04:	9300      	str	r3, [sp, #0]
 8042e06:	68fb      	ldr	r3, [r7, #12]
 8042e08:	2200      	movs	r2, #0
 8042e0a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8042e0e:	6878      	ldr	r0, [r7, #4]
 8042e10:	f000 f819 	bl	8042e46 <UART_WaitOnFlagUntilTimeout>
 8042e14:	4603      	mov	r3, r0
 8042e16:	2b00      	cmp	r3, #0
 8042e18:	d001      	beq.n	8042e1e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8042e1a:	2303      	movs	r3, #3
 8042e1c:	e00f      	b.n	8042e3e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8042e1e:	687b      	ldr	r3, [r7, #4]
 8042e20:	2220      	movs	r2, #32
 8042e22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8042e26:	687b      	ldr	r3, [r7, #4]
 8042e28:	2220      	movs	r2, #32
 8042e2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8042e2e:	687b      	ldr	r3, [r7, #4]
 8042e30:	2200      	movs	r2, #0
 8042e32:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8042e34:	687b      	ldr	r3, [r7, #4]
 8042e36:	2200      	movs	r2, #0
 8042e38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8042e3c:	2300      	movs	r3, #0
}
 8042e3e:	4618      	mov	r0, r3
 8042e40:	3710      	adds	r7, #16
 8042e42:	46bd      	mov	sp, r7
 8042e44:	bd80      	pop	{r7, pc}

08042e46 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8042e46:	b580      	push	{r7, lr}
 8042e48:	b084      	sub	sp, #16
 8042e4a:	af00      	add	r7, sp, #0
 8042e4c:	60f8      	str	r0, [r7, #12]
 8042e4e:	60b9      	str	r1, [r7, #8]
 8042e50:	603b      	str	r3, [r7, #0]
 8042e52:	4613      	mov	r3, r2
 8042e54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8042e56:	e062      	b.n	8042f1e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8042e58:	69bb      	ldr	r3, [r7, #24]
 8042e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8042e5e:	d05e      	beq.n	8042f1e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8042e60:	f7fd ffee 	bl	8040e40 <HAL_GetTick>
 8042e64:	4602      	mov	r2, r0
 8042e66:	683b      	ldr	r3, [r7, #0]
 8042e68:	1ad3      	subs	r3, r2, r3
 8042e6a:	69ba      	ldr	r2, [r7, #24]
 8042e6c:	429a      	cmp	r2, r3
 8042e6e:	d302      	bcc.n	8042e76 <UART_WaitOnFlagUntilTimeout+0x30>
 8042e70:	69bb      	ldr	r3, [r7, #24]
 8042e72:	2b00      	cmp	r3, #0
 8042e74:	d11d      	bne.n	8042eb2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8042e76:	68fb      	ldr	r3, [r7, #12]
 8042e78:	681b      	ldr	r3, [r3, #0]
 8042e7a:	681a      	ldr	r2, [r3, #0]
 8042e7c:	68fb      	ldr	r3, [r7, #12]
 8042e7e:	681b      	ldr	r3, [r3, #0]
 8042e80:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8042e84:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8042e86:	68fb      	ldr	r3, [r7, #12]
 8042e88:	681b      	ldr	r3, [r3, #0]
 8042e8a:	689a      	ldr	r2, [r3, #8]
 8042e8c:	68fb      	ldr	r3, [r7, #12]
 8042e8e:	681b      	ldr	r3, [r3, #0]
 8042e90:	f022 0201 	bic.w	r2, r2, #1
 8042e94:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8042e96:	68fb      	ldr	r3, [r7, #12]
 8042e98:	2220      	movs	r2, #32
 8042e9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8042e9e:	68fb      	ldr	r3, [r7, #12]
 8042ea0:	2220      	movs	r2, #32
 8042ea2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8042ea6:	68fb      	ldr	r3, [r7, #12]
 8042ea8:	2200      	movs	r2, #0
 8042eaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8042eae:	2303      	movs	r3, #3
 8042eb0:	e045      	b.n	8042f3e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8042eb2:	68fb      	ldr	r3, [r7, #12]
 8042eb4:	681b      	ldr	r3, [r3, #0]
 8042eb6:	681b      	ldr	r3, [r3, #0]
 8042eb8:	f003 0304 	and.w	r3, r3, #4
 8042ebc:	2b00      	cmp	r3, #0
 8042ebe:	d02e      	beq.n	8042f1e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8042ec0:	68fb      	ldr	r3, [r7, #12]
 8042ec2:	681b      	ldr	r3, [r3, #0]
 8042ec4:	69db      	ldr	r3, [r3, #28]
 8042ec6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8042eca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8042ece:	d126      	bne.n	8042f1e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8042ed0:	68fb      	ldr	r3, [r7, #12]
 8042ed2:	681b      	ldr	r3, [r3, #0]
 8042ed4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8042ed8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8042eda:	68fb      	ldr	r3, [r7, #12]
 8042edc:	681b      	ldr	r3, [r3, #0]
 8042ede:	681a      	ldr	r2, [r3, #0]
 8042ee0:	68fb      	ldr	r3, [r7, #12]
 8042ee2:	681b      	ldr	r3, [r3, #0]
 8042ee4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8042ee8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8042eea:	68fb      	ldr	r3, [r7, #12]
 8042eec:	681b      	ldr	r3, [r3, #0]
 8042eee:	689a      	ldr	r2, [r3, #8]
 8042ef0:	68fb      	ldr	r3, [r7, #12]
 8042ef2:	681b      	ldr	r3, [r3, #0]
 8042ef4:	f022 0201 	bic.w	r2, r2, #1
 8042ef8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8042efa:	68fb      	ldr	r3, [r7, #12]
 8042efc:	2220      	movs	r2, #32
 8042efe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8042f02:	68fb      	ldr	r3, [r7, #12]
 8042f04:	2220      	movs	r2, #32
 8042f06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8042f0a:	68fb      	ldr	r3, [r7, #12]
 8042f0c:	2220      	movs	r2, #32
 8042f0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8042f12:	68fb      	ldr	r3, [r7, #12]
 8042f14:	2200      	movs	r2, #0
 8042f16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8042f1a:	2303      	movs	r3, #3
 8042f1c:	e00f      	b.n	8042f3e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8042f1e:	68fb      	ldr	r3, [r7, #12]
 8042f20:	681b      	ldr	r3, [r3, #0]
 8042f22:	69da      	ldr	r2, [r3, #28]
 8042f24:	68bb      	ldr	r3, [r7, #8]
 8042f26:	4013      	ands	r3, r2
 8042f28:	68ba      	ldr	r2, [r7, #8]
 8042f2a:	429a      	cmp	r2, r3
 8042f2c:	bf0c      	ite	eq
 8042f2e:	2301      	moveq	r3, #1
 8042f30:	2300      	movne	r3, #0
 8042f32:	b2db      	uxtb	r3, r3
 8042f34:	461a      	mov	r2, r3
 8042f36:	79fb      	ldrb	r3, [r7, #7]
 8042f38:	429a      	cmp	r2, r3
 8042f3a:	d08d      	beq.n	8042e58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8042f3c:	2300      	movs	r3, #0
}
 8042f3e:	4618      	mov	r0, r3
 8042f40:	3710      	adds	r7, #16
 8042f42:	46bd      	mov	sp, r7
 8042f44:	bd80      	pop	{r7, pc}

08042f46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8042f46:	b480      	push	{r7}
 8042f48:	b083      	sub	sp, #12
 8042f4a:	af00      	add	r7, sp, #0
 8042f4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8042f4e:	687b      	ldr	r3, [r7, #4]
 8042f50:	681b      	ldr	r3, [r3, #0]
 8042f52:	681a      	ldr	r2, [r3, #0]
 8042f54:	687b      	ldr	r3, [r7, #4]
 8042f56:	681b      	ldr	r3, [r3, #0]
 8042f58:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8042f5c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8042f5e:	687b      	ldr	r3, [r7, #4]
 8042f60:	681b      	ldr	r3, [r3, #0]
 8042f62:	689b      	ldr	r3, [r3, #8]
 8042f64:	687a      	ldr	r2, [r7, #4]
 8042f66:	6812      	ldr	r2, [r2, #0]
 8042f68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8042f6c:	f023 0301 	bic.w	r3, r3, #1
 8042f70:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8042f72:	687b      	ldr	r3, [r7, #4]
 8042f74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8042f76:	2b01      	cmp	r3, #1
 8042f78:	d107      	bne.n	8042f8a <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8042f7a:	687b      	ldr	r3, [r7, #4]
 8042f7c:	681b      	ldr	r3, [r3, #0]
 8042f7e:	681a      	ldr	r2, [r3, #0]
 8042f80:	687b      	ldr	r3, [r7, #4]
 8042f82:	681b      	ldr	r3, [r3, #0]
 8042f84:	f022 0210 	bic.w	r2, r2, #16
 8042f88:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8042f8a:	687b      	ldr	r3, [r7, #4]
 8042f8c:	2220      	movs	r2, #32
 8042f8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8042f92:	687b      	ldr	r3, [r7, #4]
 8042f94:	2200      	movs	r2, #0
 8042f96:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8042f98:	687b      	ldr	r3, [r7, #4]
 8042f9a:	2200      	movs	r2, #0
 8042f9c:	671a      	str	r2, [r3, #112]	; 0x70
}
 8042f9e:	bf00      	nop
 8042fa0:	370c      	adds	r7, #12
 8042fa2:	46bd      	mov	sp, r7
 8042fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042fa8:	4770      	bx	lr

08042faa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8042faa:	b580      	push	{r7, lr}
 8042fac:	b084      	sub	sp, #16
 8042fae:	af00      	add	r7, sp, #0
 8042fb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8042fb2:	687b      	ldr	r3, [r7, #4]
 8042fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042fb6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8042fb8:	68fb      	ldr	r3, [r7, #12]
 8042fba:	2200      	movs	r2, #0
 8042fbc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8042fc0:	68fb      	ldr	r3, [r7, #12]
 8042fc2:	2200      	movs	r2, #0
 8042fc4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8042fc8:	68f8      	ldr	r0, [r7, #12]
 8042fca:	f7ff fb4d 	bl	8042668 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8042fce:	bf00      	nop
 8042fd0:	3710      	adds	r7, #16
 8042fd2:	46bd      	mov	sp, r7
 8042fd4:	bd80      	pop	{r7, pc}

08042fd6 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8042fd6:	b480      	push	{r7}
 8042fd8:	b083      	sub	sp, #12
 8042fda:	af00      	add	r7, sp, #0
 8042fdc:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8042fde:	687b      	ldr	r3, [r7, #4]
 8042fe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8042fe4:	2b21      	cmp	r3, #33	; 0x21
 8042fe6:	d12a      	bne.n	804303e <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8042fe8:	687b      	ldr	r3, [r7, #4]
 8042fea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8042fee:	b29b      	uxth	r3, r3
 8042ff0:	2b00      	cmp	r3, #0
 8042ff2:	d110      	bne.n	8043016 <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8042ff4:	687b      	ldr	r3, [r7, #4]
 8042ff6:	681b      	ldr	r3, [r3, #0]
 8042ff8:	681a      	ldr	r2, [r3, #0]
 8042ffa:	687b      	ldr	r3, [r7, #4]
 8042ffc:	681b      	ldr	r3, [r3, #0]
 8042ffe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8043002:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8043004:	687b      	ldr	r3, [r7, #4]
 8043006:	681b      	ldr	r3, [r3, #0]
 8043008:	681a      	ldr	r2, [r3, #0]
 804300a:	687b      	ldr	r3, [r7, #4]
 804300c:	681b      	ldr	r3, [r3, #0]
 804300e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8043012:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8043014:	e013      	b.n	804303e <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8043016:	687b      	ldr	r3, [r7, #4]
 8043018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 804301a:	781a      	ldrb	r2, [r3, #0]
 804301c:	687b      	ldr	r3, [r7, #4]
 804301e:	681b      	ldr	r3, [r3, #0]
 8043020:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8043022:	687b      	ldr	r3, [r7, #4]
 8043024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8043026:	1c5a      	adds	r2, r3, #1
 8043028:	687b      	ldr	r3, [r7, #4]
 804302a:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 804302c:	687b      	ldr	r3, [r7, #4]
 804302e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8043032:	b29b      	uxth	r3, r3
 8043034:	3b01      	subs	r3, #1
 8043036:	b29a      	uxth	r2, r3
 8043038:	687b      	ldr	r3, [r7, #4]
 804303a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 804303e:	bf00      	nop
 8043040:	370c      	adds	r7, #12
 8043042:	46bd      	mov	sp, r7
 8043044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043048:	4770      	bx	lr

0804304a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 804304a:	b480      	push	{r7}
 804304c:	b085      	sub	sp, #20
 804304e:	af00      	add	r7, sp, #0
 8043050:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8043052:	687b      	ldr	r3, [r7, #4]
 8043054:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8043058:	2b21      	cmp	r3, #33	; 0x21
 804305a:	d12f      	bne.n	80430bc <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 804305c:	687b      	ldr	r3, [r7, #4]
 804305e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8043062:	b29b      	uxth	r3, r3
 8043064:	2b00      	cmp	r3, #0
 8043066:	d110      	bne.n	804308a <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8043068:	687b      	ldr	r3, [r7, #4]
 804306a:	681b      	ldr	r3, [r3, #0]
 804306c:	681a      	ldr	r2, [r3, #0]
 804306e:	687b      	ldr	r3, [r7, #4]
 8043070:	681b      	ldr	r3, [r3, #0]
 8043072:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8043076:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8043078:	687b      	ldr	r3, [r7, #4]
 804307a:	681b      	ldr	r3, [r3, #0]
 804307c:	681a      	ldr	r2, [r3, #0]
 804307e:	687b      	ldr	r3, [r7, #4]
 8043080:	681b      	ldr	r3, [r3, #0]
 8043082:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8043086:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8043088:	e018      	b.n	80430bc <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 804308a:	687b      	ldr	r3, [r7, #4]
 804308c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 804308e:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8043090:	68fb      	ldr	r3, [r7, #12]
 8043092:	881b      	ldrh	r3, [r3, #0]
 8043094:	461a      	mov	r2, r3
 8043096:	687b      	ldr	r3, [r7, #4]
 8043098:	681b      	ldr	r3, [r3, #0]
 804309a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 804309e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80430a0:	687b      	ldr	r3, [r7, #4]
 80430a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80430a4:	1c9a      	adds	r2, r3, #2
 80430a6:	687b      	ldr	r3, [r7, #4]
 80430a8:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80430aa:	687b      	ldr	r3, [r7, #4]
 80430ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80430b0:	b29b      	uxth	r3, r3
 80430b2:	3b01      	subs	r3, #1
 80430b4:	b29a      	uxth	r2, r3
 80430b6:	687b      	ldr	r3, [r7, #4]
 80430b8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80430bc:	bf00      	nop
 80430be:	3714      	adds	r7, #20
 80430c0:	46bd      	mov	sp, r7
 80430c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80430c6:	4770      	bx	lr

080430c8 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80430c8:	b480      	push	{r7}
 80430ca:	b085      	sub	sp, #20
 80430cc:	af00      	add	r7, sp, #0
 80430ce:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80430d0:	687b      	ldr	r3, [r7, #4]
 80430d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80430d6:	2b21      	cmp	r3, #33	; 0x21
 80430d8:	d13d      	bne.n	8043156 <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80430da:	687b      	ldr	r3, [r7, #4]
 80430dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80430e0:	81fb      	strh	r3, [r7, #14]
 80430e2:	e035      	b.n	8043150 <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 80430e4:	687b      	ldr	r3, [r7, #4]
 80430e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80430ea:	b29b      	uxth	r3, r3
 80430ec:	2b00      	cmp	r3, #0
 80430ee:	d111      	bne.n	8043114 <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80430f0:	687b      	ldr	r3, [r7, #4]
 80430f2:	681b      	ldr	r3, [r3, #0]
 80430f4:	689a      	ldr	r2, [r3, #8]
 80430f6:	687b      	ldr	r3, [r7, #4]
 80430f8:	681b      	ldr	r3, [r3, #0]
 80430fa:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80430fe:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8043100:	687b      	ldr	r3, [r7, #4]
 8043102:	681b      	ldr	r3, [r3, #0]
 8043104:	681a      	ldr	r2, [r3, #0]
 8043106:	687b      	ldr	r3, [r7, #4]
 8043108:	681b      	ldr	r3, [r3, #0]
 804310a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 804310e:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8043110:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8043112:	e020      	b.n	8043156 <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8043114:	687b      	ldr	r3, [r7, #4]
 8043116:	681b      	ldr	r3, [r3, #0]
 8043118:	69db      	ldr	r3, [r3, #28]
 804311a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804311e:	2b00      	cmp	r3, #0
 8043120:	d013      	beq.n	804314a <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8043122:	687b      	ldr	r3, [r7, #4]
 8043124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8043126:	781a      	ldrb	r2, [r3, #0]
 8043128:	687b      	ldr	r3, [r7, #4]
 804312a:	681b      	ldr	r3, [r3, #0]
 804312c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 804312e:	687b      	ldr	r3, [r7, #4]
 8043130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8043132:	1c5a      	adds	r2, r3, #1
 8043134:	687b      	ldr	r3, [r7, #4]
 8043136:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8043138:	687b      	ldr	r3, [r7, #4]
 804313a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 804313e:	b29b      	uxth	r3, r3
 8043140:	3b01      	subs	r3, #1
 8043142:	b29a      	uxth	r2, r3
 8043144:	687b      	ldr	r3, [r7, #4]
 8043146:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 804314a:	89fb      	ldrh	r3, [r7, #14]
 804314c:	3b01      	subs	r3, #1
 804314e:	81fb      	strh	r3, [r7, #14]
 8043150:	89fb      	ldrh	r3, [r7, #14]
 8043152:	2b00      	cmp	r3, #0
 8043154:	d1c6      	bne.n	80430e4 <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 8043156:	bf00      	nop
 8043158:	3714      	adds	r7, #20
 804315a:	46bd      	mov	sp, r7
 804315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043160:	4770      	bx	lr

08043162 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8043162:	b480      	push	{r7}
 8043164:	b085      	sub	sp, #20
 8043166:	af00      	add	r7, sp, #0
 8043168:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 804316a:	687b      	ldr	r3, [r7, #4]
 804316c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8043170:	2b21      	cmp	r3, #33	; 0x21
 8043172:	d142      	bne.n	80431fa <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8043174:	687b      	ldr	r3, [r7, #4]
 8043176:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 804317a:	81fb      	strh	r3, [r7, #14]
 804317c:	e03a      	b.n	80431f4 <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 804317e:	687b      	ldr	r3, [r7, #4]
 8043180:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8043184:	b29b      	uxth	r3, r3
 8043186:	2b00      	cmp	r3, #0
 8043188:	d111      	bne.n	80431ae <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 804318a:	687b      	ldr	r3, [r7, #4]
 804318c:	681b      	ldr	r3, [r3, #0]
 804318e:	689a      	ldr	r2, [r3, #8]
 8043190:	687b      	ldr	r3, [r7, #4]
 8043192:	681b      	ldr	r3, [r3, #0]
 8043194:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8043198:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 804319a:	687b      	ldr	r3, [r7, #4]
 804319c:	681b      	ldr	r3, [r3, #0]
 804319e:	681a      	ldr	r2, [r3, #0]
 80431a0:	687b      	ldr	r3, [r7, #4]
 80431a2:	681b      	ldr	r3, [r3, #0]
 80431a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80431a8:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 80431aa:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 80431ac:	e025      	b.n	80431fa <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80431ae:	687b      	ldr	r3, [r7, #4]
 80431b0:	681b      	ldr	r3, [r3, #0]
 80431b2:	69db      	ldr	r3, [r3, #28]
 80431b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80431b8:	2b00      	cmp	r3, #0
 80431ba:	d018      	beq.n	80431ee <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 80431bc:	687b      	ldr	r3, [r7, #4]
 80431be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80431c0:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80431c2:	68bb      	ldr	r3, [r7, #8]
 80431c4:	881b      	ldrh	r3, [r3, #0]
 80431c6:	461a      	mov	r2, r3
 80431c8:	687b      	ldr	r3, [r7, #4]
 80431ca:	681b      	ldr	r3, [r3, #0]
 80431cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80431d0:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80431d2:	687b      	ldr	r3, [r7, #4]
 80431d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80431d6:	1c9a      	adds	r2, r3, #2
 80431d8:	687b      	ldr	r3, [r7, #4]
 80431da:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80431dc:	687b      	ldr	r3, [r7, #4]
 80431de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80431e2:	b29b      	uxth	r3, r3
 80431e4:	3b01      	subs	r3, #1
 80431e6:	b29a      	uxth	r2, r3
 80431e8:	687b      	ldr	r3, [r7, #4]
 80431ea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80431ee:	89fb      	ldrh	r3, [r7, #14]
 80431f0:	3b01      	subs	r3, #1
 80431f2:	81fb      	strh	r3, [r7, #14]
 80431f4:	89fb      	ldrh	r3, [r7, #14]
 80431f6:	2b00      	cmp	r3, #0
 80431f8:	d1c1      	bne.n	804317e <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 80431fa:	bf00      	nop
 80431fc:	3714      	adds	r7, #20
 80431fe:	46bd      	mov	sp, r7
 8043200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043204:	4770      	bx	lr

08043206 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8043206:	b580      	push	{r7, lr}
 8043208:	b082      	sub	sp, #8
 804320a:	af00      	add	r7, sp, #0
 804320c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 804320e:	687b      	ldr	r3, [r7, #4]
 8043210:	681b      	ldr	r3, [r3, #0]
 8043212:	681a      	ldr	r2, [r3, #0]
 8043214:	687b      	ldr	r3, [r7, #4]
 8043216:	681b      	ldr	r3, [r3, #0]
 8043218:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 804321c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 804321e:	687b      	ldr	r3, [r7, #4]
 8043220:	2220      	movs	r2, #32
 8043222:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8043226:	687b      	ldr	r3, [r7, #4]
 8043228:	2200      	movs	r2, #0
 804322a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 804322c:	6878      	ldr	r0, [r7, #4]
 804322e:	f7ff fa11 	bl	8042654 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8043232:	bf00      	nop
 8043234:	3708      	adds	r7, #8
 8043236:	46bd      	mov	sp, r7
 8043238:	bd80      	pop	{r7, pc}

0804323a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 804323a:	b480      	push	{r7}
 804323c:	b083      	sub	sp, #12
 804323e:	af00      	add	r7, sp, #0
 8043240:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8043242:	bf00      	nop
 8043244:	370c      	adds	r7, #12
 8043246:	46bd      	mov	sp, r7
 8043248:	f85d 7b04 	ldr.w	r7, [sp], #4
 804324c:	4770      	bx	lr

0804324e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 804324e:	b480      	push	{r7}
 8043250:	b083      	sub	sp, #12
 8043252:	af00      	add	r7, sp, #0
 8043254:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8043256:	bf00      	nop
 8043258:	370c      	adds	r7, #12
 804325a:	46bd      	mov	sp, r7
 804325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043260:	4770      	bx	lr

08043262 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8043262:	b480      	push	{r7}
 8043264:	b083      	sub	sp, #12
 8043266:	af00      	add	r7, sp, #0
 8043268:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 804326a:	bf00      	nop
 804326c:	370c      	adds	r7, #12
 804326e:	46bd      	mov	sp, r7
 8043270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043274:	4770      	bx	lr

08043276 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8043276:	b480      	push	{r7}
 8043278:	b085      	sub	sp, #20
 804327a:	af00      	add	r7, sp, #0
 804327c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 804327e:	687b      	ldr	r3, [r7, #4]
 8043280:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8043284:	2b01      	cmp	r3, #1
 8043286:	d101      	bne.n	804328c <HAL_UARTEx_DisableFifoMode+0x16>
 8043288:	2302      	movs	r3, #2
 804328a:	e027      	b.n	80432dc <HAL_UARTEx_DisableFifoMode+0x66>
 804328c:	687b      	ldr	r3, [r7, #4]
 804328e:	2201      	movs	r2, #1
 8043290:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8043294:	687b      	ldr	r3, [r7, #4]
 8043296:	2224      	movs	r2, #36	; 0x24
 8043298:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 804329c:	687b      	ldr	r3, [r7, #4]
 804329e:	681b      	ldr	r3, [r3, #0]
 80432a0:	681b      	ldr	r3, [r3, #0]
 80432a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80432a4:	687b      	ldr	r3, [r7, #4]
 80432a6:	681b      	ldr	r3, [r3, #0]
 80432a8:	681a      	ldr	r2, [r3, #0]
 80432aa:	687b      	ldr	r3, [r7, #4]
 80432ac:	681b      	ldr	r3, [r3, #0]
 80432ae:	f022 0201 	bic.w	r2, r2, #1
 80432b2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80432b4:	68fb      	ldr	r3, [r7, #12]
 80432b6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80432ba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80432bc:	687b      	ldr	r3, [r7, #4]
 80432be:	2200      	movs	r2, #0
 80432c0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80432c2:	687b      	ldr	r3, [r7, #4]
 80432c4:	681b      	ldr	r3, [r3, #0]
 80432c6:	68fa      	ldr	r2, [r7, #12]
 80432c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80432ca:	687b      	ldr	r3, [r7, #4]
 80432cc:	2220      	movs	r2, #32
 80432ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80432d2:	687b      	ldr	r3, [r7, #4]
 80432d4:	2200      	movs	r2, #0
 80432d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80432da:	2300      	movs	r3, #0
}
 80432dc:	4618      	mov	r0, r3
 80432de:	3714      	adds	r7, #20
 80432e0:	46bd      	mov	sp, r7
 80432e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80432e6:	4770      	bx	lr

080432e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80432e8:	b580      	push	{r7, lr}
 80432ea:	b084      	sub	sp, #16
 80432ec:	af00      	add	r7, sp, #0
 80432ee:	6078      	str	r0, [r7, #4]
 80432f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80432f2:	687b      	ldr	r3, [r7, #4]
 80432f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80432f8:	2b01      	cmp	r3, #1
 80432fa:	d101      	bne.n	8043300 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80432fc:	2302      	movs	r3, #2
 80432fe:	e02d      	b.n	804335c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8043300:	687b      	ldr	r3, [r7, #4]
 8043302:	2201      	movs	r2, #1
 8043304:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8043308:	687b      	ldr	r3, [r7, #4]
 804330a:	2224      	movs	r2, #36	; 0x24
 804330c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8043310:	687b      	ldr	r3, [r7, #4]
 8043312:	681b      	ldr	r3, [r3, #0]
 8043314:	681b      	ldr	r3, [r3, #0]
 8043316:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8043318:	687b      	ldr	r3, [r7, #4]
 804331a:	681b      	ldr	r3, [r3, #0]
 804331c:	681a      	ldr	r2, [r3, #0]
 804331e:	687b      	ldr	r3, [r7, #4]
 8043320:	681b      	ldr	r3, [r3, #0]
 8043322:	f022 0201 	bic.w	r2, r2, #1
 8043326:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8043328:	687b      	ldr	r3, [r7, #4]
 804332a:	681b      	ldr	r3, [r3, #0]
 804332c:	689b      	ldr	r3, [r3, #8]
 804332e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8043332:	687b      	ldr	r3, [r7, #4]
 8043334:	681b      	ldr	r3, [r3, #0]
 8043336:	683a      	ldr	r2, [r7, #0]
 8043338:	430a      	orrs	r2, r1
 804333a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 804333c:	6878      	ldr	r0, [r7, #4]
 804333e:	f000 f84f 	bl	80433e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8043342:	687b      	ldr	r3, [r7, #4]
 8043344:	681b      	ldr	r3, [r3, #0]
 8043346:	68fa      	ldr	r2, [r7, #12]
 8043348:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 804334a:	687b      	ldr	r3, [r7, #4]
 804334c:	2220      	movs	r2, #32
 804334e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8043352:	687b      	ldr	r3, [r7, #4]
 8043354:	2200      	movs	r2, #0
 8043356:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 804335a:	2300      	movs	r3, #0
}
 804335c:	4618      	mov	r0, r3
 804335e:	3710      	adds	r7, #16
 8043360:	46bd      	mov	sp, r7
 8043362:	bd80      	pop	{r7, pc}

08043364 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8043364:	b580      	push	{r7, lr}
 8043366:	b084      	sub	sp, #16
 8043368:	af00      	add	r7, sp, #0
 804336a:	6078      	str	r0, [r7, #4]
 804336c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 804336e:	687b      	ldr	r3, [r7, #4]
 8043370:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8043374:	2b01      	cmp	r3, #1
 8043376:	d101      	bne.n	804337c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8043378:	2302      	movs	r3, #2
 804337a:	e02d      	b.n	80433d8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 804337c:	687b      	ldr	r3, [r7, #4]
 804337e:	2201      	movs	r2, #1
 8043380:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8043384:	687b      	ldr	r3, [r7, #4]
 8043386:	2224      	movs	r2, #36	; 0x24
 8043388:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 804338c:	687b      	ldr	r3, [r7, #4]
 804338e:	681b      	ldr	r3, [r3, #0]
 8043390:	681b      	ldr	r3, [r3, #0]
 8043392:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8043394:	687b      	ldr	r3, [r7, #4]
 8043396:	681b      	ldr	r3, [r3, #0]
 8043398:	681a      	ldr	r2, [r3, #0]
 804339a:	687b      	ldr	r3, [r7, #4]
 804339c:	681b      	ldr	r3, [r3, #0]
 804339e:	f022 0201 	bic.w	r2, r2, #1
 80433a2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80433a4:	687b      	ldr	r3, [r7, #4]
 80433a6:	681b      	ldr	r3, [r3, #0]
 80433a8:	689b      	ldr	r3, [r3, #8]
 80433aa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80433ae:	687b      	ldr	r3, [r7, #4]
 80433b0:	681b      	ldr	r3, [r3, #0]
 80433b2:	683a      	ldr	r2, [r7, #0]
 80433b4:	430a      	orrs	r2, r1
 80433b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80433b8:	6878      	ldr	r0, [r7, #4]
 80433ba:	f000 f811 	bl	80433e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80433be:	687b      	ldr	r3, [r7, #4]
 80433c0:	681b      	ldr	r3, [r3, #0]
 80433c2:	68fa      	ldr	r2, [r7, #12]
 80433c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80433c6:	687b      	ldr	r3, [r7, #4]
 80433c8:	2220      	movs	r2, #32
 80433ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80433ce:	687b      	ldr	r3, [r7, #4]
 80433d0:	2200      	movs	r2, #0
 80433d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80433d6:	2300      	movs	r3, #0
}
 80433d8:	4618      	mov	r0, r3
 80433da:	3710      	adds	r7, #16
 80433dc:	46bd      	mov	sp, r7
 80433de:	bd80      	pop	{r7, pc}

080433e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80433e0:	b480      	push	{r7}
 80433e2:	b089      	sub	sp, #36	; 0x24
 80433e4:	af00      	add	r7, sp, #0
 80433e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80433e8:	4a2f      	ldr	r2, [pc, #188]	; (80434a8 <UARTEx_SetNbDataToProcess+0xc8>)
 80433ea:	f107 0314 	add.w	r3, r7, #20
 80433ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80433f2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80433f6:	4a2d      	ldr	r2, [pc, #180]	; (80434ac <UARTEx_SetNbDataToProcess+0xcc>)
 80433f8:	f107 030c 	add.w	r3, r7, #12
 80433fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8043400:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8043404:	687b      	ldr	r3, [r7, #4]
 8043406:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8043408:	2b00      	cmp	r3, #0
 804340a:	d108      	bne.n	804341e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 804340c:	687b      	ldr	r3, [r7, #4]
 804340e:	2201      	movs	r2, #1
 8043410:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8043414:	687b      	ldr	r3, [r7, #4]
 8043416:	2201      	movs	r2, #1
 8043418:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 804341c:	e03d      	b.n	804349a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 804341e:	2308      	movs	r3, #8
 8043420:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8043422:	2308      	movs	r3, #8
 8043424:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8043426:	687b      	ldr	r3, [r7, #4]
 8043428:	681b      	ldr	r3, [r3, #0]
 804342a:	689b      	ldr	r3, [r3, #8]
 804342c:	0e5b      	lsrs	r3, r3, #25
 804342e:	b2db      	uxtb	r3, r3
 8043430:	f003 0307 	and.w	r3, r3, #7
 8043434:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8043436:	687b      	ldr	r3, [r7, #4]
 8043438:	681b      	ldr	r3, [r3, #0]
 804343a:	689b      	ldr	r3, [r3, #8]
 804343c:	0f5b      	lsrs	r3, r3, #29
 804343e:	b2db      	uxtb	r3, r3
 8043440:	f003 0307 	and.w	r3, r3, #7
 8043444:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8043446:	7fbb      	ldrb	r3, [r7, #30]
 8043448:	7f3a      	ldrb	r2, [r7, #28]
 804344a:	f107 0120 	add.w	r1, r7, #32
 804344e:	440a      	add	r2, r1
 8043450:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8043454:	fb02 f303 	mul.w	r3, r2, r3
 8043458:	7f3a      	ldrb	r2, [r7, #28]
 804345a:	f107 0120 	add.w	r1, r7, #32
 804345e:	440a      	add	r2, r1
 8043460:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8043464:	fb93 f3f2 	sdiv	r3, r3, r2
 8043468:	b29a      	uxth	r2, r3
 804346a:	687b      	ldr	r3, [r7, #4]
 804346c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8043470:	7ffb      	ldrb	r3, [r7, #31]
 8043472:	7f7a      	ldrb	r2, [r7, #29]
 8043474:	f107 0120 	add.w	r1, r7, #32
 8043478:	440a      	add	r2, r1
 804347a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 804347e:	fb02 f303 	mul.w	r3, r2, r3
 8043482:	7f7a      	ldrb	r2, [r7, #29]
 8043484:	f107 0120 	add.w	r1, r7, #32
 8043488:	440a      	add	r2, r1
 804348a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 804348e:	fb93 f3f2 	sdiv	r3, r3, r2
 8043492:	b29a      	uxth	r2, r3
 8043494:	687b      	ldr	r3, [r7, #4]
 8043496:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 804349a:	bf00      	nop
 804349c:	3724      	adds	r7, #36	; 0x24
 804349e:	46bd      	mov	sp, r7
 80434a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80434a4:	4770      	bx	lr
 80434a6:	bf00      	nop
 80434a8:	08044188 	.word	0x08044188
 80434ac:	08044190 	.word	0x08044190

080434b0 <__errno>:
 80434b0:	4b01      	ldr	r3, [pc, #4]	; (80434b8 <__errno+0x8>)
 80434b2:	6818      	ldr	r0, [r3, #0]
 80434b4:	4770      	bx	lr
 80434b6:	bf00      	nop
 80434b8:	20018034 	.word	0x20018034

080434bc <__libc_init_array>:
 80434bc:	b570      	push	{r4, r5, r6, lr}
 80434be:	4e0d      	ldr	r6, [pc, #52]	; (80434f4 <__libc_init_array+0x38>)
 80434c0:	2500      	movs	r5, #0
 80434c2:	4c0d      	ldr	r4, [pc, #52]	; (80434f8 <__libc_init_array+0x3c>)
 80434c4:	1ba4      	subs	r4, r4, r6
 80434c6:	10a4      	asrs	r4, r4, #2
 80434c8:	42a5      	cmp	r5, r4
 80434ca:	d109      	bne.n	80434e0 <__libc_init_array+0x24>
 80434cc:	4e0b      	ldr	r6, [pc, #44]	; (80434fc <__libc_init_array+0x40>)
 80434ce:	2500      	movs	r5, #0
 80434d0:	4c0b      	ldr	r4, [pc, #44]	; (8043500 <__libc_init_array+0x44>)
 80434d2:	f000 fc7d 	bl	8043dd0 <_init>
 80434d6:	1ba4      	subs	r4, r4, r6
 80434d8:	10a4      	asrs	r4, r4, #2
 80434da:	42a5      	cmp	r5, r4
 80434dc:	d105      	bne.n	80434ea <__libc_init_array+0x2e>
 80434de:	bd70      	pop	{r4, r5, r6, pc}
 80434e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80434e4:	3501      	adds	r5, #1
 80434e6:	4798      	blx	r3
 80434e8:	e7ee      	b.n	80434c8 <__libc_init_array+0xc>
 80434ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80434ee:	3501      	adds	r5, #1
 80434f0:	4798      	blx	r3
 80434f2:	e7f2      	b.n	80434da <__libc_init_array+0x1e>
 80434f4:	08044604 	.word	0x08044604
 80434f8:	08044604 	.word	0x08044604
 80434fc:	08044604 	.word	0x08044604
 8043500:	08044608 	.word	0x08044608

08043504 <memcpy>:
 8043504:	1e43      	subs	r3, r0, #1
 8043506:	440a      	add	r2, r1
 8043508:	b510      	push	{r4, lr}
 804350a:	4291      	cmp	r1, r2
 804350c:	d100      	bne.n	8043510 <memcpy+0xc>
 804350e:	bd10      	pop	{r4, pc}
 8043510:	f811 4b01 	ldrb.w	r4, [r1], #1
 8043514:	f803 4f01 	strb.w	r4, [r3, #1]!
 8043518:	e7f7      	b.n	804350a <memcpy+0x6>

0804351a <memset>:
 804351a:	4402      	add	r2, r0
 804351c:	4603      	mov	r3, r0
 804351e:	4293      	cmp	r3, r2
 8043520:	d100      	bne.n	8043524 <memset+0xa>
 8043522:	4770      	bx	lr
 8043524:	f803 1b01 	strb.w	r1, [r3], #1
 8043528:	e7f9      	b.n	804351e <memset+0x4>
	...

0804352c <siprintf>:
 804352c:	b40e      	push	{r1, r2, r3}
 804352e:	b500      	push	{lr}
 8043530:	b09c      	sub	sp, #112	; 0x70
 8043532:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8043536:	ab1d      	add	r3, sp, #116	; 0x74
 8043538:	9002      	str	r0, [sp, #8]
 804353a:	9006      	str	r0, [sp, #24]
 804353c:	9107      	str	r1, [sp, #28]
 804353e:	9104      	str	r1, [sp, #16]
 8043540:	4808      	ldr	r0, [pc, #32]	; (8043564 <siprintf+0x38>)
 8043542:	4909      	ldr	r1, [pc, #36]	; (8043568 <siprintf+0x3c>)
 8043544:	f853 2b04 	ldr.w	r2, [r3], #4
 8043548:	9105      	str	r1, [sp, #20]
 804354a:	a902      	add	r1, sp, #8
 804354c:	6800      	ldr	r0, [r0, #0]
 804354e:	9301      	str	r3, [sp, #4]
 8043550:	f000 f8a4 	bl	804369c <_svfiprintf_r>
 8043554:	9b02      	ldr	r3, [sp, #8]
 8043556:	2200      	movs	r2, #0
 8043558:	701a      	strb	r2, [r3, #0]
 804355a:	b01c      	add	sp, #112	; 0x70
 804355c:	f85d eb04 	ldr.w	lr, [sp], #4
 8043560:	b003      	add	sp, #12
 8043562:	4770      	bx	lr
 8043564:	20018034 	.word	0x20018034
 8043568:	ffff0208 	.word	0xffff0208

0804356c <strncmp>:
 804356c:	b510      	push	{r4, lr}
 804356e:	b16a      	cbz	r2, 804358c <strncmp+0x20>
 8043570:	3901      	subs	r1, #1
 8043572:	1884      	adds	r4, r0, r2
 8043574:	f810 3b01 	ldrb.w	r3, [r0], #1
 8043578:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 804357c:	4293      	cmp	r3, r2
 804357e:	d103      	bne.n	8043588 <strncmp+0x1c>
 8043580:	42a0      	cmp	r0, r4
 8043582:	d001      	beq.n	8043588 <strncmp+0x1c>
 8043584:	2b00      	cmp	r3, #0
 8043586:	d1f5      	bne.n	8043574 <strncmp+0x8>
 8043588:	1a98      	subs	r0, r3, r2
 804358a:	bd10      	pop	{r4, pc}
 804358c:	4610      	mov	r0, r2
 804358e:	e7fc      	b.n	804358a <strncmp+0x1e>

08043590 <time>:
 8043590:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8043592:	4b0b      	ldr	r3, [pc, #44]	; (80435c0 <time+0x30>)
 8043594:	4604      	mov	r4, r0
 8043596:	2200      	movs	r2, #0
 8043598:	4669      	mov	r1, sp
 804359a:	6818      	ldr	r0, [r3, #0]
 804359c:	f000 f812 	bl	80435c4 <_gettimeofday_r>
 80435a0:	2800      	cmp	r0, #0
 80435a2:	da05      	bge.n	80435b0 <time+0x20>
 80435a4:	f04f 32ff 	mov.w	r2, #4294967295
 80435a8:	f04f 33ff 	mov.w	r3, #4294967295
 80435ac:	e9cd 2300 	strd	r2, r3, [sp]
 80435b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80435b4:	b10c      	cbz	r4, 80435ba <time+0x2a>
 80435b6:	e9c4 0100 	strd	r0, r1, [r4]
 80435ba:	b004      	add	sp, #16
 80435bc:	bd10      	pop	{r4, pc}
 80435be:	bf00      	nop
 80435c0:	20018034 	.word	0x20018034

080435c4 <_gettimeofday_r>:
 80435c4:	b538      	push	{r3, r4, r5, lr}
 80435c6:	2300      	movs	r3, #0
 80435c8:	4c06      	ldr	r4, [pc, #24]	; (80435e4 <_gettimeofday_r+0x20>)
 80435ca:	4605      	mov	r5, r0
 80435cc:	4608      	mov	r0, r1
 80435ce:	4611      	mov	r1, r2
 80435d0:	6023      	str	r3, [r4, #0]
 80435d2:	f000 fbf5 	bl	8043dc0 <_gettimeofday>
 80435d6:	1c43      	adds	r3, r0, #1
 80435d8:	d102      	bne.n	80435e0 <_gettimeofday_r+0x1c>
 80435da:	6823      	ldr	r3, [r4, #0]
 80435dc:	b103      	cbz	r3, 80435e0 <_gettimeofday_r+0x1c>
 80435de:	602b      	str	r3, [r5, #0]
 80435e0:	bd38      	pop	{r3, r4, r5, pc}
 80435e2:	bf00      	nop
 80435e4:	20018198 	.word	0x20018198

080435e8 <__ssputs_r>:
 80435e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80435ec:	688e      	ldr	r6, [r1, #8]
 80435ee:	4682      	mov	sl, r0
 80435f0:	460c      	mov	r4, r1
 80435f2:	4690      	mov	r8, r2
 80435f4:	429e      	cmp	r6, r3
 80435f6:	4699      	mov	r9, r3
 80435f8:	d837      	bhi.n	804366a <__ssputs_r+0x82>
 80435fa:	898a      	ldrh	r2, [r1, #12]
 80435fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8043600:	d031      	beq.n	8043666 <__ssputs_r+0x7e>
 8043602:	6825      	ldr	r5, [r4, #0]
 8043604:	2302      	movs	r3, #2
 8043606:	6909      	ldr	r1, [r1, #16]
 8043608:	1a6f      	subs	r7, r5, r1
 804360a:	6965      	ldr	r5, [r4, #20]
 804360c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8043610:	fb95 f5f3 	sdiv	r5, r5, r3
 8043614:	f109 0301 	add.w	r3, r9, #1
 8043618:	443b      	add	r3, r7
 804361a:	429d      	cmp	r5, r3
 804361c:	bf38      	it	cc
 804361e:	461d      	movcc	r5, r3
 8043620:	0553      	lsls	r3, r2, #21
 8043622:	d530      	bpl.n	8043686 <__ssputs_r+0x9e>
 8043624:	4629      	mov	r1, r5
 8043626:	f000 fb31 	bl	8043c8c <_malloc_r>
 804362a:	4606      	mov	r6, r0
 804362c:	b950      	cbnz	r0, 8043644 <__ssputs_r+0x5c>
 804362e:	230c      	movs	r3, #12
 8043630:	f04f 30ff 	mov.w	r0, #4294967295
 8043634:	f8ca 3000 	str.w	r3, [sl]
 8043638:	89a3      	ldrh	r3, [r4, #12]
 804363a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804363e:	81a3      	strh	r3, [r4, #12]
 8043640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8043644:	463a      	mov	r2, r7
 8043646:	6921      	ldr	r1, [r4, #16]
 8043648:	f7ff ff5c 	bl	8043504 <memcpy>
 804364c:	89a3      	ldrh	r3, [r4, #12]
 804364e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8043652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8043656:	81a3      	strh	r3, [r4, #12]
 8043658:	6126      	str	r6, [r4, #16]
 804365a:	443e      	add	r6, r7
 804365c:	6165      	str	r5, [r4, #20]
 804365e:	1bed      	subs	r5, r5, r7
 8043660:	6026      	str	r6, [r4, #0]
 8043662:	464e      	mov	r6, r9
 8043664:	60a5      	str	r5, [r4, #8]
 8043666:	454e      	cmp	r6, r9
 8043668:	d900      	bls.n	804366c <__ssputs_r+0x84>
 804366a:	464e      	mov	r6, r9
 804366c:	4632      	mov	r2, r6
 804366e:	4641      	mov	r1, r8
 8043670:	6820      	ldr	r0, [r4, #0]
 8043672:	f000 faa3 	bl	8043bbc <memmove>
 8043676:	68a3      	ldr	r3, [r4, #8]
 8043678:	2000      	movs	r0, #0
 804367a:	1b9b      	subs	r3, r3, r6
 804367c:	60a3      	str	r3, [r4, #8]
 804367e:	6823      	ldr	r3, [r4, #0]
 8043680:	441e      	add	r6, r3
 8043682:	6026      	str	r6, [r4, #0]
 8043684:	e7dc      	b.n	8043640 <__ssputs_r+0x58>
 8043686:	462a      	mov	r2, r5
 8043688:	f000 fb5a 	bl	8043d40 <_realloc_r>
 804368c:	4606      	mov	r6, r0
 804368e:	2800      	cmp	r0, #0
 8043690:	d1e2      	bne.n	8043658 <__ssputs_r+0x70>
 8043692:	6921      	ldr	r1, [r4, #16]
 8043694:	4650      	mov	r0, sl
 8043696:	f000 faab 	bl	8043bf0 <_free_r>
 804369a:	e7c8      	b.n	804362e <__ssputs_r+0x46>

0804369c <_svfiprintf_r>:
 804369c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80436a0:	461d      	mov	r5, r3
 80436a2:	898b      	ldrh	r3, [r1, #12]
 80436a4:	b09d      	sub	sp, #116	; 0x74
 80436a6:	4680      	mov	r8, r0
 80436a8:	061f      	lsls	r7, r3, #24
 80436aa:	460c      	mov	r4, r1
 80436ac:	4616      	mov	r6, r2
 80436ae:	d50f      	bpl.n	80436d0 <_svfiprintf_r+0x34>
 80436b0:	690b      	ldr	r3, [r1, #16]
 80436b2:	b96b      	cbnz	r3, 80436d0 <_svfiprintf_r+0x34>
 80436b4:	2140      	movs	r1, #64	; 0x40
 80436b6:	f000 fae9 	bl	8043c8c <_malloc_r>
 80436ba:	6020      	str	r0, [r4, #0]
 80436bc:	6120      	str	r0, [r4, #16]
 80436be:	b928      	cbnz	r0, 80436cc <_svfiprintf_r+0x30>
 80436c0:	230c      	movs	r3, #12
 80436c2:	f8c8 3000 	str.w	r3, [r8]
 80436c6:	f04f 30ff 	mov.w	r0, #4294967295
 80436ca:	e0c8      	b.n	804385e <_svfiprintf_r+0x1c2>
 80436cc:	2340      	movs	r3, #64	; 0x40
 80436ce:	6163      	str	r3, [r4, #20]
 80436d0:	2300      	movs	r3, #0
 80436d2:	f04f 0b01 	mov.w	fp, #1
 80436d6:	9503      	str	r5, [sp, #12]
 80436d8:	9309      	str	r3, [sp, #36]	; 0x24
 80436da:	2320      	movs	r3, #32
 80436dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80436e0:	2330      	movs	r3, #48	; 0x30
 80436e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80436e6:	4637      	mov	r7, r6
 80436e8:	463d      	mov	r5, r7
 80436ea:	f815 3b01 	ldrb.w	r3, [r5], #1
 80436ee:	b10b      	cbz	r3, 80436f4 <_svfiprintf_r+0x58>
 80436f0:	2b25      	cmp	r3, #37	; 0x25
 80436f2:	d13e      	bne.n	8043772 <_svfiprintf_r+0xd6>
 80436f4:	ebb7 0a06 	subs.w	sl, r7, r6
 80436f8:	d00b      	beq.n	8043712 <_svfiprintf_r+0x76>
 80436fa:	4653      	mov	r3, sl
 80436fc:	4632      	mov	r2, r6
 80436fe:	4621      	mov	r1, r4
 8043700:	4640      	mov	r0, r8
 8043702:	f7ff ff71 	bl	80435e8 <__ssputs_r>
 8043706:	3001      	adds	r0, #1
 8043708:	f000 80a4 	beq.w	8043854 <_svfiprintf_r+0x1b8>
 804370c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 804370e:	4453      	add	r3, sl
 8043710:	9309      	str	r3, [sp, #36]	; 0x24
 8043712:	783b      	ldrb	r3, [r7, #0]
 8043714:	2b00      	cmp	r3, #0
 8043716:	f000 809d 	beq.w	8043854 <_svfiprintf_r+0x1b8>
 804371a:	2300      	movs	r3, #0
 804371c:	f04f 32ff 	mov.w	r2, #4294967295
 8043720:	9304      	str	r3, [sp, #16]
 8043722:	9307      	str	r3, [sp, #28]
 8043724:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8043728:	931a      	str	r3, [sp, #104]	; 0x68
 804372a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 804372e:	462f      	mov	r7, r5
 8043730:	2205      	movs	r2, #5
 8043732:	4851      	ldr	r0, [pc, #324]	; (8043878 <_svfiprintf_r+0x1dc>)
 8043734:	f817 1b01 	ldrb.w	r1, [r7], #1
 8043738:	f000 fa32 	bl	8043ba0 <memchr>
 804373c:	9b04      	ldr	r3, [sp, #16]
 804373e:	b9d0      	cbnz	r0, 8043776 <_svfiprintf_r+0xda>
 8043740:	06d9      	lsls	r1, r3, #27
 8043742:	bf44      	itt	mi
 8043744:	2220      	movmi	r2, #32
 8043746:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 804374a:	071a      	lsls	r2, r3, #28
 804374c:	bf44      	itt	mi
 804374e:	222b      	movmi	r2, #43	; 0x2b
 8043750:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8043754:	782a      	ldrb	r2, [r5, #0]
 8043756:	2a2a      	cmp	r2, #42	; 0x2a
 8043758:	d015      	beq.n	8043786 <_svfiprintf_r+0xea>
 804375a:	462f      	mov	r7, r5
 804375c:	9a07      	ldr	r2, [sp, #28]
 804375e:	2000      	movs	r0, #0
 8043760:	250a      	movs	r5, #10
 8043762:	4639      	mov	r1, r7
 8043764:	f811 3b01 	ldrb.w	r3, [r1], #1
 8043768:	3b30      	subs	r3, #48	; 0x30
 804376a:	2b09      	cmp	r3, #9
 804376c:	d94d      	bls.n	804380a <_svfiprintf_r+0x16e>
 804376e:	b1b8      	cbz	r0, 80437a0 <_svfiprintf_r+0x104>
 8043770:	e00f      	b.n	8043792 <_svfiprintf_r+0xf6>
 8043772:	462f      	mov	r7, r5
 8043774:	e7b8      	b.n	80436e8 <_svfiprintf_r+0x4c>
 8043776:	4a40      	ldr	r2, [pc, #256]	; (8043878 <_svfiprintf_r+0x1dc>)
 8043778:	463d      	mov	r5, r7
 804377a:	1a80      	subs	r0, r0, r2
 804377c:	fa0b f000 	lsl.w	r0, fp, r0
 8043780:	4318      	orrs	r0, r3
 8043782:	9004      	str	r0, [sp, #16]
 8043784:	e7d3      	b.n	804372e <_svfiprintf_r+0x92>
 8043786:	9a03      	ldr	r2, [sp, #12]
 8043788:	1d11      	adds	r1, r2, #4
 804378a:	6812      	ldr	r2, [r2, #0]
 804378c:	2a00      	cmp	r2, #0
 804378e:	9103      	str	r1, [sp, #12]
 8043790:	db01      	blt.n	8043796 <_svfiprintf_r+0xfa>
 8043792:	9207      	str	r2, [sp, #28]
 8043794:	e004      	b.n	80437a0 <_svfiprintf_r+0x104>
 8043796:	4252      	negs	r2, r2
 8043798:	f043 0302 	orr.w	r3, r3, #2
 804379c:	9207      	str	r2, [sp, #28]
 804379e:	9304      	str	r3, [sp, #16]
 80437a0:	783b      	ldrb	r3, [r7, #0]
 80437a2:	2b2e      	cmp	r3, #46	; 0x2e
 80437a4:	d10c      	bne.n	80437c0 <_svfiprintf_r+0x124>
 80437a6:	787b      	ldrb	r3, [r7, #1]
 80437a8:	2b2a      	cmp	r3, #42	; 0x2a
 80437aa:	d133      	bne.n	8043814 <_svfiprintf_r+0x178>
 80437ac:	9b03      	ldr	r3, [sp, #12]
 80437ae:	3702      	adds	r7, #2
 80437b0:	1d1a      	adds	r2, r3, #4
 80437b2:	681b      	ldr	r3, [r3, #0]
 80437b4:	2b00      	cmp	r3, #0
 80437b6:	9203      	str	r2, [sp, #12]
 80437b8:	bfb8      	it	lt
 80437ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80437be:	9305      	str	r3, [sp, #20]
 80437c0:	4d2e      	ldr	r5, [pc, #184]	; (804387c <_svfiprintf_r+0x1e0>)
 80437c2:	2203      	movs	r2, #3
 80437c4:	7839      	ldrb	r1, [r7, #0]
 80437c6:	4628      	mov	r0, r5
 80437c8:	f000 f9ea 	bl	8043ba0 <memchr>
 80437cc:	b138      	cbz	r0, 80437de <_svfiprintf_r+0x142>
 80437ce:	2340      	movs	r3, #64	; 0x40
 80437d0:	1b40      	subs	r0, r0, r5
 80437d2:	3701      	adds	r7, #1
 80437d4:	fa03 f000 	lsl.w	r0, r3, r0
 80437d8:	9b04      	ldr	r3, [sp, #16]
 80437da:	4303      	orrs	r3, r0
 80437dc:	9304      	str	r3, [sp, #16]
 80437de:	7839      	ldrb	r1, [r7, #0]
 80437e0:	2206      	movs	r2, #6
 80437e2:	4827      	ldr	r0, [pc, #156]	; (8043880 <_svfiprintf_r+0x1e4>)
 80437e4:	1c7e      	adds	r6, r7, #1
 80437e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80437ea:	f000 f9d9 	bl	8043ba0 <memchr>
 80437ee:	2800      	cmp	r0, #0
 80437f0:	d038      	beq.n	8043864 <_svfiprintf_r+0x1c8>
 80437f2:	4b24      	ldr	r3, [pc, #144]	; (8043884 <_svfiprintf_r+0x1e8>)
 80437f4:	bb13      	cbnz	r3, 804383c <_svfiprintf_r+0x1a0>
 80437f6:	9b03      	ldr	r3, [sp, #12]
 80437f8:	3307      	adds	r3, #7
 80437fa:	f023 0307 	bic.w	r3, r3, #7
 80437fe:	3308      	adds	r3, #8
 8043800:	9303      	str	r3, [sp, #12]
 8043802:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8043804:	444b      	add	r3, r9
 8043806:	9309      	str	r3, [sp, #36]	; 0x24
 8043808:	e76d      	b.n	80436e6 <_svfiprintf_r+0x4a>
 804380a:	fb05 3202 	mla	r2, r5, r2, r3
 804380e:	2001      	movs	r0, #1
 8043810:	460f      	mov	r7, r1
 8043812:	e7a6      	b.n	8043762 <_svfiprintf_r+0xc6>
 8043814:	2300      	movs	r3, #0
 8043816:	3701      	adds	r7, #1
 8043818:	250a      	movs	r5, #10
 804381a:	4619      	mov	r1, r3
 804381c:	9305      	str	r3, [sp, #20]
 804381e:	4638      	mov	r0, r7
 8043820:	f810 2b01 	ldrb.w	r2, [r0], #1
 8043824:	3a30      	subs	r2, #48	; 0x30
 8043826:	2a09      	cmp	r2, #9
 8043828:	d903      	bls.n	8043832 <_svfiprintf_r+0x196>
 804382a:	2b00      	cmp	r3, #0
 804382c:	d0c8      	beq.n	80437c0 <_svfiprintf_r+0x124>
 804382e:	9105      	str	r1, [sp, #20]
 8043830:	e7c6      	b.n	80437c0 <_svfiprintf_r+0x124>
 8043832:	fb05 2101 	mla	r1, r5, r1, r2
 8043836:	2301      	movs	r3, #1
 8043838:	4607      	mov	r7, r0
 804383a:	e7f0      	b.n	804381e <_svfiprintf_r+0x182>
 804383c:	ab03      	add	r3, sp, #12
 804383e:	4622      	mov	r2, r4
 8043840:	a904      	add	r1, sp, #16
 8043842:	4640      	mov	r0, r8
 8043844:	9300      	str	r3, [sp, #0]
 8043846:	4b10      	ldr	r3, [pc, #64]	; (8043888 <_svfiprintf_r+0x1ec>)
 8043848:	e000      	b.n	804384c <_svfiprintf_r+0x1b0>
 804384a:	bf00      	nop
 804384c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8043850:	4681      	mov	r9, r0
 8043852:	d1d6      	bne.n	8043802 <_svfiprintf_r+0x166>
 8043854:	89a3      	ldrh	r3, [r4, #12]
 8043856:	065b      	lsls	r3, r3, #25
 8043858:	f53f af35 	bmi.w	80436c6 <_svfiprintf_r+0x2a>
 804385c:	9809      	ldr	r0, [sp, #36]	; 0x24
 804385e:	b01d      	add	sp, #116	; 0x74
 8043860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8043864:	ab03      	add	r3, sp, #12
 8043866:	4622      	mov	r2, r4
 8043868:	a904      	add	r1, sp, #16
 804386a:	4640      	mov	r0, r8
 804386c:	9300      	str	r3, [sp, #0]
 804386e:	4b06      	ldr	r3, [pc, #24]	; (8043888 <_svfiprintf_r+0x1ec>)
 8043870:	f000 f884 	bl	804397c <_printf_i>
 8043874:	e7ea      	b.n	804384c <_svfiprintf_r+0x1b0>
 8043876:	bf00      	nop
 8043878:	080445c8 	.word	0x080445c8
 804387c:	080445ce 	.word	0x080445ce
 8043880:	080445d2 	.word	0x080445d2
 8043884:	00000000 	.word	0x00000000
 8043888:	080435e9 	.word	0x080435e9

0804388c <_printf_common>:
 804388c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8043890:	4691      	mov	r9, r2
 8043892:	461f      	mov	r7, r3
 8043894:	688a      	ldr	r2, [r1, #8]
 8043896:	4606      	mov	r6, r0
 8043898:	690b      	ldr	r3, [r1, #16]
 804389a:	460c      	mov	r4, r1
 804389c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80438a0:	4293      	cmp	r3, r2
 80438a2:	bfb8      	it	lt
 80438a4:	4613      	movlt	r3, r2
 80438a6:	f8c9 3000 	str.w	r3, [r9]
 80438aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80438ae:	b112      	cbz	r2, 80438b6 <_printf_common+0x2a>
 80438b0:	3301      	adds	r3, #1
 80438b2:	f8c9 3000 	str.w	r3, [r9]
 80438b6:	6823      	ldr	r3, [r4, #0]
 80438b8:	0699      	lsls	r1, r3, #26
 80438ba:	bf42      	ittt	mi
 80438bc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80438c0:	3302      	addmi	r3, #2
 80438c2:	f8c9 3000 	strmi.w	r3, [r9]
 80438c6:	6825      	ldr	r5, [r4, #0]
 80438c8:	f015 0506 	ands.w	r5, r5, #6
 80438cc:	d107      	bne.n	80438de <_printf_common+0x52>
 80438ce:	f104 0a19 	add.w	sl, r4, #25
 80438d2:	68e3      	ldr	r3, [r4, #12]
 80438d4:	f8d9 2000 	ldr.w	r2, [r9]
 80438d8:	1a9b      	subs	r3, r3, r2
 80438da:	42ab      	cmp	r3, r5
 80438dc:	dc2b      	bgt.n	8043936 <_printf_common+0xaa>
 80438de:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80438e2:	6822      	ldr	r2, [r4, #0]
 80438e4:	3300      	adds	r3, #0
 80438e6:	bf18      	it	ne
 80438e8:	2301      	movne	r3, #1
 80438ea:	0692      	lsls	r2, r2, #26
 80438ec:	d430      	bmi.n	8043950 <_printf_common+0xc4>
 80438ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80438f2:	4639      	mov	r1, r7
 80438f4:	4630      	mov	r0, r6
 80438f6:	47c0      	blx	r8
 80438f8:	3001      	adds	r0, #1
 80438fa:	d023      	beq.n	8043944 <_printf_common+0xb8>
 80438fc:	6823      	ldr	r3, [r4, #0]
 80438fe:	341a      	adds	r4, #26
 8043900:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 8043904:	f003 0306 	and.w	r3, r3, #6
 8043908:	f8d9 2000 	ldr.w	r2, [r9]
 804390c:	f04f 0900 	mov.w	r9, #0
 8043910:	2b04      	cmp	r3, #4
 8043912:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8043916:	bf08      	it	eq
 8043918:	1aad      	subeq	r5, r5, r2
 804391a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 804391e:	bf14      	ite	ne
 8043920:	2500      	movne	r5, #0
 8043922:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8043926:	4293      	cmp	r3, r2
 8043928:	bfc4      	itt	gt
 804392a:	1a9b      	subgt	r3, r3, r2
 804392c:	18ed      	addgt	r5, r5, r3
 804392e:	454d      	cmp	r5, r9
 8043930:	d11a      	bne.n	8043968 <_printf_common+0xdc>
 8043932:	2000      	movs	r0, #0
 8043934:	e008      	b.n	8043948 <_printf_common+0xbc>
 8043936:	2301      	movs	r3, #1
 8043938:	4652      	mov	r2, sl
 804393a:	4639      	mov	r1, r7
 804393c:	4630      	mov	r0, r6
 804393e:	47c0      	blx	r8
 8043940:	3001      	adds	r0, #1
 8043942:	d103      	bne.n	804394c <_printf_common+0xc0>
 8043944:	f04f 30ff 	mov.w	r0, #4294967295
 8043948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804394c:	3501      	adds	r5, #1
 804394e:	e7c0      	b.n	80438d2 <_printf_common+0x46>
 8043950:	18e1      	adds	r1, r4, r3
 8043952:	1c5a      	adds	r2, r3, #1
 8043954:	2030      	movs	r0, #48	; 0x30
 8043956:	3302      	adds	r3, #2
 8043958:	4422      	add	r2, r4
 804395a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 804395e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8043962:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8043966:	e7c2      	b.n	80438ee <_printf_common+0x62>
 8043968:	2301      	movs	r3, #1
 804396a:	4622      	mov	r2, r4
 804396c:	4639      	mov	r1, r7
 804396e:	4630      	mov	r0, r6
 8043970:	47c0      	blx	r8
 8043972:	3001      	adds	r0, #1
 8043974:	d0e6      	beq.n	8043944 <_printf_common+0xb8>
 8043976:	f109 0901 	add.w	r9, r9, #1
 804397a:	e7d8      	b.n	804392e <_printf_common+0xa2>

0804397c <_printf_i>:
 804397c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8043980:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8043984:	460c      	mov	r4, r1
 8043986:	7e09      	ldrb	r1, [r1, #24]
 8043988:	b085      	sub	sp, #20
 804398a:	4617      	mov	r7, r2
 804398c:	4606      	mov	r6, r0
 804398e:	296e      	cmp	r1, #110	; 0x6e
 8043990:	4698      	mov	r8, r3
 8043992:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8043994:	f000 80b3 	beq.w	8043afe <_printf_i+0x182>
 8043998:	d822      	bhi.n	80439e0 <_printf_i+0x64>
 804399a:	2963      	cmp	r1, #99	; 0x63
 804399c:	d036      	beq.n	8043a0c <_printf_i+0x90>
 804399e:	d80a      	bhi.n	80439b6 <_printf_i+0x3a>
 80439a0:	2900      	cmp	r1, #0
 80439a2:	f000 80b9 	beq.w	8043b18 <_printf_i+0x19c>
 80439a6:	2958      	cmp	r1, #88	; 0x58
 80439a8:	f000 8083 	beq.w	8043ab2 <_printf_i+0x136>
 80439ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80439b0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80439b4:	e032      	b.n	8043a1c <_printf_i+0xa0>
 80439b6:	2964      	cmp	r1, #100	; 0x64
 80439b8:	d001      	beq.n	80439be <_printf_i+0x42>
 80439ba:	2969      	cmp	r1, #105	; 0x69
 80439bc:	d1f6      	bne.n	80439ac <_printf_i+0x30>
 80439be:	6820      	ldr	r0, [r4, #0]
 80439c0:	6813      	ldr	r3, [r2, #0]
 80439c2:	0605      	lsls	r5, r0, #24
 80439c4:	f103 0104 	add.w	r1, r3, #4
 80439c8:	d52a      	bpl.n	8043a20 <_printf_i+0xa4>
 80439ca:	681b      	ldr	r3, [r3, #0]
 80439cc:	6011      	str	r1, [r2, #0]
 80439ce:	2b00      	cmp	r3, #0
 80439d0:	da03      	bge.n	80439da <_printf_i+0x5e>
 80439d2:	222d      	movs	r2, #45	; 0x2d
 80439d4:	425b      	negs	r3, r3
 80439d6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80439da:	486f      	ldr	r0, [pc, #444]	; (8043b98 <_printf_i+0x21c>)
 80439dc:	220a      	movs	r2, #10
 80439de:	e039      	b.n	8043a54 <_printf_i+0xd8>
 80439e0:	2973      	cmp	r1, #115	; 0x73
 80439e2:	f000 809d 	beq.w	8043b20 <_printf_i+0x1a4>
 80439e6:	d808      	bhi.n	80439fa <_printf_i+0x7e>
 80439e8:	296f      	cmp	r1, #111	; 0x6f
 80439ea:	d020      	beq.n	8043a2e <_printf_i+0xb2>
 80439ec:	2970      	cmp	r1, #112	; 0x70
 80439ee:	d1dd      	bne.n	80439ac <_printf_i+0x30>
 80439f0:	6823      	ldr	r3, [r4, #0]
 80439f2:	f043 0320 	orr.w	r3, r3, #32
 80439f6:	6023      	str	r3, [r4, #0]
 80439f8:	e003      	b.n	8043a02 <_printf_i+0x86>
 80439fa:	2975      	cmp	r1, #117	; 0x75
 80439fc:	d017      	beq.n	8043a2e <_printf_i+0xb2>
 80439fe:	2978      	cmp	r1, #120	; 0x78
 8043a00:	d1d4      	bne.n	80439ac <_printf_i+0x30>
 8043a02:	2378      	movs	r3, #120	; 0x78
 8043a04:	4865      	ldr	r0, [pc, #404]	; (8043b9c <_printf_i+0x220>)
 8043a06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8043a0a:	e055      	b.n	8043ab8 <_printf_i+0x13c>
 8043a0c:	6813      	ldr	r3, [r2, #0]
 8043a0e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8043a12:	1d19      	adds	r1, r3, #4
 8043a14:	681b      	ldr	r3, [r3, #0]
 8043a16:	6011      	str	r1, [r2, #0]
 8043a18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8043a1c:	2301      	movs	r3, #1
 8043a1e:	e08c      	b.n	8043b3a <_printf_i+0x1be>
 8043a20:	681b      	ldr	r3, [r3, #0]
 8043a22:	f010 0f40 	tst.w	r0, #64	; 0x40
 8043a26:	6011      	str	r1, [r2, #0]
 8043a28:	bf18      	it	ne
 8043a2a:	b21b      	sxthne	r3, r3
 8043a2c:	e7cf      	b.n	80439ce <_printf_i+0x52>
 8043a2e:	6813      	ldr	r3, [r2, #0]
 8043a30:	6825      	ldr	r5, [r4, #0]
 8043a32:	1d18      	adds	r0, r3, #4
 8043a34:	6010      	str	r0, [r2, #0]
 8043a36:	0628      	lsls	r0, r5, #24
 8043a38:	d501      	bpl.n	8043a3e <_printf_i+0xc2>
 8043a3a:	681b      	ldr	r3, [r3, #0]
 8043a3c:	e002      	b.n	8043a44 <_printf_i+0xc8>
 8043a3e:	0668      	lsls	r0, r5, #25
 8043a40:	d5fb      	bpl.n	8043a3a <_printf_i+0xbe>
 8043a42:	881b      	ldrh	r3, [r3, #0]
 8043a44:	296f      	cmp	r1, #111	; 0x6f
 8043a46:	4854      	ldr	r0, [pc, #336]	; (8043b98 <_printf_i+0x21c>)
 8043a48:	bf14      	ite	ne
 8043a4a:	220a      	movne	r2, #10
 8043a4c:	2208      	moveq	r2, #8
 8043a4e:	2100      	movs	r1, #0
 8043a50:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8043a54:	6865      	ldr	r5, [r4, #4]
 8043a56:	2d00      	cmp	r5, #0
 8043a58:	60a5      	str	r5, [r4, #8]
 8043a5a:	f2c0 8095 	blt.w	8043b88 <_printf_i+0x20c>
 8043a5e:	6821      	ldr	r1, [r4, #0]
 8043a60:	f021 0104 	bic.w	r1, r1, #4
 8043a64:	6021      	str	r1, [r4, #0]
 8043a66:	2b00      	cmp	r3, #0
 8043a68:	d13d      	bne.n	8043ae6 <_printf_i+0x16a>
 8043a6a:	2d00      	cmp	r5, #0
 8043a6c:	f040 808e 	bne.w	8043b8c <_printf_i+0x210>
 8043a70:	4665      	mov	r5, ip
 8043a72:	2a08      	cmp	r2, #8
 8043a74:	d10b      	bne.n	8043a8e <_printf_i+0x112>
 8043a76:	6823      	ldr	r3, [r4, #0]
 8043a78:	07db      	lsls	r3, r3, #31
 8043a7a:	d508      	bpl.n	8043a8e <_printf_i+0x112>
 8043a7c:	6923      	ldr	r3, [r4, #16]
 8043a7e:	6862      	ldr	r2, [r4, #4]
 8043a80:	429a      	cmp	r2, r3
 8043a82:	bfde      	ittt	le
 8043a84:	2330      	movle	r3, #48	; 0x30
 8043a86:	f805 3c01 	strble.w	r3, [r5, #-1]
 8043a8a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8043a8e:	ebac 0305 	sub.w	r3, ip, r5
 8043a92:	6123      	str	r3, [r4, #16]
 8043a94:	f8cd 8000 	str.w	r8, [sp]
 8043a98:	463b      	mov	r3, r7
 8043a9a:	aa03      	add	r2, sp, #12
 8043a9c:	4621      	mov	r1, r4
 8043a9e:	4630      	mov	r0, r6
 8043aa0:	f7ff fef4 	bl	804388c <_printf_common>
 8043aa4:	3001      	adds	r0, #1
 8043aa6:	d14d      	bne.n	8043b44 <_printf_i+0x1c8>
 8043aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8043aac:	b005      	add	sp, #20
 8043aae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8043ab2:	4839      	ldr	r0, [pc, #228]	; (8043b98 <_printf_i+0x21c>)
 8043ab4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8043ab8:	6813      	ldr	r3, [r2, #0]
 8043aba:	6821      	ldr	r1, [r4, #0]
 8043abc:	1d1d      	adds	r5, r3, #4
 8043abe:	681b      	ldr	r3, [r3, #0]
 8043ac0:	6015      	str	r5, [r2, #0]
 8043ac2:	060a      	lsls	r2, r1, #24
 8043ac4:	d50b      	bpl.n	8043ade <_printf_i+0x162>
 8043ac6:	07ca      	lsls	r2, r1, #31
 8043ac8:	bf44      	itt	mi
 8043aca:	f041 0120 	orrmi.w	r1, r1, #32
 8043ace:	6021      	strmi	r1, [r4, #0]
 8043ad0:	b91b      	cbnz	r3, 8043ada <_printf_i+0x15e>
 8043ad2:	6822      	ldr	r2, [r4, #0]
 8043ad4:	f022 0220 	bic.w	r2, r2, #32
 8043ad8:	6022      	str	r2, [r4, #0]
 8043ada:	2210      	movs	r2, #16
 8043adc:	e7b7      	b.n	8043a4e <_printf_i+0xd2>
 8043ade:	064d      	lsls	r5, r1, #25
 8043ae0:	bf48      	it	mi
 8043ae2:	b29b      	uxthmi	r3, r3
 8043ae4:	e7ef      	b.n	8043ac6 <_printf_i+0x14a>
 8043ae6:	4665      	mov	r5, ip
 8043ae8:	fbb3 f1f2 	udiv	r1, r3, r2
 8043aec:	fb02 3311 	mls	r3, r2, r1, r3
 8043af0:	5cc3      	ldrb	r3, [r0, r3]
 8043af2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8043af6:	460b      	mov	r3, r1
 8043af8:	2900      	cmp	r1, #0
 8043afa:	d1f5      	bne.n	8043ae8 <_printf_i+0x16c>
 8043afc:	e7b9      	b.n	8043a72 <_printf_i+0xf6>
 8043afe:	6813      	ldr	r3, [r2, #0]
 8043b00:	6825      	ldr	r5, [r4, #0]
 8043b02:	1d18      	adds	r0, r3, #4
 8043b04:	6961      	ldr	r1, [r4, #20]
 8043b06:	6010      	str	r0, [r2, #0]
 8043b08:	0628      	lsls	r0, r5, #24
 8043b0a:	681b      	ldr	r3, [r3, #0]
 8043b0c:	d501      	bpl.n	8043b12 <_printf_i+0x196>
 8043b0e:	6019      	str	r1, [r3, #0]
 8043b10:	e002      	b.n	8043b18 <_printf_i+0x19c>
 8043b12:	066a      	lsls	r2, r5, #25
 8043b14:	d5fb      	bpl.n	8043b0e <_printf_i+0x192>
 8043b16:	8019      	strh	r1, [r3, #0]
 8043b18:	2300      	movs	r3, #0
 8043b1a:	4665      	mov	r5, ip
 8043b1c:	6123      	str	r3, [r4, #16]
 8043b1e:	e7b9      	b.n	8043a94 <_printf_i+0x118>
 8043b20:	6813      	ldr	r3, [r2, #0]
 8043b22:	1d19      	adds	r1, r3, #4
 8043b24:	6011      	str	r1, [r2, #0]
 8043b26:	2100      	movs	r1, #0
 8043b28:	681d      	ldr	r5, [r3, #0]
 8043b2a:	6862      	ldr	r2, [r4, #4]
 8043b2c:	4628      	mov	r0, r5
 8043b2e:	f000 f837 	bl	8043ba0 <memchr>
 8043b32:	b108      	cbz	r0, 8043b38 <_printf_i+0x1bc>
 8043b34:	1b40      	subs	r0, r0, r5
 8043b36:	6060      	str	r0, [r4, #4]
 8043b38:	6863      	ldr	r3, [r4, #4]
 8043b3a:	6123      	str	r3, [r4, #16]
 8043b3c:	2300      	movs	r3, #0
 8043b3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8043b42:	e7a7      	b.n	8043a94 <_printf_i+0x118>
 8043b44:	6923      	ldr	r3, [r4, #16]
 8043b46:	462a      	mov	r2, r5
 8043b48:	4639      	mov	r1, r7
 8043b4a:	4630      	mov	r0, r6
 8043b4c:	47c0      	blx	r8
 8043b4e:	3001      	adds	r0, #1
 8043b50:	d0aa      	beq.n	8043aa8 <_printf_i+0x12c>
 8043b52:	6823      	ldr	r3, [r4, #0]
 8043b54:	079b      	lsls	r3, r3, #30
 8043b56:	d413      	bmi.n	8043b80 <_printf_i+0x204>
 8043b58:	68e0      	ldr	r0, [r4, #12]
 8043b5a:	9b03      	ldr	r3, [sp, #12]
 8043b5c:	4298      	cmp	r0, r3
 8043b5e:	bfb8      	it	lt
 8043b60:	4618      	movlt	r0, r3
 8043b62:	e7a3      	b.n	8043aac <_printf_i+0x130>
 8043b64:	2301      	movs	r3, #1
 8043b66:	464a      	mov	r2, r9
 8043b68:	4639      	mov	r1, r7
 8043b6a:	4630      	mov	r0, r6
 8043b6c:	47c0      	blx	r8
 8043b6e:	3001      	adds	r0, #1
 8043b70:	d09a      	beq.n	8043aa8 <_printf_i+0x12c>
 8043b72:	3501      	adds	r5, #1
 8043b74:	68e3      	ldr	r3, [r4, #12]
 8043b76:	9a03      	ldr	r2, [sp, #12]
 8043b78:	1a9b      	subs	r3, r3, r2
 8043b7a:	42ab      	cmp	r3, r5
 8043b7c:	dcf2      	bgt.n	8043b64 <_printf_i+0x1e8>
 8043b7e:	e7eb      	b.n	8043b58 <_printf_i+0x1dc>
 8043b80:	2500      	movs	r5, #0
 8043b82:	f104 0919 	add.w	r9, r4, #25
 8043b86:	e7f5      	b.n	8043b74 <_printf_i+0x1f8>
 8043b88:	2b00      	cmp	r3, #0
 8043b8a:	d1ac      	bne.n	8043ae6 <_printf_i+0x16a>
 8043b8c:	7803      	ldrb	r3, [r0, #0]
 8043b8e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8043b92:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8043b96:	e76c      	b.n	8043a72 <_printf_i+0xf6>
 8043b98:	080445d9 	.word	0x080445d9
 8043b9c:	080445ea 	.word	0x080445ea

08043ba0 <memchr>:
 8043ba0:	b2c9      	uxtb	r1, r1
 8043ba2:	4402      	add	r2, r0
 8043ba4:	b510      	push	{r4, lr}
 8043ba6:	4290      	cmp	r0, r2
 8043ba8:	4603      	mov	r3, r0
 8043baa:	d101      	bne.n	8043bb0 <memchr+0x10>
 8043bac:	2300      	movs	r3, #0
 8043bae:	e003      	b.n	8043bb8 <memchr+0x18>
 8043bb0:	781c      	ldrb	r4, [r3, #0]
 8043bb2:	3001      	adds	r0, #1
 8043bb4:	428c      	cmp	r4, r1
 8043bb6:	d1f6      	bne.n	8043ba6 <memchr+0x6>
 8043bb8:	4618      	mov	r0, r3
 8043bba:	bd10      	pop	{r4, pc}

08043bbc <memmove>:
 8043bbc:	4288      	cmp	r0, r1
 8043bbe:	eb01 0302 	add.w	r3, r1, r2
 8043bc2:	b510      	push	{r4, lr}
 8043bc4:	d807      	bhi.n	8043bd6 <memmove+0x1a>
 8043bc6:	1e42      	subs	r2, r0, #1
 8043bc8:	4299      	cmp	r1, r3
 8043bca:	d00a      	beq.n	8043be2 <memmove+0x26>
 8043bcc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8043bd0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8043bd4:	e7f8      	b.n	8043bc8 <memmove+0xc>
 8043bd6:	4283      	cmp	r3, r0
 8043bd8:	d9f5      	bls.n	8043bc6 <memmove+0xa>
 8043bda:	1881      	adds	r1, r0, r2
 8043bdc:	1ad2      	subs	r2, r2, r3
 8043bde:	42d3      	cmn	r3, r2
 8043be0:	d100      	bne.n	8043be4 <memmove+0x28>
 8043be2:	bd10      	pop	{r4, pc}
 8043be4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8043be8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8043bec:	e7f7      	b.n	8043bde <memmove+0x22>
	...

08043bf0 <_free_r>:
 8043bf0:	b538      	push	{r3, r4, r5, lr}
 8043bf2:	4605      	mov	r5, r0
 8043bf4:	2900      	cmp	r1, #0
 8043bf6:	d045      	beq.n	8043c84 <_free_r+0x94>
 8043bf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8043bfc:	1f0c      	subs	r4, r1, #4
 8043bfe:	2b00      	cmp	r3, #0
 8043c00:	bfb8      	it	lt
 8043c02:	18e4      	addlt	r4, r4, r3
 8043c04:	f000 f8d2 	bl	8043dac <__malloc_lock>
 8043c08:	4a1f      	ldr	r2, [pc, #124]	; (8043c88 <_free_r+0x98>)
 8043c0a:	6813      	ldr	r3, [r2, #0]
 8043c0c:	4610      	mov	r0, r2
 8043c0e:	b933      	cbnz	r3, 8043c1e <_free_r+0x2e>
 8043c10:	6063      	str	r3, [r4, #4]
 8043c12:	6014      	str	r4, [r2, #0]
 8043c14:	4628      	mov	r0, r5
 8043c16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8043c1a:	f000 b8c8 	b.w	8043dae <__malloc_unlock>
 8043c1e:	42a3      	cmp	r3, r4
 8043c20:	d90c      	bls.n	8043c3c <_free_r+0x4c>
 8043c22:	6821      	ldr	r1, [r4, #0]
 8043c24:	1862      	adds	r2, r4, r1
 8043c26:	4293      	cmp	r3, r2
 8043c28:	bf02      	ittt	eq
 8043c2a:	681a      	ldreq	r2, [r3, #0]
 8043c2c:	685b      	ldreq	r3, [r3, #4]
 8043c2e:	1852      	addeq	r2, r2, r1
 8043c30:	6063      	str	r3, [r4, #4]
 8043c32:	bf08      	it	eq
 8043c34:	6022      	streq	r2, [r4, #0]
 8043c36:	6004      	str	r4, [r0, #0]
 8043c38:	e7ec      	b.n	8043c14 <_free_r+0x24>
 8043c3a:	4613      	mov	r3, r2
 8043c3c:	685a      	ldr	r2, [r3, #4]
 8043c3e:	b10a      	cbz	r2, 8043c44 <_free_r+0x54>
 8043c40:	42a2      	cmp	r2, r4
 8043c42:	d9fa      	bls.n	8043c3a <_free_r+0x4a>
 8043c44:	6819      	ldr	r1, [r3, #0]
 8043c46:	1858      	adds	r0, r3, r1
 8043c48:	42a0      	cmp	r0, r4
 8043c4a:	d10b      	bne.n	8043c64 <_free_r+0x74>
 8043c4c:	6820      	ldr	r0, [r4, #0]
 8043c4e:	4401      	add	r1, r0
 8043c50:	1858      	adds	r0, r3, r1
 8043c52:	6019      	str	r1, [r3, #0]
 8043c54:	4282      	cmp	r2, r0
 8043c56:	d1dd      	bne.n	8043c14 <_free_r+0x24>
 8043c58:	6810      	ldr	r0, [r2, #0]
 8043c5a:	6852      	ldr	r2, [r2, #4]
 8043c5c:	4401      	add	r1, r0
 8043c5e:	605a      	str	r2, [r3, #4]
 8043c60:	6019      	str	r1, [r3, #0]
 8043c62:	e7d7      	b.n	8043c14 <_free_r+0x24>
 8043c64:	d902      	bls.n	8043c6c <_free_r+0x7c>
 8043c66:	230c      	movs	r3, #12
 8043c68:	602b      	str	r3, [r5, #0]
 8043c6a:	e7d3      	b.n	8043c14 <_free_r+0x24>
 8043c6c:	6820      	ldr	r0, [r4, #0]
 8043c6e:	1821      	adds	r1, r4, r0
 8043c70:	428a      	cmp	r2, r1
 8043c72:	bf02      	ittt	eq
 8043c74:	6811      	ldreq	r1, [r2, #0]
 8043c76:	6852      	ldreq	r2, [r2, #4]
 8043c78:	1809      	addeq	r1, r1, r0
 8043c7a:	6062      	str	r2, [r4, #4]
 8043c7c:	bf08      	it	eq
 8043c7e:	6021      	streq	r1, [r4, #0]
 8043c80:	605c      	str	r4, [r3, #4]
 8043c82:	e7c7      	b.n	8043c14 <_free_r+0x24>
 8043c84:	bd38      	pop	{r3, r4, r5, pc}
 8043c86:	bf00      	nop
 8043c88:	200180fc 	.word	0x200180fc

08043c8c <_malloc_r>:
 8043c8c:	b570      	push	{r4, r5, r6, lr}
 8043c8e:	1ccd      	adds	r5, r1, #3
 8043c90:	4606      	mov	r6, r0
 8043c92:	f025 0503 	bic.w	r5, r5, #3
 8043c96:	3508      	adds	r5, #8
 8043c98:	2d0c      	cmp	r5, #12
 8043c9a:	bf38      	it	cc
 8043c9c:	250c      	movcc	r5, #12
 8043c9e:	2d00      	cmp	r5, #0
 8043ca0:	db01      	blt.n	8043ca6 <_malloc_r+0x1a>
 8043ca2:	42a9      	cmp	r1, r5
 8043ca4:	d903      	bls.n	8043cae <_malloc_r+0x22>
 8043ca6:	230c      	movs	r3, #12
 8043ca8:	6033      	str	r3, [r6, #0]
 8043caa:	2000      	movs	r0, #0
 8043cac:	bd70      	pop	{r4, r5, r6, pc}
 8043cae:	f000 f87d 	bl	8043dac <__malloc_lock>
 8043cb2:	4a21      	ldr	r2, [pc, #132]	; (8043d38 <_malloc_r+0xac>)
 8043cb4:	6814      	ldr	r4, [r2, #0]
 8043cb6:	4621      	mov	r1, r4
 8043cb8:	b991      	cbnz	r1, 8043ce0 <_malloc_r+0x54>
 8043cba:	4c20      	ldr	r4, [pc, #128]	; (8043d3c <_malloc_r+0xb0>)
 8043cbc:	6823      	ldr	r3, [r4, #0]
 8043cbe:	b91b      	cbnz	r3, 8043cc8 <_malloc_r+0x3c>
 8043cc0:	4630      	mov	r0, r6
 8043cc2:	f000 f863 	bl	8043d8c <_sbrk_r>
 8043cc6:	6020      	str	r0, [r4, #0]
 8043cc8:	4629      	mov	r1, r5
 8043cca:	4630      	mov	r0, r6
 8043ccc:	f000 f85e 	bl	8043d8c <_sbrk_r>
 8043cd0:	1c43      	adds	r3, r0, #1
 8043cd2:	d124      	bne.n	8043d1e <_malloc_r+0x92>
 8043cd4:	230c      	movs	r3, #12
 8043cd6:	4630      	mov	r0, r6
 8043cd8:	6033      	str	r3, [r6, #0]
 8043cda:	f000 f868 	bl	8043dae <__malloc_unlock>
 8043cde:	e7e4      	b.n	8043caa <_malloc_r+0x1e>
 8043ce0:	680b      	ldr	r3, [r1, #0]
 8043ce2:	1b5b      	subs	r3, r3, r5
 8043ce4:	d418      	bmi.n	8043d18 <_malloc_r+0x8c>
 8043ce6:	2b0b      	cmp	r3, #11
 8043ce8:	d90f      	bls.n	8043d0a <_malloc_r+0x7e>
 8043cea:	18cc      	adds	r4, r1, r3
 8043cec:	600b      	str	r3, [r1, #0]
 8043cee:	50cd      	str	r5, [r1, r3]
 8043cf0:	4630      	mov	r0, r6
 8043cf2:	f000 f85c 	bl	8043dae <__malloc_unlock>
 8043cf6:	f104 000b 	add.w	r0, r4, #11
 8043cfa:	1d23      	adds	r3, r4, #4
 8043cfc:	f020 0007 	bic.w	r0, r0, #7
 8043d00:	1ac3      	subs	r3, r0, r3
 8043d02:	d0d3      	beq.n	8043cac <_malloc_r+0x20>
 8043d04:	425a      	negs	r2, r3
 8043d06:	50e2      	str	r2, [r4, r3]
 8043d08:	e7d0      	b.n	8043cac <_malloc_r+0x20>
 8043d0a:	428c      	cmp	r4, r1
 8043d0c:	684b      	ldr	r3, [r1, #4]
 8043d0e:	bf1a      	itte	ne
 8043d10:	6063      	strne	r3, [r4, #4]
 8043d12:	460c      	movne	r4, r1
 8043d14:	6013      	streq	r3, [r2, #0]
 8043d16:	e7eb      	b.n	8043cf0 <_malloc_r+0x64>
 8043d18:	460c      	mov	r4, r1
 8043d1a:	6849      	ldr	r1, [r1, #4]
 8043d1c:	e7cc      	b.n	8043cb8 <_malloc_r+0x2c>
 8043d1e:	1cc4      	adds	r4, r0, #3
 8043d20:	f024 0403 	bic.w	r4, r4, #3
 8043d24:	42a0      	cmp	r0, r4
 8043d26:	d005      	beq.n	8043d34 <_malloc_r+0xa8>
 8043d28:	1a21      	subs	r1, r4, r0
 8043d2a:	4630      	mov	r0, r6
 8043d2c:	f000 f82e 	bl	8043d8c <_sbrk_r>
 8043d30:	3001      	adds	r0, #1
 8043d32:	d0cf      	beq.n	8043cd4 <_malloc_r+0x48>
 8043d34:	6025      	str	r5, [r4, #0]
 8043d36:	e7db      	b.n	8043cf0 <_malloc_r+0x64>
 8043d38:	200180fc 	.word	0x200180fc
 8043d3c:	20018100 	.word	0x20018100

08043d40 <_realloc_r>:
 8043d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8043d42:	4607      	mov	r7, r0
 8043d44:	4614      	mov	r4, r2
 8043d46:	460e      	mov	r6, r1
 8043d48:	b921      	cbnz	r1, 8043d54 <_realloc_r+0x14>
 8043d4a:	4611      	mov	r1, r2
 8043d4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8043d50:	f7ff bf9c 	b.w	8043c8c <_malloc_r>
 8043d54:	b922      	cbnz	r2, 8043d60 <_realloc_r+0x20>
 8043d56:	4625      	mov	r5, r4
 8043d58:	f7ff ff4a 	bl	8043bf0 <_free_r>
 8043d5c:	4628      	mov	r0, r5
 8043d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8043d60:	f000 f826 	bl	8043db0 <_malloc_usable_size_r>
 8043d64:	42a0      	cmp	r0, r4
 8043d66:	d20f      	bcs.n	8043d88 <_realloc_r+0x48>
 8043d68:	4621      	mov	r1, r4
 8043d6a:	4638      	mov	r0, r7
 8043d6c:	f7ff ff8e 	bl	8043c8c <_malloc_r>
 8043d70:	4605      	mov	r5, r0
 8043d72:	2800      	cmp	r0, #0
 8043d74:	d0f2      	beq.n	8043d5c <_realloc_r+0x1c>
 8043d76:	4631      	mov	r1, r6
 8043d78:	4622      	mov	r2, r4
 8043d7a:	f7ff fbc3 	bl	8043504 <memcpy>
 8043d7e:	4631      	mov	r1, r6
 8043d80:	4638      	mov	r0, r7
 8043d82:	f7ff ff35 	bl	8043bf0 <_free_r>
 8043d86:	e7e9      	b.n	8043d5c <_realloc_r+0x1c>
 8043d88:	4635      	mov	r5, r6
 8043d8a:	e7e7      	b.n	8043d5c <_realloc_r+0x1c>

08043d8c <_sbrk_r>:
 8043d8c:	b538      	push	{r3, r4, r5, lr}
 8043d8e:	2300      	movs	r3, #0
 8043d90:	4c05      	ldr	r4, [pc, #20]	; (8043da8 <_sbrk_r+0x1c>)
 8043d92:	4605      	mov	r5, r0
 8043d94:	4608      	mov	r0, r1
 8043d96:	6023      	str	r3, [r4, #0]
 8043d98:	f7fc ff74 	bl	8040c84 <_sbrk>
 8043d9c:	1c43      	adds	r3, r0, #1
 8043d9e:	d102      	bne.n	8043da6 <_sbrk_r+0x1a>
 8043da0:	6823      	ldr	r3, [r4, #0]
 8043da2:	b103      	cbz	r3, 8043da6 <_sbrk_r+0x1a>
 8043da4:	602b      	str	r3, [r5, #0]
 8043da6:	bd38      	pop	{r3, r4, r5, pc}
 8043da8:	20018198 	.word	0x20018198

08043dac <__malloc_lock>:
 8043dac:	4770      	bx	lr

08043dae <__malloc_unlock>:
 8043dae:	4770      	bx	lr

08043db0 <_malloc_usable_size_r>:
 8043db0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8043db4:	1f18      	subs	r0, r3, #4
 8043db6:	2b00      	cmp	r3, #0
 8043db8:	bfbc      	itt	lt
 8043dba:	580b      	ldrlt	r3, [r1, r0]
 8043dbc:	18c0      	addlt	r0, r0, r3
 8043dbe:	4770      	bx	lr

08043dc0 <_gettimeofday>:
 8043dc0:	4b02      	ldr	r3, [pc, #8]	; (8043dcc <_gettimeofday+0xc>)
 8043dc2:	2258      	movs	r2, #88	; 0x58
 8043dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8043dc8:	601a      	str	r2, [r3, #0]
 8043dca:	4770      	bx	lr
 8043dcc:	20018198 	.word	0x20018198

08043dd0 <_init>:
 8043dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8043dd2:	bf00      	nop
 8043dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8043dd6:	bc08      	pop	{r3}
 8043dd8:	469e      	mov	lr, r3
 8043dda:	4770      	bx	lr

08043ddc <_fini>:
 8043ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8043dde:	bf00      	nop
 8043de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8043de2:	bc08      	pop	{r3}
 8043de4:	469e      	mov	lr, r3
 8043de6:	4770      	bx	lr

08043de8 <__SECURE_SystemCoreClockUpdate_veneer>:
 8043de8:	b401      	push	{r0}
 8043dea:	4802      	ldr	r0, [pc, #8]	; (8043df4 <__SECURE_SystemCoreClockUpdate_veneer+0xc>)
 8043dec:	4684      	mov	ip, r0
 8043dee:	bc01      	pop	{r0}
 8043df0:	4760      	bx	ip
 8043df2:	bf00      	nop
 8043df4:	0c03e001 	.word	0x0c03e001
