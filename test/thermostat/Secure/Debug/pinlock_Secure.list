
pinlock_Secure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  0c000000  0c000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043c4  0c0001f4  0c0001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0c0045b8  0c0045b8  000145b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0c004638  0c004638  0002e020  2**0
                  CONTENTS
  4 .ARM          00000008  0c004638  0c004638  00014638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0c004640  0c004640  0002e020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0c004640  0c004640  00014640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0c004644  0c004644  00014644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  30000000  0c004648  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .gnu.sgstubs  00000020  0c03e000  0c03e000  0002e000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .bss          000000b8  30000074  30000074  00030074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  3000012c  3000012c  00030074  2**0
                  ALLOC
 12 .ARM.attributes 00000036  00000000  00000000  0002e020  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e543  00000000  00000000  0002e056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002141  00000000  00000000  0003c599  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bd8  00000000  00000000  0003e6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b10  00000000  00000000  0003f2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028b85  00000000  00000000  0003fdc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dd59  00000000  00000000  0006894d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00103618  00000000  00000000  000766a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00179cbe  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000301c  00000000  00000000  00179d14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0c0001f4 <__do_global_dtors_aux>:
 c0001f4:	b510      	push	{r4, lr}
 c0001f6:	4c05      	ldr	r4, [pc, #20]	; (c00020c <__do_global_dtors_aux+0x18>)
 c0001f8:	7823      	ldrb	r3, [r4, #0]
 c0001fa:	b933      	cbnz	r3, c00020a <__do_global_dtors_aux+0x16>
 c0001fc:	4b04      	ldr	r3, [pc, #16]	; (c000210 <__do_global_dtors_aux+0x1c>)
 c0001fe:	b113      	cbz	r3, c000206 <__do_global_dtors_aux+0x12>
 c000200:	4804      	ldr	r0, [pc, #16]	; (c000214 <__do_global_dtors_aux+0x20>)
 c000202:	e000      	b.n	c000206 <__do_global_dtors_aux+0x12>
 c000204:	bf00      	nop
 c000206:	2301      	movs	r3, #1
 c000208:	7023      	strb	r3, [r4, #0]
 c00020a:	bd10      	pop	{r4, pc}
 c00020c:	30000074 	.word	0x30000074
 c000210:	00000000 	.word	0x00000000
 c000214:	0c0045a0 	.word	0x0c0045a0

0c000218 <frame_dummy>:
 c000218:	b508      	push	{r3, lr}
 c00021a:	4b03      	ldr	r3, [pc, #12]	; (c000228 <frame_dummy+0x10>)
 c00021c:	b11b      	cbz	r3, c000226 <frame_dummy+0xe>
 c00021e:	4903      	ldr	r1, [pc, #12]	; (c00022c <frame_dummy+0x14>)
 c000220:	4803      	ldr	r0, [pc, #12]	; (c000230 <frame_dummy+0x18>)
 c000222:	e000      	b.n	c000226 <frame_dummy+0xe>
 c000224:	bf00      	nop
 c000226:	bd08      	pop	{r3, pc}
 c000228:	00000000 	.word	0x00000000
 c00022c:	30000078 	.word	0x30000078
 c000230:	0c0045a0 	.word	0x0c0045a0

0c000234 <strcmp>:
 c000234:	f810 2b01 	ldrb.w	r2, [r0], #1
 c000238:	f811 3b01 	ldrb.w	r3, [r1], #1
 c00023c:	2a01      	cmp	r2, #1
 c00023e:	bf28      	it	cs
 c000240:	429a      	cmpcs	r2, r3
 c000242:	d0f7      	beq.n	c000234 <strcmp>
 c000244:	1ad0      	subs	r0, r2, r3
 c000246:	4770      	bx	lr

0c000248 <__gnu_cmse_nonsecure_call>:
 c000248:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
 c00024c:	4627      	mov	r7, r4
 c00024e:	46a0      	mov	r8, r4
 c000250:	46a1      	mov	r9, r4
 c000252:	46a2      	mov	sl, r4
 c000254:	46a3      	mov	fp, r4
 c000256:	46a4      	mov	ip, r4
 c000258:	ed2d 8b10 	vpush	{d8-d15}
 c00025c:	f04f 0500 	mov.w	r5, #0
 c000260:	ec45 5b18 	vmov	d8, r5, r5
 c000264:	ec45 5a19 	vmov	s18, s19, r5, r5
 c000268:	ec45 5a1a 	vmov	s20, s21, r5, r5
 c00026c:	ec45 5a1b 	vmov	s22, s23, r5, r5
 c000270:	ec45 5a1c 	vmov	s24, s25, r5, r5
 c000274:	ec45 5a1d 	vmov	s26, s27, r5, r5
 c000278:	ec45 5a1e 	vmov	s28, s29, r5, r5
 c00027c:	ec45 5a1f 	vmov	s30, s31, r5, r5
 c000280:	eef1 5a10 	vmrs	r5, fpscr
 c000284:	f64f 7660 	movw	r6, #65376	; 0xff60
 c000288:	f6c0 76ff 	movt	r6, #4095	; 0xfff
 c00028c:	4035      	ands	r5, r6
 c00028e:	eee1 5a10 	vmsr	fpscr, r5
 c000292:	f384 8800 	msr	CPSR_f, r4
 c000296:	4625      	mov	r5, r4
 c000298:	4626      	mov	r6, r4
 c00029a:	47a4      	blxns	r4
 c00029c:	ecbd 8b10 	vpop	{d8-d15}
 c0002a0:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

0c0002a4 <__aeabi_uldivmod>:
 c0002a4:	b953      	cbnz	r3, c0002bc <__aeabi_uldivmod+0x18>
 c0002a6:	b94a      	cbnz	r2, c0002bc <__aeabi_uldivmod+0x18>
 c0002a8:	2900      	cmp	r1, #0
 c0002aa:	bf08      	it	eq
 c0002ac:	2800      	cmpeq	r0, #0
 c0002ae:	bf1c      	itt	ne
 c0002b0:	f04f 31ff 	movne.w	r1, #4294967295
 c0002b4:	f04f 30ff 	movne.w	r0, #4294967295
 c0002b8:	f000 b980 	b.w	c0005bc <__aeabi_idiv0>
 c0002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 c0002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 c0002c4:	f000 f806 	bl	c0002d4 <__udivmoddi4>
 c0002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 c0002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 c0002d0:	b004      	add	sp, #16
 c0002d2:	4770      	bx	lr

0c0002d4 <__udivmoddi4>:
 c0002d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c0002d8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 c0002da:	4604      	mov	r4, r0
 c0002dc:	4688      	mov	r8, r1
 c0002de:	2b00      	cmp	r3, #0
 c0002e0:	f040 8084 	bne.w	c0003ec <__udivmoddi4+0x118>
 c0002e4:	428a      	cmp	r2, r1
 c0002e6:	4617      	mov	r7, r2
 c0002e8:	d943      	bls.n	c000372 <__udivmoddi4+0x9e>
 c0002ea:	fab2 f282 	clz	r2, r2
 c0002ee:	b142      	cbz	r2, c000302 <__udivmoddi4+0x2e>
 c0002f0:	f1c2 0020 	rsb	r0, r2, #32
 c0002f4:	4091      	lsls	r1, r2
 c0002f6:	4097      	lsls	r7, r2
 c0002f8:	fa24 f000 	lsr.w	r0, r4, r0
 c0002fc:	4094      	lsls	r4, r2
 c0002fe:	ea40 0801 	orr.w	r8, r0, r1
 c000302:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 c000306:	0c23      	lsrs	r3, r4, #16
 c000308:	fa1f fe87 	uxth.w	lr, r7
 c00030c:	fbb8 f6fc 	udiv	r6, r8, ip
 c000310:	fb0c 8116 	mls	r1, ip, r6, r8
 c000314:	fb06 f00e 	mul.w	r0, r6, lr
 c000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 c00031c:	4298      	cmp	r0, r3
 c00031e:	d907      	bls.n	c000330 <__udivmoddi4+0x5c>
 c000320:	18fb      	adds	r3, r7, r3
 c000322:	f106 31ff 	add.w	r1, r6, #4294967295
 c000326:	d202      	bcs.n	c00032e <__udivmoddi4+0x5a>
 c000328:	4298      	cmp	r0, r3
 c00032a:	f200 8131 	bhi.w	c000590 <__udivmoddi4+0x2bc>
 c00032e:	460e      	mov	r6, r1
 c000330:	1a19      	subs	r1, r3, r0
 c000332:	b2a3      	uxth	r3, r4
 c000334:	fbb1 f0fc 	udiv	r0, r1, ip
 c000338:	fb0c 1110 	mls	r1, ip, r0, r1
 c00033c:	fb00 fe0e 	mul.w	lr, r0, lr
 c000340:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 c000344:	45a6      	cmp	lr, r4
 c000346:	d907      	bls.n	c000358 <__udivmoddi4+0x84>
 c000348:	193c      	adds	r4, r7, r4
 c00034a:	f100 33ff 	add.w	r3, r0, #4294967295
 c00034e:	d202      	bcs.n	c000356 <__udivmoddi4+0x82>
 c000350:	45a6      	cmp	lr, r4
 c000352:	f200 811a 	bhi.w	c00058a <__udivmoddi4+0x2b6>
 c000356:	4618      	mov	r0, r3
 c000358:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 c00035c:	eba4 040e 	sub.w	r4, r4, lr
 c000360:	2600      	movs	r6, #0
 c000362:	b11d      	cbz	r5, c00036c <__udivmoddi4+0x98>
 c000364:	40d4      	lsrs	r4, r2
 c000366:	2300      	movs	r3, #0
 c000368:	e9c5 4300 	strd	r4, r3, [r5]
 c00036c:	4631      	mov	r1, r6
 c00036e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c000372:	b902      	cbnz	r2, c000376 <__udivmoddi4+0xa2>
 c000374:	deff      	udf	#255	; 0xff
 c000376:	fab2 f282 	clz	r2, r2
 c00037a:	2a00      	cmp	r2, #0
 c00037c:	d152      	bne.n	c000424 <__udivmoddi4+0x150>
 c00037e:	1bcb      	subs	r3, r1, r7
 c000380:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 c000384:	fa1f f887 	uxth.w	r8, r7
 c000388:	2601      	movs	r6, #1
 c00038a:	0c21      	lsrs	r1, r4, #16
 c00038c:	fbb3 fcfe 	udiv	ip, r3, lr
 c000390:	fb0e 301c 	mls	r0, lr, ip, r3
 c000394:	fb08 f90c 	mul.w	r9, r8, ip
 c000398:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 c00039c:	4589      	cmp	r9, r1
 c00039e:	d90b      	bls.n	c0003b8 <__udivmoddi4+0xe4>
 c0003a0:	1879      	adds	r1, r7, r1
 c0003a2:	f10c 33ff 	add.w	r3, ip, #4294967295
 c0003a6:	bf2c      	ite	cs
 c0003a8:	2001      	movcs	r0, #1
 c0003aa:	2000      	movcc	r0, #0
 c0003ac:	4589      	cmp	r9, r1
 c0003ae:	d902      	bls.n	c0003b6 <__udivmoddi4+0xe2>
 c0003b0:	2800      	cmp	r0, #0
 c0003b2:	f000 80f0 	beq.w	c000596 <__udivmoddi4+0x2c2>
 c0003b6:	469c      	mov	ip, r3
 c0003b8:	eba1 0109 	sub.w	r1, r1, r9
 c0003bc:	b2a3      	uxth	r3, r4
 c0003be:	fbb1 f0fe 	udiv	r0, r1, lr
 c0003c2:	fb0e 1110 	mls	r1, lr, r0, r1
 c0003c6:	fb08 f800 	mul.w	r8, r8, r0
 c0003ca:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 c0003ce:	45a0      	cmp	r8, r4
 c0003d0:	d907      	bls.n	c0003e2 <__udivmoddi4+0x10e>
 c0003d2:	193c      	adds	r4, r7, r4
 c0003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 c0003d8:	d202      	bcs.n	c0003e0 <__udivmoddi4+0x10c>
 c0003da:	45a0      	cmp	r8, r4
 c0003dc:	f200 80d2 	bhi.w	c000584 <__udivmoddi4+0x2b0>
 c0003e0:	4618      	mov	r0, r3
 c0003e2:	eba4 0408 	sub.w	r4, r4, r8
 c0003e6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 c0003ea:	e7ba      	b.n	c000362 <__udivmoddi4+0x8e>
 c0003ec:	428b      	cmp	r3, r1
 c0003ee:	d909      	bls.n	c000404 <__udivmoddi4+0x130>
 c0003f0:	2d00      	cmp	r5, #0
 c0003f2:	f000 80be 	beq.w	c000572 <__udivmoddi4+0x29e>
 c0003f6:	2600      	movs	r6, #0
 c0003f8:	e9c5 0100 	strd	r0, r1, [r5]
 c0003fc:	4630      	mov	r0, r6
 c0003fe:	4631      	mov	r1, r6
 c000400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c000404:	fab3 f683 	clz	r6, r3
 c000408:	2e00      	cmp	r6, #0
 c00040a:	d14d      	bne.n	c0004a8 <__udivmoddi4+0x1d4>
 c00040c:	428b      	cmp	r3, r1
 c00040e:	f0c0 80b3 	bcc.w	c000578 <__udivmoddi4+0x2a4>
 c000412:	4282      	cmp	r2, r0
 c000414:	f240 80b0 	bls.w	c000578 <__udivmoddi4+0x2a4>
 c000418:	4630      	mov	r0, r6
 c00041a:	2d00      	cmp	r5, #0
 c00041c:	d0a6      	beq.n	c00036c <__udivmoddi4+0x98>
 c00041e:	e9c5 4800 	strd	r4, r8, [r5]
 c000422:	e7a3      	b.n	c00036c <__udivmoddi4+0x98>
 c000424:	4097      	lsls	r7, r2
 c000426:	f1c2 0320 	rsb	r3, r2, #32
 c00042a:	fa01 f002 	lsl.w	r0, r1, r2
 c00042e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 c000432:	40d9      	lsrs	r1, r3
 c000434:	fa24 f303 	lsr.w	r3, r4, r3
 c000438:	fa1f f887 	uxth.w	r8, r7
 c00043c:	4094      	lsls	r4, r2
 c00043e:	4303      	orrs	r3, r0
 c000440:	fbb1 f0fe 	udiv	r0, r1, lr
 c000444:	0c1e      	lsrs	r6, r3, #16
 c000446:	fb0e 1110 	mls	r1, lr, r0, r1
 c00044a:	fb00 fc08 	mul.w	ip, r0, r8
 c00044e:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
 c000452:	458c      	cmp	ip, r1
 c000454:	d90e      	bls.n	c000474 <__udivmoddi4+0x1a0>
 c000456:	1879      	adds	r1, r7, r1
 c000458:	f100 36ff 	add.w	r6, r0, #4294967295
 c00045c:	bf2c      	ite	cs
 c00045e:	f04f 0901 	movcs.w	r9, #1
 c000462:	f04f 0900 	movcc.w	r9, #0
 c000466:	458c      	cmp	ip, r1
 c000468:	d903      	bls.n	c000472 <__udivmoddi4+0x19e>
 c00046a:	f1b9 0f00 	cmp.w	r9, #0
 c00046e:	f000 8096 	beq.w	c00059e <__udivmoddi4+0x2ca>
 c000472:	4630      	mov	r0, r6
 c000474:	eba1 010c 	sub.w	r1, r1, ip
 c000478:	b29b      	uxth	r3, r3
 c00047a:	fbb1 f6fe 	udiv	r6, r1, lr
 c00047e:	fb0e 1116 	mls	r1, lr, r6, r1
 c000482:	fb06 fc08 	mul.w	ip, r6, r8
 c000486:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 c00048a:	458c      	cmp	ip, r1
 c00048c:	d907      	bls.n	c00049e <__udivmoddi4+0x1ca>
 c00048e:	1879      	adds	r1, r7, r1
 c000490:	f106 33ff 	add.w	r3, r6, #4294967295
 c000494:	d202      	bcs.n	c00049c <__udivmoddi4+0x1c8>
 c000496:	458c      	cmp	ip, r1
 c000498:	f200 8088 	bhi.w	c0005ac <__udivmoddi4+0x2d8>
 c00049c:	461e      	mov	r6, r3
 c00049e:	eba1 030c 	sub.w	r3, r1, ip
 c0004a2:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 c0004a6:	e770      	b.n	c00038a <__udivmoddi4+0xb6>
 c0004a8:	f1c6 0720 	rsb	r7, r6, #32
 c0004ac:	fa03 f406 	lsl.w	r4, r3, r6
 c0004b0:	fa02 fc06 	lsl.w	ip, r2, r6
 c0004b4:	fa01 fe06 	lsl.w	lr, r1, r6
 c0004b8:	40fa      	lsrs	r2, r7
 c0004ba:	fa20 f807 	lsr.w	r8, r0, r7
 c0004be:	40f9      	lsrs	r1, r7
 c0004c0:	fa00 f306 	lsl.w	r3, r0, r6
 c0004c4:	4322      	orrs	r2, r4
 c0004c6:	ea48 040e 	orr.w	r4, r8, lr
 c0004ca:	ea4f 4812 	mov.w	r8, r2, lsr #16
 c0004ce:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 c0004d2:	fa1f f982 	uxth.w	r9, r2
 c0004d6:	fbb1 faf8 	udiv	sl, r1, r8
 c0004da:	fb08 111a 	mls	r1, r8, sl, r1
 c0004de:	fb0a f009 	mul.w	r0, sl, r9
 c0004e2:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
 c0004e6:	4570      	cmp	r0, lr
 c0004e8:	d90e      	bls.n	c000508 <__udivmoddi4+0x234>
 c0004ea:	eb12 0e0e 	adds.w	lr, r2, lr
 c0004ee:	f10a 31ff 	add.w	r1, sl, #4294967295
 c0004f2:	bf2c      	ite	cs
 c0004f4:	f04f 0b01 	movcs.w	fp, #1
 c0004f8:	f04f 0b00 	movcc.w	fp, #0
 c0004fc:	4570      	cmp	r0, lr
 c0004fe:	d902      	bls.n	c000506 <__udivmoddi4+0x232>
 c000500:	f1bb 0f00 	cmp.w	fp, #0
 c000504:	d04e      	beq.n	c0005a4 <__udivmoddi4+0x2d0>
 c000506:	468a      	mov	sl, r1
 c000508:	ebae 0e00 	sub.w	lr, lr, r0
 c00050c:	b2a4      	uxth	r4, r4
 c00050e:	fbbe f0f8 	udiv	r0, lr, r8
 c000512:	fb08 ee10 	mls	lr, r8, r0, lr
 c000516:	fb00 f909 	mul.w	r9, r0, r9
 c00051a:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
 c00051e:	45f1      	cmp	r9, lr
 c000520:	d907      	bls.n	c000532 <__udivmoddi4+0x25e>
 c000522:	eb12 0e0e 	adds.w	lr, r2, lr
 c000526:	f100 31ff 	add.w	r1, r0, #4294967295
 c00052a:	d201      	bcs.n	c000530 <__udivmoddi4+0x25c>
 c00052c:	45f1      	cmp	r9, lr
 c00052e:	d840      	bhi.n	c0005b2 <__udivmoddi4+0x2de>
 c000530:	4608      	mov	r0, r1
 c000532:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
 c000536:	ebae 0e09 	sub.w	lr, lr, r9
 c00053a:	fba0 890c 	umull	r8, r9, r0, ip
 c00053e:	45ce      	cmp	lr, r9
 c000540:	4641      	mov	r1, r8
 c000542:	464c      	mov	r4, r9
 c000544:	d302      	bcc.n	c00054c <__udivmoddi4+0x278>
 c000546:	d106      	bne.n	c000556 <__udivmoddi4+0x282>
 c000548:	4543      	cmp	r3, r8
 c00054a:	d204      	bcs.n	c000556 <__udivmoddi4+0x282>
 c00054c:	3801      	subs	r0, #1
 c00054e:	ebb8 010c 	subs.w	r1, r8, ip
 c000552:	eb69 0402 	sbc.w	r4, r9, r2
 c000556:	b37d      	cbz	r5, c0005b8 <__udivmoddi4+0x2e4>
 c000558:	1a5a      	subs	r2, r3, r1
 c00055a:	eb6e 0e04 	sbc.w	lr, lr, r4
 c00055e:	40f2      	lsrs	r2, r6
 c000560:	fa0e f707 	lsl.w	r7, lr, r7
 c000564:	fa2e f306 	lsr.w	r3, lr, r6
 c000568:	2600      	movs	r6, #0
 c00056a:	4317      	orrs	r7, r2
 c00056c:	e9c5 7300 	strd	r7, r3, [r5]
 c000570:	e6fc      	b.n	c00036c <__udivmoddi4+0x98>
 c000572:	462e      	mov	r6, r5
 c000574:	4628      	mov	r0, r5
 c000576:	e6f9      	b.n	c00036c <__udivmoddi4+0x98>
 c000578:	1a84      	subs	r4, r0, r2
 c00057a:	eb61 0103 	sbc.w	r1, r1, r3
 c00057e:	2001      	movs	r0, #1
 c000580:	4688      	mov	r8, r1
 c000582:	e74a      	b.n	c00041a <__udivmoddi4+0x146>
 c000584:	3802      	subs	r0, #2
 c000586:	443c      	add	r4, r7
 c000588:	e72b      	b.n	c0003e2 <__udivmoddi4+0x10e>
 c00058a:	3802      	subs	r0, #2
 c00058c:	443c      	add	r4, r7
 c00058e:	e6e3      	b.n	c000358 <__udivmoddi4+0x84>
 c000590:	3e02      	subs	r6, #2
 c000592:	443b      	add	r3, r7
 c000594:	e6cc      	b.n	c000330 <__udivmoddi4+0x5c>
 c000596:	f1ac 0c02 	sub.w	ip, ip, #2
 c00059a:	4439      	add	r1, r7
 c00059c:	e70c      	b.n	c0003b8 <__udivmoddi4+0xe4>
 c00059e:	3802      	subs	r0, #2
 c0005a0:	4439      	add	r1, r7
 c0005a2:	e767      	b.n	c000474 <__udivmoddi4+0x1a0>
 c0005a4:	f1aa 0a02 	sub.w	sl, sl, #2
 c0005a8:	4496      	add	lr, r2
 c0005aa:	e7ad      	b.n	c000508 <__udivmoddi4+0x234>
 c0005ac:	3e02      	subs	r6, #2
 c0005ae:	4439      	add	r1, r7
 c0005b0:	e775      	b.n	c00049e <__udivmoddi4+0x1ca>
 c0005b2:	3802      	subs	r0, #2
 c0005b4:	4496      	add	lr, r2
 c0005b6:	e7bc      	b.n	c000532 <__udivmoddi4+0x25e>
 c0005b8:	462e      	mov	r6, r5
 c0005ba:	e6d7      	b.n	c00036c <__udivmoddi4+0x98>

0c0005bc <__aeabi_idiv0>:
 c0005bc:	4770      	bx	lr
 c0005be:	bf00      	nop

0c0005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 c0005c0:	b580      	push	{r7, lr}
 c0005c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 c0005c4:	f000 fd2d 	bl	c001022 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 c0005c8:	f000 f84e 	bl	c000668 <SystemClock_Config>

  /* GTZC initialisation */
  MX_GTZC_Init();
 c0005cc:	f000 f89e 	bl	c00070c <MX_GTZC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 c0005d0:	f000 f98c 	bl	c0008ec <MX_GPIO_Init>
  MX_USART3_UART_Init();
 c0005d4:	f000 f93e 	bl	c000854 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /*************** Setup and jump to non-secure *******************************/

  NonSecure_Init();
 c0005d8:	f000 f802 	bl	c0005e0 <NonSecure_Init>

  /* Non-secure software does not return, this code is not executed */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 c0005dc:	e7fe      	b.n	c0005dc <main+0x1c>
	...

0c0005e0 <NonSecure_Init>:
  *         This function is responsible for Non-secure initialization and switch
  *         to non-secure state
  * @retval None
  */
static void NonSecure_Init(void)
{
 c0005e0:	b590      	push	{r4, r7, lr}
 c0005e2:	b083      	sub	sp, #12
 c0005e4:	af00      	add	r7, sp, #0
  funcptr_NS NonSecure_ResetHandler;

  SCB_NS->VTOR = VTOR_TABLE_NS_START_ADDR;
 c0005e6:	4b1d      	ldr	r3, [pc, #116]	; (c00065c <NonSecure_Init+0x7c>)
 c0005e8:	4a1d      	ldr	r2, [pc, #116]	; (c000660 <NonSecure_Init+0x80>)
 c0005ea:	609a      	str	r2, [r3, #8]

  /* Set non-secure main stack (MSP_NS) */
  __TZ_set_MSP_NS((*(uint32_t *)VTOR_TABLE_NS_START_ADDR));
 c0005ec:	4b1c      	ldr	r3, [pc, #112]	; (c000660 <NonSecure_Init+0x80>)
 c0005ee:	681b      	ldr	r3, [r3, #0]
 c0005f0:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 c0005f2:	683b      	ldr	r3, [r7, #0]
 c0005f4:	f383 8888 	msr	MSP_NS, r3
}
 c0005f8:	bf00      	nop

  /* Get non-secure reset handler */
  NonSecure_ResetHandler = (funcptr_NS)(*((uint32_t *)((VTOR_TABLE_NS_START_ADDR) + 4U)));
 c0005fa:	4b1a      	ldr	r3, [pc, #104]	; (c000664 <NonSecure_Init+0x84>)
 c0005fc:	681b      	ldr	r3, [r3, #0]
 c0005fe:	607b      	str	r3, [r7, #4]

  /* Start non-secure state software application */
  NonSecure_ResetHandler();
 c000600:	687b      	ldr	r3, [r7, #4]
 c000602:	461c      	mov	r4, r3
 c000604:	0864      	lsrs	r4, r4, #1
 c000606:	0064      	lsls	r4, r4, #1
 c000608:	4620      	mov	r0, r4
 c00060a:	4621      	mov	r1, r4
 c00060c:	4622      	mov	r2, r4
 c00060e:	4623      	mov	r3, r4
 c000610:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c000614:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c000618:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c00061c:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c000620:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c000624:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c000628:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c00062c:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000630:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c000634:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000638:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c00063c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000640:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c000644:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000648:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c00064c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000650:	f7ff fdfa 	bl	c000248 <__gnu_cmse_nonsecure_call>
}
 c000654:	bf00      	nop
 c000656:	370c      	adds	r7, #12
 c000658:	46bd      	mov	sp, r7
 c00065a:	bd90      	pop	{r4, r7, pc}
 c00065c:	e002ed00 	.word	0xe002ed00
 c000660:	08040000 	.word	0x08040000
 c000664:	08040004 	.word	0x08040004

0c000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 c000668:	b580      	push	{r7, lr}
 c00066a:	b098      	sub	sp, #96	; 0x60
 c00066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 c00066e:	f107 0318 	add.w	r3, r7, #24
 c000672:	2248      	movs	r2, #72	; 0x48
 c000674:	2100      	movs	r1, #0
 c000676:	4618      	mov	r0, r3
 c000678:	f003 ff8a 	bl	c004590 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 c00067c:	1d3b      	adds	r3, r7, #4
 c00067e:	2200      	movs	r2, #0
 c000680:	601a      	str	r2, [r3, #0]
 c000682:	605a      	str	r2, [r3, #4]
 c000684:	609a      	str	r2, [r3, #8]
 c000686:	60da      	str	r2, [r3, #12]
 c000688:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 c00068a:	2000      	movs	r0, #0
 c00068c:	f001 fa2c 	bl	c001ae8 <HAL_PWREx_ControlVoltageScaling>
 c000690:	4603      	mov	r3, r0
 c000692:	2b00      	cmp	r3, #0
 c000694:	d001      	beq.n	c00069a <SystemClock_Config+0x32>
  {
    Error_Handler();
 c000696:	f000 f967 	bl	c000968 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 c00069a:	2310      	movs	r3, #16
 c00069c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 c00069e:	2301      	movs	r3, #1
 c0006a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 c0006a2:	2300      	movs	r3, #0
 c0006a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 c0006a6:	23b0      	movs	r3, #176	; 0xb0
 c0006a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 c0006aa:	2302      	movs	r3, #2
 c0006ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 c0006ae:	2301      	movs	r3, #1
 c0006b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 12;
 c0006b2:	230c      	movs	r3, #12
 c0006b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 c0006b6:	2337      	movs	r3, #55	; 0x37
 c0006b8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 c0006ba:	2307      	movs	r3, #7
 c0006bc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 c0006be:	2302      	movs	r3, #2
 c0006c0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 c0006c2:	2302      	movs	r3, #2
 c0006c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 c0006c6:	f107 0318 	add.w	r3, r7, #24
 c0006ca:	4618      	mov	r0, r3
 c0006cc:	f001 fa9c 	bl	c001c08 <HAL_RCC_OscConfig>
 c0006d0:	4603      	mov	r3, r0
 c0006d2:	2b00      	cmp	r3, #0
 c0006d4:	d001      	beq.n	c0006da <SystemClock_Config+0x72>
  {
    Error_Handler();
 c0006d6:	f000 f947 	bl	c000968 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 c0006da:	230f      	movs	r3, #15
 c0006dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 c0006de:	2303      	movs	r3, #3
 c0006e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 c0006e2:	2300      	movs	r3, #0
 c0006e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 c0006e6:	2300      	movs	r3, #0
 c0006e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 c0006ea:	2300      	movs	r3, #0
 c0006ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 c0006ee:	1d3b      	adds	r3, r7, #4
 c0006f0:	2105      	movs	r1, #5
 c0006f2:	4618      	mov	r0, r3
 c0006f4:	f001 feea 	bl	c0024cc <HAL_RCC_ClockConfig>
 c0006f8:	4603      	mov	r3, r0
 c0006fa:	2b00      	cmp	r3, #0
 c0006fc:	d001      	beq.n	c000702 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 c0006fe:	f000 f933 	bl	c000968 <Error_Handler>
  }
}
 c000702:	bf00      	nop
 c000704:	3760      	adds	r7, #96	; 0x60
 c000706:	46bd      	mov	sp, r7
 c000708:	bd80      	pop	{r7, pc}
	...

0c00070c <MX_GTZC_Init>:
  * @brief GTZC Initialization Function
  * @param None
  * @retval None
  */
static void MX_GTZC_Init(void)
{
 c00070c:	b580      	push	{r7, lr}
 c00070e:	b0b6      	sub	sp, #216	; 0xd8
 c000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN GTZC_Init 0 */

  /* USER CODE END GTZC_Init 0 */

  MPCBB_ConfigTypeDef MPCBB1_NonSecureArea_Desc = {0};
 c000712:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 c000716:	226c      	movs	r2, #108	; 0x6c
 c000718:	2100      	movs	r1, #0
 c00071a:	4618      	mov	r0, r3
 c00071c:	f003 ff38 	bl	c004590 <memset>
  MPCBB_ConfigTypeDef MPCBB2_NonSecureArea_Desc = {0};
 c000720:	463b      	mov	r3, r7
 c000722:	226c      	movs	r2, #108	; 0x6c
 c000724:	2100      	movs	r1, #0
 c000726:	4618      	mov	r0, r3
 c000728:	f003 ff32 	bl	c004590 <memset>

  /* USER CODE BEGIN GTZC_Init 1 */

  /* USER CODE END GTZC_Init 1 */
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_USART3, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c00072c:	f240 3101 	movw	r1, #769	; 0x301
 c000730:	200b      	movs	r0, #11
 c000732:	f001 f86f 	bl	c001814 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c000736:	4603      	mov	r3, r0
 c000738:	2b00      	cmp	r3, #0
 c00073a:	d001      	beq.n	c000740 <MX_GTZC_Init+0x34>
  {
    Error_Handler();
 c00073c:	f000 f914 	bl	c000968 <Error_Handler>
  }
  MPCBB1_NonSecureArea_Desc.SecureRWIllegalMode = GTZC_MPCBB_SRWILADIS_ENABLE;
 c000740:	2300      	movs	r3, #0
 c000742:	66fb      	str	r3, [r7, #108]	; 0x6c
  MPCBB1_NonSecureArea_Desc.InvertSecureState = GTZC_MPCBB_INVSECSTATE_NOT_INVERTED;
 c000744:	2300      	movs	r3, #0
 c000746:	673b      	str	r3, [r7, #112]	; 0x70
  MPCBB1_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0xFFFFFFFF;
 c000748:	f04f 33ff 	mov.w	r3, #4294967295
 c00074c:	677b      	str	r3, [r7, #116]	; 0x74
  MPCBB1_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0xFFFFFFFF;
 c00074e:	f04f 33ff 	mov.w	r3, #4294967295
 c000752:	67bb      	str	r3, [r7, #120]	; 0x78
  MPCBB1_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0xFFFFFFFF;
 c000754:	f04f 33ff 	mov.w	r3, #4294967295
 c000758:	67fb      	str	r3, [r7, #124]	; 0x7c
  MPCBB1_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0xFFFFFFFF;
 c00075a:	f04f 33ff 	mov.w	r3, #4294967295
 c00075e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  MPCBB1_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0xFFFFFFFF;
 c000762:	f04f 33ff 	mov.w	r3, #4294967295
 c000766:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  MPCBB1_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0xFFFFFFFF;
 c00076a:	f04f 33ff 	mov.w	r3, #4294967295
 c00076e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  MPCBB1_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0xFFFFFFFF;
 c000772:	f04f 33ff 	mov.w	r3, #4294967295
 c000776:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  MPCBB1_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0xFFFFFFFF;
 c00077a:	f04f 33ff 	mov.w	r3, #4294967295
 c00077e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  MPCBB1_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[8] =   0xFFFFFFFF;
 c000782:	f04f 33ff 	mov.w	r3, #4294967295
 c000786:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  MPCBB1_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[9] =   0xFFFFFFFF;
 c00078a:	f04f 33ff 	mov.w	r3, #4294967295
 c00078e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  MPCBB1_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[10] =   0xFFFFFFFF;
 c000792:	f04f 33ff 	mov.w	r3, #4294967295
 c000796:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  MPCBB1_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[11] =   0xFFFFFFFF;
 c00079a:	f04f 33ff 	mov.w	r3, #4294967295
 c00079e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  MPCBB1_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[12] =   0x00000000;
 c0007a2:	2300      	movs	r3, #0
 c0007a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  MPCBB1_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[13] =   0x00000000;
 c0007a8:	2300      	movs	r3, #0
 c0007aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  MPCBB1_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[14] =   0x00000000;
 c0007ae:	2300      	movs	r3, #0
 c0007b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  MPCBB1_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[15] =   0x00000000;
 c0007b4:	2300      	movs	r3, #0
 c0007b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  MPCBB1_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[16] =   0x00000000;
 c0007ba:	2300      	movs	r3, #0
 c0007bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  MPCBB1_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[17] =   0x00000000;
 c0007c0:	2300      	movs	r3, #0
 c0007c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  MPCBB1_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[18] =   0x00000000;
 c0007c6:	2300      	movs	r3, #0
 c0007c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  MPCBB1_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[19] =   0x00000000;
 c0007cc:	2300      	movs	r3, #0
 c0007ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  MPCBB1_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[20] =   0x00000000;
 c0007d2:	2300      	movs	r3, #0
 c0007d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  MPCBB1_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[21] =   0x00000000;
 c0007d8:	2300      	movs	r3, #0
 c0007da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  MPCBB1_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[22] =   0x00000000;
 c0007de:	2300      	movs	r3, #0
 c0007e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  MPCBB1_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[23] =   0x00000000;
 c0007e4:	2300      	movs	r3, #0
 c0007e6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  MPCBB1_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c0007ea:	2300      	movs	r3, #0
 c0007ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM1_BASE, &MPCBB1_NonSecureArea_Desc) != HAL_OK)
 c0007f0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 c0007f4:	4619      	mov	r1, r3
 c0007f6:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 c0007fa:	f001 f8e3 	bl	c0019c4 <HAL_GTZC_MPCBB_ConfigMem>
 c0007fe:	4603      	mov	r3, r0
 c000800:	2b00      	cmp	r3, #0
 c000802:	d001      	beq.n	c000808 <MX_GTZC_Init+0xfc>
  {
    Error_Handler();
 c000804:	f000 f8b0 	bl	c000968 <Error_Handler>
  }
  MPCBB2_NonSecureArea_Desc.SecureRWIllegalMode = GTZC_MPCBB_SRWILADIS_ENABLE;
 c000808:	2300      	movs	r3, #0
 c00080a:	603b      	str	r3, [r7, #0]
  MPCBB2_NonSecureArea_Desc.InvertSecureState = GTZC_MPCBB_INVSECSTATE_NOT_INVERTED;
 c00080c:	2300      	movs	r3, #0
 c00080e:	607b      	str	r3, [r7, #4]
  MPCBB2_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0x00000000;
 c000810:	2300      	movs	r3, #0
 c000812:	60bb      	str	r3, [r7, #8]
  MPCBB2_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0x00000000;
 c000814:	2300      	movs	r3, #0
 c000816:	60fb      	str	r3, [r7, #12]
  MPCBB2_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0x00000000;
 c000818:	2300      	movs	r3, #0
 c00081a:	613b      	str	r3, [r7, #16]
  MPCBB2_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0x00000000;
 c00081c:	2300      	movs	r3, #0
 c00081e:	617b      	str	r3, [r7, #20]
  MPCBB2_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0x00000000;
 c000820:	2300      	movs	r3, #0
 c000822:	61bb      	str	r3, [r7, #24]
  MPCBB2_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0x00000000;
 c000824:	2300      	movs	r3, #0
 c000826:	61fb      	str	r3, [r7, #28]
  MPCBB2_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0x00000000;
 c000828:	2300      	movs	r3, #0
 c00082a:	623b      	str	r3, [r7, #32]
  MPCBB2_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0x00000000;
 c00082c:	2300      	movs	r3, #0
 c00082e:	627b      	str	r3, [r7, #36]	; 0x24
  MPCBB2_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c000830:	2300      	movs	r3, #0
 c000832:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM2_BASE, &MPCBB2_NonSecureArea_Desc) != HAL_OK)
 c000834:	463b      	mov	r3, r7
 c000836:	4619      	mov	r1, r3
 c000838:	4805      	ldr	r0, [pc, #20]	; (c000850 <MX_GTZC_Init+0x144>)
 c00083a:	f001 f8c3 	bl	c0019c4 <HAL_GTZC_MPCBB_ConfigMem>
 c00083e:	4603      	mov	r3, r0
 c000840:	2b00      	cmp	r3, #0
 c000842:	d001      	beq.n	c000848 <MX_GTZC_Init+0x13c>
  {
    Error_Handler();
 c000844:	f000 f890 	bl	c000968 <Error_Handler>
  }
  /* USER CODE BEGIN GTZC_Init 2 */

  /* USER CODE END GTZC_Init 2 */

}
 c000848:	bf00      	nop
 c00084a:	37d8      	adds	r7, #216	; 0xd8
 c00084c:	46bd      	mov	sp, r7
 c00084e:	bd80      	pop	{r7, pc}
 c000850:	30030000 	.word	0x30030000

0c000854 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 c000854:	b580      	push	{r7, lr}
 c000856:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 c000858:	4b22      	ldr	r3, [pc, #136]	; (c0008e4 <MX_USART3_UART_Init+0x90>)
 c00085a:	4a23      	ldr	r2, [pc, #140]	; (c0008e8 <MX_USART3_UART_Init+0x94>)
 c00085c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 c00085e:	4b21      	ldr	r3, [pc, #132]	; (c0008e4 <MX_USART3_UART_Init+0x90>)
 c000860:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 c000864:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 c000866:	4b1f      	ldr	r3, [pc, #124]	; (c0008e4 <MX_USART3_UART_Init+0x90>)
 c000868:	2200      	movs	r2, #0
 c00086a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 c00086c:	4b1d      	ldr	r3, [pc, #116]	; (c0008e4 <MX_USART3_UART_Init+0x90>)
 c00086e:	2200      	movs	r2, #0
 c000870:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 c000872:	4b1c      	ldr	r3, [pc, #112]	; (c0008e4 <MX_USART3_UART_Init+0x90>)
 c000874:	2200      	movs	r2, #0
 c000876:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 c000878:	4b1a      	ldr	r3, [pc, #104]	; (c0008e4 <MX_USART3_UART_Init+0x90>)
 c00087a:	220c      	movs	r2, #12
 c00087c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 c00087e:	4b19      	ldr	r3, [pc, #100]	; (c0008e4 <MX_USART3_UART_Init+0x90>)
 c000880:	2200      	movs	r2, #0
 c000882:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 c000884:	4b17      	ldr	r3, [pc, #92]	; (c0008e4 <MX_USART3_UART_Init+0x90>)
 c000886:	2200      	movs	r2, #0
 c000888:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 c00088a:	4b16      	ldr	r3, [pc, #88]	; (c0008e4 <MX_USART3_UART_Init+0x90>)
 c00088c:	2200      	movs	r2, #0
 c00088e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 c000890:	4b14      	ldr	r3, [pc, #80]	; (c0008e4 <MX_USART3_UART_Init+0x90>)
 c000892:	2200      	movs	r2, #0
 c000894:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 c000896:	4b13      	ldr	r3, [pc, #76]	; (c0008e4 <MX_USART3_UART_Init+0x90>)
 c000898:	2200      	movs	r2, #0
 c00089a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 c00089c:	4811      	ldr	r0, [pc, #68]	; (c0008e4 <MX_USART3_UART_Init+0x90>)
 c00089e:	f002 fdd3 	bl	c003448 <HAL_UART_Init>
 c0008a2:	4603      	mov	r3, r0
 c0008a4:	2b00      	cmp	r3, #0
 c0008a6:	d001      	beq.n	c0008ac <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 c0008a8:	f000 f85e 	bl	c000968 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 c0008ac:	2100      	movs	r1, #0
 c0008ae:	480d      	ldr	r0, [pc, #52]	; (c0008e4 <MX_USART3_UART_Init+0x90>)
 c0008b0:	f003 fd66 	bl	c004380 <HAL_UARTEx_SetTxFifoThreshold>
 c0008b4:	4603      	mov	r3, r0
 c0008b6:	2b00      	cmp	r3, #0
 c0008b8:	d001      	beq.n	c0008be <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 c0008ba:	f000 f855 	bl	c000968 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 c0008be:	2100      	movs	r1, #0
 c0008c0:	4808      	ldr	r0, [pc, #32]	; (c0008e4 <MX_USART3_UART_Init+0x90>)
 c0008c2:	f003 fd9b 	bl	c0043fc <HAL_UARTEx_SetRxFifoThreshold>
 c0008c6:	4603      	mov	r3, r0
 c0008c8:	2b00      	cmp	r3, #0
 c0008ca:	d001      	beq.n	c0008d0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 c0008cc:	f000 f84c 	bl	c000968 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 c0008d0:	4804      	ldr	r0, [pc, #16]	; (c0008e4 <MX_USART3_UART_Init+0x90>)
 c0008d2:	f003 fd1c 	bl	c00430e <HAL_UARTEx_DisableFifoMode>
 c0008d6:	4603      	mov	r3, r0
 c0008d8:	2b00      	cmp	r3, #0
 c0008da:	d001      	beq.n	c0008e0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 c0008dc:	f000 f844 	bl	c000968 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 c0008e0:	bf00      	nop
 c0008e2:	bd80      	pop	{r7, pc}
 c0008e4:	30000098 	.word	0x30000098
 c0008e8:	50004800 	.word	0x50004800

0c0008ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 c0008ec:	b580      	push	{r7, lr}
 c0008ee:	b084      	sub	sp, #16
 c0008f0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 c0008f2:	4b1a      	ldr	r3, [pc, #104]	; (c00095c <MX_GPIO_Init+0x70>)
 c0008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0008f6:	4a19      	ldr	r2, [pc, #100]	; (c00095c <MX_GPIO_Init+0x70>)
 c0008f8:	f043 0304 	orr.w	r3, r3, #4
 c0008fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 c0008fe:	4b17      	ldr	r3, [pc, #92]	; (c00095c <MX_GPIO_Init+0x70>)
 c000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000902:	f003 0304 	and.w	r3, r3, #4
 c000906:	60fb      	str	r3, [r7, #12]
 c000908:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 c00090a:	4b14      	ldr	r3, [pc, #80]	; (c00095c <MX_GPIO_Init+0x70>)
 c00090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00090e:	4a13      	ldr	r2, [pc, #76]	; (c00095c <MX_GPIO_Init+0x70>)
 c000910:	f043 0302 	orr.w	r3, r3, #2
 c000914:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000916:	4b11      	ldr	r3, [pc, #68]	; (c00095c <MX_GPIO_Init+0x70>)
 c000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00091a:	f003 0302 	and.w	r3, r3, #2
 c00091e:	60bb      	str	r3, [r7, #8]
 c000920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 c000922:	4b0e      	ldr	r3, [pc, #56]	; (c00095c <MX_GPIO_Init+0x70>)
 c000924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000926:	4a0d      	ldr	r2, [pc, #52]	; (c00095c <MX_GPIO_Init+0x70>)
 c000928:	f043 0301 	orr.w	r3, r3, #1
 c00092c:	64d3      	str	r3, [r2, #76]	; 0x4c
 c00092e:	4b0b      	ldr	r3, [pc, #44]	; (c00095c <MX_GPIO_Init+0x70>)
 c000930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000932:	f003 0301 	and.w	r3, r3, #1
 c000936:	607b      	str	r3, [r7, #4]
 c000938:	687b      	ldr	r3, [r7, #4]

  /*IO attributes management functions */
  HAL_GPIO_ConfigPinAttributes(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_NSEC);
 c00093a:	2200      	movs	r2, #0
 c00093c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 c000940:	4807      	ldr	r0, [pc, #28]	; (c000960 <MX_GPIO_Init+0x74>)
 c000942:	f000 ff2f 	bl	c0017a4 <HAL_GPIO_ConfigPinAttributes>

  /*IO attributes management functions */
  HAL_GPIO_ConfigPinAttributes(GPIOA, USART1_TX_Pin|USART1_RX_Pin, GPIO_PIN_NSEC);
 c000946:	2200      	movs	r2, #0
 c000948:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 c00094c:	4805      	ldr	r0, [pc, #20]	; (c000964 <MX_GPIO_Init+0x78>)
 c00094e:	f000 ff29 	bl	c0017a4 <HAL_GPIO_ConfigPinAttributes>

}
 c000952:	bf00      	nop
 c000954:	3710      	adds	r7, #16
 c000956:	46bd      	mov	sp, r7
 c000958:	bd80      	pop	{r7, pc}
 c00095a:	bf00      	nop
 c00095c:	50021000 	.word	0x50021000
 c000960:	52020800 	.word	0x52020800
 c000964:	52020000 	.word	0x52020000

0c000968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 c000968:	b480      	push	{r7}
 c00096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 c00096c:	bf00      	nop
 c00096e:	46bd      	mov	sp, r7
 c000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000974:	4770      	bx	lr
	...

0c000978 <__acle_se_SECURE_RegisterCallback>:
  * @param  CallbackId  callback identifier
  * @param  func        pointer to non-secure function
  * @retval None
  */
CMSE_NS_ENTRY void SECURE_RegisterCallback(SECURE_CallbackIDTypeDef CallbackId, void *func)
{
 c000978:	b480      	push	{r7}
 c00097a:	b083      	sub	sp, #12
 c00097c:	af00      	add	r7, sp, #0
 c00097e:	4603      	mov	r3, r0
 c000980:	6039      	str	r1, [r7, #0]
 c000982:	71fb      	strb	r3, [r7, #7]
  if(func != NULL)
 c000984:	683b      	ldr	r3, [r7, #0]
 c000986:	2b00      	cmp	r3, #0
 c000988:	d00d      	beq.n	c0009a6 <__acle_se_SECURE_RegisterCallback+0x2e>
  {
    switch(CallbackId)
 c00098a:	79fb      	ldrb	r3, [r7, #7]
 c00098c:	2b00      	cmp	r3, #0
 c00098e:	d002      	beq.n	c000996 <__acle_se_SECURE_RegisterCallback+0x1e>
 c000990:	2b01      	cmp	r3, #1
 c000992:	d004      	beq.n	c00099e <__acle_se_SECURE_RegisterCallback+0x26>
      case GTZC_ERROR_CB_ID:             /* GTZC Interrupt occurred */
        pSecureErrorCallback = func;
        break;
      default:
        /* unknown */
        break;
 c000994:	e008      	b.n	c0009a8 <__acle_se_SECURE_RegisterCallback+0x30>
        pSecureFaultCallback = func;
 c000996:	4a21      	ldr	r2, [pc, #132]	; (c000a1c <__acle_se_SECURE_RegisterCallback+0xa4>)
 c000998:	683b      	ldr	r3, [r7, #0]
 c00099a:	6013      	str	r3, [r2, #0]
        break;
 c00099c:	e004      	b.n	c0009a8 <__acle_se_SECURE_RegisterCallback+0x30>
        pSecureErrorCallback = func;
 c00099e:	4a20      	ldr	r2, [pc, #128]	; (c000a20 <__acle_se_SECURE_RegisterCallback+0xa8>)
 c0009a0:	683b      	ldr	r3, [r7, #0]
 c0009a2:	6013      	str	r3, [r2, #0]
        break;
 c0009a4:	e000      	b.n	c0009a8 <__acle_se_SECURE_RegisterCallback+0x30>
    }
  }
 c0009a6:	bf00      	nop
}
 c0009a8:	bf00      	nop
 c0009aa:	370c      	adds	r7, #12
 c0009ac:	46bd      	mov	sp, r7
 c0009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0009b2:	4670      	mov	r0, lr
 c0009b4:	4671      	mov	r1, lr
 c0009b6:	4672      	mov	r2, lr
 c0009b8:	4673      	mov	r3, lr
 c0009ba:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0009be:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0009c2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0009c6:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0009ca:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0009ce:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0009d2:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0009d6:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0009da:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0009de:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c0009e2:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c0009e6:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0009ea:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c0009ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0009f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c0009f6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c0009fa:	f38e 8c00 	msr	CPSR_fs, lr
 c0009fe:	b410      	push	{r4}
 c000a00:	eef1 ca10 	vmrs	ip, fpscr
 c000a04:	f64f 7460 	movw	r4, #65376	; 0xff60
 c000a08:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c000a0c:	ea0c 0c04 	and.w	ip, ip, r4
 c000a10:	eee1 ca10 	vmsr	fpscr, ip
 c000a14:	bc10      	pop	{r4}
 c000a16:	46f4      	mov	ip, lr
 c000a18:	4774      	bxns	lr
 c000a1a:	bf00      	nop
 c000a1c:	30000090 	.word	0x30000090
 c000a20:	30000094 	.word	0x30000094

0c000a24 <__acle_se_trust_interface>:

struct WhiteList WL[4] = {{"get_temp", {0}}, {"check_temp", {0}},
						  {"get_humidity", {0}}, {"get_new_temp", {0}}};

CMSE_NS_ENTRY int trust_interface(char *endfunc, int id)
{
 c000a24:	b580      	push	{r7, lr}
 c000a26:	b084      	sub	sp, #16
 c000a28:	af00      	add	r7, sp, #0
 c000a2a:	6078      	str	r0, [r7, #4]
 c000a2c:	6039      	str	r1, [r7, #0]
	for(int i=0; i<WLnum; i++)
 c000a2e:	2300      	movs	r3, #0
 c000a30:	60fb      	str	r3, [r7, #12]
 c000a32:	e02e      	b.n	c000a92 <__acle_se_trust_interface+0x6e>
	{
		if(strcmp(endfunc, WL[i].endpoint)==0)
 c000a34:	68fa      	ldr	r2, [r7, #12]
 c000a36:	4613      	mov	r3, r2
 c000a38:	005b      	lsls	r3, r3, #1
 c000a3a:	4413      	add	r3, r2
 c000a3c:	00db      	lsls	r3, r3, #3
 c000a3e:	4a34      	ldr	r2, [pc, #208]	; (c000b10 <__acle_se_trust_interface+0xec>)
 c000a40:	4413      	add	r3, r2
 c000a42:	4619      	mov	r1, r3
 c000a44:	6878      	ldr	r0, [r7, #4]
 c000a46:	f7ff fbf5 	bl	c000234 <strcmp>
 c000a4a:	4603      	mov	r3, r0
 c000a4c:	2b00      	cmp	r3, #0
 c000a4e:	d11d      	bne.n	c000a8c <__acle_se_trust_interface+0x68>
		{
			for(int j=0; j<idnum; j++)
 c000a50:	2300      	movs	r3, #0
 c000a52:	60bb      	str	r3, [r7, #8]
 c000a54:	e013      	b.n	c000a7e <__acle_se_trust_interface+0x5a>
			{
				if(id==WL[i].id[j])
 c000a56:	492e      	ldr	r1, [pc, #184]	; (c000b10 <__acle_se_trust_interface+0xec>)
 c000a58:	68fa      	ldr	r2, [r7, #12]
 c000a5a:	4613      	mov	r3, r2
 c000a5c:	005b      	lsls	r3, r3, #1
 c000a5e:	4413      	add	r3, r2
 c000a60:	005b      	lsls	r3, r3, #1
 c000a62:	68ba      	ldr	r2, [r7, #8]
 c000a64:	4413      	add	r3, r2
 c000a66:	3304      	adds	r3, #4
 c000a68:	009b      	lsls	r3, r3, #2
 c000a6a:	440b      	add	r3, r1
 c000a6c:	685b      	ldr	r3, [r3, #4]
 c000a6e:	683a      	ldr	r2, [r7, #0]
 c000a70:	429a      	cmp	r2, r3
 c000a72:	d101      	bne.n	c000a78 <__acle_se_trust_interface+0x54>
				{
					return 1;
 c000a74:	2301      	movs	r3, #1
 c000a76:	e012      	b.n	c000a9e <__acle_se_trust_interface+0x7a>
			for(int j=0; j<idnum; j++)
 c000a78:	68bb      	ldr	r3, [r7, #8]
 c000a7a:	3301      	adds	r3, #1
 c000a7c:	60bb      	str	r3, [r7, #8]
 c000a7e:	4b25      	ldr	r3, [pc, #148]	; (c000b14 <__acle_se_trust_interface+0xf0>)
 c000a80:	681b      	ldr	r3, [r3, #0]
 c000a82:	68ba      	ldr	r2, [r7, #8]
 c000a84:	429a      	cmp	r2, r3
 c000a86:	dbe6      	blt.n	c000a56 <__acle_se_trust_interface+0x32>
				}
			}
			return 0;
 c000a88:	2300      	movs	r3, #0
 c000a8a:	e008      	b.n	c000a9e <__acle_se_trust_interface+0x7a>
	for(int i=0; i<WLnum; i++)
 c000a8c:	68fb      	ldr	r3, [r7, #12]
 c000a8e:	3301      	adds	r3, #1
 c000a90:	60fb      	str	r3, [r7, #12]
 c000a92:	4b21      	ldr	r3, [pc, #132]	; (c000b18 <__acle_se_trust_interface+0xf4>)
 c000a94:	681b      	ldr	r3, [r3, #0]
 c000a96:	68fa      	ldr	r2, [r7, #12]
 c000a98:	429a      	cmp	r2, r3
 c000a9a:	dbcb      	blt.n	c000a34 <__acle_se_trust_interface+0x10>
		}
	}
	return 0;
 c000a9c:	2300      	movs	r3, #0
}
 c000a9e:	4618      	mov	r0, r3
 c000aa0:	3710      	adds	r7, #16
 c000aa2:	46bd      	mov	sp, r7
 c000aa4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c000aa8:	4671      	mov	r1, lr
 c000aaa:	4672      	mov	r2, lr
 c000aac:	4673      	mov	r3, lr
 c000aae:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c000ab2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c000ab6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c000aba:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c000abe:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c000ac2:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c000ac6:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c000aca:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000ace:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c000ad2:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000ad6:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000ada:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000ade:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c000ae2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000ae6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000aea:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000aee:	f38e 8c00 	msr	CPSR_fs, lr
 c000af2:	b410      	push	{r4}
 c000af4:	eef1 ca10 	vmrs	ip, fpscr
 c000af8:	f64f 7460 	movw	r4, #65376	; 0xff60
 c000afc:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c000b00:	ea0c 0c04 	and.w	ip, ip, r4
 c000b04:	eee1 ca10 	vmsr	fpscr, ip
 c000b08:	bc10      	pop	{r4}
 c000b0a:	46f4      	mov	ip, lr
 c000b0c:	4774      	bxns	lr
 c000b0e:	bf00      	nop
 c000b10:	30000008 	.word	0x30000008
 c000b14:	30000000 	.word	0x30000000
 c000b18:	30000004 	.word	0x30000004

0c000b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 c000b1c:	b580      	push	{r7, lr}
 c000b1e:	b084      	sub	sp, #16
 c000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 c000b22:	4b15      	ldr	r3, [pc, #84]	; (c000b78 <HAL_MspInit+0x5c>)
 c000b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c000b26:	4a14      	ldr	r2, [pc, #80]	; (c000b78 <HAL_MspInit+0x5c>)
 c000b28:	f043 0301 	orr.w	r3, r3, #1
 c000b2c:	6613      	str	r3, [r2, #96]	; 0x60
 c000b2e:	4b12      	ldr	r3, [pc, #72]	; (c000b78 <HAL_MspInit+0x5c>)
 c000b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c000b32:	f003 0301 	and.w	r3, r3, #1
 c000b36:	60fb      	str	r3, [r7, #12]
 c000b38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 c000b3a:	4b0f      	ldr	r3, [pc, #60]	; (c000b78 <HAL_MspInit+0x5c>)
 c000b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c000b3e:	4a0e      	ldr	r2, [pc, #56]	; (c000b78 <HAL_MspInit+0x5c>)
 c000b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c000b44:	6593      	str	r3, [r2, #88]	; 0x58
 c000b46:	4b0c      	ldr	r3, [pc, #48]	; (c000b78 <HAL_MspInit+0x5c>)
 c000b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c000b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c000b4e:	60bb      	str	r3, [r7, #8]
 c000b50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GTZC_CLK_ENABLE();
 c000b52:	4b09      	ldr	r3, [pc, #36]	; (c000b78 <HAL_MspInit+0x5c>)
 c000b54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c000b56:	4a08      	ldr	r2, [pc, #32]	; (c000b78 <HAL_MspInit+0x5c>)
 c000b58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 c000b5c:	6493      	str	r3, [r2, #72]	; 0x48
 c000b5e:	4b06      	ldr	r3, [pc, #24]	; (c000b78 <HAL_MspInit+0x5c>)
 c000b60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c000b62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 c000b66:	607b      	str	r3, [r7, #4]
 c000b68:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 c000b6a:	f001 f819 	bl	c001ba0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 c000b6e:	bf00      	nop
 c000b70:	3710      	adds	r7, #16
 c000b72:	46bd      	mov	sp, r7
 c000b74:	bd80      	pop	{r7, pc}
 c000b76:	bf00      	nop
 c000b78:	50021000 	.word	0x50021000

0c000b7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 c000b7c:	b580      	push	{r7, lr}
 c000b7e:	b0ae      	sub	sp, #184	; 0xb8
 c000b80:	af00      	add	r7, sp, #0
 c000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c000b84:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 c000b88:	2200      	movs	r2, #0
 c000b8a:	601a      	str	r2, [r3, #0]
 c000b8c:	605a      	str	r2, [r3, #4]
 c000b8e:	609a      	str	r2, [r3, #8]
 c000b90:	60da      	str	r2, [r3, #12]
 c000b92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 c000b94:	f107 0310 	add.w	r3, r7, #16
 c000b98:	2294      	movs	r2, #148	; 0x94
 c000b9a:	2100      	movs	r1, #0
 c000b9c:	4618      	mov	r0, r3
 c000b9e:	f003 fcf7 	bl	c004590 <memset>
  if(huart->Instance==USART3)
 c000ba2:	687b      	ldr	r3, [r7, #4]
 c000ba4:	681b      	ldr	r3, [r3, #0]
 c000ba6:	4a25      	ldr	r2, [pc, #148]	; (c000c3c <HAL_UART_MspInit+0xc0>)
 c000ba8:	4293      	cmp	r3, r2
 c000baa:	d142      	bne.n	c000c32 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 c000bac:	2304      	movs	r3, #4
 c000bae:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 c000bb0:	2300      	movs	r3, #0
 c000bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 c000bb4:	f107 0310 	add.w	r3, r7, #16
 c000bb8:	4618      	mov	r0, r3
 c000bba:	f001 ff5f 	bl	c002a7c <HAL_RCCEx_PeriphCLKConfig>
 c000bbe:	4603      	mov	r3, r0
 c000bc0:	2b00      	cmp	r3, #0
 c000bc2:	d001      	beq.n	c000bc8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 c000bc4:	f7ff fed0 	bl	c000968 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 c000bc8:	4b1d      	ldr	r3, [pc, #116]	; (c000c40 <HAL_UART_MspInit+0xc4>)
 c000bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c000bcc:	4a1c      	ldr	r2, [pc, #112]	; (c000c40 <HAL_UART_MspInit+0xc4>)
 c000bce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 c000bd2:	6593      	str	r3, [r2, #88]	; 0x58
 c000bd4:	4b1a      	ldr	r3, [pc, #104]	; (c000c40 <HAL_UART_MspInit+0xc4>)
 c000bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c000bd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 c000bdc:	60fb      	str	r3, [r7, #12]
 c000bde:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 c000be0:	4b17      	ldr	r3, [pc, #92]	; (c000c40 <HAL_UART_MspInit+0xc4>)
 c000be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000be4:	4a16      	ldr	r2, [pc, #88]	; (c000c40 <HAL_UART_MspInit+0xc4>)
 c000be6:	f043 0304 	orr.w	r3, r3, #4
 c000bea:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000bec:	4b14      	ldr	r3, [pc, #80]	; (c000c40 <HAL_UART_MspInit+0xc4>)
 c000bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000bf0:	f003 0304 	and.w	r3, r3, #4
 c000bf4:	60bb      	str	r3, [r7, #8]
 c000bf6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC5     ------> USART3_RX
    PC4     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 c000bf8:	2330      	movs	r3, #48	; 0x30
 c000bfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 c000bfe:	2302      	movs	r3, #2
 c000c00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 c000c04:	2300      	movs	r3, #0
 c000c06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c000c0a:	2300      	movs	r3, #0
 c000c0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 c000c10:	2307      	movs	r3, #7
 c000c12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 c000c16:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 c000c1a:	4619      	mov	r1, r3
 c000c1c:	4809      	ldr	r0, [pc, #36]	; (c000c44 <HAL_UART_MspInit+0xc8>)
 c000c1e:	f000 fc41 	bl	c0014a4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 c000c22:	2200      	movs	r2, #0
 c000c24:	2100      	movs	r1, #0
 c000c26:	203f      	movs	r0, #63	; 0x3f
 c000c28:	f000 fb4d 	bl	c0012c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 c000c2c:	203f      	movs	r0, #63	; 0x3f
 c000c2e:	f000 fb64 	bl	c0012fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 c000c32:	bf00      	nop
 c000c34:	37b8      	adds	r7, #184	; 0xb8
 c000c36:	46bd      	mov	sp, r7
 c000c38:	bd80      	pop	{r7, pc}
 c000c3a:	bf00      	nop
 c000c3c:	50004800 	.word	0x50004800
 c000c40:	50021000 	.word	0x50021000
 c000c44:	52020800 	.word	0x52020800

0c000c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 c000c48:	b480      	push	{r7}
 c000c4a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 c000c4c:	bf00      	nop
 c000c4e:	46bd      	mov	sp, r7
 c000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000c54:	4770      	bx	lr

0c000c56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 c000c56:	b480      	push	{r7}
 c000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 c000c5a:	e7fe      	b.n	c000c5a <HardFault_Handler+0x4>

0c000c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 c000c5c:	b480      	push	{r7}
 c000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 c000c60:	e7fe      	b.n	c000c60 <MemManage_Handler+0x4>

0c000c62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 c000c62:	b480      	push	{r7}
 c000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 c000c66:	e7fe      	b.n	c000c66 <BusFault_Handler+0x4>

0c000c68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 c000c68:	b480      	push	{r7}
 c000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 c000c6c:	e7fe      	b.n	c000c6c <UsageFault_Handler+0x4>

0c000c6e <SecureFault_Handler>:

/**
  * @brief This function handles Secure fault.
  */
void SecureFault_Handler(void)
{
 c000c6e:	b480      	push	{r7}
 c000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SecureFault_IRQn 0 */

  /* USER CODE END SecureFault_IRQn 0 */
  while (1)
 c000c72:	e7fe      	b.n	c000c72 <SecureFault_Handler+0x4>

0c000c74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 c000c74:	b480      	push	{r7}
 c000c76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 c000c78:	bf00      	nop
 c000c7a:	46bd      	mov	sp, r7
 c000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000c80:	4770      	bx	lr

0c000c82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 c000c82:	b480      	push	{r7}
 c000c84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 c000c86:	bf00      	nop
 c000c88:	46bd      	mov	sp, r7
 c000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000c8e:	4770      	bx	lr

0c000c90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 c000c90:	b480      	push	{r7}
 c000c92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 c000c94:	bf00      	nop
 c000c96:	46bd      	mov	sp, r7
 c000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000c9c:	4770      	bx	lr

0c000c9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 c000c9e:	b580      	push	{r7, lr}
 c000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 c000ca2:	f000 fa15 	bl	c0010d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 c000ca6:	bf00      	nop
 c000ca8:	bd80      	pop	{r7, pc}
	...

0c000cac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 c000cac:	b580      	push	{r7, lr}
 c000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 c000cb0:	4802      	ldr	r0, [pc, #8]	; (c000cbc <USART3_IRQHandler+0x10>)
 c000cb2:	f002 fc19 	bl	c0034e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 c000cb6:	bf00      	nop
 c000cb8:	bd80      	pop	{r7, pc}
 c000cba:	bf00      	nop
 c000cbc:	30000098 	.word	0x30000098

0c000cc0 <TZ_SAU_Setup>:
  \brief   Setup a SAU Region
  \details Writes the region information contained in SAU_Region to the
           registers SAU_RNR, SAU_RBAR, and SAU_RLAR
 */
__STATIC_INLINE void TZ_SAU_Setup (void)
{
 c000cc0:	b480      	push	{r7}
 c000cc2:	af00      	add	r7, sp, #0

#if defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U)

  #if defined (SAU_INIT_REGION0) && (SAU_INIT_REGION0 == 1U)
    SAU_INIT_REGION(0);
 c000cc4:	4b30      	ldr	r3, [pc, #192]	; (c000d88 <TZ_SAU_Setup+0xc8>)
 c000cc6:	2200      	movs	r2, #0
 c000cc8:	609a      	str	r2, [r3, #8]
 c000cca:	4b2f      	ldr	r3, [pc, #188]	; (c000d88 <TZ_SAU_Setup+0xc8>)
 c000ccc:	4a2f      	ldr	r2, [pc, #188]	; (c000d8c <TZ_SAU_Setup+0xcc>)
 c000cce:	60da      	str	r2, [r3, #12]
 c000cd0:	4b2d      	ldr	r3, [pc, #180]	; (c000d88 <TZ_SAU_Setup+0xc8>)
 c000cd2:	4a2f      	ldr	r2, [pc, #188]	; (c000d90 <TZ_SAU_Setup+0xd0>)
 c000cd4:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION1) && (SAU_INIT_REGION1 == 1U)
    SAU_INIT_REGION(1);
 c000cd6:	4b2c      	ldr	r3, [pc, #176]	; (c000d88 <TZ_SAU_Setup+0xc8>)
 c000cd8:	2201      	movs	r2, #1
 c000cda:	609a      	str	r2, [r3, #8]
 c000cdc:	4b2a      	ldr	r3, [pc, #168]	; (c000d88 <TZ_SAU_Setup+0xc8>)
 c000cde:	4a2d      	ldr	r2, [pc, #180]	; (c000d94 <TZ_SAU_Setup+0xd4>)
 c000ce0:	60da      	str	r2, [r3, #12]
 c000ce2:	4b29      	ldr	r3, [pc, #164]	; (c000d88 <TZ_SAU_Setup+0xc8>)
 c000ce4:	4a2c      	ldr	r2, [pc, #176]	; (c000d98 <TZ_SAU_Setup+0xd8>)
 c000ce6:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION2) && (SAU_INIT_REGION2 == 1U)
    SAU_INIT_REGION(2);
 c000ce8:	4b27      	ldr	r3, [pc, #156]	; (c000d88 <TZ_SAU_Setup+0xc8>)
 c000cea:	2202      	movs	r2, #2
 c000cec:	609a      	str	r2, [r3, #8]
 c000cee:	4b26      	ldr	r3, [pc, #152]	; (c000d88 <TZ_SAU_Setup+0xc8>)
 c000cf0:	4a2a      	ldr	r2, [pc, #168]	; (c000d9c <TZ_SAU_Setup+0xdc>)
 c000cf2:	60da      	str	r2, [r3, #12]
 c000cf4:	4b24      	ldr	r3, [pc, #144]	; (c000d88 <TZ_SAU_Setup+0xc8>)
 c000cf6:	4a2a      	ldr	r2, [pc, #168]	; (c000da0 <TZ_SAU_Setup+0xe0>)
 c000cf8:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION3) && (SAU_INIT_REGION3 == 1U)
    SAU_INIT_REGION(3);
 c000cfa:	4b23      	ldr	r3, [pc, #140]	; (c000d88 <TZ_SAU_Setup+0xc8>)
 c000cfc:	2203      	movs	r2, #3
 c000cfe:	609a      	str	r2, [r3, #8]
 c000d00:	4b21      	ldr	r3, [pc, #132]	; (c000d88 <TZ_SAU_Setup+0xc8>)
 c000d02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 c000d06:	60da      	str	r2, [r3, #12]
 c000d08:	4b1f      	ldr	r3, [pc, #124]	; (c000d88 <TZ_SAU_Setup+0xc8>)
 c000d0a:	4a26      	ldr	r2, [pc, #152]	; (c000da4 <TZ_SAU_Setup+0xe4>)
 c000d0c:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION4) && (SAU_INIT_REGION4 == 1U)
    SAU_INIT_REGION(4);
 c000d0e:	4b1e      	ldr	r3, [pc, #120]	; (c000d88 <TZ_SAU_Setup+0xc8>)
 c000d10:	2204      	movs	r2, #4
 c000d12:	609a      	str	r2, [r3, #8]
 c000d14:	4b1c      	ldr	r3, [pc, #112]	; (c000d88 <TZ_SAU_Setup+0xc8>)
 c000d16:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 c000d1a:	60da      	str	r2, [r3, #12]
 c000d1c:	4b1a      	ldr	r3, [pc, #104]	; (c000d88 <TZ_SAU_Setup+0xc8>)
 c000d1e:	4a22      	ldr	r2, [pc, #136]	; (c000da8 <TZ_SAU_Setup+0xe8>)
 c000d20:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION5) && (SAU_INIT_REGION5 == 1U)
    SAU_INIT_REGION(5);
 c000d22:	4b19      	ldr	r3, [pc, #100]	; (c000d88 <TZ_SAU_Setup+0xc8>)
 c000d24:	2205      	movs	r2, #5
 c000d26:	609a      	str	r2, [r3, #8]
 c000d28:	4b17      	ldr	r3, [pc, #92]	; (c000d88 <TZ_SAU_Setup+0xc8>)
 c000d2a:	4a20      	ldr	r2, [pc, #128]	; (c000dac <TZ_SAU_Setup+0xec>)
 c000d2c:	60da      	str	r2, [r3, #12]
 c000d2e:	4b16      	ldr	r3, [pc, #88]	; (c000d88 <TZ_SAU_Setup+0xc8>)
 c000d30:	4a1f      	ldr	r2, [pc, #124]	; (c000db0 <TZ_SAU_Setup+0xf0>)
 c000d32:	611a      	str	r2, [r3, #16]
  /* repeat this for all possible SAU regions */

#endif /* defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U) */

  #if defined (SAU_INIT_CTRL) && (SAU_INIT_CTRL == 1U)
    SAU->CTRL = ((SAU_INIT_CTRL_ENABLE << SAU_CTRL_ENABLE_Pos) & SAU_CTRL_ENABLE_Msk) |
 c000d34:	4b14      	ldr	r3, [pc, #80]	; (c000d88 <TZ_SAU_Setup+0xc8>)
 c000d36:	2201      	movs	r2, #1
 c000d38:	601a      	str	r2, [r3, #0]
  #endif /* defined (SCB_CSR_AIRCR_INIT) && (SCB_CSR_AIRCR_INIT == 1U) */

  #if defined (__FPU_USED) && (__FPU_USED == 1U) && \
      defined (TZ_FPU_NS_USAGE) && (TZ_FPU_NS_USAGE == 1U)

    SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
 c000d3a:	4b1e      	ldr	r3, [pc, #120]	; (c000db4 <TZ_SAU_Setup+0xf4>)
 c000d3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c000d40:	4a1c      	ldr	r2, [pc, #112]	; (c000db4 <TZ_SAU_Setup+0xf4>)
 c000d42:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 c000d46:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                   ((SCB_NSACR_CP10_11_VAL << SCB_NSACR_CP10_Pos) & (SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk));

    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c000d4a:	4b1b      	ldr	r3, [pc, #108]	; (c000db8 <TZ_SAU_Setup+0xf8>)
 c000d4c:	685b      	ldr	r3, [r3, #4]
                   ((FPU_FPCCR_TS_VAL        << FPU_FPCCR_TS_Pos       ) & FPU_FPCCR_TS_Msk       ) |
 c000d4e:	f023 53e0 	bic.w	r3, r3, #469762048	; 0x1c000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c000d52:	4a19      	ldr	r2, [pc, #100]	; (c000db8 <TZ_SAU_Setup+0xf8>)
                   ((FPU_FPCCR_CLRONRETS_VAL << FPU_FPCCR_CLRONRETS_Pos) & FPU_FPCCR_CLRONRETS_Msk) |
 c000d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c000d58:	6053      	str	r3, [r2, #4]
                   ((FPU_FPCCR_CLRONRET_VAL  << FPU_FPCCR_CLRONRET_Pos ) & FPU_FPCCR_CLRONRET_Msk );
  #endif

  #if defined (NVIC_INIT_ITNS0) && (NVIC_INIT_ITNS0 == 1U)
    NVIC->ITNS[0] = NVIC_INIT_ITNS0_VAL;
 c000d5a:	4b18      	ldr	r3, [pc, #96]	; (c000dbc <TZ_SAU_Setup+0xfc>)
 c000d5c:	2200      	movs	r2, #0
 c000d5e:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
  #endif

  #if defined (NVIC_INIT_ITNS1) && (NVIC_INIT_ITNS1 == 1U)
    NVIC->ITNS[1] = NVIC_INIT_ITNS1_VAL;
 c000d62:	4b16      	ldr	r3, [pc, #88]	; (c000dbc <TZ_SAU_Setup+0xfc>)
 c000d64:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 c000d68:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
  #endif

  #if defined (NVIC_INIT_ITNS2) && (NVIC_INIT_ITNS2 == 1U)
    NVIC->ITNS[2] = NVIC_INIT_ITNS2_VAL;
 c000d6c:	4b13      	ldr	r3, [pc, #76]	; (c000dbc <TZ_SAU_Setup+0xfc>)
 c000d6e:	2200      	movs	r2, #0
 c000d70:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  #endif

  #if defined (NVIC_INIT_ITNS3) && (NVIC_INIT_ITNS3 == 1U)
    NVIC->ITNS[3] = NVIC_INIT_ITNS3_VAL;
 c000d74:	4b11      	ldr	r3, [pc, #68]	; (c000dbc <TZ_SAU_Setup+0xfc>)
 c000d76:	2200      	movs	r2, #0
 c000d78:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  #endif

}
 c000d7c:	bf00      	nop
 c000d7e:	46bd      	mov	sp, r7
 c000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000d84:	4770      	bx	lr
 c000d86:	bf00      	nop
 c000d88:	e000edd0 	.word	0xe000edd0
 c000d8c:	0c03e000 	.word	0x0c03e000
 c000d90:	0c03ffe3 	.word	0x0c03ffe3
 c000d94:	08040000 	.word	0x08040000
 c000d98:	0807ffe1 	.word	0x0807ffe1
 c000d9c:	20018000 	.word	0x20018000
 c000da0:	2003ffe1 	.word	0x2003ffe1
 c000da4:	4fffffe1 	.word	0x4fffffe1
 c000da8:	9fffffe1 	.word	0x9fffffe1
 c000dac:	0bf90000 	.word	0x0bf90000
 c000db0:	0bfa8fe1 	.word	0x0bfa8fe1
 c000db4:	e000ed00 	.word	0xe000ed00
 c000db8:	e000ef30 	.word	0xe000ef30
 c000dbc:	e000e100 	.word	0xe000e100

0c000dc0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 c000dc0:	b580      	push	{r7, lr}
 c000dc2:	af00      	add	r7, sp, #0
  /* SAU/IDAU, FPU and Interrupts secure/non-secure allocation settings */
  TZ_SAU_Setup();
 c000dc4:	f7ff ff7c 	bl	c000cc0 <TZ_SAU_Setup>
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c000dc8:	4b08      	ldr	r3, [pc, #32]	; (c000dec <SystemInit+0x2c>)
 c000dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c000dce:	4a07      	ldr	r2, [pc, #28]	; (c000dec <SystemInit+0x2c>)
 c000dd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c000dd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c000dd8:	4b05      	ldr	r3, [pc, #20]	; (c000df0 <SystemInit+0x30>)
 c000dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c000dde:	4a04      	ldr	r2, [pc, #16]	; (c000df0 <SystemInit+0x30>)
 c000de0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c000de4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 c000de8:	bf00      	nop
 c000dea:	bd80      	pop	{r7, pc}
 c000dec:	e000ed00 	.word	0xe000ed00
 c000df0:	e002ed00 	.word	0xe002ed00

0c000df4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 c000df4:	b480      	push	{r7}
 c000df6:	b087      	sub	sp, #28
 c000df8:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 c000dfa:	4b4f      	ldr	r3, [pc, #316]	; (c000f38 <SystemCoreClockUpdate+0x144>)
 c000dfc:	681b      	ldr	r3, [r3, #0]
 c000dfe:	f003 0308 	and.w	r3, r3, #8
 c000e02:	2b00      	cmp	r3, #0
 c000e04:	d107      	bne.n	c000e16 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 c000e06:	4b4c      	ldr	r3, [pc, #304]	; (c000f38 <SystemCoreClockUpdate+0x144>)
 c000e08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c000e0c:	0a1b      	lsrs	r3, r3, #8
 c000e0e:	f003 030f 	and.w	r3, r3, #15
 c000e12:	617b      	str	r3, [r7, #20]
 c000e14:	e005      	b.n	c000e22 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 c000e16:	4b48      	ldr	r3, [pc, #288]	; (c000f38 <SystemCoreClockUpdate+0x144>)
 c000e18:	681b      	ldr	r3, [r3, #0]
 c000e1a:	091b      	lsrs	r3, r3, #4
 c000e1c:	f003 030f 	and.w	r3, r3, #15
 c000e20:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 c000e22:	4a46      	ldr	r2, [pc, #280]	; (c000f3c <SystemCoreClockUpdate+0x148>)
 c000e24:	697b      	ldr	r3, [r7, #20]
 c000e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c000e2a:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c000e2c:	4b42      	ldr	r3, [pc, #264]	; (c000f38 <SystemCoreClockUpdate+0x144>)
 c000e2e:	689b      	ldr	r3, [r3, #8]
 c000e30:	f003 030c 	and.w	r3, r3, #12
 c000e34:	2b0c      	cmp	r3, #12
 c000e36:	d866      	bhi.n	c000f06 <SystemCoreClockUpdate+0x112>
 c000e38:	a201      	add	r2, pc, #4	; (adr r2, c000e40 <SystemCoreClockUpdate+0x4c>)
 c000e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c000e3e:	bf00      	nop
 c000e40:	0c000e75 	.word	0x0c000e75
 c000e44:	0c000f07 	.word	0x0c000f07
 c000e48:	0c000f07 	.word	0x0c000f07
 c000e4c:	0c000f07 	.word	0x0c000f07
 c000e50:	0c000e7d 	.word	0x0c000e7d
 c000e54:	0c000f07 	.word	0x0c000f07
 c000e58:	0c000f07 	.word	0x0c000f07
 c000e5c:	0c000f07 	.word	0x0c000f07
 c000e60:	0c000e85 	.word	0x0c000e85
 c000e64:	0c000f07 	.word	0x0c000f07
 c000e68:	0c000f07 	.word	0x0c000f07
 c000e6c:	0c000f07 	.word	0x0c000f07
 c000e70:	0c000e8d 	.word	0x0c000e8d
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 c000e74:	4a32      	ldr	r2, [pc, #200]	; (c000f40 <SystemCoreClockUpdate+0x14c>)
 c000e76:	697b      	ldr	r3, [r7, #20]
 c000e78:	6013      	str	r3, [r2, #0]
      break;
 c000e7a:	e048      	b.n	c000f0e <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 c000e7c:	4b30      	ldr	r3, [pc, #192]	; (c000f40 <SystemCoreClockUpdate+0x14c>)
 c000e7e:	4a31      	ldr	r2, [pc, #196]	; (c000f44 <SystemCoreClockUpdate+0x150>)
 c000e80:	601a      	str	r2, [r3, #0]
      break;
 c000e82:	e044      	b.n	c000f0e <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 c000e84:	4b2e      	ldr	r3, [pc, #184]	; (c000f40 <SystemCoreClockUpdate+0x14c>)
 c000e86:	4a30      	ldr	r2, [pc, #192]	; (c000f48 <SystemCoreClockUpdate+0x154>)
 c000e88:	601a      	str	r2, [r3, #0]
      break;
 c000e8a:	e040      	b.n	c000f0e <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c000e8c:	4b2a      	ldr	r3, [pc, #168]	; (c000f38 <SystemCoreClockUpdate+0x144>)
 c000e8e:	68db      	ldr	r3, [r3, #12]
 c000e90:	f003 0303 	and.w	r3, r3, #3
 c000e94:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 c000e96:	4b28      	ldr	r3, [pc, #160]	; (c000f38 <SystemCoreClockUpdate+0x144>)
 c000e98:	68db      	ldr	r3, [r3, #12]
 c000e9a:	091b      	lsrs	r3, r3, #4
 c000e9c:	f003 030f 	and.w	r3, r3, #15
 c000ea0:	3301      	adds	r3, #1
 c000ea2:	60bb      	str	r3, [r7, #8]
 c000ea4:	68fb      	ldr	r3, [r7, #12]
 c000ea6:	2b02      	cmp	r3, #2
 c000ea8:	d003      	beq.n	c000eb2 <SystemCoreClockUpdate+0xbe>
 c000eaa:	68fb      	ldr	r3, [r7, #12]
 c000eac:	2b03      	cmp	r3, #3
 c000eae:	d006      	beq.n	c000ebe <SystemCoreClockUpdate+0xca>
 c000eb0:	e00b      	b.n	c000eca <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 c000eb2:	4a24      	ldr	r2, [pc, #144]	; (c000f44 <SystemCoreClockUpdate+0x150>)
 c000eb4:	68bb      	ldr	r3, [r7, #8]
 c000eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 c000eba:	613b      	str	r3, [r7, #16]
          break;
 c000ebc:	e00b      	b.n	c000ed6 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 c000ebe:	4a22      	ldr	r2, [pc, #136]	; (c000f48 <SystemCoreClockUpdate+0x154>)
 c000ec0:	68bb      	ldr	r3, [r7, #8]
 c000ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 c000ec6:	613b      	str	r3, [r7, #16]
          break;
 c000ec8:	e005      	b.n	c000ed6 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 c000eca:	697a      	ldr	r2, [r7, #20]
 c000ecc:	68bb      	ldr	r3, [r7, #8]
 c000ece:	fbb2 f3f3 	udiv	r3, r2, r3
 c000ed2:	613b      	str	r3, [r7, #16]
          break;
 c000ed4:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 c000ed6:	4b18      	ldr	r3, [pc, #96]	; (c000f38 <SystemCoreClockUpdate+0x144>)
 c000ed8:	68db      	ldr	r3, [r3, #12]
 c000eda:	0a1b      	lsrs	r3, r3, #8
 c000edc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 c000ee0:	693b      	ldr	r3, [r7, #16]
 c000ee2:	fb02 f303 	mul.w	r3, r2, r3
 c000ee6:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 c000ee8:	4b13      	ldr	r3, [pc, #76]	; (c000f38 <SystemCoreClockUpdate+0x144>)
 c000eea:	68db      	ldr	r3, [r3, #12]
 c000eec:	0e5b      	lsrs	r3, r3, #25
 c000eee:	f003 0303 	and.w	r3, r3, #3
 c000ef2:	3301      	adds	r3, #1
 c000ef4:	005b      	lsls	r3, r3, #1
 c000ef6:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 c000ef8:	693a      	ldr	r2, [r7, #16]
 c000efa:	687b      	ldr	r3, [r7, #4]
 c000efc:	fbb2 f3f3 	udiv	r3, r2, r3
 c000f00:	4a0f      	ldr	r2, [pc, #60]	; (c000f40 <SystemCoreClockUpdate+0x14c>)
 c000f02:	6013      	str	r3, [r2, #0]
      break;
 c000f04:	e003      	b.n	c000f0e <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 c000f06:	4a0e      	ldr	r2, [pc, #56]	; (c000f40 <SystemCoreClockUpdate+0x14c>)
 c000f08:	697b      	ldr	r3, [r7, #20]
 c000f0a:	6013      	str	r3, [r2, #0]
      break;
 c000f0c:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 c000f0e:	4b0a      	ldr	r3, [pc, #40]	; (c000f38 <SystemCoreClockUpdate+0x144>)
 c000f10:	689b      	ldr	r3, [r3, #8]
 c000f12:	091b      	lsrs	r3, r3, #4
 c000f14:	f003 030f 	and.w	r3, r3, #15
 c000f18:	4a0c      	ldr	r2, [pc, #48]	; (c000f4c <SystemCoreClockUpdate+0x158>)
 c000f1a:	5cd3      	ldrb	r3, [r2, r3]
 c000f1c:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 c000f1e:	4b08      	ldr	r3, [pc, #32]	; (c000f40 <SystemCoreClockUpdate+0x14c>)
 c000f20:	681a      	ldr	r2, [r3, #0]
 c000f22:	683b      	ldr	r3, [r7, #0]
 c000f24:	fa22 f303 	lsr.w	r3, r2, r3
 c000f28:	4a05      	ldr	r2, [pc, #20]	; (c000f40 <SystemCoreClockUpdate+0x14c>)
 c000f2a:	6013      	str	r3, [r2, #0]
}
 c000f2c:	bf00      	nop
 c000f2e:	371c      	adds	r7, #28
 c000f30:	46bd      	mov	sp, r7
 c000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000f36:	4770      	bx	lr
 c000f38:	50021000 	.word	0x50021000
 c000f3c:	0c0045e0 	.word	0x0c0045e0
 c000f40:	30000068 	.word	0x30000068
 c000f44:	00f42400 	.word	0x00f42400
 c000f48:	007a1200 	.word	0x007a1200
 c000f4c:	0c0045c8 	.word	0x0c0045c8

0c000f50 <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value (HCLK)
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
 c000f50:	b580      	push	{r7, lr}
 c000f52:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
 c000f54:	f7ff ff4e 	bl	c000df4 <SystemCoreClockUpdate>
  
  return SystemCoreClock;
 c000f58:	4b1c      	ldr	r3, [pc, #112]	; (c000fcc <__acle_se_SECURE_SystemCoreClockUpdate+0x7c>)
 c000f5a:	681b      	ldr	r3, [r3, #0]
}
 c000f5c:	4618      	mov	r0, r3
 c000f5e:	46bd      	mov	sp, r7
 c000f60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c000f64:	4671      	mov	r1, lr
 c000f66:	4672      	mov	r2, lr
 c000f68:	4673      	mov	r3, lr
 c000f6a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c000f6e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c000f72:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c000f76:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c000f7a:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c000f7e:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c000f82:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c000f86:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000f8a:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c000f8e:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000f92:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000f96:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000f9a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c000f9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000fa2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000fa6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000faa:	f38e 8c00 	msr	CPSR_fs, lr
 c000fae:	b410      	push	{r4}
 c000fb0:	eef1 ca10 	vmrs	ip, fpscr
 c000fb4:	f64f 7460 	movw	r4, #65376	; 0xff60
 c000fb8:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c000fbc:	ea0c 0c04 	and.w	ip, ip, r4
 c000fc0:	eee1 ca10 	vmsr	fpscr, ip
 c000fc4:	bc10      	pop	{r4}
 c000fc6:	46f4      	mov	ip, lr
 c000fc8:	4774      	bxns	lr
 c000fca:	bf00      	nop
 c000fcc:	30000068 	.word	0x30000068

0c000fd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 c000fd0:	f8df d034 	ldr.w	sp, [pc, #52]	; c001008 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 c000fd4:	f7ff fef4 	bl	c000dc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 c000fd8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 c000fda:	e003      	b.n	c000fe4 <LoopCopyDataInit>

0c000fdc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 c000fdc:	4b0b      	ldr	r3, [pc, #44]	; (c00100c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 c000fde:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 c000fe0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 c000fe2:	3104      	adds	r1, #4

0c000fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 c000fe4:	480a      	ldr	r0, [pc, #40]	; (c001010 <LoopForever+0xa>)
	ldr	r3, =_edata
 c000fe6:	4b0b      	ldr	r3, [pc, #44]	; (c001014 <LoopForever+0xe>)
	adds	r2, r0, r1
 c000fe8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 c000fea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 c000fec:	d3f6      	bcc.n	c000fdc <CopyDataInit>
	ldr	r2, =_sbss
 c000fee:	4a0a      	ldr	r2, [pc, #40]	; (c001018 <LoopForever+0x12>)
	b	LoopFillZerobss
 c000ff0:	e002      	b.n	c000ff8 <LoopFillZerobss>

0c000ff2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 c000ff2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 c000ff4:	f842 3b04 	str.w	r3, [r2], #4

0c000ff8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 c000ff8:	4b08      	ldr	r3, [pc, #32]	; (c00101c <LoopForever+0x16>)
	cmp	r2, r3
 c000ffa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 c000ffc:	d3f9      	bcc.n	c000ff2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 c000ffe:	f003 faa3 	bl	c004548 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 c001002:	f7ff fadd 	bl	c0005c0 <main>

0c001006 <LoopForever>:

LoopForever:
    b LoopForever
 c001006:	e7fe      	b.n	c001006 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 c001008:	30018000 	.word	0x30018000
	ldr	r3, =_sidata
 c00100c:	0c004648 	.word	0x0c004648
	ldr	r0, =_sdata
 c001010:	30000000 	.word	0x30000000
	ldr	r3, =_edata
 c001014:	30000074 	.word	0x30000074
	ldr	r2, =_sbss
 c001018:	30000074 	.word	0x30000074
	ldr	r3, = _ebss
 c00101c:	3000012c 	.word	0x3000012c

0c001020 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 c001020:	e7fe      	b.n	c001020 <ADC1_2_IRQHandler>

0c001022 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 c001022:	b580      	push	{r7, lr}
 c001024:	b082      	sub	sp, #8
 c001026:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 c001028:	2300      	movs	r3, #0
 c00102a:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 c00102c:	2004      	movs	r0, #4
 c00102e:	f000 f93f 	bl	c0012b0 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 c001032:	f7ff fedf 	bl	c000df4 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 c001036:	2000      	movs	r0, #0
 c001038:	f000 f80e 	bl	c001058 <HAL_InitTick>
 c00103c:	4603      	mov	r3, r0
 c00103e:	2b00      	cmp	r3, #0
 c001040:	d002      	beq.n	c001048 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 c001042:	2301      	movs	r3, #1
 c001044:	71fb      	strb	r3, [r7, #7]
 c001046:	e001      	b.n	c00104c <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 c001048:	f7ff fd68 	bl	c000b1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 c00104c:	79fb      	ldrb	r3, [r7, #7]
}
 c00104e:	4618      	mov	r0, r3
 c001050:	3708      	adds	r7, #8
 c001052:	46bd      	mov	sp, r7
 c001054:	bd80      	pop	{r7, pc}
	...

0c001058 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 c001058:	b580      	push	{r7, lr}
 c00105a:	b084      	sub	sp, #16
 c00105c:	af00      	add	r7, sp, #0
 c00105e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 c001060:	2300      	movs	r3, #0
 c001062:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 c001064:	4b17      	ldr	r3, [pc, #92]	; (c0010c4 <HAL_InitTick+0x6c>)
 c001066:	781b      	ldrb	r3, [r3, #0]
 c001068:	2b00      	cmp	r3, #0
 c00106a:	d023      	beq.n	c0010b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 c00106c:	4b16      	ldr	r3, [pc, #88]	; (c0010c8 <HAL_InitTick+0x70>)
 c00106e:	681a      	ldr	r2, [r3, #0]
 c001070:	4b14      	ldr	r3, [pc, #80]	; (c0010c4 <HAL_InitTick+0x6c>)
 c001072:	781b      	ldrb	r3, [r3, #0]
 c001074:	4619      	mov	r1, r3
 c001076:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 c00107a:	fbb3 f3f1 	udiv	r3, r3, r1
 c00107e:	fbb2 f3f3 	udiv	r3, r2, r3
 c001082:	4618      	mov	r0, r3
 c001084:	f000 f947 	bl	c001316 <HAL_SYSTICK_Config>
 c001088:	4603      	mov	r3, r0
 c00108a:	2b00      	cmp	r3, #0
 c00108c:	d10f      	bne.n	c0010ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 c00108e:	687b      	ldr	r3, [r7, #4]
 c001090:	2b07      	cmp	r3, #7
 c001092:	d809      	bhi.n	c0010a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 c001094:	2200      	movs	r2, #0
 c001096:	6879      	ldr	r1, [r7, #4]
 c001098:	f04f 30ff 	mov.w	r0, #4294967295
 c00109c:	f000 f913 	bl	c0012c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 c0010a0:	4a0a      	ldr	r2, [pc, #40]	; (c0010cc <HAL_InitTick+0x74>)
 c0010a2:	687b      	ldr	r3, [r7, #4]
 c0010a4:	6013      	str	r3, [r2, #0]
 c0010a6:	e007      	b.n	c0010b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 c0010a8:	2301      	movs	r3, #1
 c0010aa:	73fb      	strb	r3, [r7, #15]
 c0010ac:	e004      	b.n	c0010b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 c0010ae:	2301      	movs	r3, #1
 c0010b0:	73fb      	strb	r3, [r7, #15]
 c0010b2:	e001      	b.n	c0010b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 c0010b4:	2301      	movs	r3, #1
 c0010b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 c0010b8:	7bfb      	ldrb	r3, [r7, #15]
}
 c0010ba:	4618      	mov	r0, r3
 c0010bc:	3710      	adds	r7, #16
 c0010be:	46bd      	mov	sp, r7
 c0010c0:	bd80      	pop	{r7, pc}
 c0010c2:	bf00      	nop
 c0010c4:	30000070 	.word	0x30000070
 c0010c8:	30000068 	.word	0x30000068
 c0010cc:	3000006c 	.word	0x3000006c

0c0010d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 c0010d0:	b480      	push	{r7}
 c0010d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 c0010d4:	4b06      	ldr	r3, [pc, #24]	; (c0010f0 <HAL_IncTick+0x20>)
 c0010d6:	781b      	ldrb	r3, [r3, #0]
 c0010d8:	461a      	mov	r2, r3
 c0010da:	4b06      	ldr	r3, [pc, #24]	; (c0010f4 <HAL_IncTick+0x24>)
 c0010dc:	681b      	ldr	r3, [r3, #0]
 c0010de:	4413      	add	r3, r2
 c0010e0:	4a04      	ldr	r2, [pc, #16]	; (c0010f4 <HAL_IncTick+0x24>)
 c0010e2:	6013      	str	r3, [r2, #0]
}
 c0010e4:	bf00      	nop
 c0010e6:	46bd      	mov	sp, r7
 c0010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0010ec:	4770      	bx	lr
 c0010ee:	bf00      	nop
 c0010f0:	30000070 	.word	0x30000070
 c0010f4:	30000128 	.word	0x30000128

0c0010f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 c0010f8:	b480      	push	{r7}
 c0010fa:	af00      	add	r7, sp, #0
  return uwTick;
 c0010fc:	4b03      	ldr	r3, [pc, #12]	; (c00110c <HAL_GetTick+0x14>)
 c0010fe:	681b      	ldr	r3, [r3, #0]
}
 c001100:	4618      	mov	r0, r3
 c001102:	46bd      	mov	sp, r7
 c001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001108:	4770      	bx	lr
 c00110a:	bf00      	nop
 c00110c:	30000128 	.word	0x30000128

0c001110 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c001110:	b480      	push	{r7}
 c001112:	b085      	sub	sp, #20
 c001114:	af00      	add	r7, sp, #0
 c001116:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 c001118:	687b      	ldr	r3, [r7, #4]
 c00111a:	f003 0307 	and.w	r3, r3, #7
 c00111e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 c001120:	4b0c      	ldr	r3, [pc, #48]	; (c001154 <__NVIC_SetPriorityGrouping+0x44>)
 c001122:	68db      	ldr	r3, [r3, #12]
 c001124:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 c001126:	68ba      	ldr	r2, [r7, #8]
 c001128:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 c00112c:	4013      	ands	r3, r2
 c00112e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 c001130:	68fb      	ldr	r3, [r7, #12]
 c001132:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 c001134:	68bb      	ldr	r3, [r7, #8]
 c001136:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 c001138:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 c00113c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c001140:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 c001142:	4a04      	ldr	r2, [pc, #16]	; (c001154 <__NVIC_SetPriorityGrouping+0x44>)
 c001144:	68bb      	ldr	r3, [r7, #8]
 c001146:	60d3      	str	r3, [r2, #12]
}
 c001148:	bf00      	nop
 c00114a:	3714      	adds	r7, #20
 c00114c:	46bd      	mov	sp, r7
 c00114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001152:	4770      	bx	lr
 c001154:	e000ed00 	.word	0xe000ed00

0c001158 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 c001158:	b480      	push	{r7}
 c00115a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 c00115c:	4b04      	ldr	r3, [pc, #16]	; (c001170 <__NVIC_GetPriorityGrouping+0x18>)
 c00115e:	68db      	ldr	r3, [r3, #12]
 c001160:	0a1b      	lsrs	r3, r3, #8
 c001162:	f003 0307 	and.w	r3, r3, #7
}
 c001166:	4618      	mov	r0, r3
 c001168:	46bd      	mov	sp, r7
 c00116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00116e:	4770      	bx	lr
 c001170:	e000ed00 	.word	0xe000ed00

0c001174 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 c001174:	b480      	push	{r7}
 c001176:	b083      	sub	sp, #12
 c001178:	af00      	add	r7, sp, #0
 c00117a:	4603      	mov	r3, r0
 c00117c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c00117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c001182:	2b00      	cmp	r3, #0
 c001184:	db0b      	blt.n	c00119e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 c001186:	79fb      	ldrb	r3, [r7, #7]
 c001188:	f003 021f 	and.w	r2, r3, #31
 c00118c:	4907      	ldr	r1, [pc, #28]	; (c0011ac <__NVIC_EnableIRQ+0x38>)
 c00118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c001192:	095b      	lsrs	r3, r3, #5
 c001194:	2001      	movs	r0, #1
 c001196:	fa00 f202 	lsl.w	r2, r0, r2
 c00119a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 c00119e:	bf00      	nop
 c0011a0:	370c      	adds	r7, #12
 c0011a2:	46bd      	mov	sp, r7
 c0011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0011a8:	4770      	bx	lr
 c0011aa:	bf00      	nop
 c0011ac:	e000e100 	.word	0xe000e100

0c0011b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 c0011b0:	b480      	push	{r7}
 c0011b2:	b083      	sub	sp, #12
 c0011b4:	af00      	add	r7, sp, #0
 c0011b6:	4603      	mov	r3, r0
 c0011b8:	6039      	str	r1, [r7, #0]
 c0011ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c0011bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c0011c0:	2b00      	cmp	r3, #0
 c0011c2:	db0a      	blt.n	c0011da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c0011c4:	683b      	ldr	r3, [r7, #0]
 c0011c6:	b2da      	uxtb	r2, r3
 c0011c8:	490c      	ldr	r1, [pc, #48]	; (c0011fc <__NVIC_SetPriority+0x4c>)
 c0011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c0011ce:	0152      	lsls	r2, r2, #5
 c0011d0:	b2d2      	uxtb	r2, r2
 c0011d2:	440b      	add	r3, r1
 c0011d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 c0011d8:	e00a      	b.n	c0011f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c0011da:	683b      	ldr	r3, [r7, #0]
 c0011dc:	b2da      	uxtb	r2, r3
 c0011de:	4908      	ldr	r1, [pc, #32]	; (c001200 <__NVIC_SetPriority+0x50>)
 c0011e0:	79fb      	ldrb	r3, [r7, #7]
 c0011e2:	f003 030f 	and.w	r3, r3, #15
 c0011e6:	3b04      	subs	r3, #4
 c0011e8:	0152      	lsls	r2, r2, #5
 c0011ea:	b2d2      	uxtb	r2, r2
 c0011ec:	440b      	add	r3, r1
 c0011ee:	761a      	strb	r2, [r3, #24]
}
 c0011f0:	bf00      	nop
 c0011f2:	370c      	adds	r7, #12
 c0011f4:	46bd      	mov	sp, r7
 c0011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0011fa:	4770      	bx	lr
 c0011fc:	e000e100 	.word	0xe000e100
 c001200:	e000ed00 	.word	0xe000ed00

0c001204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c001204:	b480      	push	{r7}
 c001206:	b089      	sub	sp, #36	; 0x24
 c001208:	af00      	add	r7, sp, #0
 c00120a:	60f8      	str	r0, [r7, #12]
 c00120c:	60b9      	str	r1, [r7, #8]
 c00120e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 c001210:	68fb      	ldr	r3, [r7, #12]
 c001212:	f003 0307 	and.w	r3, r3, #7
 c001216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 c001218:	69fb      	ldr	r3, [r7, #28]
 c00121a:	f1c3 0307 	rsb	r3, r3, #7
 c00121e:	2b03      	cmp	r3, #3
 c001220:	bf28      	it	cs
 c001222:	2303      	movcs	r3, #3
 c001224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 c001226:	69fb      	ldr	r3, [r7, #28]
 c001228:	3303      	adds	r3, #3
 c00122a:	2b06      	cmp	r3, #6
 c00122c:	d902      	bls.n	c001234 <NVIC_EncodePriority+0x30>
 c00122e:	69fb      	ldr	r3, [r7, #28]
 c001230:	3b04      	subs	r3, #4
 c001232:	e000      	b.n	c001236 <NVIC_EncodePriority+0x32>
 c001234:	2300      	movs	r3, #0
 c001236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c001238:	f04f 32ff 	mov.w	r2, #4294967295
 c00123c:	69bb      	ldr	r3, [r7, #24]
 c00123e:	fa02 f303 	lsl.w	r3, r2, r3
 c001242:	43da      	mvns	r2, r3
 c001244:	68bb      	ldr	r3, [r7, #8]
 c001246:	401a      	ands	r2, r3
 c001248:	697b      	ldr	r3, [r7, #20]
 c00124a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 c00124c:	f04f 31ff 	mov.w	r1, #4294967295
 c001250:	697b      	ldr	r3, [r7, #20]
 c001252:	fa01 f303 	lsl.w	r3, r1, r3
 c001256:	43d9      	mvns	r1, r3
 c001258:	687b      	ldr	r3, [r7, #4]
 c00125a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c00125c:	4313      	orrs	r3, r2
         );
}
 c00125e:	4618      	mov	r0, r3
 c001260:	3724      	adds	r7, #36	; 0x24
 c001262:	46bd      	mov	sp, r7
 c001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001268:	4770      	bx	lr
	...

0c00126c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 c00126c:	b580      	push	{r7, lr}
 c00126e:	b082      	sub	sp, #8
 c001270:	af00      	add	r7, sp, #0
 c001272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 c001274:	687b      	ldr	r3, [r7, #4]
 c001276:	3b01      	subs	r3, #1
 c001278:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c00127c:	d301      	bcc.n	c001282 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 c00127e:	2301      	movs	r3, #1
 c001280:	e00f      	b.n	c0012a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 c001282:	4a0a      	ldr	r2, [pc, #40]	; (c0012ac <SysTick_Config+0x40>)
 c001284:	687b      	ldr	r3, [r7, #4]
 c001286:	3b01      	subs	r3, #1
 c001288:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 c00128a:	2107      	movs	r1, #7
 c00128c:	f04f 30ff 	mov.w	r0, #4294967295
 c001290:	f7ff ff8e 	bl	c0011b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 c001294:	4b05      	ldr	r3, [pc, #20]	; (c0012ac <SysTick_Config+0x40>)
 c001296:	2200      	movs	r2, #0
 c001298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 c00129a:	4b04      	ldr	r3, [pc, #16]	; (c0012ac <SysTick_Config+0x40>)
 c00129c:	2207      	movs	r2, #7
 c00129e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 c0012a0:	2300      	movs	r3, #0
}
 c0012a2:	4618      	mov	r0, r3
 c0012a4:	3708      	adds	r7, #8
 c0012a6:	46bd      	mov	sp, r7
 c0012a8:	bd80      	pop	{r7, pc}
 c0012aa:	bf00      	nop
 c0012ac:	e000e010 	.word	0xe000e010

0c0012b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c0012b0:	b580      	push	{r7, lr}
 c0012b2:	b082      	sub	sp, #8
 c0012b4:	af00      	add	r7, sp, #0
 c0012b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 c0012b8:	6878      	ldr	r0, [r7, #4]
 c0012ba:	f7ff ff29 	bl	c001110 <__NVIC_SetPriorityGrouping>
}
 c0012be:	bf00      	nop
 c0012c0:	3708      	adds	r7, #8
 c0012c2:	46bd      	mov	sp, r7
 c0012c4:	bd80      	pop	{r7, pc}

0c0012c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c0012c6:	b580      	push	{r7, lr}
 c0012c8:	b086      	sub	sp, #24
 c0012ca:	af00      	add	r7, sp, #0
 c0012cc:	4603      	mov	r3, r0
 c0012ce:	60b9      	str	r1, [r7, #8]
 c0012d0:	607a      	str	r2, [r7, #4]
 c0012d2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 c0012d4:	f7ff ff40 	bl	c001158 <__NVIC_GetPriorityGrouping>
 c0012d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 c0012da:	687a      	ldr	r2, [r7, #4]
 c0012dc:	68b9      	ldr	r1, [r7, #8]
 c0012de:	6978      	ldr	r0, [r7, #20]
 c0012e0:	f7ff ff90 	bl	c001204 <NVIC_EncodePriority>
 c0012e4:	4602      	mov	r2, r0
 c0012e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c0012ea:	4611      	mov	r1, r2
 c0012ec:	4618      	mov	r0, r3
 c0012ee:	f7ff ff5f 	bl	c0011b0 <__NVIC_SetPriority>
}
 c0012f2:	bf00      	nop
 c0012f4:	3718      	adds	r7, #24
 c0012f6:	46bd      	mov	sp, r7
 c0012f8:	bd80      	pop	{r7, pc}

0c0012fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 c0012fa:	b580      	push	{r7, lr}
 c0012fc:	b082      	sub	sp, #8
 c0012fe:	af00      	add	r7, sp, #0
 c001300:	4603      	mov	r3, r0
 c001302:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 c001304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c001308:	4618      	mov	r0, r3
 c00130a:	f7ff ff33 	bl	c001174 <__NVIC_EnableIRQ>
}
 c00130e:	bf00      	nop
 c001310:	3708      	adds	r7, #8
 c001312:	46bd      	mov	sp, r7
 c001314:	bd80      	pop	{r7, pc}

0c001316 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 c001316:	b580      	push	{r7, lr}
 c001318:	b082      	sub	sp, #8
 c00131a:	af00      	add	r7, sp, #0
 c00131c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 c00131e:	6878      	ldr	r0, [r7, #4]
 c001320:	f7ff ffa4 	bl	c00126c <SysTick_Config>
 c001324:	4603      	mov	r3, r0
}
 c001326:	4618      	mov	r0, r3
 c001328:	3708      	adds	r7, #8
 c00132a:	46bd      	mov	sp, r7
 c00132c:	bd80      	pop	{r7, pc}

0c00132e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 c00132e:	b480      	push	{r7}
 c001330:	b085      	sub	sp, #20
 c001332:	af00      	add	r7, sp, #0
 c001334:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 c001336:	2300      	movs	r3, #0
 c001338:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 c00133a:	687b      	ldr	r3, [r7, #4]
 c00133c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 c001340:	b2db      	uxtb	r3, r3
 c001342:	2b02      	cmp	r3, #2
 c001344:	d008      	beq.n	c001358 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 c001346:	687b      	ldr	r3, [r7, #4]
 c001348:	2204      	movs	r2, #4
 c00134a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 c00134c:	687b      	ldr	r3, [r7, #4]
 c00134e:	2200      	movs	r2, #0
 c001350:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 c001354:	2301      	movs	r3, #1
 c001356:	e040      	b.n	c0013da <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 c001358:	687b      	ldr	r3, [r7, #4]
 c00135a:	681b      	ldr	r3, [r3, #0]
 c00135c:	681a      	ldr	r2, [r3, #0]
 c00135e:	687b      	ldr	r3, [r7, #4]
 c001360:	681b      	ldr	r3, [r3, #0]
 c001362:	f022 020e 	bic.w	r2, r2, #14
 c001366:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 c001368:	687b      	ldr	r3, [r7, #4]
 c00136a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 c00136c:	681a      	ldr	r2, [r3, #0]
 c00136e:	687b      	ldr	r3, [r7, #4]
 c001370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 c001372:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 c001376:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 c001378:	687b      	ldr	r3, [r7, #4]
 c00137a:	681b      	ldr	r3, [r3, #0]
 c00137c:	681a      	ldr	r2, [r3, #0]
 c00137e:	687b      	ldr	r3, [r7, #4]
 c001380:	681b      	ldr	r3, [r3, #0]
 c001382:	f022 0201 	bic.w	r2, r2, #1
 c001386:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 c001388:	687b      	ldr	r3, [r7, #4]
 c00138a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00138c:	f003 021c 	and.w	r2, r3, #28
 c001390:	687b      	ldr	r3, [r7, #4]
 c001392:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c001394:	2101      	movs	r1, #1
 c001396:	fa01 f202 	lsl.w	r2, r1, r2
 c00139a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 c00139c:	687b      	ldr	r3, [r7, #4]
 c00139e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c0013a0:	687a      	ldr	r2, [r7, #4]
 c0013a2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 c0013a4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 c0013a6:	687b      	ldr	r3, [r7, #4]
 c0013a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c0013aa:	2b00      	cmp	r3, #0
 c0013ac:	d00c      	beq.n	c0013c8 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 c0013ae:	687b      	ldr	r3, [r7, #4]
 c0013b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c0013b2:	681a      	ldr	r2, [r3, #0]
 c0013b4:	687b      	ldr	r3, [r7, #4]
 c0013b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c0013b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 c0013bc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 c0013be:	687b      	ldr	r3, [r7, #4]
 c0013c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c0013c2:	687a      	ldr	r2, [r7, #4]
 c0013c4:	6e52      	ldr	r2, [r2, #100]	; 0x64
 c0013c6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 c0013c8:	687b      	ldr	r3, [r7, #4]
 c0013ca:	2201      	movs	r2, #1
 c0013cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 c0013d0:	687b      	ldr	r3, [r7, #4]
 c0013d2:	2200      	movs	r2, #0
 c0013d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 c0013d8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 c0013da:	4618      	mov	r0, r3
 c0013dc:	3714      	adds	r7, #20
 c0013de:	46bd      	mov	sp, r7
 c0013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0013e4:	4770      	bx	lr

0c0013e6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 c0013e6:	b580      	push	{r7, lr}
 c0013e8:	b084      	sub	sp, #16
 c0013ea:	af00      	add	r7, sp, #0
 c0013ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 c0013ee:	2300      	movs	r3, #0
 c0013f0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 c0013f2:	687b      	ldr	r3, [r7, #4]
 c0013f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 c0013f8:	b2db      	uxtb	r3, r3
 c0013fa:	2b02      	cmp	r3, #2
 c0013fc:	d005      	beq.n	c00140a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 c0013fe:	687b      	ldr	r3, [r7, #4]
 c001400:	2204      	movs	r2, #4
 c001402:	645a      	str	r2, [r3, #68]	; 0x44

    status = HAL_ERROR;
 c001404:	2301      	movs	r3, #1
 c001406:	73fb      	strb	r3, [r7, #15]
 c001408:	e047      	b.n	c00149a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 c00140a:	687b      	ldr	r3, [r7, #4]
 c00140c:	681b      	ldr	r3, [r3, #0]
 c00140e:	681a      	ldr	r2, [r3, #0]
 c001410:	687b      	ldr	r3, [r7, #4]
 c001412:	681b      	ldr	r3, [r3, #0]
 c001414:	f022 020e 	bic.w	r2, r2, #14
 c001418:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 c00141a:	687b      	ldr	r3, [r7, #4]
 c00141c:	681b      	ldr	r3, [r3, #0]
 c00141e:	681a      	ldr	r2, [r3, #0]
 c001420:	687b      	ldr	r3, [r7, #4]
 c001422:	681b      	ldr	r3, [r3, #0]
 c001424:	f022 0201 	bic.w	r2, r2, #1
 c001428:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 c00142a:	687b      	ldr	r3, [r7, #4]
 c00142c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 c00142e:	681a      	ldr	r2, [r3, #0]
 c001430:	687b      	ldr	r3, [r7, #4]
 c001432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 c001434:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 c001438:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 c00143a:	687b      	ldr	r3, [r7, #4]
 c00143c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00143e:	f003 021c 	and.w	r2, r3, #28
 c001442:	687b      	ldr	r3, [r7, #4]
 c001444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c001446:	2101      	movs	r1, #1
 c001448:	fa01 f202 	lsl.w	r2, r1, r2
 c00144c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 c00144e:	687b      	ldr	r3, [r7, #4]
 c001450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c001452:	687a      	ldr	r2, [r7, #4]
 c001454:	6d92      	ldr	r2, [r2, #88]	; 0x58
 c001456:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 c001458:	687b      	ldr	r3, [r7, #4]
 c00145a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c00145c:	2b00      	cmp	r3, #0
 c00145e:	d00c      	beq.n	c00147a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 c001460:	687b      	ldr	r3, [r7, #4]
 c001462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c001464:	681a      	ldr	r2, [r3, #0]
 c001466:	687b      	ldr	r3, [r7, #4]
 c001468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c00146a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 c00146e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 c001470:	687b      	ldr	r3, [r7, #4]
 c001472:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c001474:	687a      	ldr	r2, [r7, #4]
 c001476:	6e52      	ldr	r2, [r2, #100]	; 0x64
 c001478:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 c00147a:	687b      	ldr	r3, [r7, #4]
 c00147c:	2201      	movs	r2, #1
 c00147e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 c001482:	687b      	ldr	r3, [r7, #4]
 c001484:	2200      	movs	r2, #0
 c001486:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 c00148a:	687b      	ldr	r3, [r7, #4]
 c00148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c00148e:	2b00      	cmp	r3, #0
 c001490:	d003      	beq.n	c00149a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 c001492:	687b      	ldr	r3, [r7, #4]
 c001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c001496:	6878      	ldr	r0, [r7, #4]
 c001498:	4798      	blx	r3
    }
  }
  return status;
 c00149a:	7bfb      	ldrb	r3, [r7, #15]
}
 c00149c:	4618      	mov	r0, r3
 c00149e:	3710      	adds	r7, #16
 c0014a0:	46bd      	mov	sp, r7
 c0014a2:	bd80      	pop	{r7, pc}

0c0014a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 c0014a4:	b480      	push	{r7}
 c0014a6:	b087      	sub	sp, #28
 c0014a8:	af00      	add	r7, sp, #0
 c0014aa:	6078      	str	r0, [r7, #4]
 c0014ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 c0014ae:	2300      	movs	r3, #0
 c0014b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 c0014b2:	e158      	b.n	c001766 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 c0014b4:	683b      	ldr	r3, [r7, #0]
 c0014b6:	681a      	ldr	r2, [r3, #0]
 c0014b8:	2101      	movs	r1, #1
 c0014ba:	697b      	ldr	r3, [r7, #20]
 c0014bc:	fa01 f303 	lsl.w	r3, r1, r3
 c0014c0:	4013      	ands	r3, r2
 c0014c2:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 c0014c4:	68fb      	ldr	r3, [r7, #12]
 c0014c6:	2b00      	cmp	r3, #0
 c0014c8:	f000 814a 	beq.w	c001760 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 c0014cc:	683b      	ldr	r3, [r7, #0]
 c0014ce:	685b      	ldr	r3, [r3, #4]
 c0014d0:	2b01      	cmp	r3, #1
 c0014d2:	d00b      	beq.n	c0014ec <HAL_GPIO_Init+0x48>
 c0014d4:	683b      	ldr	r3, [r7, #0]
 c0014d6:	685b      	ldr	r3, [r3, #4]
 c0014d8:	2b02      	cmp	r3, #2
 c0014da:	d007      	beq.n	c0014ec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 c0014dc:	683b      	ldr	r3, [r7, #0]
 c0014de:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 c0014e0:	2b11      	cmp	r3, #17
 c0014e2:	d003      	beq.n	c0014ec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 c0014e4:	683b      	ldr	r3, [r7, #0]
 c0014e6:	685b      	ldr	r3, [r3, #4]
 c0014e8:	2b12      	cmp	r3, #18
 c0014ea:	d130      	bne.n	c00154e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 c0014ec:	687b      	ldr	r3, [r7, #4]
 c0014ee:	689b      	ldr	r3, [r3, #8]
 c0014f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 c0014f2:	697b      	ldr	r3, [r7, #20]
 c0014f4:	005b      	lsls	r3, r3, #1
 c0014f6:	2203      	movs	r2, #3
 c0014f8:	fa02 f303 	lsl.w	r3, r2, r3
 c0014fc:	43db      	mvns	r3, r3
 c0014fe:	693a      	ldr	r2, [r7, #16]
 c001500:	4013      	ands	r3, r2
 c001502:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 c001504:	683b      	ldr	r3, [r7, #0]
 c001506:	68da      	ldr	r2, [r3, #12]
 c001508:	697b      	ldr	r3, [r7, #20]
 c00150a:	005b      	lsls	r3, r3, #1
 c00150c:	fa02 f303 	lsl.w	r3, r2, r3
 c001510:	693a      	ldr	r2, [r7, #16]
 c001512:	4313      	orrs	r3, r2
 c001514:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 c001516:	687b      	ldr	r3, [r7, #4]
 c001518:	693a      	ldr	r2, [r7, #16]
 c00151a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 c00151c:	687b      	ldr	r3, [r7, #4]
 c00151e:	685b      	ldr	r3, [r3, #4]
 c001520:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 c001522:	2201      	movs	r2, #1
 c001524:	697b      	ldr	r3, [r7, #20]
 c001526:	fa02 f303 	lsl.w	r3, r2, r3
 c00152a:	43db      	mvns	r3, r3
 c00152c:	693a      	ldr	r2, [r7, #16]
 c00152e:	4013      	ands	r3, r2
 c001530:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 c001532:	683b      	ldr	r3, [r7, #0]
 c001534:	685b      	ldr	r3, [r3, #4]
 c001536:	091b      	lsrs	r3, r3, #4
 c001538:	f003 0201 	and.w	r2, r3, #1
 c00153c:	697b      	ldr	r3, [r7, #20]
 c00153e:	fa02 f303 	lsl.w	r3, r2, r3
 c001542:	693a      	ldr	r2, [r7, #16]
 c001544:	4313      	orrs	r3, r2
 c001546:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 c001548:	687b      	ldr	r3, [r7, #4]
 c00154a:	693a      	ldr	r2, [r7, #16]
 c00154c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 c00154e:	687b      	ldr	r3, [r7, #4]
 c001550:	68db      	ldr	r3, [r3, #12]
 c001552:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 c001554:	697b      	ldr	r3, [r7, #20]
 c001556:	005b      	lsls	r3, r3, #1
 c001558:	2203      	movs	r2, #3
 c00155a:	fa02 f303 	lsl.w	r3, r2, r3
 c00155e:	43db      	mvns	r3, r3
 c001560:	693a      	ldr	r2, [r7, #16]
 c001562:	4013      	ands	r3, r2
 c001564:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 c001566:	683b      	ldr	r3, [r7, #0]
 c001568:	689a      	ldr	r2, [r3, #8]
 c00156a:	697b      	ldr	r3, [r7, #20]
 c00156c:	005b      	lsls	r3, r3, #1
 c00156e:	fa02 f303 	lsl.w	r3, r2, r3
 c001572:	693a      	ldr	r2, [r7, #16]
 c001574:	4313      	orrs	r3, r2
 c001576:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 c001578:	687b      	ldr	r3, [r7, #4]
 c00157a:	693a      	ldr	r2, [r7, #16]
 c00157c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 c00157e:	683b      	ldr	r3, [r7, #0]
 c001580:	685b      	ldr	r3, [r3, #4]
 c001582:	2b02      	cmp	r3, #2
 c001584:	d003      	beq.n	c00158e <HAL_GPIO_Init+0xea>
 c001586:	683b      	ldr	r3, [r7, #0]
 c001588:	685b      	ldr	r3, [r3, #4]
 c00158a:	2b12      	cmp	r3, #18
 c00158c:	d123      	bne.n	c0015d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 c00158e:	697b      	ldr	r3, [r7, #20]
 c001590:	08da      	lsrs	r2, r3, #3
 c001592:	687b      	ldr	r3, [r7, #4]
 c001594:	3208      	adds	r2, #8
 c001596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c00159a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 c00159c:	697b      	ldr	r3, [r7, #20]
 c00159e:	f003 0307 	and.w	r3, r3, #7
 c0015a2:	009b      	lsls	r3, r3, #2
 c0015a4:	220f      	movs	r2, #15
 c0015a6:	fa02 f303 	lsl.w	r3, r2, r3
 c0015aa:	43db      	mvns	r3, r3
 c0015ac:	693a      	ldr	r2, [r7, #16]
 c0015ae:	4013      	ands	r3, r2
 c0015b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 c0015b2:	683b      	ldr	r3, [r7, #0]
 c0015b4:	691a      	ldr	r2, [r3, #16]
 c0015b6:	697b      	ldr	r3, [r7, #20]
 c0015b8:	f003 0307 	and.w	r3, r3, #7
 c0015bc:	009b      	lsls	r3, r3, #2
 c0015be:	fa02 f303 	lsl.w	r3, r2, r3
 c0015c2:	693a      	ldr	r2, [r7, #16]
 c0015c4:	4313      	orrs	r3, r2
 c0015c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 c0015c8:	697b      	ldr	r3, [r7, #20]
 c0015ca:	08da      	lsrs	r2, r3, #3
 c0015cc:	687b      	ldr	r3, [r7, #4]
 c0015ce:	3208      	adds	r2, #8
 c0015d0:	6939      	ldr	r1, [r7, #16]
 c0015d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 c0015d6:	687b      	ldr	r3, [r7, #4]
 c0015d8:	681b      	ldr	r3, [r3, #0]
 c0015da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 c0015dc:	697b      	ldr	r3, [r7, #20]
 c0015de:	005b      	lsls	r3, r3, #1
 c0015e0:	2203      	movs	r2, #3
 c0015e2:	fa02 f303 	lsl.w	r3, r2, r3
 c0015e6:	43db      	mvns	r3, r3
 c0015e8:	693a      	ldr	r2, [r7, #16]
 c0015ea:	4013      	ands	r3, r2
 c0015ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 c0015ee:	683b      	ldr	r3, [r7, #0]
 c0015f0:	685b      	ldr	r3, [r3, #4]
 c0015f2:	f003 0203 	and.w	r2, r3, #3
 c0015f6:	697b      	ldr	r3, [r7, #20]
 c0015f8:	005b      	lsls	r3, r3, #1
 c0015fa:	fa02 f303 	lsl.w	r3, r2, r3
 c0015fe:	693a      	ldr	r2, [r7, #16]
 c001600:	4313      	orrs	r3, r2
 c001602:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 c001604:	687b      	ldr	r3, [r7, #4]
 c001606:	693a      	ldr	r2, [r7, #16]
 c001608:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 c00160a:	683b      	ldr	r3, [r7, #0]
 c00160c:	685b      	ldr	r3, [r3, #4]
 c00160e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c001612:	2b00      	cmp	r3, #0
 c001614:	f000 80a4 	beq.w	c001760 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 c001618:	4a5a      	ldr	r2, [pc, #360]	; (c001784 <HAL_GPIO_Init+0x2e0>)
 c00161a:	697b      	ldr	r3, [r7, #20]
 c00161c:	089b      	lsrs	r3, r3, #2
 c00161e:	3318      	adds	r3, #24
 c001620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c001624:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 c001626:	697b      	ldr	r3, [r7, #20]
 c001628:	f003 0303 	and.w	r3, r3, #3
 c00162c:	00db      	lsls	r3, r3, #3
 c00162e:	220f      	movs	r2, #15
 c001630:	fa02 f303 	lsl.w	r3, r2, r3
 c001634:	43db      	mvns	r3, r3
 c001636:	693a      	ldr	r2, [r7, #16]
 c001638:	4013      	ands	r3, r2
 c00163a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 c00163c:	687b      	ldr	r3, [r7, #4]
 c00163e:	4a52      	ldr	r2, [pc, #328]	; (c001788 <HAL_GPIO_Init+0x2e4>)
 c001640:	4293      	cmp	r3, r2
 c001642:	d025      	beq.n	c001690 <HAL_GPIO_Init+0x1ec>
 c001644:	687b      	ldr	r3, [r7, #4]
 c001646:	4a51      	ldr	r2, [pc, #324]	; (c00178c <HAL_GPIO_Init+0x2e8>)
 c001648:	4293      	cmp	r3, r2
 c00164a:	d01f      	beq.n	c00168c <HAL_GPIO_Init+0x1e8>
 c00164c:	687b      	ldr	r3, [r7, #4]
 c00164e:	4a50      	ldr	r2, [pc, #320]	; (c001790 <HAL_GPIO_Init+0x2ec>)
 c001650:	4293      	cmp	r3, r2
 c001652:	d019      	beq.n	c001688 <HAL_GPIO_Init+0x1e4>
 c001654:	687b      	ldr	r3, [r7, #4]
 c001656:	4a4f      	ldr	r2, [pc, #316]	; (c001794 <HAL_GPIO_Init+0x2f0>)
 c001658:	4293      	cmp	r3, r2
 c00165a:	d013      	beq.n	c001684 <HAL_GPIO_Init+0x1e0>
 c00165c:	687b      	ldr	r3, [r7, #4]
 c00165e:	4a4e      	ldr	r2, [pc, #312]	; (c001798 <HAL_GPIO_Init+0x2f4>)
 c001660:	4293      	cmp	r3, r2
 c001662:	d00d      	beq.n	c001680 <HAL_GPIO_Init+0x1dc>
 c001664:	687b      	ldr	r3, [r7, #4]
 c001666:	4a4d      	ldr	r2, [pc, #308]	; (c00179c <HAL_GPIO_Init+0x2f8>)
 c001668:	4293      	cmp	r3, r2
 c00166a:	d007      	beq.n	c00167c <HAL_GPIO_Init+0x1d8>
 c00166c:	687b      	ldr	r3, [r7, #4]
 c00166e:	4a4c      	ldr	r2, [pc, #304]	; (c0017a0 <HAL_GPIO_Init+0x2fc>)
 c001670:	4293      	cmp	r3, r2
 c001672:	d101      	bne.n	c001678 <HAL_GPIO_Init+0x1d4>
 c001674:	2306      	movs	r3, #6
 c001676:	e00c      	b.n	c001692 <HAL_GPIO_Init+0x1ee>
 c001678:	2307      	movs	r3, #7
 c00167a:	e00a      	b.n	c001692 <HAL_GPIO_Init+0x1ee>
 c00167c:	2305      	movs	r3, #5
 c00167e:	e008      	b.n	c001692 <HAL_GPIO_Init+0x1ee>
 c001680:	2304      	movs	r3, #4
 c001682:	e006      	b.n	c001692 <HAL_GPIO_Init+0x1ee>
 c001684:	2303      	movs	r3, #3
 c001686:	e004      	b.n	c001692 <HAL_GPIO_Init+0x1ee>
 c001688:	2302      	movs	r3, #2
 c00168a:	e002      	b.n	c001692 <HAL_GPIO_Init+0x1ee>
 c00168c:	2301      	movs	r3, #1
 c00168e:	e000      	b.n	c001692 <HAL_GPIO_Init+0x1ee>
 c001690:	2300      	movs	r3, #0
 c001692:	697a      	ldr	r2, [r7, #20]
 c001694:	f002 0203 	and.w	r2, r2, #3
 c001698:	00d2      	lsls	r2, r2, #3
 c00169a:	4093      	lsls	r3, r2
 c00169c:	693a      	ldr	r2, [r7, #16]
 c00169e:	4313      	orrs	r3, r2
 c0016a0:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 c0016a2:	4938      	ldr	r1, [pc, #224]	; (c001784 <HAL_GPIO_Init+0x2e0>)
 c0016a4:	697b      	ldr	r3, [r7, #20]
 c0016a6:	089b      	lsrs	r3, r3, #2
 c0016a8:	3318      	adds	r3, #24
 c0016aa:	693a      	ldr	r2, [r7, #16]
 c0016ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 c0016b0:	4b34      	ldr	r3, [pc, #208]	; (c001784 <HAL_GPIO_Init+0x2e0>)
 c0016b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c0016b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c0016b8:	68fb      	ldr	r3, [r7, #12]
 c0016ba:	43db      	mvns	r3, r3
 c0016bc:	693a      	ldr	r2, [r7, #16]
 c0016be:	4013      	ands	r3, r2
 c0016c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 c0016c2:	683b      	ldr	r3, [r7, #0]
 c0016c4:	685b      	ldr	r3, [r3, #4]
 c0016c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c0016ca:	2b00      	cmp	r3, #0
 c0016cc:	d003      	beq.n	c0016d6 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 c0016ce:	693a      	ldr	r2, [r7, #16]
 c0016d0:	68fb      	ldr	r3, [r7, #12]
 c0016d2:	4313      	orrs	r3, r2
 c0016d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 c0016d6:	4a2b      	ldr	r2, [pc, #172]	; (c001784 <HAL_GPIO_Init+0x2e0>)
 c0016d8:	693b      	ldr	r3, [r7, #16]
 c0016da:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 c0016de:	4b29      	ldr	r3, [pc, #164]	; (c001784 <HAL_GPIO_Init+0x2e0>)
 c0016e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c0016e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c0016e6:	68fb      	ldr	r3, [r7, #12]
 c0016e8:	43db      	mvns	r3, r3
 c0016ea:	693a      	ldr	r2, [r7, #16]
 c0016ec:	4013      	ands	r3, r2
 c0016ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 c0016f0:	683b      	ldr	r3, [r7, #0]
 c0016f2:	685b      	ldr	r3, [r3, #4]
 c0016f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c0016f8:	2b00      	cmp	r3, #0
 c0016fa:	d003      	beq.n	c001704 <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 c0016fc:	693a      	ldr	r2, [r7, #16]
 c0016fe:	68fb      	ldr	r3, [r7, #12]
 c001700:	4313      	orrs	r3, r2
 c001702:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 c001704:	4a1f      	ldr	r2, [pc, #124]	; (c001784 <HAL_GPIO_Init+0x2e0>)
 c001706:	693b      	ldr	r3, [r7, #16]
 c001708:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 c00170c:	4b1d      	ldr	r3, [pc, #116]	; (c001784 <HAL_GPIO_Init+0x2e0>)
 c00170e:	681b      	ldr	r3, [r3, #0]
 c001710:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c001712:	68fb      	ldr	r3, [r7, #12]
 c001714:	43db      	mvns	r3, r3
 c001716:	693a      	ldr	r2, [r7, #16]
 c001718:	4013      	ands	r3, r2
 c00171a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 c00171c:	683b      	ldr	r3, [r7, #0]
 c00171e:	685b      	ldr	r3, [r3, #4]
 c001720:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c001724:	2b00      	cmp	r3, #0
 c001726:	d003      	beq.n	c001730 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 c001728:	693a      	ldr	r2, [r7, #16]
 c00172a:	68fb      	ldr	r3, [r7, #12]
 c00172c:	4313      	orrs	r3, r2
 c00172e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 c001730:	4a14      	ldr	r2, [pc, #80]	; (c001784 <HAL_GPIO_Init+0x2e0>)
 c001732:	693b      	ldr	r3, [r7, #16]
 c001734:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 c001736:	4b13      	ldr	r3, [pc, #76]	; (c001784 <HAL_GPIO_Init+0x2e0>)
 c001738:	685b      	ldr	r3, [r3, #4]
 c00173a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c00173c:	68fb      	ldr	r3, [r7, #12]
 c00173e:	43db      	mvns	r3, r3
 c001740:	693a      	ldr	r2, [r7, #16]
 c001742:	4013      	ands	r3, r2
 c001744:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 c001746:	683b      	ldr	r3, [r7, #0]
 c001748:	685b      	ldr	r3, [r3, #4]
 c00174a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 c00174e:	2b00      	cmp	r3, #0
 c001750:	d003      	beq.n	c00175a <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 c001752:	693a      	ldr	r2, [r7, #16]
 c001754:	68fb      	ldr	r3, [r7, #12]
 c001756:	4313      	orrs	r3, r2
 c001758:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 c00175a:	4a0a      	ldr	r2, [pc, #40]	; (c001784 <HAL_GPIO_Init+0x2e0>)
 c00175c:	693b      	ldr	r3, [r7, #16]
 c00175e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 c001760:	697b      	ldr	r3, [r7, #20]
 c001762:	3301      	adds	r3, #1
 c001764:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 c001766:	683b      	ldr	r3, [r7, #0]
 c001768:	681a      	ldr	r2, [r3, #0]
 c00176a:	697b      	ldr	r3, [r7, #20]
 c00176c:	fa22 f303 	lsr.w	r3, r2, r3
 c001770:	2b00      	cmp	r3, #0
 c001772:	f47f ae9f 	bne.w	c0014b4 <HAL_GPIO_Init+0x10>
  }
}
 c001776:	bf00      	nop
 c001778:	bf00      	nop
 c00177a:	371c      	adds	r7, #28
 c00177c:	46bd      	mov	sp, r7
 c00177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001782:	4770      	bx	lr
 c001784:	5002f400 	.word	0x5002f400
 c001788:	52020000 	.word	0x52020000
 c00178c:	52020400 	.word	0x52020400
 c001790:	52020800 	.word	0x52020800
 c001794:	52020c00 	.word	0x52020c00
 c001798:	52021000 	.word	0x52021000
 c00179c:	52021400 	.word	0x52021400
 c0017a0:	52021800 	.word	0x52021800

0c0017a4 <HAL_GPIO_ConfigPinAttributes>:
  * @param  GPIO_Pin specifies the pin(s) to configure the secure attribute
  * @param  PinAttributes specifies the pin(s) to be set in secure mode, other being set non secured.
  * @retval None
  */
void HAL_GPIO_ConfigPinAttributes(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint32_t PinAttributes)
{
 c0017a4:	b480      	push	{r7}
 c0017a6:	b089      	sub	sp, #36	; 0x24
 c0017a8:	af00      	add	r7, sp, #0
 c0017aa:	60f8      	str	r0, [r7, #12]
 c0017ac:	460b      	mov	r3, r1
 c0017ae:	607a      	str	r2, [r7, #4]
 c0017b0:	817b      	strh	r3, [r7, #10]
  uint32_t position = 0U;
 c0017b2:	2300      	movs	r3, #0
 c0017b4:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ATTRIBUTES(PinAttributes));

  temp = GPIOx->SECCFGR;
 c0017b6:	68fb      	ldr	r3, [r7, #12]
 c0017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c0017ba:	61bb      	str	r3, [r7, #24]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 c0017bc:	e01b      	b.n	c0017f6 <HAL_GPIO_ConfigPinAttributes+0x52>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position);
 c0017be:	897a      	ldrh	r2, [r7, #10]
 c0017c0:	2101      	movs	r1, #1
 c0017c2:	69fb      	ldr	r3, [r7, #28]
 c0017c4:	fa01 f303 	lsl.w	r3, r1, r3
 c0017c8:	4013      	ands	r3, r2
 c0017ca:	617b      	str	r3, [r7, #20]

    if(iocurrent != 0U)
 c0017cc:	697b      	ldr	r3, [r7, #20]
 c0017ce:	2b00      	cmp	r3, #0
 c0017d0:	d00e      	beq.n	c0017f0 <HAL_GPIO_ConfigPinAttributes+0x4c>
    {
      /* Configure the IO secure attribute */
      temp &= ~(GPIO_SECCFGR_SEC0 << position) ;
 c0017d2:	2201      	movs	r2, #1
 c0017d4:	69fb      	ldr	r3, [r7, #28]
 c0017d6:	fa02 f303 	lsl.w	r3, r2, r3
 c0017da:	43db      	mvns	r3, r3
 c0017dc:	69ba      	ldr	r2, [r7, #24]
 c0017de:	4013      	ands	r3, r2
 c0017e0:	61bb      	str	r3, [r7, #24]
      temp |= (PinAttributes << position);
 c0017e2:	687a      	ldr	r2, [r7, #4]
 c0017e4:	69fb      	ldr	r3, [r7, #28]
 c0017e6:	fa02 f303 	lsl.w	r3, r2, r3
 c0017ea:	69ba      	ldr	r2, [r7, #24]
 c0017ec:	4313      	orrs	r3, r2
 c0017ee:	61bb      	str	r3, [r7, #24]
    }
    position++;
 c0017f0:	69fb      	ldr	r3, [r7, #28]
 c0017f2:	3301      	adds	r3, #1
 c0017f4:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0U)
 c0017f6:	897a      	ldrh	r2, [r7, #10]
 c0017f8:	69fb      	ldr	r3, [r7, #28]
 c0017fa:	fa42 f303 	asr.w	r3, r2, r3
 c0017fe:	2b00      	cmp	r3, #0
 c001800:	d1dd      	bne.n	c0017be <HAL_GPIO_ConfigPinAttributes+0x1a>
  }

  /* Set secure attributes */
  GPIOx->SECCFGR = temp;
 c001802:	68fb      	ldr	r3, [r7, #12]
 c001804:	69ba      	ldr	r2, [r7, #24]
 c001806:	631a      	str	r2, [r3, #48]	; 0x30
}
 c001808:	bf00      	nop
 c00180a:	3724      	adds	r7, #36	; 0x24
 c00180c:	46bd      	mov	sp, r7
 c00180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001812:	4770      	bx	lr

0c001814 <HAL_GTZC_TZSC_ConfigPeriphAttributes>:
  * @param  PeriphAttributes Peripheral attributes, see @ref GTZC_TZSC_PeriphAttributes.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_TZSC_ConfigPeriphAttributes(uint32_t PeriphId,
                                                       uint32_t PeriphAttributes)
{
 c001814:	b480      	push	{r7}
 c001816:	b085      	sub	sp, #20
 c001818:	af00      	add	r7, sp, #0
 c00181a:	6078      	str	r0, [r7, #4]
 c00181c:	6039      	str	r1, [r7, #0]
  uint32_t register_address;

  /* check entry parameters */
  if (   (PeriphAttributes > (GTZC_TZSC_PERIPH_SEC | GTZC_TZSC_PERIPH_PRIV))
 c00181e:	683b      	ldr	r3, [r7, #0]
 c001820:	f5b3 7f41 	cmp.w	r3, #772	; 0x304
 c001824:	d216      	bcs.n	c001854 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x40>
      || (  HAL_GTZC_GET_ARRAY_INDEX(PeriphId) >= GTZC_TZSC_PERIPH_NUMBER)
 c001826:	687b      	ldr	r3, [r7, #4]
 c001828:	0f1b      	lsrs	r3, r3, #28
 c00182a:	015a      	lsls	r2, r3, #5
 c00182c:	687b      	ldr	r3, [r7, #4]
 c00182e:	f003 031f 	and.w	r3, r3, #31
 c001832:	4413      	add	r3, r2
 c001834:	2b32      	cmp	r3, #50	; 0x32
 c001836:	d80d      	bhi.n	c001854 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x40>
      || (   ((PeriphId & GTZC_PERIPH_ALL) != 0U)
 c001838:	687b      	ldr	r3, [r7, #4]
 c00183a:	f003 0320 	and.w	r3, r3, #32
 c00183e:	2b00      	cmp	r3, #0
 c001840:	d00a      	beq.n	c001858 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x44>
          && (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) != 0U)))
 c001842:	687b      	ldr	r3, [r7, #4]
 c001844:	0f1b      	lsrs	r3, r3, #28
 c001846:	015a      	lsls	r2, r3, #5
 c001848:	687b      	ldr	r3, [r7, #4]
 c00184a:	f003 031f 	and.w	r3, r3, #31
 c00184e:	4413      	add	r3, r2
 c001850:	2b00      	cmp	r3, #0
 c001852:	d001      	beq.n	c001858 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x44>
  {
    return HAL_ERROR;
 c001854:	2301      	movs	r3, #1
 c001856:	e0a8      	b.n	c0019aa <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x196>
  }

  if ((PeriphId & GTZC_PERIPH_ALL) != 0U)
 c001858:	687b      	ldr	r3, [r7, #4]
 c00185a:	f003 0320 	and.w	r3, r3, #32
 c00185e:	2b00      	cmp	r3, #0
 c001860:	d04e      	beq.n	c001900 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xec>
  {
    /* special case where same attributes are applied to all peripherals */

#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    /* secure configuration */
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c001862:	683a      	ldr	r2, [r7, #0]
 c001864:	f240 1301 	movw	r3, #257	; 0x101
 c001868:	4013      	ands	r3, r2
 c00186a:	f240 1201 	movw	r2, #257	; 0x101
 c00186e:	4293      	cmp	r3, r2
 c001870:	d10e      	bne.n	c001890 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x7c>
    {
      SET_BIT(GTZC_TZSC->SECCFGR1, TZSC_SECCFGR1_ALL);
 c001872:	4b51      	ldr	r3, [pc, #324]	; (c0019b8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c001874:	691b      	ldr	r3, [r3, #16]
 c001876:	4b50      	ldr	r3, [pc, #320]	; (c0019b8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c001878:	f04f 32ff 	mov.w	r2, #4294967295
 c00187c:	611a      	str	r2, [r3, #16]
      SET_BIT(GTZC_TZSC->SECCFGR2, TZSC_SECCFGR2_ALL);
 c00187e:	4b4e      	ldr	r3, [pc, #312]	; (c0019b8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c001880:	695b      	ldr	r3, [r3, #20]
 c001882:	4a4d      	ldr	r2, [pc, #308]	; (c0019b8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c001884:	ea6f 43d3 	mvn.w	r3, r3, lsr #19
 c001888:	ea6f 43c3 	mvn.w	r3, r3, lsl #19
 c00188c:	6153      	str	r3, [r2, #20]
 c00188e:	e00f      	b.n	c0018b0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x9c>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c001890:	683b      	ldr	r3, [r7, #0]
 c001892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c001896:	2b00      	cmp	r3, #0
 c001898:	d00a      	beq.n	c0018b0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x9c>
    {
      CLEAR_BIT(GTZC_TZSC->SECCFGR1, TZSC_SECCFGR1_ALL);
 c00189a:	4b47      	ldr	r3, [pc, #284]	; (c0019b8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c00189c:	691b      	ldr	r3, [r3, #16]
 c00189e:	4b46      	ldr	r3, [pc, #280]	; (c0019b8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c0018a0:	2200      	movs	r2, #0
 c0018a2:	611a      	str	r2, [r3, #16]
      CLEAR_BIT(GTZC_TZSC->SECCFGR2, TZSC_SECCFGR2_ALL);
 c0018a4:	4b44      	ldr	r3, [pc, #272]	; (c0019b8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c0018a6:	695b      	ldr	r3, [r3, #20]
 c0018a8:	4a43      	ldr	r2, [pc, #268]	; (c0019b8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c0018aa:	0cdb      	lsrs	r3, r3, #19
 c0018ac:	04db      	lsls	r3, r3, #19
 c0018ae:	6153      	str	r3, [r2, #20]
      /* do nothing */
    }
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

    /* privilege configuration */
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c0018b0:	683a      	ldr	r2, [r7, #0]
 c0018b2:	f240 2302 	movw	r3, #514	; 0x202
 c0018b6:	4013      	ands	r3, r2
 c0018b8:	f240 2202 	movw	r2, #514	; 0x202
 c0018bc:	4293      	cmp	r3, r2
 c0018be:	d10e      	bne.n	c0018de <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xca>
    {
      SET_BIT(GTZC_TZSC->PRIVCFGR1, TZSC_PRIVCFGR1_ALL);
 c0018c0:	4b3d      	ldr	r3, [pc, #244]	; (c0019b8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c0018c2:	6a1b      	ldr	r3, [r3, #32]
 c0018c4:	4b3c      	ldr	r3, [pc, #240]	; (c0019b8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c0018c6:	f04f 32ff 	mov.w	r2, #4294967295
 c0018ca:	621a      	str	r2, [r3, #32]
      SET_BIT(GTZC_TZSC->PRIVCFGR2, TZSC_PRIVCFGR2_ALL);
 c0018cc:	4b3a      	ldr	r3, [pc, #232]	; (c0019b8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c0018ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0018d0:	4a39      	ldr	r2, [pc, #228]	; (c0019b8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c0018d2:	ea6f 43d3 	mvn.w	r3, r3, lsr #19
 c0018d6:	ea6f 43c3 	mvn.w	r3, r3, lsl #19
 c0018da:	6253      	str	r3, [r2, #36]	; 0x24
 c0018dc:	e064      	b.n	c0019a8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x194>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c0018de:	683b      	ldr	r3, [r7, #0]
 c0018e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c0018e4:	2b00      	cmp	r3, #0
 c0018e6:	d05f      	beq.n	c0019a8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x194>
    {
      CLEAR_BIT(GTZC_TZSC->PRIVCFGR1, TZSC_PRIVCFGR1_ALL);
 c0018e8:	4b33      	ldr	r3, [pc, #204]	; (c0019b8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c0018ea:	6a1b      	ldr	r3, [r3, #32]
 c0018ec:	4b32      	ldr	r3, [pc, #200]	; (c0019b8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c0018ee:	2200      	movs	r2, #0
 c0018f0:	621a      	str	r2, [r3, #32]
      CLEAR_BIT(GTZC_TZSC->PRIVCFGR2, TZSC_PRIVCFGR2_ALL);
 c0018f2:	4b31      	ldr	r3, [pc, #196]	; (c0019b8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c0018f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0018f6:	4a30      	ldr	r2, [pc, #192]	; (c0019b8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c0018f8:	0cdb      	lsrs	r3, r3, #19
 c0018fa:	04db      	lsls	r3, r3, #19
 c0018fc:	6253      	str	r3, [r2, #36]	; 0x24
 c0018fe:	e053      	b.n	c0019a8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x194>
    /* common case where only one peripheral is configured */

#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    /* secure configuration */
    register_address =   (uint32_t)&(GTZC_TZSC->SECCFGR1)
                       + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c001900:	687b      	ldr	r3, [r7, #4]
 c001902:	0f1a      	lsrs	r2, r3, #28
 c001904:	4b2d      	ldr	r3, [pc, #180]	; (c0019bc <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a8>)
 c001906:	4413      	add	r3, r2
    register_address =   (uint32_t)&(GTZC_TZSC->SECCFGR1)
 c001908:	009b      	lsls	r3, r3, #2
 c00190a:	60fb      	str	r3, [r7, #12]
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c00190c:	683a      	ldr	r2, [r7, #0]
 c00190e:	f240 1301 	movw	r3, #257	; 0x101
 c001912:	4013      	ands	r3, r2
 c001914:	f240 1201 	movw	r2, #257	; 0x101
 c001918:	4293      	cmp	r3, r2
 c00191a:	d10a      	bne.n	c001932 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x11e>
    {
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c00191c:	68fb      	ldr	r3, [r7, #12]
 c00191e:	6819      	ldr	r1, [r3, #0]
 c001920:	687b      	ldr	r3, [r7, #4]
 c001922:	f003 031f 	and.w	r3, r3, #31
 c001926:	2201      	movs	r2, #1
 c001928:	409a      	lsls	r2, r3
 c00192a:	68fb      	ldr	r3, [r7, #12]
 c00192c:	430a      	orrs	r2, r1
 c00192e:	601a      	str	r2, [r3, #0]
 c001930:	e010      	b.n	c001954 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x140>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c001932:	683b      	ldr	r3, [r7, #0]
 c001934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c001938:	2b00      	cmp	r3, #0
 c00193a:	d00b      	beq.n	c001954 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x140>
    {
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c00193c:	68fb      	ldr	r3, [r7, #12]
 c00193e:	6819      	ldr	r1, [r3, #0]
 c001940:	687b      	ldr	r3, [r7, #4]
 c001942:	f003 031f 	and.w	r3, r3, #31
 c001946:	2201      	movs	r2, #1
 c001948:	fa02 f303 	lsl.w	r3, r2, r3
 c00194c:	43da      	mvns	r2, r3
 c00194e:	68fb      	ldr	r3, [r7, #12]
 c001950:	400a      	ands	r2, r1
 c001952:	601a      	str	r2, [r3, #0]
    }
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

    /* privilege configuration */
    register_address =   (uint32_t)&(GTZC_TZSC->PRIVCFGR1)
                       + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c001954:	687b      	ldr	r3, [r7, #4]
 c001956:	0f1a      	lsrs	r2, r3, #28
 c001958:	4b19      	ldr	r3, [pc, #100]	; (c0019c0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1ac>)
 c00195a:	4413      	add	r3, r2
    register_address =   (uint32_t)&(GTZC_TZSC->PRIVCFGR1)
 c00195c:	009b      	lsls	r3, r3, #2
 c00195e:	60fb      	str	r3, [r7, #12]
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c001960:	683a      	ldr	r2, [r7, #0]
 c001962:	f240 2302 	movw	r3, #514	; 0x202
 c001966:	4013      	ands	r3, r2
 c001968:	f240 2202 	movw	r2, #514	; 0x202
 c00196c:	4293      	cmp	r3, r2
 c00196e:	d10a      	bne.n	c001986 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x172>
    {
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c001970:	68fb      	ldr	r3, [r7, #12]
 c001972:	6819      	ldr	r1, [r3, #0]
 c001974:	687b      	ldr	r3, [r7, #4]
 c001976:	f003 031f 	and.w	r3, r3, #31
 c00197a:	2201      	movs	r2, #1
 c00197c:	409a      	lsls	r2, r3
 c00197e:	68fb      	ldr	r3, [r7, #12]
 c001980:	430a      	orrs	r2, r1
 c001982:	601a      	str	r2, [r3, #0]
 c001984:	e010      	b.n	c0019a8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x194>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c001986:	683b      	ldr	r3, [r7, #0]
 c001988:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c00198c:	2b00      	cmp	r3, #0
 c00198e:	d00b      	beq.n	c0019a8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x194>
    {
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c001990:	68fb      	ldr	r3, [r7, #12]
 c001992:	6819      	ldr	r1, [r3, #0]
 c001994:	687b      	ldr	r3, [r7, #4]
 c001996:	f003 031f 	and.w	r3, r3, #31
 c00199a:	2201      	movs	r2, #1
 c00199c:	fa02 f303 	lsl.w	r3, r2, r3
 c0019a0:	43da      	mvns	r2, r3
 c0019a2:	68fb      	ldr	r3, [r7, #12]
 c0019a4:	400a      	ands	r2, r1
 c0019a6:	601a      	str	r2, [r3, #0]
    else
    {
      /* do nothing */
    }
  }
  return HAL_OK;
 c0019a8:	2300      	movs	r3, #0
}
 c0019aa:	4618      	mov	r0, r3
 c0019ac:	3714      	adds	r7, #20
 c0019ae:	46bd      	mov	sp, r7
 c0019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0019b4:	4770      	bx	lr
 c0019b6:	bf00      	nop
 c0019b8:	50032400 	.word	0x50032400
 c0019bc:	1400c904 	.word	0x1400c904
 c0019c0:	1400c908 	.word	0x1400c908

0c0019c4 <HAL_GTZC_MPCBB_ConfigMem>:
  *         The structure description is available in @ref GTZC_Exported_Types.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_MPCBB_ConfigMem(uint32_t MemBaseAddress,
                                           MPCBB_ConfigTypeDef *pMPCBB_desc)
{
 c0019c4:	b480      	push	{r7}
 c0019c6:	b089      	sub	sp, #36	; 0x24
 c0019c8:	af00      	add	r7, sp, #0
 c0019ca:	6078      	str	r0, [r7, #4]
 c0019cc:	6039      	str	r1, [r7, #0]
  uint32_t size_mask;
  uint32_t size_in_superblocks;
  uint32_t i;

  /* check entry parameters */
  if (   (     !(IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c0019ce:	687b      	ldr	r3, [r7, #4]
 c0019d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c0019d4:	d00b      	beq.n	c0019ee <HAL_GTZC_MPCBB_ConfigMem+0x2a>
 c0019d6:	687b      	ldr	r3, [r7, #4]
 c0019d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c0019dc:	d007      	beq.n	c0019ee <HAL_GTZC_MPCBB_ConfigMem+0x2a>
           &&  !(IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress)))
 c0019de:	687b      	ldr	r3, [r7, #4]
 c0019e0:	4a36      	ldr	r2, [pc, #216]	; (c001abc <HAL_GTZC_MPCBB_ConfigMem+0xf8>)
 c0019e2:	4293      	cmp	r3, r2
 c0019e4:	d003      	beq.n	c0019ee <HAL_GTZC_MPCBB_ConfigMem+0x2a>
 c0019e6:	687b      	ldr	r3, [r7, #4]
 c0019e8:	4a35      	ldr	r2, [pc, #212]	; (c001ac0 <HAL_GTZC_MPCBB_ConfigMem+0xfc>)
 c0019ea:	4293      	cmp	r3, r2
 c0019ec:	d111      	bne.n	c001a12 <HAL_GTZC_MPCBB_ConfigMem+0x4e>
      || (   (    pMPCBB_desc->SecureRWIllegalMode
 c0019ee:	683b      	ldr	r3, [r7, #0]
 c0019f0:	681b      	ldr	r3, [r3, #0]
 c0019f2:	2b00      	cmp	r3, #0
 c0019f4:	d004      	beq.n	c001a00 <HAL_GTZC_MPCBB_ConfigMem+0x3c>
               != GTZC_MPCBB_SRWILADIS_ENABLE)
          && (    pMPCBB_desc->SecureRWIllegalMode
 c0019f6:	683b      	ldr	r3, [r7, #0]
 c0019f8:	681b      	ldr	r3, [r3, #0]
 c0019fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 c0019fe:	d108      	bne.n	c001a12 <HAL_GTZC_MPCBB_ConfigMem+0x4e>
               != GTZC_MPCBB_SRWILADIS_DISABLE))
      || (   (    pMPCBB_desc->InvertSecureState
 c001a00:	683b      	ldr	r3, [r7, #0]
 c001a02:	685b      	ldr	r3, [r3, #4]
 c001a04:	2b00      	cmp	r3, #0
 c001a06:	d006      	beq.n	c001a16 <HAL_GTZC_MPCBB_ConfigMem+0x52>
               != GTZC_MPCBB_INVSECSTATE_NOT_INVERTED)
          && (    pMPCBB_desc->InvertSecureState
 c001a08:	683b      	ldr	r3, [r7, #0]
 c001a0a:	685b      	ldr	r3, [r3, #4]
 c001a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 c001a10:	d001      	beq.n	c001a16 <HAL_GTZC_MPCBB_ConfigMem+0x52>
               != GTZC_MPCBB_INVSECSTATE_INVERTED)))
  {
    return HAL_ERROR;
 c001a12:	2301      	movs	r3, #1
 c001a14:	e04b      	b.n	c001aae <HAL_GTZC_MPCBB_ConfigMem+0xea>
  }

  /* write InvertSecureState and SecureRWIllegalMode properties */
  /* assume their Position/Mask is identical for all sub-blocks */
  reg_value = pMPCBB_desc->InvertSecureState;
 c001a16:	683b      	ldr	r3, [r7, #0]
 c001a18:	685b      	ldr	r3, [r3, #4]
 c001a1a:	613b      	str	r3, [r7, #16]
  reg_value |= pMPCBB_desc->SecureRWIllegalMode;
 c001a1c:	683b      	ldr	r3, [r7, #0]
 c001a1e:	681b      	ldr	r3, [r3, #0]
 c001a20:	693a      	ldr	r2, [r7, #16]
 c001a22:	4313      	orrs	r3, r2
 c001a24:	613b      	str	r3, [r7, #16]
  if (IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c001a26:	687b      	ldr	r3, [r7, #4]
 c001a28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c001a2c:	d003      	beq.n	c001a36 <HAL_GTZC_MPCBB_ConfigMem+0x72>
 c001a2e:	687b      	ldr	r3, [r7, #4]
 c001a30:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c001a34:	d105      	bne.n	c001a42 <HAL_GTZC_MPCBB_ConfigMem+0x7e>
  {
    mpcbb_ptr = GTZC_MPCBB1_S;
 c001a36:	4b23      	ldr	r3, [pc, #140]	; (c001ac4 <HAL_GTZC_MPCBB_ConfigMem+0x100>)
 c001a38:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM1);
 c001a3a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 c001a3e:	61bb      	str	r3, [r7, #24]
 c001a40:	e004      	b.n	c001a4c <HAL_GTZC_MPCBB_ConfigMem+0x88>
  }
  else
  {
    /* Here MemBaseAddress is inside SRAM2 (already tested) */
    mpcbb_ptr = GTZC_MPCBB2_S;
 c001a42:	4b21      	ldr	r3, [pc, #132]	; (c001ac8 <HAL_GTZC_MPCBB_ConfigMem+0x104>)
 c001a44:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM2);
 c001a46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 c001a4a:	61bb      	str	r3, [r7, #24]
  }

  /* write configuration and lock register information */
  MODIFY_REG(mpcbb_ptr->CR,
 c001a4c:	69fb      	ldr	r3, [r7, #28]
 c001a4e:	681b      	ldr	r3, [r3, #0]
 c001a50:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 c001a54:	693b      	ldr	r3, [r7, #16]
 c001a56:	431a      	orrs	r2, r3
 c001a58:	69fb      	ldr	r3, [r7, #28]
 c001a5a:	601a      	str	r2, [r3, #0]
             GTZC_MPCBB_CR_INVSECSTATE_Msk | GTZC_MPCBB_CR_SRWILADIS_Msk, reg_value);
  size_mask = (1UL << (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE)) - 1U;
 c001a5c:	69bb      	ldr	r3, [r7, #24]
 c001a5e:	0b5b      	lsrs	r3, r3, #13
 c001a60:	2201      	movs	r2, #1
 c001a62:	fa02 f303 	lsl.w	r3, r2, r3
 c001a66:	3b01      	subs	r3, #1
 c001a68:	60fb      	str	r3, [r7, #12]
  /* limitation: code not portable with memory > 256K */
  MODIFY_REG(mpcbb_ptr->LCKVTR1, size_mask, pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[0]);
 c001a6a:	69fb      	ldr	r3, [r7, #28]
 c001a6c:	691a      	ldr	r2, [r3, #16]
 c001a6e:	68fb      	ldr	r3, [r7, #12]
 c001a70:	43db      	mvns	r3, r3
 c001a72:	401a      	ands	r2, r3
 c001a74:	683b      	ldr	r3, [r7, #0]
 c001a76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c001a78:	431a      	orrs	r2, r3
 c001a7a:	69fb      	ldr	r3, [r7, #28]
 c001a7c:	611a      	str	r2, [r3, #16]

  /* write vector register information */
  size_in_superblocks = (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE);
 c001a7e:	69bb      	ldr	r3, [r7, #24]
 c001a80:	0b5b      	lsrs	r3, r3, #13
 c001a82:	60bb      	str	r3, [r7, #8]
  for (i = 0U; i < size_in_superblocks; i++)
 c001a84:	2300      	movs	r3, #0
 c001a86:	617b      	str	r3, [r7, #20]
 c001a88:	e00c      	b.n	c001aa4 <HAL_GTZC_MPCBB_ConfigMem+0xe0>
  {
    WRITE_REG(mpcbb_ptr->VCTR[i],
 c001a8a:	683b      	ldr	r3, [r7, #0]
 c001a8c:	697a      	ldr	r2, [r7, #20]
 c001a8e:	3202      	adds	r2, #2
 c001a90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 c001a94:	69fb      	ldr	r3, [r7, #28]
 c001a96:	697a      	ldr	r2, [r7, #20]
 c001a98:	3240      	adds	r2, #64	; 0x40
 c001a9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c001a9e:	697b      	ldr	r3, [r7, #20]
 c001aa0:	3301      	adds	r3, #1
 c001aa2:	617b      	str	r3, [r7, #20]
 c001aa4:	697a      	ldr	r2, [r7, #20]
 c001aa6:	68bb      	ldr	r3, [r7, #8]
 c001aa8:	429a      	cmp	r2, r3
 c001aaa:	d3ee      	bcc.n	c001a8a <HAL_GTZC_MPCBB_ConfigMem+0xc6>
              pMPCBB_desc->AttributeConfig.MPCBB_SecConfig_array[i]);
  }

  return HAL_OK;
 c001aac:	2300      	movs	r3, #0
}
 c001aae:	4618      	mov	r0, r3
 c001ab0:	3724      	adds	r7, #36	; 0x24
 c001ab2:	46bd      	mov	sp, r7
 c001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001ab8:	4770      	bx	lr
 c001aba:	bf00      	nop
 c001abc:	20030000 	.word	0x20030000
 c001ac0:	30030000 	.word	0x30030000
 c001ac4:	50032c00 	.word	0x50032c00
 c001ac8:	50033000 	.word	0x50033000

0c001acc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 c001acc:	b480      	push	{r7}
 c001ace:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 c001ad0:	4b04      	ldr	r3, [pc, #16]	; (c001ae4 <HAL_PWREx_GetVoltageRange+0x18>)
 c001ad2:	681b      	ldr	r3, [r3, #0]
 c001ad4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 c001ad8:	4618      	mov	r0, r3
 c001ada:	46bd      	mov	sp, r7
 c001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001ae0:	4770      	bx	lr
 c001ae2:	bf00      	nop
 c001ae4:	50007000 	.word	0x50007000

0c001ae8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 c001ae8:	b580      	push	{r7, lr}
 c001aea:	b084      	sub	sp, #16
 c001aec:	af00      	add	r7, sp, #0
 c001aee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 c001af0:	4b27      	ldr	r3, [pc, #156]	; (c001b90 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c001af2:	681b      	ldr	r3, [r3, #0]
 c001af4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 c001af8:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 c001afa:	f000 f861 	bl	c001bc0 <HAL_PWREx_SMPS_GetEffectiveMode>
 c001afe:	4603      	mov	r3, r0
 c001b00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c001b04:	d101      	bne.n	c001b0a <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 c001b06:	2301      	movs	r3, #1
 c001b08:	e03e      	b.n	c001b88 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 c001b0a:	4b21      	ldr	r3, [pc, #132]	; (c001b90 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c001b0c:	68db      	ldr	r3, [r3, #12]
 c001b0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c001b12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c001b16:	d101      	bne.n	c001b1c <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 c001b18:	2301      	movs	r3, #1
 c001b1a:	e035      	b.n	c001b88 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 c001b1c:	68ba      	ldr	r2, [r7, #8]
 c001b1e:	687b      	ldr	r3, [r7, #4]
 c001b20:	429a      	cmp	r2, r3
 c001b22:	d101      	bne.n	c001b28 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 c001b24:	2300      	movs	r3, #0
 c001b26:	e02f      	b.n	c001b88 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 c001b28:	4b19      	ldr	r3, [pc, #100]	; (c001b90 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c001b2a:	681b      	ldr	r3, [r3, #0]
 c001b2c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 c001b30:	4917      	ldr	r1, [pc, #92]	; (c001b90 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c001b32:	687b      	ldr	r3, [r7, #4]
 c001b34:	4313      	orrs	r3, r2
 c001b36:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 c001b38:	4b16      	ldr	r3, [pc, #88]	; (c001b94 <HAL_PWREx_ControlVoltageScaling+0xac>)
 c001b3a:	681b      	ldr	r3, [r3, #0]
 c001b3c:	095b      	lsrs	r3, r3, #5
 c001b3e:	4a16      	ldr	r2, [pc, #88]	; (c001b98 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 c001b40:	fba2 2303 	umull	r2, r3, r2, r3
 c001b44:	09db      	lsrs	r3, r3, #7
 c001b46:	2232      	movs	r2, #50	; 0x32
 c001b48:	fb02 f303 	mul.w	r3, r2, r3
 c001b4c:	4a13      	ldr	r2, [pc, #76]	; (c001b9c <HAL_PWREx_ControlVoltageScaling+0xb4>)
 c001b4e:	fba2 2303 	umull	r2, r3, r2, r3
 c001b52:	08db      	lsrs	r3, r3, #3
 c001b54:	3301      	adds	r3, #1
 c001b56:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 c001b58:	e002      	b.n	c001b60 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 c001b5a:	68fb      	ldr	r3, [r7, #12]
 c001b5c:	3b01      	subs	r3, #1
 c001b5e:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 c001b60:	4b0b      	ldr	r3, [pc, #44]	; (c001b90 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c001b62:	695b      	ldr	r3, [r3, #20]
 c001b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c001b68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c001b6c:	d102      	bne.n	c001b74 <HAL_PWREx_ControlVoltageScaling+0x8c>
 c001b6e:	68fb      	ldr	r3, [r7, #12]
 c001b70:	2b00      	cmp	r3, #0
 c001b72:	d1f2      	bne.n	c001b5a <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 c001b74:	4b06      	ldr	r3, [pc, #24]	; (c001b90 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c001b76:	695b      	ldr	r3, [r3, #20]
 c001b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c001b7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c001b80:	d101      	bne.n	c001b86 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 c001b82:	2303      	movs	r3, #3
 c001b84:	e000      	b.n	c001b88 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 c001b86:	2300      	movs	r3, #0
}
 c001b88:	4618      	mov	r0, r3
 c001b8a:	3710      	adds	r7, #16
 c001b8c:	46bd      	mov	sp, r7
 c001b8e:	bd80      	pop	{r7, pc}
 c001b90:	50007000 	.word	0x50007000
 c001b94:	30000068 	.word	0x30000068
 c001b98:	0a7c5ac5 	.word	0x0a7c5ac5
 c001b9c:	cccccccd 	.word	0xcccccccd

0c001ba0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 c001ba0:	b480      	push	{r7}
 c001ba2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 c001ba4:	4b05      	ldr	r3, [pc, #20]	; (c001bbc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 c001ba6:	689b      	ldr	r3, [r3, #8]
 c001ba8:	4a04      	ldr	r2, [pc, #16]	; (c001bbc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 c001baa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 c001bae:	6093      	str	r3, [r2, #8]
}
 c001bb0:	bf00      	nop
 c001bb2:	46bd      	mov	sp, r7
 c001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001bb8:	4770      	bx	lr
 c001bba:	bf00      	nop
 c001bbc:	50007000 	.word	0x50007000

0c001bc0 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 c001bc0:	b480      	push	{r7}
 c001bc2:	b083      	sub	sp, #12
 c001bc4:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 c001bc6:	4b0f      	ldr	r3, [pc, #60]	; (c001c04 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 c001bc8:	691b      	ldr	r3, [r3, #16]
 c001bca:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 c001bcc:	683b      	ldr	r3, [r7, #0]
 c001bce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 c001bd2:	2b00      	cmp	r3, #0
 c001bd4:	d003      	beq.n	c001bde <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 c001bd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c001bda:	607b      	str	r3, [r7, #4]
 c001bdc:	e00a      	b.n	c001bf4 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 c001bde:	683b      	ldr	r3, [r7, #0]
 c001be0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c001be4:	2b00      	cmp	r3, #0
 c001be6:	d103      	bne.n	c001bf0 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 c001be8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c001bec:	607b      	str	r3, [r7, #4]
 c001bee:	e001      	b.n	c001bf4 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 c001bf0:	2300      	movs	r3, #0
 c001bf2:	607b      	str	r3, [r7, #4]
  }

  return mode;
 c001bf4:	687b      	ldr	r3, [r7, #4]
}
 c001bf6:	4618      	mov	r0, r3
 c001bf8:	370c      	adds	r7, #12
 c001bfa:	46bd      	mov	sp, r7
 c001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001c00:	4770      	bx	lr
 c001c02:	bf00      	nop
 c001c04:	50007000 	.word	0x50007000

0c001c08 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 c001c08:	b580      	push	{r7, lr}
 c001c0a:	b088      	sub	sp, #32
 c001c0c:	af00      	add	r7, sp, #0
 c001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 c001c10:	687b      	ldr	r3, [r7, #4]
 c001c12:	2b00      	cmp	r3, #0
 c001c14:	d102      	bne.n	c001c1c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 c001c16:	2301      	movs	r3, #1
 c001c18:	f000 bc52 	b.w	c0024c0 <HAL_RCC_OscConfig+0x8b8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c001c1c:	4ba3      	ldr	r3, [pc, #652]	; (c001eac <HAL_RCC_OscConfig+0x2a4>)
 c001c1e:	689b      	ldr	r3, [r3, #8]
 c001c20:	f003 030c 	and.w	r3, r3, #12
 c001c24:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 c001c26:	4ba1      	ldr	r3, [pc, #644]	; (c001eac <HAL_RCC_OscConfig+0x2a4>)
 c001c28:	68db      	ldr	r3, [r3, #12]
 c001c2a:	f003 0303 	and.w	r3, r3, #3
 c001c2e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 c001c30:	687b      	ldr	r3, [r7, #4]
 c001c32:	681b      	ldr	r3, [r3, #0]
 c001c34:	f003 0310 	and.w	r3, r3, #16
 c001c38:	2b00      	cmp	r3, #0
 c001c3a:	f000 80da 	beq.w	c001df2 <HAL_RCC_OscConfig+0x1ea>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c001c3e:	69bb      	ldr	r3, [r7, #24]
 c001c40:	2b00      	cmp	r3, #0
 c001c42:	d006      	beq.n	c001c52 <HAL_RCC_OscConfig+0x4a>
 c001c44:	69bb      	ldr	r3, [r7, #24]
 c001c46:	2b0c      	cmp	r3, #12
 c001c48:	f040 8081 	bne.w	c001d4e <HAL_RCC_OscConfig+0x146>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 c001c4c:	697b      	ldr	r3, [r7, #20]
 c001c4e:	2b01      	cmp	r3, #1
 c001c50:	d17d      	bne.n	c001d4e <HAL_RCC_OscConfig+0x146>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 c001c52:	4b96      	ldr	r3, [pc, #600]	; (c001eac <HAL_RCC_OscConfig+0x2a4>)
 c001c54:	681b      	ldr	r3, [r3, #0]
 c001c56:	f003 0302 	and.w	r3, r3, #2
 c001c5a:	2b00      	cmp	r3, #0
 c001c5c:	d006      	beq.n	c001c6c <HAL_RCC_OscConfig+0x64>
 c001c5e:	687b      	ldr	r3, [r7, #4]
 c001c60:	69db      	ldr	r3, [r3, #28]
 c001c62:	2b00      	cmp	r3, #0
 c001c64:	d102      	bne.n	c001c6c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 c001c66:	2301      	movs	r3, #1
 c001c68:	f000 bc2a 	b.w	c0024c0 <HAL_RCC_OscConfig+0x8b8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 c001c6c:	687b      	ldr	r3, [r7, #4]
 c001c6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c001c70:	4b8e      	ldr	r3, [pc, #568]	; (c001eac <HAL_RCC_OscConfig+0x2a4>)
 c001c72:	681b      	ldr	r3, [r3, #0]
 c001c74:	f003 0308 	and.w	r3, r3, #8
 c001c78:	2b00      	cmp	r3, #0
 c001c7a:	d004      	beq.n	c001c86 <HAL_RCC_OscConfig+0x7e>
 c001c7c:	4b8b      	ldr	r3, [pc, #556]	; (c001eac <HAL_RCC_OscConfig+0x2a4>)
 c001c7e:	681b      	ldr	r3, [r3, #0]
 c001c80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c001c84:	e005      	b.n	c001c92 <HAL_RCC_OscConfig+0x8a>
 c001c86:	4b89      	ldr	r3, [pc, #548]	; (c001eac <HAL_RCC_OscConfig+0x2a4>)
 c001c88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c001c8c:	091b      	lsrs	r3, r3, #4
 c001c8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c001c92:	4293      	cmp	r3, r2
 c001c94:	d224      	bcs.n	c001ce0 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 c001c96:	687b      	ldr	r3, [r7, #4]
 c001c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c001c9a:	4618      	mov	r0, r3
 c001c9c:	f000 fe10 	bl	c0028c0 <RCC_SetFlashLatencyFromMSIRange>
 c001ca0:	4603      	mov	r3, r0
 c001ca2:	2b00      	cmp	r3, #0
 c001ca4:	d002      	beq.n	c001cac <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 c001ca6:	2301      	movs	r3, #1
 c001ca8:	f000 bc0a 	b.w	c0024c0 <HAL_RCC_OscConfig+0x8b8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c001cac:	4b7f      	ldr	r3, [pc, #508]	; (c001eac <HAL_RCC_OscConfig+0x2a4>)
 c001cae:	681b      	ldr	r3, [r3, #0]
 c001cb0:	4a7e      	ldr	r2, [pc, #504]	; (c001eac <HAL_RCC_OscConfig+0x2a4>)
 c001cb2:	f043 0308 	orr.w	r3, r3, #8
 c001cb6:	6013      	str	r3, [r2, #0]
 c001cb8:	4b7c      	ldr	r3, [pc, #496]	; (c001eac <HAL_RCC_OscConfig+0x2a4>)
 c001cba:	681b      	ldr	r3, [r3, #0]
 c001cbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c001cc0:	687b      	ldr	r3, [r7, #4]
 c001cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c001cc4:	4979      	ldr	r1, [pc, #484]	; (c001eac <HAL_RCC_OscConfig+0x2a4>)
 c001cc6:	4313      	orrs	r3, r2
 c001cc8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c001cca:	4b78      	ldr	r3, [pc, #480]	; (c001eac <HAL_RCC_OscConfig+0x2a4>)
 c001ccc:	685b      	ldr	r3, [r3, #4]
 c001cce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c001cd2:	687b      	ldr	r3, [r7, #4]
 c001cd4:	6a1b      	ldr	r3, [r3, #32]
 c001cd6:	021b      	lsls	r3, r3, #8
 c001cd8:	4974      	ldr	r1, [pc, #464]	; (c001eac <HAL_RCC_OscConfig+0x2a4>)
 c001cda:	4313      	orrs	r3, r2
 c001cdc:	604b      	str	r3, [r1, #4]
 c001cde:	e025      	b.n	c001d2c <HAL_RCC_OscConfig+0x124>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c001ce0:	4b72      	ldr	r3, [pc, #456]	; (c001eac <HAL_RCC_OscConfig+0x2a4>)
 c001ce2:	681b      	ldr	r3, [r3, #0]
 c001ce4:	4a71      	ldr	r2, [pc, #452]	; (c001eac <HAL_RCC_OscConfig+0x2a4>)
 c001ce6:	f043 0308 	orr.w	r3, r3, #8
 c001cea:	6013      	str	r3, [r2, #0]
 c001cec:	4b6f      	ldr	r3, [pc, #444]	; (c001eac <HAL_RCC_OscConfig+0x2a4>)
 c001cee:	681b      	ldr	r3, [r3, #0]
 c001cf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c001cf4:	687b      	ldr	r3, [r7, #4]
 c001cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c001cf8:	496c      	ldr	r1, [pc, #432]	; (c001eac <HAL_RCC_OscConfig+0x2a4>)
 c001cfa:	4313      	orrs	r3, r2
 c001cfc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c001cfe:	4b6b      	ldr	r3, [pc, #428]	; (c001eac <HAL_RCC_OscConfig+0x2a4>)
 c001d00:	685b      	ldr	r3, [r3, #4]
 c001d02:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c001d06:	687b      	ldr	r3, [r7, #4]
 c001d08:	6a1b      	ldr	r3, [r3, #32]
 c001d0a:	021b      	lsls	r3, r3, #8
 c001d0c:	4967      	ldr	r1, [pc, #412]	; (c001eac <HAL_RCC_OscConfig+0x2a4>)
 c001d0e:	4313      	orrs	r3, r2
 c001d10:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c001d12:	69bb      	ldr	r3, [r7, #24]
 c001d14:	2b00      	cmp	r3, #0
 c001d16:	d109      	bne.n	c001d2c <HAL_RCC_OscConfig+0x124>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 c001d18:	687b      	ldr	r3, [r7, #4]
 c001d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c001d1c:	4618      	mov	r0, r3
 c001d1e:	f000 fdcf 	bl	c0028c0 <RCC_SetFlashLatencyFromMSIRange>
 c001d22:	4603      	mov	r3, r0
 c001d24:	2b00      	cmp	r3, #0
 c001d26:	d001      	beq.n	c001d2c <HAL_RCC_OscConfig+0x124>
            {
              return HAL_ERROR;
 c001d28:	2301      	movs	r3, #1
 c001d2a:	e3c9      	b.n	c0024c0 <HAL_RCC_OscConfig+0x8b8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 c001d2c:	f000 fd8c 	bl	c002848 <HAL_RCC_GetHCLKFreq>
 c001d30:	4603      	mov	r3, r0
 c001d32:	4a5f      	ldr	r2, [pc, #380]	; (c001eb0 <HAL_RCC_OscConfig+0x2a8>)
 c001d34:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 c001d36:	4b5f      	ldr	r3, [pc, #380]	; (c001eb4 <HAL_RCC_OscConfig+0x2ac>)
 c001d38:	681b      	ldr	r3, [r3, #0]
 c001d3a:	4618      	mov	r0, r3
 c001d3c:	f7ff f98c 	bl	c001058 <HAL_InitTick>
 c001d40:	4603      	mov	r3, r0
 c001d42:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 c001d44:	7bfb      	ldrb	r3, [r7, #15]
 c001d46:	2b00      	cmp	r3, #0
 c001d48:	d052      	beq.n	c001df0 <HAL_RCC_OscConfig+0x1e8>
        {
          return status;
 c001d4a:	7bfb      	ldrb	r3, [r7, #15]
 c001d4c:	e3b8      	b.n	c0024c0 <HAL_RCC_OscConfig+0x8b8>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 c001d4e:	687b      	ldr	r3, [r7, #4]
 c001d50:	69db      	ldr	r3, [r3, #28]
 c001d52:	2b00      	cmp	r3, #0
 c001d54:	d032      	beq.n	c001dbc <HAL_RCC_OscConfig+0x1b4>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 c001d56:	4b55      	ldr	r3, [pc, #340]	; (c001eac <HAL_RCC_OscConfig+0x2a4>)
 c001d58:	681b      	ldr	r3, [r3, #0]
 c001d5a:	4a54      	ldr	r2, [pc, #336]	; (c001eac <HAL_RCC_OscConfig+0x2a4>)
 c001d5c:	f043 0301 	orr.w	r3, r3, #1
 c001d60:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 c001d62:	f7ff f9c9 	bl	c0010f8 <HAL_GetTick>
 c001d66:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c001d68:	e008      	b.n	c001d7c <HAL_RCC_OscConfig+0x174>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 c001d6a:	f7ff f9c5 	bl	c0010f8 <HAL_GetTick>
 c001d6e:	4602      	mov	r2, r0
 c001d70:	693b      	ldr	r3, [r7, #16]
 c001d72:	1ad3      	subs	r3, r2, r3
 c001d74:	2b02      	cmp	r3, #2
 c001d76:	d901      	bls.n	c001d7c <HAL_RCC_OscConfig+0x174>
          {
            return HAL_TIMEOUT;
 c001d78:	2303      	movs	r3, #3
 c001d7a:	e3a1      	b.n	c0024c0 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c001d7c:	4b4b      	ldr	r3, [pc, #300]	; (c001eac <HAL_RCC_OscConfig+0x2a4>)
 c001d7e:	681b      	ldr	r3, [r3, #0]
 c001d80:	f003 0302 	and.w	r3, r3, #2
 c001d84:	2b00      	cmp	r3, #0
 c001d86:	d0f0      	beq.n	c001d6a <HAL_RCC_OscConfig+0x162>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c001d88:	4b48      	ldr	r3, [pc, #288]	; (c001eac <HAL_RCC_OscConfig+0x2a4>)
 c001d8a:	681b      	ldr	r3, [r3, #0]
 c001d8c:	4a47      	ldr	r2, [pc, #284]	; (c001eac <HAL_RCC_OscConfig+0x2a4>)
 c001d8e:	f043 0308 	orr.w	r3, r3, #8
 c001d92:	6013      	str	r3, [r2, #0]
 c001d94:	4b45      	ldr	r3, [pc, #276]	; (c001eac <HAL_RCC_OscConfig+0x2a4>)
 c001d96:	681b      	ldr	r3, [r3, #0]
 c001d98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c001d9c:	687b      	ldr	r3, [r7, #4]
 c001d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c001da0:	4942      	ldr	r1, [pc, #264]	; (c001eac <HAL_RCC_OscConfig+0x2a4>)
 c001da2:	4313      	orrs	r3, r2
 c001da4:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c001da6:	4b41      	ldr	r3, [pc, #260]	; (c001eac <HAL_RCC_OscConfig+0x2a4>)
 c001da8:	685b      	ldr	r3, [r3, #4]
 c001daa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c001dae:	687b      	ldr	r3, [r7, #4]
 c001db0:	6a1b      	ldr	r3, [r3, #32]
 c001db2:	021b      	lsls	r3, r3, #8
 c001db4:	493d      	ldr	r1, [pc, #244]	; (c001eac <HAL_RCC_OscConfig+0x2a4>)
 c001db6:	4313      	orrs	r3, r2
 c001db8:	604b      	str	r3, [r1, #4]
 c001dba:	e01a      	b.n	c001df2 <HAL_RCC_OscConfig+0x1ea>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 c001dbc:	4b3b      	ldr	r3, [pc, #236]	; (c001eac <HAL_RCC_OscConfig+0x2a4>)
 c001dbe:	681b      	ldr	r3, [r3, #0]
 c001dc0:	4a3a      	ldr	r2, [pc, #232]	; (c001eac <HAL_RCC_OscConfig+0x2a4>)
 c001dc2:	f023 0301 	bic.w	r3, r3, #1
 c001dc6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 c001dc8:	f7ff f996 	bl	c0010f8 <HAL_GetTick>
 c001dcc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c001dce:	e008      	b.n	c001de2 <HAL_RCC_OscConfig+0x1da>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 c001dd0:	f7ff f992 	bl	c0010f8 <HAL_GetTick>
 c001dd4:	4602      	mov	r2, r0
 c001dd6:	693b      	ldr	r3, [r7, #16]
 c001dd8:	1ad3      	subs	r3, r2, r3
 c001dda:	2b02      	cmp	r3, #2
 c001ddc:	d901      	bls.n	c001de2 <HAL_RCC_OscConfig+0x1da>
          {
            return HAL_TIMEOUT;
 c001dde:	2303      	movs	r3, #3
 c001de0:	e36e      	b.n	c0024c0 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c001de2:	4b32      	ldr	r3, [pc, #200]	; (c001eac <HAL_RCC_OscConfig+0x2a4>)
 c001de4:	681b      	ldr	r3, [r3, #0]
 c001de6:	f003 0302 	and.w	r3, r3, #2
 c001dea:	2b00      	cmp	r3, #0
 c001dec:	d1f0      	bne.n	c001dd0 <HAL_RCC_OscConfig+0x1c8>
 c001dee:	e000      	b.n	c001df2 <HAL_RCC_OscConfig+0x1ea>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 c001df0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 c001df2:	687b      	ldr	r3, [r7, #4]
 c001df4:	681b      	ldr	r3, [r3, #0]
 c001df6:	f003 0301 	and.w	r3, r3, #1
 c001dfa:	2b00      	cmp	r3, #0
 c001dfc:	d071      	beq.n	c001ee2 <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 c001dfe:	69bb      	ldr	r3, [r7, #24]
 c001e00:	2b08      	cmp	r3, #8
 c001e02:	d005      	beq.n	c001e10 <HAL_RCC_OscConfig+0x208>
 c001e04:	69bb      	ldr	r3, [r7, #24]
 c001e06:	2b0c      	cmp	r3, #12
 c001e08:	d10e      	bne.n	c001e28 <HAL_RCC_OscConfig+0x220>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 c001e0a:	697b      	ldr	r3, [r7, #20]
 c001e0c:	2b03      	cmp	r3, #3
 c001e0e:	d10b      	bne.n	c001e28 <HAL_RCC_OscConfig+0x220>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 c001e10:	4b26      	ldr	r3, [pc, #152]	; (c001eac <HAL_RCC_OscConfig+0x2a4>)
 c001e12:	681b      	ldr	r3, [r3, #0]
 c001e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c001e18:	2b00      	cmp	r3, #0
 c001e1a:	d061      	beq.n	c001ee0 <HAL_RCC_OscConfig+0x2d8>
 c001e1c:	687b      	ldr	r3, [r7, #4]
 c001e1e:	685b      	ldr	r3, [r3, #4]
 c001e20:	2b00      	cmp	r3, #0
 c001e22:	d15d      	bne.n	c001ee0 <HAL_RCC_OscConfig+0x2d8>
      {
        return HAL_ERROR;
 c001e24:	2301      	movs	r3, #1
 c001e26:	e34b      	b.n	c0024c0 <HAL_RCC_OscConfig+0x8b8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 c001e28:	687b      	ldr	r3, [r7, #4]
 c001e2a:	685b      	ldr	r3, [r3, #4]
 c001e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c001e30:	d106      	bne.n	c001e40 <HAL_RCC_OscConfig+0x238>
 c001e32:	4b1e      	ldr	r3, [pc, #120]	; (c001eac <HAL_RCC_OscConfig+0x2a4>)
 c001e34:	681b      	ldr	r3, [r3, #0]
 c001e36:	4a1d      	ldr	r2, [pc, #116]	; (c001eac <HAL_RCC_OscConfig+0x2a4>)
 c001e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c001e3c:	6013      	str	r3, [r2, #0]
 c001e3e:	e01d      	b.n	c001e7c <HAL_RCC_OscConfig+0x274>
 c001e40:	687b      	ldr	r3, [r7, #4]
 c001e42:	685b      	ldr	r3, [r3, #4]
 c001e44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 c001e48:	d10c      	bne.n	c001e64 <HAL_RCC_OscConfig+0x25c>
 c001e4a:	4b18      	ldr	r3, [pc, #96]	; (c001eac <HAL_RCC_OscConfig+0x2a4>)
 c001e4c:	681b      	ldr	r3, [r3, #0]
 c001e4e:	4a17      	ldr	r2, [pc, #92]	; (c001eac <HAL_RCC_OscConfig+0x2a4>)
 c001e50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 c001e54:	6013      	str	r3, [r2, #0]
 c001e56:	4b15      	ldr	r3, [pc, #84]	; (c001eac <HAL_RCC_OscConfig+0x2a4>)
 c001e58:	681b      	ldr	r3, [r3, #0]
 c001e5a:	4a14      	ldr	r2, [pc, #80]	; (c001eac <HAL_RCC_OscConfig+0x2a4>)
 c001e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c001e60:	6013      	str	r3, [r2, #0]
 c001e62:	e00b      	b.n	c001e7c <HAL_RCC_OscConfig+0x274>
 c001e64:	4b11      	ldr	r3, [pc, #68]	; (c001eac <HAL_RCC_OscConfig+0x2a4>)
 c001e66:	681b      	ldr	r3, [r3, #0]
 c001e68:	4a10      	ldr	r2, [pc, #64]	; (c001eac <HAL_RCC_OscConfig+0x2a4>)
 c001e6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c001e6e:	6013      	str	r3, [r2, #0]
 c001e70:	4b0e      	ldr	r3, [pc, #56]	; (c001eac <HAL_RCC_OscConfig+0x2a4>)
 c001e72:	681b      	ldr	r3, [r3, #0]
 c001e74:	4a0d      	ldr	r2, [pc, #52]	; (c001eac <HAL_RCC_OscConfig+0x2a4>)
 c001e76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 c001e7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 c001e7c:	687b      	ldr	r3, [r7, #4]
 c001e7e:	685b      	ldr	r3, [r3, #4]
 c001e80:	2b00      	cmp	r3, #0
 c001e82:	d019      	beq.n	c001eb8 <HAL_RCC_OscConfig+0x2b0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c001e84:	f7ff f938 	bl	c0010f8 <HAL_GetTick>
 c001e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c001e8a:	e008      	b.n	c001e9e <HAL_RCC_OscConfig+0x296>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 c001e8c:	f7ff f934 	bl	c0010f8 <HAL_GetTick>
 c001e90:	4602      	mov	r2, r0
 c001e92:	693b      	ldr	r3, [r7, #16]
 c001e94:	1ad3      	subs	r3, r2, r3
 c001e96:	2b64      	cmp	r3, #100	; 0x64
 c001e98:	d901      	bls.n	c001e9e <HAL_RCC_OscConfig+0x296>
          {
            return HAL_TIMEOUT;
 c001e9a:	2303      	movs	r3, #3
 c001e9c:	e310      	b.n	c0024c0 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c001e9e:	4b03      	ldr	r3, [pc, #12]	; (c001eac <HAL_RCC_OscConfig+0x2a4>)
 c001ea0:	681b      	ldr	r3, [r3, #0]
 c001ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c001ea6:	2b00      	cmp	r3, #0
 c001ea8:	d0f0      	beq.n	c001e8c <HAL_RCC_OscConfig+0x284>
 c001eaa:	e01a      	b.n	c001ee2 <HAL_RCC_OscConfig+0x2da>
 c001eac:	50021000 	.word	0x50021000
 c001eb0:	30000068 	.word	0x30000068
 c001eb4:	3000006c 	.word	0x3000006c
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c001eb8:	f7ff f91e 	bl	c0010f8 <HAL_GetTick>
 c001ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c001ebe:	e008      	b.n	c001ed2 <HAL_RCC_OscConfig+0x2ca>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 c001ec0:	f7ff f91a 	bl	c0010f8 <HAL_GetTick>
 c001ec4:	4602      	mov	r2, r0
 c001ec6:	693b      	ldr	r3, [r7, #16]
 c001ec8:	1ad3      	subs	r3, r2, r3
 c001eca:	2b64      	cmp	r3, #100	; 0x64
 c001ecc:	d901      	bls.n	c001ed2 <HAL_RCC_OscConfig+0x2ca>
          {
            return HAL_TIMEOUT;
 c001ece:	2303      	movs	r3, #3
 c001ed0:	e2f6      	b.n	c0024c0 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c001ed2:	4ba6      	ldr	r3, [pc, #664]	; (c00216c <HAL_RCC_OscConfig+0x564>)
 c001ed4:	681b      	ldr	r3, [r3, #0]
 c001ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c001eda:	2b00      	cmp	r3, #0
 c001edc:	d1f0      	bne.n	c001ec0 <HAL_RCC_OscConfig+0x2b8>
 c001ede:	e000      	b.n	c001ee2 <HAL_RCC_OscConfig+0x2da>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 c001ee0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 c001ee2:	687b      	ldr	r3, [r7, #4]
 c001ee4:	681b      	ldr	r3, [r3, #0]
 c001ee6:	f003 0302 	and.w	r3, r3, #2
 c001eea:	2b00      	cmp	r3, #0
 c001eec:	d060      	beq.n	c001fb0 <HAL_RCC_OscConfig+0x3a8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 c001eee:	69bb      	ldr	r3, [r7, #24]
 c001ef0:	2b04      	cmp	r3, #4
 c001ef2:	d005      	beq.n	c001f00 <HAL_RCC_OscConfig+0x2f8>
 c001ef4:	69bb      	ldr	r3, [r7, #24]
 c001ef6:	2b0c      	cmp	r3, #12
 c001ef8:	d119      	bne.n	c001f2e <HAL_RCC_OscConfig+0x326>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 c001efa:	697b      	ldr	r3, [r7, #20]
 c001efc:	2b02      	cmp	r3, #2
 c001efe:	d116      	bne.n	c001f2e <HAL_RCC_OscConfig+0x326>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 c001f00:	4b9a      	ldr	r3, [pc, #616]	; (c00216c <HAL_RCC_OscConfig+0x564>)
 c001f02:	681b      	ldr	r3, [r3, #0]
 c001f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c001f08:	2b00      	cmp	r3, #0
 c001f0a:	d005      	beq.n	c001f18 <HAL_RCC_OscConfig+0x310>
 c001f0c:	687b      	ldr	r3, [r7, #4]
 c001f0e:	68db      	ldr	r3, [r3, #12]
 c001f10:	2b00      	cmp	r3, #0
 c001f12:	d101      	bne.n	c001f18 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 c001f14:	2301      	movs	r3, #1
 c001f16:	e2d3      	b.n	c0024c0 <HAL_RCC_OscConfig+0x8b8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 c001f18:	4b94      	ldr	r3, [pc, #592]	; (c00216c <HAL_RCC_OscConfig+0x564>)
 c001f1a:	685b      	ldr	r3, [r3, #4]
 c001f1c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 c001f20:	687b      	ldr	r3, [r7, #4]
 c001f22:	691b      	ldr	r3, [r3, #16]
 c001f24:	061b      	lsls	r3, r3, #24
 c001f26:	4991      	ldr	r1, [pc, #580]	; (c00216c <HAL_RCC_OscConfig+0x564>)
 c001f28:	4313      	orrs	r3, r2
 c001f2a:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 c001f2c:	e040      	b.n	c001fb0 <HAL_RCC_OscConfig+0x3a8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 c001f2e:	687b      	ldr	r3, [r7, #4]
 c001f30:	68db      	ldr	r3, [r3, #12]
 c001f32:	2b00      	cmp	r3, #0
 c001f34:	d023      	beq.n	c001f7e <HAL_RCC_OscConfig+0x376>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 c001f36:	4b8d      	ldr	r3, [pc, #564]	; (c00216c <HAL_RCC_OscConfig+0x564>)
 c001f38:	681b      	ldr	r3, [r3, #0]
 c001f3a:	4a8c      	ldr	r2, [pc, #560]	; (c00216c <HAL_RCC_OscConfig+0x564>)
 c001f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c001f40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c001f42:	f7ff f8d9 	bl	c0010f8 <HAL_GetTick>
 c001f46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c001f48:	e008      	b.n	c001f5c <HAL_RCC_OscConfig+0x354>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 c001f4a:	f7ff f8d5 	bl	c0010f8 <HAL_GetTick>
 c001f4e:	4602      	mov	r2, r0
 c001f50:	693b      	ldr	r3, [r7, #16]
 c001f52:	1ad3      	subs	r3, r2, r3
 c001f54:	2b02      	cmp	r3, #2
 c001f56:	d901      	bls.n	c001f5c <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 c001f58:	2303      	movs	r3, #3
 c001f5a:	e2b1      	b.n	c0024c0 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c001f5c:	4b83      	ldr	r3, [pc, #524]	; (c00216c <HAL_RCC_OscConfig+0x564>)
 c001f5e:	681b      	ldr	r3, [r3, #0]
 c001f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c001f64:	2b00      	cmp	r3, #0
 c001f66:	d0f0      	beq.n	c001f4a <HAL_RCC_OscConfig+0x342>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 c001f68:	4b80      	ldr	r3, [pc, #512]	; (c00216c <HAL_RCC_OscConfig+0x564>)
 c001f6a:	685b      	ldr	r3, [r3, #4]
 c001f6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 c001f70:	687b      	ldr	r3, [r7, #4]
 c001f72:	691b      	ldr	r3, [r3, #16]
 c001f74:	061b      	lsls	r3, r3, #24
 c001f76:	497d      	ldr	r1, [pc, #500]	; (c00216c <HAL_RCC_OscConfig+0x564>)
 c001f78:	4313      	orrs	r3, r2
 c001f7a:	604b      	str	r3, [r1, #4]
 c001f7c:	e018      	b.n	c001fb0 <HAL_RCC_OscConfig+0x3a8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 c001f7e:	4b7b      	ldr	r3, [pc, #492]	; (c00216c <HAL_RCC_OscConfig+0x564>)
 c001f80:	681b      	ldr	r3, [r3, #0]
 c001f82:	4a7a      	ldr	r2, [pc, #488]	; (c00216c <HAL_RCC_OscConfig+0x564>)
 c001f84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 c001f88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c001f8a:	f7ff f8b5 	bl	c0010f8 <HAL_GetTick>
 c001f8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c001f90:	e008      	b.n	c001fa4 <HAL_RCC_OscConfig+0x39c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 c001f92:	f7ff f8b1 	bl	c0010f8 <HAL_GetTick>
 c001f96:	4602      	mov	r2, r0
 c001f98:	693b      	ldr	r3, [r7, #16]
 c001f9a:	1ad3      	subs	r3, r2, r3
 c001f9c:	2b02      	cmp	r3, #2
 c001f9e:	d901      	bls.n	c001fa4 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 c001fa0:	2303      	movs	r3, #3
 c001fa2:	e28d      	b.n	c0024c0 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c001fa4:	4b71      	ldr	r3, [pc, #452]	; (c00216c <HAL_RCC_OscConfig+0x564>)
 c001fa6:	681b      	ldr	r3, [r3, #0]
 c001fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c001fac:	2b00      	cmp	r3, #0
 c001fae:	d1f0      	bne.n	c001f92 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 c001fb0:	687b      	ldr	r3, [r7, #4]
 c001fb2:	681b      	ldr	r3, [r3, #0]
 c001fb4:	f003 0308 	and.w	r3, r3, #8
 c001fb8:	2b00      	cmp	r3, #0
 c001fba:	d051      	beq.n	c002060 <HAL_RCC_OscConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 c001fbc:	687b      	ldr	r3, [r7, #4]
 c001fbe:	695b      	ldr	r3, [r3, #20]
 c001fc0:	2b00      	cmp	r3, #0
 c001fc2:	d031      	beq.n	c002028 <HAL_RCC_OscConfig+0x420>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 c001fc4:	687b      	ldr	r3, [r7, #4]
 c001fc6:	699b      	ldr	r3, [r3, #24]
 c001fc8:	2b00      	cmp	r3, #0
 c001fca:	d108      	bne.n	c001fde <HAL_RCC_OscConfig+0x3d6>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 c001fcc:	4b67      	ldr	r3, [pc, #412]	; (c00216c <HAL_RCC_OscConfig+0x564>)
 c001fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c001fd2:	4a66      	ldr	r2, [pc, #408]	; (c00216c <HAL_RCC_OscConfig+0x564>)
 c001fd4:	f023 0310 	bic.w	r3, r3, #16
 c001fd8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 c001fdc:	e007      	b.n	c001fee <HAL_RCC_OscConfig+0x3e6>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 c001fde:	4b63      	ldr	r3, [pc, #396]	; (c00216c <HAL_RCC_OscConfig+0x564>)
 c001fe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c001fe4:	4a61      	ldr	r2, [pc, #388]	; (c00216c <HAL_RCC_OscConfig+0x564>)
 c001fe6:	f043 0310 	orr.w	r3, r3, #16
 c001fea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 c001fee:	4b5f      	ldr	r3, [pc, #380]	; (c00216c <HAL_RCC_OscConfig+0x564>)
 c001ff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c001ff4:	4a5d      	ldr	r2, [pc, #372]	; (c00216c <HAL_RCC_OscConfig+0x564>)
 c001ff6:	f043 0301 	orr.w	r3, r3, #1
 c001ffa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c001ffe:	f7ff f87b 	bl	c0010f8 <HAL_GetTick>
 c002002:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c002004:	e008      	b.n	c002018 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c002006:	f7ff f877 	bl	c0010f8 <HAL_GetTick>
 c00200a:	4602      	mov	r2, r0
 c00200c:	693b      	ldr	r3, [r7, #16]
 c00200e:	1ad3      	subs	r3, r2, r3
 c002010:	2b07      	cmp	r3, #7
 c002012:	d901      	bls.n	c002018 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 c002014:	2303      	movs	r3, #3
 c002016:	e253      	b.n	c0024c0 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c002018:	4b54      	ldr	r3, [pc, #336]	; (c00216c <HAL_RCC_OscConfig+0x564>)
 c00201a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c00201e:	f003 0302 	and.w	r3, r3, #2
 c002022:	2b00      	cmp	r3, #0
 c002024:	d0ef      	beq.n	c002006 <HAL_RCC_OscConfig+0x3fe>
 c002026:	e01b      	b.n	c002060 <HAL_RCC_OscConfig+0x458>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 c002028:	4b50      	ldr	r3, [pc, #320]	; (c00216c <HAL_RCC_OscConfig+0x564>)
 c00202a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c00202e:	4a4f      	ldr	r2, [pc, #316]	; (c00216c <HAL_RCC_OscConfig+0x564>)
 c002030:	f023 0301 	bic.w	r3, r3, #1
 c002034:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c002038:	f7ff f85e 	bl	c0010f8 <HAL_GetTick>
 c00203c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c00203e:	e008      	b.n	c002052 <HAL_RCC_OscConfig+0x44a>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c002040:	f7ff f85a 	bl	c0010f8 <HAL_GetTick>
 c002044:	4602      	mov	r2, r0
 c002046:	693b      	ldr	r3, [r7, #16]
 c002048:	1ad3      	subs	r3, r2, r3
 c00204a:	2b07      	cmp	r3, #7
 c00204c:	d901      	bls.n	c002052 <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 c00204e:	2303      	movs	r3, #3
 c002050:	e236      	b.n	c0024c0 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c002052:	4b46      	ldr	r3, [pc, #280]	; (c00216c <HAL_RCC_OscConfig+0x564>)
 c002054:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c002058:	f003 0302 	and.w	r3, r3, #2
 c00205c:	2b00      	cmp	r3, #0
 c00205e:	d1ef      	bne.n	c002040 <HAL_RCC_OscConfig+0x438>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 c002060:	687b      	ldr	r3, [r7, #4]
 c002062:	681b      	ldr	r3, [r3, #0]
 c002064:	f003 0304 	and.w	r3, r3, #4
 c002068:	2b00      	cmp	r3, #0
 c00206a:	f000 8109 	beq.w	c002280 <HAL_RCC_OscConfig+0x678>
  {
    FlagStatus       pwrclkchanged = RESET;
 c00206e:	2300      	movs	r3, #0
 c002070:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 c002072:	4b3e      	ldr	r3, [pc, #248]	; (c00216c <HAL_RCC_OscConfig+0x564>)
 c002074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c002076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c00207a:	2b00      	cmp	r3, #0
 c00207c:	d10d      	bne.n	c00209a <HAL_RCC_OscConfig+0x492>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 c00207e:	4b3b      	ldr	r3, [pc, #236]	; (c00216c <HAL_RCC_OscConfig+0x564>)
 c002080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c002082:	4a3a      	ldr	r2, [pc, #232]	; (c00216c <HAL_RCC_OscConfig+0x564>)
 c002084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c002088:	6593      	str	r3, [r2, #88]	; 0x58
 c00208a:	4b38      	ldr	r3, [pc, #224]	; (c00216c <HAL_RCC_OscConfig+0x564>)
 c00208c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c00208e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c002092:	60bb      	str	r3, [r7, #8]
 c002094:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 c002096:	2301      	movs	r3, #1
 c002098:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c00209a:	4b35      	ldr	r3, [pc, #212]	; (c002170 <HAL_RCC_OscConfig+0x568>)
 c00209c:	681b      	ldr	r3, [r3, #0]
 c00209e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c0020a2:	2b00      	cmp	r3, #0
 c0020a4:	d118      	bne.n	c0020d8 <HAL_RCC_OscConfig+0x4d0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 c0020a6:	4b32      	ldr	r3, [pc, #200]	; (c002170 <HAL_RCC_OscConfig+0x568>)
 c0020a8:	681b      	ldr	r3, [r3, #0]
 c0020aa:	4a31      	ldr	r2, [pc, #196]	; (c002170 <HAL_RCC_OscConfig+0x568>)
 c0020ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c0020b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 c0020b2:	f7ff f821 	bl	c0010f8 <HAL_GetTick>
 c0020b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c0020b8:	e008      	b.n	c0020cc <HAL_RCC_OscConfig+0x4c4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c0020ba:	f7ff f81d 	bl	c0010f8 <HAL_GetTick>
 c0020be:	4602      	mov	r2, r0
 c0020c0:	693b      	ldr	r3, [r7, #16]
 c0020c2:	1ad3      	subs	r3, r2, r3
 c0020c4:	2b02      	cmp	r3, #2
 c0020c6:	d901      	bls.n	c0020cc <HAL_RCC_OscConfig+0x4c4>
        {
          return HAL_TIMEOUT;
 c0020c8:	2303      	movs	r3, #3
 c0020ca:	e1f9      	b.n	c0024c0 <HAL_RCC_OscConfig+0x8b8>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c0020cc:	4b28      	ldr	r3, [pc, #160]	; (c002170 <HAL_RCC_OscConfig+0x568>)
 c0020ce:	681b      	ldr	r3, [r3, #0]
 c0020d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c0020d4:	2b00      	cmp	r3, #0
 c0020d6:	d0f0      	beq.n	c0020ba <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 c0020d8:	687b      	ldr	r3, [r7, #4]
 c0020da:	689b      	ldr	r3, [r3, #8]
 c0020dc:	f003 0301 	and.w	r3, r3, #1
 c0020e0:	2b00      	cmp	r3, #0
 c0020e2:	d01f      	beq.n	c002124 <HAL_RCC_OscConfig+0x51c>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 c0020e4:	687b      	ldr	r3, [r7, #4]
 c0020e6:	689b      	ldr	r3, [r3, #8]
 c0020e8:	f003 0304 	and.w	r3, r3, #4
 c0020ec:	2b00      	cmp	r3, #0
 c0020ee:	d010      	beq.n	c002112 <HAL_RCC_OscConfig+0x50a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 c0020f0:	4b1e      	ldr	r3, [pc, #120]	; (c00216c <HAL_RCC_OscConfig+0x564>)
 c0020f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0020f6:	4a1d      	ldr	r2, [pc, #116]	; (c00216c <HAL_RCC_OscConfig+0x564>)
 c0020f8:	f043 0304 	orr.w	r3, r3, #4
 c0020fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c002100:	4b1a      	ldr	r3, [pc, #104]	; (c00216c <HAL_RCC_OscConfig+0x564>)
 c002102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c002106:	4a19      	ldr	r2, [pc, #100]	; (c00216c <HAL_RCC_OscConfig+0x564>)
 c002108:	f043 0301 	orr.w	r3, r3, #1
 c00210c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 c002110:	e018      	b.n	c002144 <HAL_RCC_OscConfig+0x53c>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c002112:	4b16      	ldr	r3, [pc, #88]	; (c00216c <HAL_RCC_OscConfig+0x564>)
 c002114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c002118:	4a14      	ldr	r2, [pc, #80]	; (c00216c <HAL_RCC_OscConfig+0x564>)
 c00211a:	f043 0301 	orr.w	r3, r3, #1
 c00211e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 c002122:	e00f      	b.n	c002144 <HAL_RCC_OscConfig+0x53c>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c002124:	4b11      	ldr	r3, [pc, #68]	; (c00216c <HAL_RCC_OscConfig+0x564>)
 c002126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00212a:	4a10      	ldr	r2, [pc, #64]	; (c00216c <HAL_RCC_OscConfig+0x564>)
 c00212c:	f023 0301 	bic.w	r3, r3, #1
 c002130:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 c002134:	4b0d      	ldr	r3, [pc, #52]	; (c00216c <HAL_RCC_OscConfig+0x564>)
 c002136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00213a:	4a0c      	ldr	r2, [pc, #48]	; (c00216c <HAL_RCC_OscConfig+0x564>)
 c00213c:	f023 0304 	bic.w	r3, r3, #4
 c002140:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 c002144:	687b      	ldr	r3, [r7, #4]
 c002146:	689b      	ldr	r3, [r3, #8]
 c002148:	2b00      	cmp	r3, #0
 c00214a:	d058      	beq.n	c0021fe <HAL_RCC_OscConfig+0x5f6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c00214c:	f7fe ffd4 	bl	c0010f8 <HAL_GetTick>
 c002150:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c002152:	e00f      	b.n	c002174 <HAL_RCC_OscConfig+0x56c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c002154:	f7fe ffd0 	bl	c0010f8 <HAL_GetTick>
 c002158:	4602      	mov	r2, r0
 c00215a:	693b      	ldr	r3, [r7, #16]
 c00215c:	1ad3      	subs	r3, r2, r3
 c00215e:	f241 3288 	movw	r2, #5000	; 0x1388
 c002162:	4293      	cmp	r3, r2
 c002164:	d906      	bls.n	c002174 <HAL_RCC_OscConfig+0x56c>
        {
          return HAL_TIMEOUT;
 c002166:	2303      	movs	r3, #3
 c002168:	e1aa      	b.n	c0024c0 <HAL_RCC_OscConfig+0x8b8>
 c00216a:	bf00      	nop
 c00216c:	50021000 	.word	0x50021000
 c002170:	50007000 	.word	0x50007000
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c002174:	4bb0      	ldr	r3, [pc, #704]	; (c002438 <HAL_RCC_OscConfig+0x830>)
 c002176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00217a:	f003 0302 	and.w	r3, r3, #2
 c00217e:	2b00      	cmp	r3, #0
 c002180:	d0e8      	beq.n	c002154 <HAL_RCC_OscConfig+0x54c>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 c002182:	687b      	ldr	r3, [r7, #4]
 c002184:	689b      	ldr	r3, [r3, #8]
 c002186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c00218a:	2b00      	cmp	r3, #0
 c00218c:	d01b      	beq.n	c0021c6 <HAL_RCC_OscConfig+0x5be>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c00218e:	4baa      	ldr	r3, [pc, #680]	; (c002438 <HAL_RCC_OscConfig+0x830>)
 c002190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c002194:	4aa8      	ldr	r2, [pc, #672]	; (c002438 <HAL_RCC_OscConfig+0x830>)
 c002196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c00219a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c00219e:	e00a      	b.n	c0021b6 <HAL_RCC_OscConfig+0x5ae>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c0021a0:	f7fe ffaa 	bl	c0010f8 <HAL_GetTick>
 c0021a4:	4602      	mov	r2, r0
 c0021a6:	693b      	ldr	r3, [r7, #16]
 c0021a8:	1ad3      	subs	r3, r2, r3
 c0021aa:	f241 3288 	movw	r2, #5000	; 0x1388
 c0021ae:	4293      	cmp	r3, r2
 c0021b0:	d901      	bls.n	c0021b6 <HAL_RCC_OscConfig+0x5ae>
          {
            return HAL_TIMEOUT;
 c0021b2:	2303      	movs	r3, #3
 c0021b4:	e184      	b.n	c0024c0 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c0021b6:	4ba0      	ldr	r3, [pc, #640]	; (c002438 <HAL_RCC_OscConfig+0x830>)
 c0021b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0021bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c0021c0:	2b00      	cmp	r3, #0
 c0021c2:	d0ed      	beq.n	c0021a0 <HAL_RCC_OscConfig+0x598>
 c0021c4:	e053      	b.n	c00226e <HAL_RCC_OscConfig+0x666>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c0021c6:	4b9c      	ldr	r3, [pc, #624]	; (c002438 <HAL_RCC_OscConfig+0x830>)
 c0021c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0021cc:	4a9a      	ldr	r2, [pc, #616]	; (c002438 <HAL_RCC_OscConfig+0x830>)
 c0021ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c0021d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c0021d6:	e00a      	b.n	c0021ee <HAL_RCC_OscConfig+0x5e6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c0021d8:	f7fe ff8e 	bl	c0010f8 <HAL_GetTick>
 c0021dc:	4602      	mov	r2, r0
 c0021de:	693b      	ldr	r3, [r7, #16]
 c0021e0:	1ad3      	subs	r3, r2, r3
 c0021e2:	f241 3288 	movw	r2, #5000	; 0x1388
 c0021e6:	4293      	cmp	r3, r2
 c0021e8:	d901      	bls.n	c0021ee <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 c0021ea:	2303      	movs	r3, #3
 c0021ec:	e168      	b.n	c0024c0 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c0021ee:	4b92      	ldr	r3, [pc, #584]	; (c002438 <HAL_RCC_OscConfig+0x830>)
 c0021f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0021f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c0021f8:	2b00      	cmp	r3, #0
 c0021fa:	d1ed      	bne.n	c0021d8 <HAL_RCC_OscConfig+0x5d0>
 c0021fc:	e037      	b.n	c00226e <HAL_RCC_OscConfig+0x666>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c0021fe:	f7fe ff7b 	bl	c0010f8 <HAL_GetTick>
 c002202:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c002204:	e00a      	b.n	c00221c <HAL_RCC_OscConfig+0x614>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c002206:	f7fe ff77 	bl	c0010f8 <HAL_GetTick>
 c00220a:	4602      	mov	r2, r0
 c00220c:	693b      	ldr	r3, [r7, #16]
 c00220e:	1ad3      	subs	r3, r2, r3
 c002210:	f241 3288 	movw	r2, #5000	; 0x1388
 c002214:	4293      	cmp	r3, r2
 c002216:	d901      	bls.n	c00221c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_TIMEOUT;
 c002218:	2303      	movs	r3, #3
 c00221a:	e151      	b.n	c0024c0 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c00221c:	4b86      	ldr	r3, [pc, #536]	; (c002438 <HAL_RCC_OscConfig+0x830>)
 c00221e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c002222:	f003 0302 	and.w	r3, r3, #2
 c002226:	2b00      	cmp	r3, #0
 c002228:	d1ed      	bne.n	c002206 <HAL_RCC_OscConfig+0x5fe>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 c00222a:	4b83      	ldr	r3, [pc, #524]	; (c002438 <HAL_RCC_OscConfig+0x830>)
 c00222c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c002230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c002234:	2b00      	cmp	r3, #0
 c002236:	d01a      	beq.n	c00226e <HAL_RCC_OscConfig+0x666>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c002238:	4b7f      	ldr	r3, [pc, #508]	; (c002438 <HAL_RCC_OscConfig+0x830>)
 c00223a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00223e:	4a7e      	ldr	r2, [pc, #504]	; (c002438 <HAL_RCC_OscConfig+0x830>)
 c002240:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c002244:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c002248:	e00a      	b.n	c002260 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c00224a:	f7fe ff55 	bl	c0010f8 <HAL_GetTick>
 c00224e:	4602      	mov	r2, r0
 c002250:	693b      	ldr	r3, [r7, #16]
 c002252:	1ad3      	subs	r3, r2, r3
 c002254:	f241 3288 	movw	r2, #5000	; 0x1388
 c002258:	4293      	cmp	r3, r2
 c00225a:	d901      	bls.n	c002260 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 c00225c:	2303      	movs	r3, #3
 c00225e:	e12f      	b.n	c0024c0 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c002260:	4b75      	ldr	r3, [pc, #468]	; (c002438 <HAL_RCC_OscConfig+0x830>)
 c002262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c002266:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c00226a:	2b00      	cmp	r3, #0
 c00226c:	d1ed      	bne.n	c00224a <HAL_RCC_OscConfig+0x642>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 c00226e:	7ffb      	ldrb	r3, [r7, #31]
 c002270:	2b01      	cmp	r3, #1
 c002272:	d105      	bne.n	c002280 <HAL_RCC_OscConfig+0x678>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 c002274:	4b70      	ldr	r3, [pc, #448]	; (c002438 <HAL_RCC_OscConfig+0x830>)
 c002276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c002278:	4a6f      	ldr	r2, [pc, #444]	; (c002438 <HAL_RCC_OscConfig+0x830>)
 c00227a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c00227e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 c002280:	687b      	ldr	r3, [r7, #4]
 c002282:	681b      	ldr	r3, [r3, #0]
 c002284:	f003 0320 	and.w	r3, r3, #32
 c002288:	2b00      	cmp	r3, #0
 c00228a:	d03c      	beq.n	c002306 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 c00228c:	687b      	ldr	r3, [r7, #4]
 c00228e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c002290:	2b00      	cmp	r3, #0
 c002292:	d01c      	beq.n	c0022ce <HAL_RCC_OscConfig+0x6c6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 c002294:	4b68      	ldr	r3, [pc, #416]	; (c002438 <HAL_RCC_OscConfig+0x830>)
 c002296:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c00229a:	4a67      	ldr	r2, [pc, #412]	; (c002438 <HAL_RCC_OscConfig+0x830>)
 c00229c:	f043 0301 	orr.w	r3, r3, #1
 c0022a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c0022a4:	f7fe ff28 	bl	c0010f8 <HAL_GetTick>
 c0022a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c0022aa:	e008      	b.n	c0022be <HAL_RCC_OscConfig+0x6b6>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 c0022ac:	f7fe ff24 	bl	c0010f8 <HAL_GetTick>
 c0022b0:	4602      	mov	r2, r0
 c0022b2:	693b      	ldr	r3, [r7, #16]
 c0022b4:	1ad3      	subs	r3, r2, r3
 c0022b6:	2b02      	cmp	r3, #2
 c0022b8:	d901      	bls.n	c0022be <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 c0022ba:	2303      	movs	r3, #3
 c0022bc:	e100      	b.n	c0024c0 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c0022be:	4b5e      	ldr	r3, [pc, #376]	; (c002438 <HAL_RCC_OscConfig+0x830>)
 c0022c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c0022c4:	f003 0302 	and.w	r3, r3, #2
 c0022c8:	2b00      	cmp	r3, #0
 c0022ca:	d0ef      	beq.n	c0022ac <HAL_RCC_OscConfig+0x6a4>
 c0022cc:	e01b      	b.n	c002306 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 c0022ce:	4b5a      	ldr	r3, [pc, #360]	; (c002438 <HAL_RCC_OscConfig+0x830>)
 c0022d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c0022d4:	4a58      	ldr	r2, [pc, #352]	; (c002438 <HAL_RCC_OscConfig+0x830>)
 c0022d6:	f023 0301 	bic.w	r3, r3, #1
 c0022da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c0022de:	f7fe ff0b 	bl	c0010f8 <HAL_GetTick>
 c0022e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c0022e4:	e008      	b.n	c0022f8 <HAL_RCC_OscConfig+0x6f0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 c0022e6:	f7fe ff07 	bl	c0010f8 <HAL_GetTick>
 c0022ea:	4602      	mov	r2, r0
 c0022ec:	693b      	ldr	r3, [r7, #16]
 c0022ee:	1ad3      	subs	r3, r2, r3
 c0022f0:	2b02      	cmp	r3, #2
 c0022f2:	d901      	bls.n	c0022f8 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_TIMEOUT;
 c0022f4:	2303      	movs	r3, #3
 c0022f6:	e0e3      	b.n	c0024c0 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c0022f8:	4b4f      	ldr	r3, [pc, #316]	; (c002438 <HAL_RCC_OscConfig+0x830>)
 c0022fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c0022fe:	f003 0302 	and.w	r3, r3, #2
 c002302:	2b00      	cmp	r3, #0
 c002304:	d1ef      	bne.n	c0022e6 <HAL_RCC_OscConfig+0x6de>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 c002306:	687b      	ldr	r3, [r7, #4]
 c002308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c00230a:	2b00      	cmp	r3, #0
 c00230c:	f000 80d7 	beq.w	c0024be <HAL_RCC_OscConfig+0x8b6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c002310:	4b49      	ldr	r3, [pc, #292]	; (c002438 <HAL_RCC_OscConfig+0x830>)
 c002312:	689b      	ldr	r3, [r3, #8]
 c002314:	f003 030c 	and.w	r3, r3, #12
 c002318:	2b0c      	cmp	r3, #12
 c00231a:	f000 8091 	beq.w	c002440 <HAL_RCC_OscConfig+0x838>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 c00231e:	687b      	ldr	r3, [r7, #4]
 c002320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c002322:	2b02      	cmp	r3, #2
 c002324:	d15a      	bne.n	c0023dc <HAL_RCC_OscConfig+0x7d4>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 c002326:	4b44      	ldr	r3, [pc, #272]	; (c002438 <HAL_RCC_OscConfig+0x830>)
 c002328:	681b      	ldr	r3, [r3, #0]
 c00232a:	4a43      	ldr	r2, [pc, #268]	; (c002438 <HAL_RCC_OscConfig+0x830>)
 c00232c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 c002330:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c002332:	f7fe fee1 	bl	c0010f8 <HAL_GetTick>
 c002336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c002338:	e008      	b.n	c00234c <HAL_RCC_OscConfig+0x744>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c00233a:	f7fe fedd 	bl	c0010f8 <HAL_GetTick>
 c00233e:	4602      	mov	r2, r0
 c002340:	693b      	ldr	r3, [r7, #16]
 c002342:	1ad3      	subs	r3, r2, r3
 c002344:	2b02      	cmp	r3, #2
 c002346:	d901      	bls.n	c00234c <HAL_RCC_OscConfig+0x744>
          {
            return HAL_TIMEOUT;
 c002348:	2303      	movs	r3, #3
 c00234a:	e0b9      	b.n	c0024c0 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c00234c:	4b3a      	ldr	r3, [pc, #232]	; (c002438 <HAL_RCC_OscConfig+0x830>)
 c00234e:	681b      	ldr	r3, [r3, #0]
 c002350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c002354:	2b00      	cmp	r3, #0
 c002356:	d1f0      	bne.n	c00233a <HAL_RCC_OscConfig+0x732>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 c002358:	4b37      	ldr	r3, [pc, #220]	; (c002438 <HAL_RCC_OscConfig+0x830>)
 c00235a:	68da      	ldr	r2, [r3, #12]
 c00235c:	4b37      	ldr	r3, [pc, #220]	; (c00243c <HAL_RCC_OscConfig+0x834>)
 c00235e:	4013      	ands	r3, r2
 c002360:	687a      	ldr	r2, [r7, #4]
 c002362:	6b11      	ldr	r1, [r2, #48]	; 0x30
 c002364:	687a      	ldr	r2, [r7, #4]
 c002366:	6b52      	ldr	r2, [r2, #52]	; 0x34
 c002368:	3a01      	subs	r2, #1
 c00236a:	0112      	lsls	r2, r2, #4
 c00236c:	4311      	orrs	r1, r2
 c00236e:	687a      	ldr	r2, [r7, #4]
 c002370:	6b92      	ldr	r2, [r2, #56]	; 0x38
 c002372:	0212      	lsls	r2, r2, #8
 c002374:	4311      	orrs	r1, r2
 c002376:	687a      	ldr	r2, [r7, #4]
 c002378:	6c12      	ldr	r2, [r2, #64]	; 0x40
 c00237a:	0852      	lsrs	r2, r2, #1
 c00237c:	3a01      	subs	r2, #1
 c00237e:	0552      	lsls	r2, r2, #21
 c002380:	4311      	orrs	r1, r2
 c002382:	687a      	ldr	r2, [r7, #4]
 c002384:	6c52      	ldr	r2, [r2, #68]	; 0x44
 c002386:	0852      	lsrs	r2, r2, #1
 c002388:	3a01      	subs	r2, #1
 c00238a:	0652      	lsls	r2, r2, #25
 c00238c:	4311      	orrs	r1, r2
 c00238e:	687a      	ldr	r2, [r7, #4]
 c002390:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 c002392:	06d2      	lsls	r2, r2, #27
 c002394:	430a      	orrs	r2, r1
 c002396:	4928      	ldr	r1, [pc, #160]	; (c002438 <HAL_RCC_OscConfig+0x830>)
 c002398:	4313      	orrs	r3, r2
 c00239a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 c00239c:	4b26      	ldr	r3, [pc, #152]	; (c002438 <HAL_RCC_OscConfig+0x830>)
 c00239e:	681b      	ldr	r3, [r3, #0]
 c0023a0:	4a25      	ldr	r2, [pc, #148]	; (c002438 <HAL_RCC_OscConfig+0x830>)
 c0023a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 c0023a6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 c0023a8:	4b23      	ldr	r3, [pc, #140]	; (c002438 <HAL_RCC_OscConfig+0x830>)
 c0023aa:	68db      	ldr	r3, [r3, #12]
 c0023ac:	4a22      	ldr	r2, [pc, #136]	; (c002438 <HAL_RCC_OscConfig+0x830>)
 c0023ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 c0023b2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c0023b4:	f7fe fea0 	bl	c0010f8 <HAL_GetTick>
 c0023b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c0023ba:	e008      	b.n	c0023ce <HAL_RCC_OscConfig+0x7c6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c0023bc:	f7fe fe9c 	bl	c0010f8 <HAL_GetTick>
 c0023c0:	4602      	mov	r2, r0
 c0023c2:	693b      	ldr	r3, [r7, #16]
 c0023c4:	1ad3      	subs	r3, r2, r3
 c0023c6:	2b02      	cmp	r3, #2
 c0023c8:	d901      	bls.n	c0023ce <HAL_RCC_OscConfig+0x7c6>
          {
            return HAL_TIMEOUT;
 c0023ca:	2303      	movs	r3, #3
 c0023cc:	e078      	b.n	c0024c0 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c0023ce:	4b1a      	ldr	r3, [pc, #104]	; (c002438 <HAL_RCC_OscConfig+0x830>)
 c0023d0:	681b      	ldr	r3, [r3, #0]
 c0023d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c0023d6:	2b00      	cmp	r3, #0
 c0023d8:	d0f0      	beq.n	c0023bc <HAL_RCC_OscConfig+0x7b4>
 c0023da:	e070      	b.n	c0024be <HAL_RCC_OscConfig+0x8b6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 c0023dc:	4b16      	ldr	r3, [pc, #88]	; (c002438 <HAL_RCC_OscConfig+0x830>)
 c0023de:	681b      	ldr	r3, [r3, #0]
 c0023e0:	4a15      	ldr	r2, [pc, #84]	; (c002438 <HAL_RCC_OscConfig+0x830>)
 c0023e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 c0023e6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 c0023e8:	4b13      	ldr	r3, [pc, #76]	; (c002438 <HAL_RCC_OscConfig+0x830>)
 c0023ea:	681b      	ldr	r3, [r3, #0]
 c0023ec:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 c0023f0:	2b00      	cmp	r3, #0
 c0023f2:	d105      	bne.n	c002400 <HAL_RCC_OscConfig+0x7f8>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 c0023f4:	4b10      	ldr	r3, [pc, #64]	; (c002438 <HAL_RCC_OscConfig+0x830>)
 c0023f6:	68db      	ldr	r3, [r3, #12]
 c0023f8:	4a0f      	ldr	r2, [pc, #60]	; (c002438 <HAL_RCC_OscConfig+0x830>)
 c0023fa:	f023 0303 	bic.w	r3, r3, #3
 c0023fe:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 c002400:	4b0d      	ldr	r3, [pc, #52]	; (c002438 <HAL_RCC_OscConfig+0x830>)
 c002402:	68db      	ldr	r3, [r3, #12]
 c002404:	4a0c      	ldr	r2, [pc, #48]	; (c002438 <HAL_RCC_OscConfig+0x830>)
 c002406:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 c00240a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c00240e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c002410:	f7fe fe72 	bl	c0010f8 <HAL_GetTick>
 c002414:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c002416:	e008      	b.n	c00242a <HAL_RCC_OscConfig+0x822>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c002418:	f7fe fe6e 	bl	c0010f8 <HAL_GetTick>
 c00241c:	4602      	mov	r2, r0
 c00241e:	693b      	ldr	r3, [r7, #16]
 c002420:	1ad3      	subs	r3, r2, r3
 c002422:	2b02      	cmp	r3, #2
 c002424:	d901      	bls.n	c00242a <HAL_RCC_OscConfig+0x822>
          {
            return HAL_TIMEOUT;
 c002426:	2303      	movs	r3, #3
 c002428:	e04a      	b.n	c0024c0 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c00242a:	4b03      	ldr	r3, [pc, #12]	; (c002438 <HAL_RCC_OscConfig+0x830>)
 c00242c:	681b      	ldr	r3, [r3, #0]
 c00242e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c002432:	2b00      	cmp	r3, #0
 c002434:	d1f0      	bne.n	c002418 <HAL_RCC_OscConfig+0x810>
 c002436:	e042      	b.n	c0024be <HAL_RCC_OscConfig+0x8b6>
 c002438:	50021000 	.word	0x50021000
 c00243c:	019f800c 	.word	0x019f800c
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 c002440:	687b      	ldr	r3, [r7, #4]
 c002442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c002444:	2b01      	cmp	r3, #1
 c002446:	d101      	bne.n	c00244c <HAL_RCC_OscConfig+0x844>
      {
        return HAL_ERROR;
 c002448:	2301      	movs	r3, #1
 c00244a:	e039      	b.n	c0024c0 <HAL_RCC_OscConfig+0x8b8>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 c00244c:	4b1e      	ldr	r3, [pc, #120]	; (c0024c8 <HAL_RCC_OscConfig+0x8c0>)
 c00244e:	68db      	ldr	r3, [r3, #12]
 c002450:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 c002452:	697b      	ldr	r3, [r7, #20]
 c002454:	f003 0203 	and.w	r2, r3, #3
 c002458:	687b      	ldr	r3, [r7, #4]
 c00245a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c00245c:	429a      	cmp	r2, r3
 c00245e:	d12c      	bne.n	c0024ba <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 c002460:	697b      	ldr	r3, [r7, #20]
 c002462:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 c002466:	687b      	ldr	r3, [r7, #4]
 c002468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c00246a:	3b01      	subs	r3, #1
 c00246c:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 c00246e:	429a      	cmp	r2, r3
 c002470:	d123      	bne.n	c0024ba <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 c002472:	697b      	ldr	r3, [r7, #20]
 c002474:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 c002478:	687b      	ldr	r3, [r7, #4]
 c00247a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c00247c:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 c00247e:	429a      	cmp	r2, r3
 c002480:	d11b      	bne.n	c0024ba <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 c002482:	697b      	ldr	r3, [r7, #20]
 c002484:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 c002488:	687b      	ldr	r3, [r7, #4]
 c00248a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c00248c:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 c00248e:	429a      	cmp	r2, r3
 c002490:	d113      	bne.n	c0024ba <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 c002492:	697b      	ldr	r3, [r7, #20]
 c002494:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 c002498:	687b      	ldr	r3, [r7, #4]
 c00249a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c00249c:	085b      	lsrs	r3, r3, #1
 c00249e:	3b01      	subs	r3, #1
 c0024a0:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 c0024a2:	429a      	cmp	r2, r3
 c0024a4:	d109      	bne.n	c0024ba <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 c0024a6:	697b      	ldr	r3, [r7, #20]
 c0024a8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 c0024ac:	687b      	ldr	r3, [r7, #4]
 c0024ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c0024b0:	085b      	lsrs	r3, r3, #1
 c0024b2:	3b01      	subs	r3, #1
 c0024b4:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 c0024b6:	429a      	cmp	r2, r3
 c0024b8:	d001      	beq.n	c0024be <HAL_RCC_OscConfig+0x8b6>
        {
          return HAL_ERROR;
 c0024ba:	2301      	movs	r3, #1
 c0024bc:	e000      	b.n	c0024c0 <HAL_RCC_OscConfig+0x8b8>
        }
      }
    }
  }

  return HAL_OK;
 c0024be:	2300      	movs	r3, #0
}
 c0024c0:	4618      	mov	r0, r3
 c0024c2:	3720      	adds	r7, #32
 c0024c4:	46bd      	mov	sp, r7
 c0024c6:	bd80      	pop	{r7, pc}
 c0024c8:	50021000 	.word	0x50021000

0c0024cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 c0024cc:	b580      	push	{r7, lr}
 c0024ce:	b086      	sub	sp, #24
 c0024d0:	af00      	add	r7, sp, #0
 c0024d2:	6078      	str	r0, [r7, #4]
 c0024d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 c0024d6:	2300      	movs	r3, #0
 c0024d8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 c0024da:	687b      	ldr	r3, [r7, #4]
 c0024dc:	2b00      	cmp	r3, #0
 c0024de:	d101      	bne.n	c0024e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 c0024e0:	2301      	movs	r3, #1
 c0024e2:	e104      	b.n	c0026ee <HAL_RCC_ClockConfig+0x222>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 c0024e4:	4b84      	ldr	r3, [pc, #528]	; (c0026f8 <HAL_RCC_ClockConfig+0x22c>)
 c0024e6:	681b      	ldr	r3, [r3, #0]
 c0024e8:	f003 030f 	and.w	r3, r3, #15
 c0024ec:	683a      	ldr	r2, [r7, #0]
 c0024ee:	429a      	cmp	r2, r3
 c0024f0:	d910      	bls.n	c002514 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 c0024f2:	4b81      	ldr	r3, [pc, #516]	; (c0026f8 <HAL_RCC_ClockConfig+0x22c>)
 c0024f4:	681b      	ldr	r3, [r3, #0]
 c0024f6:	f023 020f 	bic.w	r2, r3, #15
 c0024fa:	497f      	ldr	r1, [pc, #508]	; (c0026f8 <HAL_RCC_ClockConfig+0x22c>)
 c0024fc:	683b      	ldr	r3, [r7, #0]
 c0024fe:	4313      	orrs	r3, r2
 c002500:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c002502:	4b7d      	ldr	r3, [pc, #500]	; (c0026f8 <HAL_RCC_ClockConfig+0x22c>)
 c002504:	681b      	ldr	r3, [r3, #0]
 c002506:	f003 030f 	and.w	r3, r3, #15
 c00250a:	683a      	ldr	r2, [r7, #0]
 c00250c:	429a      	cmp	r2, r3
 c00250e:	d001      	beq.n	c002514 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 c002510:	2301      	movs	r3, #1
 c002512:	e0ec      	b.n	c0026ee <HAL_RCC_ClockConfig+0x222>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 c002514:	687b      	ldr	r3, [r7, #4]
 c002516:	681b      	ldr	r3, [r3, #0]
 c002518:	f003 0301 	and.w	r3, r3, #1
 c00251c:	2b00      	cmp	r3, #0
 c00251e:	f000 808b 	beq.w	c002638 <HAL_RCC_ClockConfig+0x16c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 c002522:	687b      	ldr	r3, [r7, #4]
 c002524:	685b      	ldr	r3, [r3, #4]
 c002526:	2b03      	cmp	r3, #3
 c002528:	d134      	bne.n	c002594 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c00252a:	4b74      	ldr	r3, [pc, #464]	; (c0026fc <HAL_RCC_ClockConfig+0x230>)
 c00252c:	681b      	ldr	r3, [r3, #0]
 c00252e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c002532:	2b00      	cmp	r3, #0
 c002534:	d101      	bne.n	c00253a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 c002536:	2301      	movs	r3, #1
 c002538:	e0d9      	b.n	c0026ee <HAL_RCC_ClockConfig+0x222>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 c00253a:	f000 fa25 	bl	c002988 <RCC_GetSysClockFreqFromPLLSource>
 c00253e:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 c002540:	693b      	ldr	r3, [r7, #16]
 c002542:	4a6f      	ldr	r2, [pc, #444]	; (c002700 <HAL_RCC_ClockConfig+0x234>)
 c002544:	4293      	cmp	r3, r2
 c002546:	d956      	bls.n	c0025f6 <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 c002548:	4b6c      	ldr	r3, [pc, #432]	; (c0026fc <HAL_RCC_ClockConfig+0x230>)
 c00254a:	689b      	ldr	r3, [r3, #8]
 c00254c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c002550:	2b00      	cmp	r3, #0
 c002552:	d10a      	bne.n	c00256a <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c002554:	4b69      	ldr	r3, [pc, #420]	; (c0026fc <HAL_RCC_ClockConfig+0x230>)
 c002556:	689b      	ldr	r3, [r3, #8]
 c002558:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c00255c:	4a67      	ldr	r2, [pc, #412]	; (c0026fc <HAL_RCC_ClockConfig+0x230>)
 c00255e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c002562:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 c002564:	2380      	movs	r3, #128	; 0x80
 c002566:	617b      	str	r3, [r7, #20]
 c002568:	e045      	b.n	c0025f6 <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 c00256a:	687b      	ldr	r3, [r7, #4]
 c00256c:	681b      	ldr	r3, [r3, #0]
 c00256e:	f003 0302 	and.w	r3, r3, #2
 c002572:	2b00      	cmp	r3, #0
 c002574:	d03f      	beq.n	c0025f6 <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 c002576:	687b      	ldr	r3, [r7, #4]
 c002578:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 c00257a:	2b00      	cmp	r3, #0
 c00257c:	d13b      	bne.n	c0025f6 <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c00257e:	4b5f      	ldr	r3, [pc, #380]	; (c0026fc <HAL_RCC_ClockConfig+0x230>)
 c002580:	689b      	ldr	r3, [r3, #8]
 c002582:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c002586:	4a5d      	ldr	r2, [pc, #372]	; (c0026fc <HAL_RCC_ClockConfig+0x230>)
 c002588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c00258c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 c00258e:	2380      	movs	r3, #128	; 0x80
 c002590:	617b      	str	r3, [r7, #20]
 c002592:	e030      	b.n	c0025f6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 c002594:	687b      	ldr	r3, [r7, #4]
 c002596:	685b      	ldr	r3, [r3, #4]
 c002598:	2b02      	cmp	r3, #2
 c00259a:	d107      	bne.n	c0025ac <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c00259c:	4b57      	ldr	r3, [pc, #348]	; (c0026fc <HAL_RCC_ClockConfig+0x230>)
 c00259e:	681b      	ldr	r3, [r3, #0]
 c0025a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c0025a4:	2b00      	cmp	r3, #0
 c0025a6:	d115      	bne.n	c0025d4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 c0025a8:	2301      	movs	r3, #1
 c0025aa:	e0a0      	b.n	c0026ee <HAL_RCC_ClockConfig+0x222>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 c0025ac:	687b      	ldr	r3, [r7, #4]
 c0025ae:	685b      	ldr	r3, [r3, #4]
 c0025b0:	2b00      	cmp	r3, #0
 c0025b2:	d107      	bne.n	c0025c4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c0025b4:	4b51      	ldr	r3, [pc, #324]	; (c0026fc <HAL_RCC_ClockConfig+0x230>)
 c0025b6:	681b      	ldr	r3, [r3, #0]
 c0025b8:	f003 0302 	and.w	r3, r3, #2
 c0025bc:	2b00      	cmp	r3, #0
 c0025be:	d109      	bne.n	c0025d4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 c0025c0:	2301      	movs	r3, #1
 c0025c2:	e094      	b.n	c0026ee <HAL_RCC_ClockConfig+0x222>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c0025c4:	4b4d      	ldr	r3, [pc, #308]	; (c0026fc <HAL_RCC_ClockConfig+0x230>)
 c0025c6:	681b      	ldr	r3, [r3, #0]
 c0025c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c0025cc:	2b00      	cmp	r3, #0
 c0025ce:	d101      	bne.n	c0025d4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 c0025d0:	2301      	movs	r3, #1
 c0025d2:	e08c      	b.n	c0026ee <HAL_RCC_ClockConfig+0x222>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 c0025d4:	f000 f89a 	bl	c00270c <HAL_RCC_GetSysClockFreq>
 c0025d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 c0025da:	693b      	ldr	r3, [r7, #16]
 c0025dc:	4a48      	ldr	r2, [pc, #288]	; (c002700 <HAL_RCC_ClockConfig+0x234>)
 c0025de:	4293      	cmp	r3, r2
 c0025e0:	d909      	bls.n	c0025f6 <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c0025e2:	4b46      	ldr	r3, [pc, #280]	; (c0026fc <HAL_RCC_ClockConfig+0x230>)
 c0025e4:	689b      	ldr	r3, [r3, #8]
 c0025e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c0025ea:	4a44      	ldr	r2, [pc, #272]	; (c0026fc <HAL_RCC_ClockConfig+0x230>)
 c0025ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c0025f0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 c0025f2:	2380      	movs	r3, #128	; 0x80
 c0025f4:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 c0025f6:	4b41      	ldr	r3, [pc, #260]	; (c0026fc <HAL_RCC_ClockConfig+0x230>)
 c0025f8:	689b      	ldr	r3, [r3, #8]
 c0025fa:	f023 0203 	bic.w	r2, r3, #3
 c0025fe:	687b      	ldr	r3, [r7, #4]
 c002600:	685b      	ldr	r3, [r3, #4]
 c002602:	493e      	ldr	r1, [pc, #248]	; (c0026fc <HAL_RCC_ClockConfig+0x230>)
 c002604:	4313      	orrs	r3, r2
 c002606:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c002608:	f7fe fd76 	bl	c0010f8 <HAL_GetTick>
 c00260c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c00260e:	e00a      	b.n	c002626 <HAL_RCC_ClockConfig+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 c002610:	f7fe fd72 	bl	c0010f8 <HAL_GetTick>
 c002614:	4602      	mov	r2, r0
 c002616:	68fb      	ldr	r3, [r7, #12]
 c002618:	1ad3      	subs	r3, r2, r3
 c00261a:	f241 3288 	movw	r2, #5000	; 0x1388
 c00261e:	4293      	cmp	r3, r2
 c002620:	d901      	bls.n	c002626 <HAL_RCC_ClockConfig+0x15a>
      {
        return HAL_TIMEOUT;
 c002622:	2303      	movs	r3, #3
 c002624:	e063      	b.n	c0026ee <HAL_RCC_ClockConfig+0x222>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c002626:	4b35      	ldr	r3, [pc, #212]	; (c0026fc <HAL_RCC_ClockConfig+0x230>)
 c002628:	689b      	ldr	r3, [r3, #8]
 c00262a:	f003 020c 	and.w	r2, r3, #12
 c00262e:	687b      	ldr	r3, [r7, #4]
 c002630:	685b      	ldr	r3, [r3, #4]
 c002632:	009b      	lsls	r3, r3, #2
 c002634:	429a      	cmp	r2, r3
 c002636:	d1eb      	bne.n	c002610 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 c002638:	687b      	ldr	r3, [r7, #4]
 c00263a:	681b      	ldr	r3, [r3, #0]
 c00263c:	f003 0302 	and.w	r3, r3, #2
 c002640:	2b00      	cmp	r3, #0
 c002642:	d009      	beq.n	c002658 <HAL_RCC_ClockConfig+0x18c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 c002644:	4b2d      	ldr	r3, [pc, #180]	; (c0026fc <HAL_RCC_ClockConfig+0x230>)
 c002646:	689b      	ldr	r3, [r3, #8]
 c002648:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c00264c:	687b      	ldr	r3, [r7, #4]
 c00264e:	689b      	ldr	r3, [r3, #8]
 c002650:	492a      	ldr	r1, [pc, #168]	; (c0026fc <HAL_RCC_ClockConfig+0x230>)
 c002652:	4313      	orrs	r3, r2
 c002654:	608b      	str	r3, [r1, #8]
 c002656:	e008      	b.n	c00266a <HAL_RCC_ClockConfig+0x19e>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 c002658:	697b      	ldr	r3, [r7, #20]
 c00265a:	2b80      	cmp	r3, #128	; 0x80
 c00265c:	d105      	bne.n	c00266a <HAL_RCC_ClockConfig+0x19e>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 c00265e:	4b27      	ldr	r3, [pc, #156]	; (c0026fc <HAL_RCC_ClockConfig+0x230>)
 c002660:	689b      	ldr	r3, [r3, #8]
 c002662:	4a26      	ldr	r2, [pc, #152]	; (c0026fc <HAL_RCC_ClockConfig+0x230>)
 c002664:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c002668:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 c00266a:	4b23      	ldr	r3, [pc, #140]	; (c0026f8 <HAL_RCC_ClockConfig+0x22c>)
 c00266c:	681b      	ldr	r3, [r3, #0]
 c00266e:	f003 030f 	and.w	r3, r3, #15
 c002672:	683a      	ldr	r2, [r7, #0]
 c002674:	429a      	cmp	r2, r3
 c002676:	d210      	bcs.n	c00269a <HAL_RCC_ClockConfig+0x1ce>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 c002678:	4b1f      	ldr	r3, [pc, #124]	; (c0026f8 <HAL_RCC_ClockConfig+0x22c>)
 c00267a:	681b      	ldr	r3, [r3, #0]
 c00267c:	f023 020f 	bic.w	r2, r3, #15
 c002680:	491d      	ldr	r1, [pc, #116]	; (c0026f8 <HAL_RCC_ClockConfig+0x22c>)
 c002682:	683b      	ldr	r3, [r7, #0]
 c002684:	4313      	orrs	r3, r2
 c002686:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c002688:	4b1b      	ldr	r3, [pc, #108]	; (c0026f8 <HAL_RCC_ClockConfig+0x22c>)
 c00268a:	681b      	ldr	r3, [r3, #0]
 c00268c:	f003 030f 	and.w	r3, r3, #15
 c002690:	683a      	ldr	r2, [r7, #0]
 c002692:	429a      	cmp	r2, r3
 c002694:	d001      	beq.n	c00269a <HAL_RCC_ClockConfig+0x1ce>
    {
      return HAL_ERROR;
 c002696:	2301      	movs	r3, #1
 c002698:	e029      	b.n	c0026ee <HAL_RCC_ClockConfig+0x222>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 c00269a:	687b      	ldr	r3, [r7, #4]
 c00269c:	681b      	ldr	r3, [r3, #0]
 c00269e:	f003 0304 	and.w	r3, r3, #4
 c0026a2:	2b00      	cmp	r3, #0
 c0026a4:	d008      	beq.n	c0026b8 <HAL_RCC_ClockConfig+0x1ec>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 c0026a6:	4b15      	ldr	r3, [pc, #84]	; (c0026fc <HAL_RCC_ClockConfig+0x230>)
 c0026a8:	689b      	ldr	r3, [r3, #8]
 c0026aa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 c0026ae:	687b      	ldr	r3, [r7, #4]
 c0026b0:	68db      	ldr	r3, [r3, #12]
 c0026b2:	4912      	ldr	r1, [pc, #72]	; (c0026fc <HAL_RCC_ClockConfig+0x230>)
 c0026b4:	4313      	orrs	r3, r2
 c0026b6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 c0026b8:	687b      	ldr	r3, [r7, #4]
 c0026ba:	681b      	ldr	r3, [r3, #0]
 c0026bc:	f003 0308 	and.w	r3, r3, #8
 c0026c0:	2b00      	cmp	r3, #0
 c0026c2:	d009      	beq.n	c0026d8 <HAL_RCC_ClockConfig+0x20c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 c0026c4:	4b0d      	ldr	r3, [pc, #52]	; (c0026fc <HAL_RCC_ClockConfig+0x230>)
 c0026c6:	689b      	ldr	r3, [r3, #8]
 c0026c8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 c0026cc:	687b      	ldr	r3, [r7, #4]
 c0026ce:	691b      	ldr	r3, [r3, #16]
 c0026d0:	00db      	lsls	r3, r3, #3
 c0026d2:	490a      	ldr	r1, [pc, #40]	; (c0026fc <HAL_RCC_ClockConfig+0x230>)
 c0026d4:	4313      	orrs	r3, r2
 c0026d6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 c0026d8:	f000 f8b6 	bl	c002848 <HAL_RCC_GetHCLKFreq>
 c0026dc:	4603      	mov	r3, r0
 c0026de:	4a09      	ldr	r2, [pc, #36]	; (c002704 <HAL_RCC_ClockConfig+0x238>)
 c0026e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 c0026e2:	4b09      	ldr	r3, [pc, #36]	; (c002708 <HAL_RCC_ClockConfig+0x23c>)
 c0026e4:	681b      	ldr	r3, [r3, #0]
 c0026e6:	4618      	mov	r0, r3
 c0026e8:	f7fe fcb6 	bl	c001058 <HAL_InitTick>
 c0026ec:	4603      	mov	r3, r0
}
 c0026ee:	4618      	mov	r0, r3
 c0026f0:	3718      	adds	r7, #24
 c0026f2:	46bd      	mov	sp, r7
 c0026f4:	bd80      	pop	{r7, pc}
 c0026f6:	bf00      	nop
 c0026f8:	50022000 	.word	0x50022000
 c0026fc:	50021000 	.word	0x50021000
 c002700:	04c4b400 	.word	0x04c4b400
 c002704:	30000068 	.word	0x30000068
 c002708:	3000006c 	.word	0x3000006c

0c00270c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 c00270c:	b480      	push	{r7}
 c00270e:	b089      	sub	sp, #36	; 0x24
 c002710:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 c002712:	2300      	movs	r3, #0
 c002714:	61fb      	str	r3, [r7, #28]
 c002716:	2300      	movs	r3, #0
 c002718:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c00271a:	4b47      	ldr	r3, [pc, #284]	; (c002838 <HAL_RCC_GetSysClockFreq+0x12c>)
 c00271c:	689b      	ldr	r3, [r3, #8]
 c00271e:	f003 030c 	and.w	r3, r3, #12
 c002722:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 c002724:	4b44      	ldr	r3, [pc, #272]	; (c002838 <HAL_RCC_GetSysClockFreq+0x12c>)
 c002726:	68db      	ldr	r3, [r3, #12]
 c002728:	f003 0303 	and.w	r3, r3, #3
 c00272c:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c00272e:	693b      	ldr	r3, [r7, #16]
 c002730:	2b00      	cmp	r3, #0
 c002732:	d005      	beq.n	c002740 <HAL_RCC_GetSysClockFreq+0x34>
 c002734:	693b      	ldr	r3, [r7, #16]
 c002736:	2b0c      	cmp	r3, #12
 c002738:	d121      	bne.n	c00277e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 c00273a:	68fb      	ldr	r3, [r7, #12]
 c00273c:	2b01      	cmp	r3, #1
 c00273e:	d11e      	bne.n	c00277e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 c002740:	4b3d      	ldr	r3, [pc, #244]	; (c002838 <HAL_RCC_GetSysClockFreq+0x12c>)
 c002742:	681b      	ldr	r3, [r3, #0]
 c002744:	f003 0308 	and.w	r3, r3, #8
 c002748:	2b00      	cmp	r3, #0
 c00274a:	d107      	bne.n	c00275c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c00274c:	4b3a      	ldr	r3, [pc, #232]	; (c002838 <HAL_RCC_GetSysClockFreq+0x12c>)
 c00274e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c002752:	0a1b      	lsrs	r3, r3, #8
 c002754:	f003 030f 	and.w	r3, r3, #15
 c002758:	61fb      	str	r3, [r7, #28]
 c00275a:	e005      	b.n	c002768 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c00275c:	4b36      	ldr	r3, [pc, #216]	; (c002838 <HAL_RCC_GetSysClockFreq+0x12c>)
 c00275e:	681b      	ldr	r3, [r3, #0]
 c002760:	091b      	lsrs	r3, r3, #4
 c002762:	f003 030f 	and.w	r3, r3, #15
 c002766:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 c002768:	4a34      	ldr	r2, [pc, #208]	; (c00283c <HAL_RCC_GetSysClockFreq+0x130>)
 c00276a:	69fb      	ldr	r3, [r7, #28]
 c00276c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c002770:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c002772:	693b      	ldr	r3, [r7, #16]
 c002774:	2b00      	cmp	r3, #0
 c002776:	d10d      	bne.n	c002794 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 c002778:	69fb      	ldr	r3, [r7, #28]
 c00277a:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c00277c:	e00a      	b.n	c002794 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 c00277e:	693b      	ldr	r3, [r7, #16]
 c002780:	2b04      	cmp	r3, #4
 c002782:	d102      	bne.n	c00278a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 c002784:	4b2e      	ldr	r3, [pc, #184]	; (c002840 <HAL_RCC_GetSysClockFreq+0x134>)
 c002786:	61bb      	str	r3, [r7, #24]
 c002788:	e004      	b.n	c002794 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 c00278a:	693b      	ldr	r3, [r7, #16]
 c00278c:	2b08      	cmp	r3, #8
 c00278e:	d101      	bne.n	c002794 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 c002790:	4b2c      	ldr	r3, [pc, #176]	; (c002844 <HAL_RCC_GetSysClockFreq+0x138>)
 c002792:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c002794:	693b      	ldr	r3, [r7, #16]
 c002796:	2b0c      	cmp	r3, #12
 c002798:	d146      	bne.n	c002828 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c00279a:	4b27      	ldr	r3, [pc, #156]	; (c002838 <HAL_RCC_GetSysClockFreq+0x12c>)
 c00279c:	68db      	ldr	r3, [r3, #12]
 c00279e:	f003 0303 	and.w	r3, r3, #3
 c0027a2:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c0027a4:	4b24      	ldr	r3, [pc, #144]	; (c002838 <HAL_RCC_GetSysClockFreq+0x12c>)
 c0027a6:	68db      	ldr	r3, [r3, #12]
 c0027a8:	091b      	lsrs	r3, r3, #4
 c0027aa:	f003 030f 	and.w	r3, r3, #15
 c0027ae:	3301      	adds	r3, #1
 c0027b0:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 c0027b2:	68bb      	ldr	r3, [r7, #8]
 c0027b4:	2b02      	cmp	r3, #2
 c0027b6:	d003      	beq.n	c0027c0 <HAL_RCC_GetSysClockFreq+0xb4>
 c0027b8:	68bb      	ldr	r3, [r7, #8]
 c0027ba:	2b03      	cmp	r3, #3
 c0027bc:	d00d      	beq.n	c0027da <HAL_RCC_GetSysClockFreq+0xce>
 c0027be:	e019      	b.n	c0027f4 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c0027c0:	4a1f      	ldr	r2, [pc, #124]	; (c002840 <HAL_RCC_GetSysClockFreq+0x134>)
 c0027c2:	687b      	ldr	r3, [r7, #4]
 c0027c4:	fbb2 f3f3 	udiv	r3, r2, r3
 c0027c8:	4a1b      	ldr	r2, [pc, #108]	; (c002838 <HAL_RCC_GetSysClockFreq+0x12c>)
 c0027ca:	68d2      	ldr	r2, [r2, #12]
 c0027cc:	0a12      	lsrs	r2, r2, #8
 c0027ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c0027d2:	fb02 f303 	mul.w	r3, r2, r3
 c0027d6:	617b      	str	r3, [r7, #20]
        break;
 c0027d8:	e019      	b.n	c00280e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c0027da:	4a1a      	ldr	r2, [pc, #104]	; (c002844 <HAL_RCC_GetSysClockFreq+0x138>)
 c0027dc:	687b      	ldr	r3, [r7, #4]
 c0027de:	fbb2 f3f3 	udiv	r3, r2, r3
 c0027e2:	4a15      	ldr	r2, [pc, #84]	; (c002838 <HAL_RCC_GetSysClockFreq+0x12c>)
 c0027e4:	68d2      	ldr	r2, [r2, #12]
 c0027e6:	0a12      	lsrs	r2, r2, #8
 c0027e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c0027ec:	fb02 f303 	mul.w	r3, r2, r3
 c0027f0:	617b      	str	r3, [r7, #20]
        break;
 c0027f2:	e00c      	b.n	c00280e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c0027f4:	69fa      	ldr	r2, [r7, #28]
 c0027f6:	687b      	ldr	r3, [r7, #4]
 c0027f8:	fbb2 f3f3 	udiv	r3, r2, r3
 c0027fc:	4a0e      	ldr	r2, [pc, #56]	; (c002838 <HAL_RCC_GetSysClockFreq+0x12c>)
 c0027fe:	68d2      	ldr	r2, [r2, #12]
 c002800:	0a12      	lsrs	r2, r2, #8
 c002802:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c002806:	fb02 f303 	mul.w	r3, r2, r3
 c00280a:	617b      	str	r3, [r7, #20]
        break;
 c00280c:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c00280e:	4b0a      	ldr	r3, [pc, #40]	; (c002838 <HAL_RCC_GetSysClockFreq+0x12c>)
 c002810:	68db      	ldr	r3, [r3, #12]
 c002812:	0e5b      	lsrs	r3, r3, #25
 c002814:	f003 0303 	and.w	r3, r3, #3
 c002818:	3301      	adds	r3, #1
 c00281a:	005b      	lsls	r3, r3, #1
 c00281c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 c00281e:	697a      	ldr	r2, [r7, #20]
 c002820:	683b      	ldr	r3, [r7, #0]
 c002822:	fbb2 f3f3 	udiv	r3, r2, r3
 c002826:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 c002828:	69bb      	ldr	r3, [r7, #24]
}
 c00282a:	4618      	mov	r0, r3
 c00282c:	3724      	adds	r7, #36	; 0x24
 c00282e:	46bd      	mov	sp, r7
 c002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002834:	4770      	bx	lr
 c002836:	bf00      	nop
 c002838:	50021000 	.word	0x50021000
 c00283c:	0c0045e0 	.word	0x0c0045e0
 c002840:	00f42400 	.word	0x00f42400
 c002844:	007a1200 	.word	0x007a1200

0c002848 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 c002848:	b580      	push	{r7, lr}
 c00284a:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 c00284c:	f7ff ff5e 	bl	c00270c <HAL_RCC_GetSysClockFreq>
 c002850:	4602      	mov	r2, r0
 c002852:	4b05      	ldr	r3, [pc, #20]	; (c002868 <HAL_RCC_GetHCLKFreq+0x20>)
 c002854:	689b      	ldr	r3, [r3, #8]
 c002856:	091b      	lsrs	r3, r3, #4
 c002858:	f003 030f 	and.w	r3, r3, #15
 c00285c:	4903      	ldr	r1, [pc, #12]	; (c00286c <HAL_RCC_GetHCLKFreq+0x24>)
 c00285e:	5ccb      	ldrb	r3, [r1, r3]
 c002860:	fa22 f303 	lsr.w	r3, r2, r3
}
 c002864:	4618      	mov	r0, r3
 c002866:	bd80      	pop	{r7, pc}
 c002868:	50021000 	.word	0x50021000
 c00286c:	0c0045c8 	.word	0x0c0045c8

0c002870 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 c002870:	b580      	push	{r7, lr}
 c002872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 c002874:	f7ff ffe8 	bl	c002848 <HAL_RCC_GetHCLKFreq>
 c002878:	4602      	mov	r2, r0
 c00287a:	4b05      	ldr	r3, [pc, #20]	; (c002890 <HAL_RCC_GetPCLK1Freq+0x20>)
 c00287c:	689b      	ldr	r3, [r3, #8]
 c00287e:	0a1b      	lsrs	r3, r3, #8
 c002880:	f003 0307 	and.w	r3, r3, #7
 c002884:	4903      	ldr	r1, [pc, #12]	; (c002894 <HAL_RCC_GetPCLK1Freq+0x24>)
 c002886:	5ccb      	ldrb	r3, [r1, r3]
 c002888:	fa22 f303 	lsr.w	r3, r2, r3
}
 c00288c:	4618      	mov	r0, r3
 c00288e:	bd80      	pop	{r7, pc}
 c002890:	50021000 	.word	0x50021000
 c002894:	0c0045d8 	.word	0x0c0045d8

0c002898 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 c002898:	b580      	push	{r7, lr}
 c00289a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 c00289c:	f7ff ffd4 	bl	c002848 <HAL_RCC_GetHCLKFreq>
 c0028a0:	4602      	mov	r2, r0
 c0028a2:	4b05      	ldr	r3, [pc, #20]	; (c0028b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 c0028a4:	689b      	ldr	r3, [r3, #8]
 c0028a6:	0adb      	lsrs	r3, r3, #11
 c0028a8:	f003 0307 	and.w	r3, r3, #7
 c0028ac:	4903      	ldr	r1, [pc, #12]	; (c0028bc <HAL_RCC_GetPCLK2Freq+0x24>)
 c0028ae:	5ccb      	ldrb	r3, [r1, r3]
 c0028b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 c0028b4:	4618      	mov	r0, r3
 c0028b6:	bd80      	pop	{r7, pc}
 c0028b8:	50021000 	.word	0x50021000
 c0028bc:	0c0045d8 	.word	0x0c0045d8

0c0028c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 c0028c0:	b580      	push	{r7, lr}
 c0028c2:	b086      	sub	sp, #24
 c0028c4:	af00      	add	r7, sp, #0
 c0028c6:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 c0028c8:	2300      	movs	r3, #0
 c0028ca:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 c0028cc:	4b2c      	ldr	r3, [pc, #176]	; (c002980 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c0028ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0028d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c0028d4:	2b00      	cmp	r3, #0
 c0028d6:	d003      	beq.n	c0028e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 c0028d8:	f7ff f8f8 	bl	c001acc <HAL_PWREx_GetVoltageRange>
 c0028dc:	6138      	str	r0, [r7, #16]
 c0028de:	e014      	b.n	c00290a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 c0028e0:	4b27      	ldr	r3, [pc, #156]	; (c002980 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c0028e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0028e4:	4a26      	ldr	r2, [pc, #152]	; (c002980 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c0028e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c0028ea:	6593      	str	r3, [r2, #88]	; 0x58
 c0028ec:	4b24      	ldr	r3, [pc, #144]	; (c002980 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c0028ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0028f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c0028f4:	60fb      	str	r3, [r7, #12]
 c0028f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 c0028f8:	f7ff f8e8 	bl	c001acc <HAL_PWREx_GetVoltageRange>
 c0028fc:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 c0028fe:	4b20      	ldr	r3, [pc, #128]	; (c002980 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c002900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c002902:	4a1f      	ldr	r2, [pc, #124]	; (c002980 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c002904:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c002908:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 c00290a:	693b      	ldr	r3, [r7, #16]
 c00290c:	2b00      	cmp	r3, #0
 c00290e:	d003      	beq.n	c002918 <RCC_SetFlashLatencyFromMSIRange+0x58>
 c002910:	693b      	ldr	r3, [r7, #16]
 c002912:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c002916:	d10b      	bne.n	c002930 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 c002918:	687b      	ldr	r3, [r7, #4]
 c00291a:	2b80      	cmp	r3, #128	; 0x80
 c00291c:	d919      	bls.n	c002952 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 c00291e:	687b      	ldr	r3, [r7, #4]
 c002920:	2ba0      	cmp	r3, #160	; 0xa0
 c002922:	d902      	bls.n	c00292a <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 c002924:	2302      	movs	r3, #2
 c002926:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 c002928:	e013      	b.n	c002952 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 c00292a:	2301      	movs	r3, #1
 c00292c:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 c00292e:	e010      	b.n	c002952 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 c002930:	687b      	ldr	r3, [r7, #4]
 c002932:	2b80      	cmp	r3, #128	; 0x80
 c002934:	d902      	bls.n	c00293c <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 c002936:	2303      	movs	r3, #3
 c002938:	617b      	str	r3, [r7, #20]
 c00293a:	e00a      	b.n	c002952 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 c00293c:	687b      	ldr	r3, [r7, #4]
 c00293e:	2b80      	cmp	r3, #128	; 0x80
 c002940:	d102      	bne.n	c002948 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 c002942:	2302      	movs	r3, #2
 c002944:	617b      	str	r3, [r7, #20]
 c002946:	e004      	b.n	c002952 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 c002948:	687b      	ldr	r3, [r7, #4]
 c00294a:	2b70      	cmp	r3, #112	; 0x70
 c00294c:	d101      	bne.n	c002952 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 c00294e:	2301      	movs	r3, #1
 c002950:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 c002952:	4b0c      	ldr	r3, [pc, #48]	; (c002984 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c002954:	681b      	ldr	r3, [r3, #0]
 c002956:	f023 020f 	bic.w	r2, r3, #15
 c00295a:	490a      	ldr	r1, [pc, #40]	; (c002984 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c00295c:	697b      	ldr	r3, [r7, #20]
 c00295e:	4313      	orrs	r3, r2
 c002960:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 c002962:	4b08      	ldr	r3, [pc, #32]	; (c002984 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c002964:	681b      	ldr	r3, [r3, #0]
 c002966:	f003 030f 	and.w	r3, r3, #15
 c00296a:	697a      	ldr	r2, [r7, #20]
 c00296c:	429a      	cmp	r2, r3
 c00296e:	d001      	beq.n	c002974 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 c002970:	2301      	movs	r3, #1
 c002972:	e000      	b.n	c002976 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 c002974:	2300      	movs	r3, #0
}
 c002976:	4618      	mov	r0, r3
 c002978:	3718      	adds	r7, #24
 c00297a:	46bd      	mov	sp, r7
 c00297c:	bd80      	pop	{r7, pc}
 c00297e:	bf00      	nop
 c002980:	50021000 	.word	0x50021000
 c002984:	50022000 	.word	0x50022000

0c002988 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 c002988:	b480      	push	{r7}
 c00298a:	b087      	sub	sp, #28
 c00298c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 c00298e:	2300      	movs	r3, #0
 c002990:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 c002992:	4b36      	ldr	r3, [pc, #216]	; (c002a6c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c002994:	68db      	ldr	r3, [r3, #12]
 c002996:	f003 0303 	and.w	r3, r3, #3
 c00299a:	2b01      	cmp	r3, #1
 c00299c:	d118      	bne.n	c0029d0 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 c00299e:	4b33      	ldr	r3, [pc, #204]	; (c002a6c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c0029a0:	681b      	ldr	r3, [r3, #0]
 c0029a2:	f003 0308 	and.w	r3, r3, #8
 c0029a6:	2b00      	cmp	r3, #0
 c0029a8:	d107      	bne.n	c0029ba <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c0029aa:	4b30      	ldr	r3, [pc, #192]	; (c002a6c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c0029ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c0029b0:	0a1b      	lsrs	r3, r3, #8
 c0029b2:	f003 030f 	and.w	r3, r3, #15
 c0029b6:	617b      	str	r3, [r7, #20]
 c0029b8:	e005      	b.n	c0029c6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c0029ba:	4b2c      	ldr	r3, [pc, #176]	; (c002a6c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c0029bc:	681b      	ldr	r3, [r3, #0]
 c0029be:	091b      	lsrs	r3, r3, #4
 c0029c0:	f003 030f 	and.w	r3, r3, #15
 c0029c4:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 c0029c6:	4a2a      	ldr	r2, [pc, #168]	; (c002a70 <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 c0029c8:	697b      	ldr	r3, [r7, #20]
 c0029ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c0029ce:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 c0029d0:	4b26      	ldr	r3, [pc, #152]	; (c002a6c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c0029d2:	68db      	ldr	r3, [r3, #12]
 c0029d4:	f003 0303 	and.w	r3, r3, #3
 c0029d8:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c0029da:	4b24      	ldr	r3, [pc, #144]	; (c002a6c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c0029dc:	68db      	ldr	r3, [r3, #12]
 c0029de:	091b      	lsrs	r3, r3, #4
 c0029e0:	f003 030f 	and.w	r3, r3, #15
 c0029e4:	3301      	adds	r3, #1
 c0029e6:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 c0029e8:	68fb      	ldr	r3, [r7, #12]
 c0029ea:	2b02      	cmp	r3, #2
 c0029ec:	d003      	beq.n	c0029f6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
 c0029ee:	68fb      	ldr	r3, [r7, #12]
 c0029f0:	2b03      	cmp	r3, #3
 c0029f2:	d00d      	beq.n	c002a10 <RCC_GetSysClockFreqFromPLLSource+0x88>
 c0029f4:	e019      	b.n	c002a2a <RCC_GetSysClockFreqFromPLLSource+0xa2>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c0029f6:	4a1f      	ldr	r2, [pc, #124]	; (c002a74 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 c0029f8:	68bb      	ldr	r3, [r7, #8]
 c0029fa:	fbb2 f3f3 	udiv	r3, r2, r3
 c0029fe:	4a1b      	ldr	r2, [pc, #108]	; (c002a6c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c002a00:	68d2      	ldr	r2, [r2, #12]
 c002a02:	0a12      	lsrs	r2, r2, #8
 c002a04:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c002a08:	fb02 f303 	mul.w	r3, r2, r3
 c002a0c:	613b      	str	r3, [r7, #16]
      break;
 c002a0e:	e019      	b.n	c002a44 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c002a10:	4a19      	ldr	r2, [pc, #100]	; (c002a78 <RCC_GetSysClockFreqFromPLLSource+0xf0>)
 c002a12:	68bb      	ldr	r3, [r7, #8]
 c002a14:	fbb2 f3f3 	udiv	r3, r2, r3
 c002a18:	4a14      	ldr	r2, [pc, #80]	; (c002a6c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c002a1a:	68d2      	ldr	r2, [r2, #12]
 c002a1c:	0a12      	lsrs	r2, r2, #8
 c002a1e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c002a22:	fb02 f303 	mul.w	r3, r2, r3
 c002a26:	613b      	str	r3, [r7, #16]
      break;
 c002a28:	e00c      	b.n	c002a44 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c002a2a:	697a      	ldr	r2, [r7, #20]
 c002a2c:	68bb      	ldr	r3, [r7, #8]
 c002a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 c002a32:	4a0e      	ldr	r2, [pc, #56]	; (c002a6c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c002a34:	68d2      	ldr	r2, [r2, #12]
 c002a36:	0a12      	lsrs	r2, r2, #8
 c002a38:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c002a3c:	fb02 f303 	mul.w	r3, r2, r3
 c002a40:	613b      	str	r3, [r7, #16]
      break;
 c002a42:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c002a44:	4b09      	ldr	r3, [pc, #36]	; (c002a6c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c002a46:	68db      	ldr	r3, [r3, #12]
 c002a48:	0e5b      	lsrs	r3, r3, #25
 c002a4a:	f003 0303 	and.w	r3, r3, #3
 c002a4e:	3301      	adds	r3, #1
 c002a50:	005b      	lsls	r3, r3, #1
 c002a52:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 c002a54:	693a      	ldr	r2, [r7, #16]
 c002a56:	687b      	ldr	r3, [r7, #4]
 c002a58:	fbb2 f3f3 	udiv	r3, r2, r3
 c002a5c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 c002a5e:	683b      	ldr	r3, [r7, #0]
}
 c002a60:	4618      	mov	r0, r3
 c002a62:	371c      	adds	r7, #28
 c002a64:	46bd      	mov	sp, r7
 c002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002a6a:	4770      	bx	lr
 c002a6c:	50021000 	.word	0x50021000
 c002a70:	0c0045e0 	.word	0x0c0045e0
 c002a74:	00f42400 	.word	0x00f42400
 c002a78:	007a1200 	.word	0x007a1200

0c002a7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 c002a7c:	b580      	push	{r7, lr}
 c002a7e:	b088      	sub	sp, #32
 c002a80:	af00      	add	r7, sp, #0
 c002a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 c002a84:	2300      	movs	r3, #0
 c002a86:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 c002a88:	2300      	movs	r3, #0
 c002a8a:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 c002a8c:	687b      	ldr	r3, [r7, #4]
 c002a8e:	681b      	ldr	r3, [r3, #0]
 c002a90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c002a94:	2b00      	cmp	r3, #0
 c002a96:	d040      	beq.n	c002b1a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 c002a98:	687b      	ldr	r3, [r7, #4]
 c002a9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 c002a9c:	2b80      	cmp	r3, #128	; 0x80
 c002a9e:	d02a      	beq.n	c002af6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 c002aa0:	2b80      	cmp	r3, #128	; 0x80
 c002aa2:	d825      	bhi.n	c002af0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 c002aa4:	2b60      	cmp	r3, #96	; 0x60
 c002aa6:	d026      	beq.n	c002af6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 c002aa8:	2b60      	cmp	r3, #96	; 0x60
 c002aaa:	d821      	bhi.n	c002af0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 c002aac:	2b40      	cmp	r3, #64	; 0x40
 c002aae:	d006      	beq.n	c002abe <HAL_RCCEx_PeriphCLKConfig+0x42>
 c002ab0:	2b40      	cmp	r3, #64	; 0x40
 c002ab2:	d81d      	bhi.n	c002af0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 c002ab4:	2b00      	cmp	r3, #0
 c002ab6:	d009      	beq.n	c002acc <HAL_RCCEx_PeriphCLKConfig+0x50>
 c002ab8:	2b20      	cmp	r3, #32
 c002aba:	d010      	beq.n	c002ade <HAL_RCCEx_PeriphCLKConfig+0x62>
 c002abc:	e018      	b.n	c002af0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c002abe:	4b87      	ldr	r3, [pc, #540]	; (c002cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 c002ac0:	68db      	ldr	r3, [r3, #12]
 c002ac2:	4a86      	ldr	r2, [pc, #536]	; (c002cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 c002ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c002ac8:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 c002aca:	e015      	b.n	c002af8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c002acc:	687b      	ldr	r3, [r7, #4]
 c002ace:	3304      	adds	r3, #4
 c002ad0:	2100      	movs	r1, #0
 c002ad2:	4618      	mov	r0, r3
 c002ad4:	f000 fb46 	bl	c003164 <RCCEx_PLLSAI1_Config>
 c002ad8:	4603      	mov	r3, r0
 c002ada:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 c002adc:	e00c      	b.n	c002af8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 c002ade:	687b      	ldr	r3, [r7, #4]
 c002ae0:	3320      	adds	r3, #32
 c002ae2:	2100      	movs	r1, #0
 c002ae4:	4618      	mov	r0, r3
 c002ae6:	f000 fc13 	bl	c003310 <RCCEx_PLLSAI2_Config>
 c002aea:	4603      	mov	r3, r0
 c002aec:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 c002aee:	e003      	b.n	c002af8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c002af0:	2301      	movs	r3, #1
 c002af2:	77fb      	strb	r3, [r7, #31]
        break;
 c002af4:	e000      	b.n	c002af8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 c002af6:	bf00      	nop
    }

    if (ret == HAL_OK)
 c002af8:	7ffb      	ldrb	r3, [r7, #31]
 c002afa:	2b00      	cmp	r3, #0
 c002afc:	d10b      	bne.n	c002b16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 c002afe:	4b77      	ldr	r3, [pc, #476]	; (c002cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 c002b00:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c002b04:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 c002b08:	687b      	ldr	r3, [r7, #4]
 c002b0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 c002b0c:	4973      	ldr	r1, [pc, #460]	; (c002cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 c002b0e:	4313      	orrs	r3, r2
 c002b10:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 c002b14:	e001      	b.n	c002b1a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c002b16:	7ffb      	ldrb	r3, [r7, #31]
 c002b18:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 c002b1a:	687b      	ldr	r3, [r7, #4]
 c002b1c:	681b      	ldr	r3, [r3, #0]
 c002b1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 c002b22:	2b00      	cmp	r3, #0
 c002b24:	d047      	beq.n	c002bb6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 c002b26:	687b      	ldr	r3, [r7, #4]
 c002b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 c002b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c002b2e:	d030      	beq.n	c002b92 <HAL_RCCEx_PeriphCLKConfig+0x116>
 c002b30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c002b34:	d82a      	bhi.n	c002b8c <HAL_RCCEx_PeriphCLKConfig+0x110>
 c002b36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c002b3a:	d02a      	beq.n	c002b92 <HAL_RCCEx_PeriphCLKConfig+0x116>
 c002b3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c002b40:	d824      	bhi.n	c002b8c <HAL_RCCEx_PeriphCLKConfig+0x110>
 c002b42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c002b46:	d008      	beq.n	c002b5a <HAL_RCCEx_PeriphCLKConfig+0xde>
 c002b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c002b4c:	d81e      	bhi.n	c002b8c <HAL_RCCEx_PeriphCLKConfig+0x110>
 c002b4e:	2b00      	cmp	r3, #0
 c002b50:	d00a      	beq.n	c002b68 <HAL_RCCEx_PeriphCLKConfig+0xec>
 c002b52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c002b56:	d010      	beq.n	c002b7a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 c002b58:	e018      	b.n	c002b8c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c002b5a:	4b60      	ldr	r3, [pc, #384]	; (c002cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 c002b5c:	68db      	ldr	r3, [r3, #12]
 c002b5e:	4a5f      	ldr	r2, [pc, #380]	; (c002cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 c002b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c002b64:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 c002b66:	e015      	b.n	c002b94 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c002b68:	687b      	ldr	r3, [r7, #4]
 c002b6a:	3304      	adds	r3, #4
 c002b6c:	2100      	movs	r1, #0
 c002b6e:	4618      	mov	r0, r3
 c002b70:	f000 faf8 	bl	c003164 <RCCEx_PLLSAI1_Config>
 c002b74:	4603      	mov	r3, r0
 c002b76:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 c002b78:	e00c      	b.n	c002b94 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 c002b7a:	687b      	ldr	r3, [r7, #4]
 c002b7c:	3320      	adds	r3, #32
 c002b7e:	2100      	movs	r1, #0
 c002b80:	4618      	mov	r0, r3
 c002b82:	f000 fbc5 	bl	c003310 <RCCEx_PLLSAI2_Config>
 c002b86:	4603      	mov	r3, r0
 c002b88:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 c002b8a:	e003      	b.n	c002b94 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c002b8c:	2301      	movs	r3, #1
 c002b8e:	77fb      	strb	r3, [r7, #31]
        break;
 c002b90:	e000      	b.n	c002b94 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 c002b92:	bf00      	nop
    }

    if (ret == HAL_OK)
 c002b94:	7ffb      	ldrb	r3, [r7, #31]
 c002b96:	2b00      	cmp	r3, #0
 c002b98:	d10b      	bne.n	c002bb2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 c002b9a:	4b50      	ldr	r3, [pc, #320]	; (c002cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 c002b9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c002ba0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 c002ba4:	687b      	ldr	r3, [r7, #4]
 c002ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 c002ba8:	494c      	ldr	r1, [pc, #304]	; (c002cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 c002baa:	4313      	orrs	r3, r2
 c002bac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 c002bb0:	e001      	b.n	c002bb6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c002bb2:	7ffb      	ldrb	r3, [r7, #31]
 c002bb4:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 c002bb6:	687b      	ldr	r3, [r7, #4]
 c002bb8:	681b      	ldr	r3, [r3, #0]
 c002bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c002bbe:	2b00      	cmp	r3, #0
 c002bc0:	f000 809b 	beq.w	c002cfa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 c002bc4:	2300      	movs	r3, #0
 c002bc6:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 c002bc8:	4b44      	ldr	r3, [pc, #272]	; (c002cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 c002bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c002bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c002bd0:	2b00      	cmp	r3, #0
 c002bd2:	d10d      	bne.n	c002bf0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 c002bd4:	4b41      	ldr	r3, [pc, #260]	; (c002cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 c002bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c002bd8:	4a40      	ldr	r2, [pc, #256]	; (c002cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 c002bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c002bde:	6593      	str	r3, [r2, #88]	; 0x58
 c002be0:	4b3e      	ldr	r3, [pc, #248]	; (c002cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 c002be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c002be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c002be8:	60fb      	str	r3, [r7, #12]
 c002bea:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 c002bec:	2301      	movs	r3, #1
 c002bee:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 c002bf0:	4b3b      	ldr	r3, [pc, #236]	; (c002ce0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 c002bf2:	681b      	ldr	r3, [r3, #0]
 c002bf4:	4a3a      	ldr	r2, [pc, #232]	; (c002ce0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 c002bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c002bfa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 c002bfc:	f7fe fa7c 	bl	c0010f8 <HAL_GetTick>
 c002c00:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c002c02:	e009      	b.n	c002c18 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c002c04:	f7fe fa78 	bl	c0010f8 <HAL_GetTick>
 c002c08:	4602      	mov	r2, r0
 c002c0a:	693b      	ldr	r3, [r7, #16]
 c002c0c:	1ad3      	subs	r3, r2, r3
 c002c0e:	2b02      	cmp	r3, #2
 c002c10:	d902      	bls.n	c002c18 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 c002c12:	2303      	movs	r3, #3
 c002c14:	77fb      	strb	r3, [r7, #31]
        break;
 c002c16:	e005      	b.n	c002c24 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c002c18:	4b31      	ldr	r3, [pc, #196]	; (c002ce0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 c002c1a:	681b      	ldr	r3, [r3, #0]
 c002c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c002c20:	2b00      	cmp	r3, #0
 c002c22:	d0ef      	beq.n	c002c04 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if (ret == HAL_OK)
 c002c24:	7ffb      	ldrb	r3, [r7, #31]
 c002c26:	2b00      	cmp	r3, #0
 c002c28:	d15c      	bne.n	c002ce4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 c002c2a:	4b2c      	ldr	r3, [pc, #176]	; (c002cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 c002c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c002c30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 c002c34:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 c002c36:	69bb      	ldr	r3, [r7, #24]
 c002c38:	2b00      	cmp	r3, #0
 c002c3a:	d01f      	beq.n	c002c7c <HAL_RCCEx_PeriphCLKConfig+0x200>
 c002c3c:	687b      	ldr	r3, [r7, #4]
 c002c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c002c42:	69ba      	ldr	r2, [r7, #24]
 c002c44:	429a      	cmp	r2, r3
 c002c46:	d019      	beq.n	c002c7c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 c002c48:	4b24      	ldr	r3, [pc, #144]	; (c002cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 c002c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c002c4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 c002c52:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 c002c54:	4b21      	ldr	r3, [pc, #132]	; (c002cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 c002c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c002c5a:	4a20      	ldr	r2, [pc, #128]	; (c002cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 c002c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c002c60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 c002c64:	4b1d      	ldr	r3, [pc, #116]	; (c002cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 c002c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c002c6a:	4a1c      	ldr	r2, [pc, #112]	; (c002cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 c002c6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c002c70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 c002c74:	4a19      	ldr	r2, [pc, #100]	; (c002cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 c002c76:	69bb      	ldr	r3, [r7, #24]
 c002c78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 c002c7c:	69bb      	ldr	r3, [r7, #24]
 c002c7e:	f003 0301 	and.w	r3, r3, #1
 c002c82:	2b00      	cmp	r3, #0
 c002c84:	d016      	beq.n	c002cb4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c002c86:	f7fe fa37 	bl	c0010f8 <HAL_GetTick>
 c002c8a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c002c8c:	e00b      	b.n	c002ca6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c002c8e:	f7fe fa33 	bl	c0010f8 <HAL_GetTick>
 c002c92:	4602      	mov	r2, r0
 c002c94:	693b      	ldr	r3, [r7, #16]
 c002c96:	1ad3      	subs	r3, r2, r3
 c002c98:	f241 3288 	movw	r2, #5000	; 0x1388
 c002c9c:	4293      	cmp	r3, r2
 c002c9e:	d902      	bls.n	c002ca6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 c002ca0:	2303      	movs	r3, #3
 c002ca2:	77fb      	strb	r3, [r7, #31]
            break;
 c002ca4:	e006      	b.n	c002cb4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c002ca6:	4b0d      	ldr	r3, [pc, #52]	; (c002cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 c002ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c002cac:	f003 0302 	and.w	r3, r3, #2
 c002cb0:	2b00      	cmp	r3, #0
 c002cb2:	d0ec      	beq.n	c002c8e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if (ret == HAL_OK)
 c002cb4:	7ffb      	ldrb	r3, [r7, #31]
 c002cb6:	2b00      	cmp	r3, #0
 c002cb8:	d10c      	bne.n	c002cd4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 c002cba:	4b08      	ldr	r3, [pc, #32]	; (c002cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 c002cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c002cc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 c002cc4:	687b      	ldr	r3, [r7, #4]
 c002cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c002cca:	4904      	ldr	r1, [pc, #16]	; (c002cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 c002ccc:	4313      	orrs	r3, r2
 c002cce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 c002cd2:	e009      	b.n	c002ce8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 c002cd4:	7ffb      	ldrb	r3, [r7, #31]
 c002cd6:	77bb      	strb	r3, [r7, #30]
 c002cd8:	e006      	b.n	c002ce8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 c002cda:	bf00      	nop
 c002cdc:	50021000 	.word	0x50021000
 c002ce0:	50007000 	.word	0x50007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 c002ce4:	7ffb      	ldrb	r3, [r7, #31]
 c002ce6:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 c002ce8:	7dfb      	ldrb	r3, [r7, #23]
 c002cea:	2b01      	cmp	r3, #1
 c002cec:	d105      	bne.n	c002cfa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 c002cee:	4baf      	ldr	r3, [pc, #700]	; (c002fac <HAL_RCCEx_PeriphCLKConfig+0x530>)
 c002cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c002cf2:	4aae      	ldr	r2, [pc, #696]	; (c002fac <HAL_RCCEx_PeriphCLKConfig+0x530>)
 c002cf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c002cf8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 c002cfa:	687b      	ldr	r3, [r7, #4]
 c002cfc:	681b      	ldr	r3, [r3, #0]
 c002cfe:	f003 0301 	and.w	r3, r3, #1
 c002d02:	2b00      	cmp	r3, #0
 c002d04:	d00a      	beq.n	c002d1c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 c002d06:	4ba9      	ldr	r3, [pc, #676]	; (c002fac <HAL_RCCEx_PeriphCLKConfig+0x530>)
 c002d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c002d0c:	f023 0203 	bic.w	r2, r3, #3
 c002d10:	687b      	ldr	r3, [r7, #4]
 c002d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c002d14:	49a5      	ldr	r1, [pc, #660]	; (c002fac <HAL_RCCEx_PeriphCLKConfig+0x530>)
 c002d16:	4313      	orrs	r3, r2
 c002d18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 c002d1c:	687b      	ldr	r3, [r7, #4]
 c002d1e:	681b      	ldr	r3, [r3, #0]
 c002d20:	f003 0302 	and.w	r3, r3, #2
 c002d24:	2b00      	cmp	r3, #0
 c002d26:	d00a      	beq.n	c002d3e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 c002d28:	4ba0      	ldr	r3, [pc, #640]	; (c002fac <HAL_RCCEx_PeriphCLKConfig+0x530>)
 c002d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c002d2e:	f023 020c 	bic.w	r2, r3, #12
 c002d32:	687b      	ldr	r3, [r7, #4]
 c002d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c002d36:	499d      	ldr	r1, [pc, #628]	; (c002fac <HAL_RCCEx_PeriphCLKConfig+0x530>)
 c002d38:	4313      	orrs	r3, r2
 c002d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 c002d3e:	687b      	ldr	r3, [r7, #4]
 c002d40:	681b      	ldr	r3, [r3, #0]
 c002d42:	f003 0304 	and.w	r3, r3, #4
 c002d46:	2b00      	cmp	r3, #0
 c002d48:	d00a      	beq.n	c002d60 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 c002d4a:	4b98      	ldr	r3, [pc, #608]	; (c002fac <HAL_RCCEx_PeriphCLKConfig+0x530>)
 c002d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c002d50:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 c002d54:	687b      	ldr	r3, [r7, #4]
 c002d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c002d58:	4994      	ldr	r1, [pc, #592]	; (c002fac <HAL_RCCEx_PeriphCLKConfig+0x530>)
 c002d5a:	4313      	orrs	r3, r2
 c002d5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 c002d60:	687b      	ldr	r3, [r7, #4]
 c002d62:	681b      	ldr	r3, [r3, #0]
 c002d64:	f003 0308 	and.w	r3, r3, #8
 c002d68:	2b00      	cmp	r3, #0
 c002d6a:	d00a      	beq.n	c002d82 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 c002d6c:	4b8f      	ldr	r3, [pc, #572]	; (c002fac <HAL_RCCEx_PeriphCLKConfig+0x530>)
 c002d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c002d72:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 c002d76:	687b      	ldr	r3, [r7, #4]
 c002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c002d7a:	498c      	ldr	r1, [pc, #560]	; (c002fac <HAL_RCCEx_PeriphCLKConfig+0x530>)
 c002d7c:	4313      	orrs	r3, r2
 c002d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 c002d82:	687b      	ldr	r3, [r7, #4]
 c002d84:	681b      	ldr	r3, [r3, #0]
 c002d86:	f003 0310 	and.w	r3, r3, #16
 c002d8a:	2b00      	cmp	r3, #0
 c002d8c:	d00a      	beq.n	c002da4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 c002d8e:	4b87      	ldr	r3, [pc, #540]	; (c002fac <HAL_RCCEx_PeriphCLKConfig+0x530>)
 c002d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c002d94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 c002d98:	687b      	ldr	r3, [r7, #4]
 c002d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c002d9c:	4983      	ldr	r1, [pc, #524]	; (c002fac <HAL_RCCEx_PeriphCLKConfig+0x530>)
 c002d9e:	4313      	orrs	r3, r2
 c002da0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 c002da4:	687b      	ldr	r3, [r7, #4]
 c002da6:	681b      	ldr	r3, [r3, #0]
 c002da8:	f003 0320 	and.w	r3, r3, #32
 c002dac:	2b00      	cmp	r3, #0
 c002dae:	d00a      	beq.n	c002dc6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 c002db0:	4b7e      	ldr	r3, [pc, #504]	; (c002fac <HAL_RCCEx_PeriphCLKConfig+0x530>)
 c002db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c002db6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 c002dba:	687b      	ldr	r3, [r7, #4]
 c002dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c002dbe:	497b      	ldr	r1, [pc, #492]	; (c002fac <HAL_RCCEx_PeriphCLKConfig+0x530>)
 c002dc0:	4313      	orrs	r3, r2
 c002dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 c002dc6:	687b      	ldr	r3, [r7, #4]
 c002dc8:	681b      	ldr	r3, [r3, #0]
 c002dca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c002dce:	2b00      	cmp	r3, #0
 c002dd0:	d00a      	beq.n	c002de8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 c002dd2:	4b76      	ldr	r3, [pc, #472]	; (c002fac <HAL_RCCEx_PeriphCLKConfig+0x530>)
 c002dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c002dd8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 c002ddc:	687b      	ldr	r3, [r7, #4]
 c002dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c002de0:	4972      	ldr	r1, [pc, #456]	; (c002fac <HAL_RCCEx_PeriphCLKConfig+0x530>)
 c002de2:	4313      	orrs	r3, r2
 c002de4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 c002de8:	687b      	ldr	r3, [r7, #4]
 c002dea:	681b      	ldr	r3, [r3, #0]
 c002dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c002df0:	2b00      	cmp	r3, #0
 c002df2:	d00a      	beq.n	c002e0a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 c002df4:	4b6d      	ldr	r3, [pc, #436]	; (c002fac <HAL_RCCEx_PeriphCLKConfig+0x530>)
 c002df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c002dfa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 c002dfe:	687b      	ldr	r3, [r7, #4]
 c002e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c002e02:	496a      	ldr	r1, [pc, #424]	; (c002fac <HAL_RCCEx_PeriphCLKConfig+0x530>)
 c002e04:	4313      	orrs	r3, r2
 c002e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 c002e0a:	687b      	ldr	r3, [r7, #4]
 c002e0c:	681b      	ldr	r3, [r3, #0]
 c002e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 c002e12:	2b00      	cmp	r3, #0
 c002e14:	d00a      	beq.n	c002e2c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 c002e16:	4b65      	ldr	r3, [pc, #404]	; (c002fac <HAL_RCCEx_PeriphCLKConfig+0x530>)
 c002e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c002e1c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 c002e20:	687b      	ldr	r3, [r7, #4]
 c002e22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c002e24:	4961      	ldr	r1, [pc, #388]	; (c002fac <HAL_RCCEx_PeriphCLKConfig+0x530>)
 c002e26:	4313      	orrs	r3, r2
 c002e28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 c002e2c:	687b      	ldr	r3, [r7, #4]
 c002e2e:	681b      	ldr	r3, [r3, #0]
 c002e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c002e34:	2b00      	cmp	r3, #0
 c002e36:	d031      	beq.n	c002e9c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 c002e38:	687b      	ldr	r3, [r7, #4]
 c002e3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c002e3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c002e40:	d00e      	beq.n	c002e60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 c002e42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c002e46:	d814      	bhi.n	c002e72 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 c002e48:	2b00      	cmp	r3, #0
 c002e4a:	d015      	beq.n	c002e78 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 c002e4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c002e50:	d10f      	bne.n	c002e72 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c002e52:	4b56      	ldr	r3, [pc, #344]	; (c002fac <HAL_RCCEx_PeriphCLKConfig+0x530>)
 c002e54:	68db      	ldr	r3, [r3, #12]
 c002e56:	4a55      	ldr	r2, [pc, #340]	; (c002fac <HAL_RCCEx_PeriphCLKConfig+0x530>)
 c002e58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c002e5c:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 c002e5e:	e00c      	b.n	c002e7a <HAL_RCCEx_PeriphCLKConfig+0x3fe>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c002e60:	687b      	ldr	r3, [r7, #4]
 c002e62:	3304      	adds	r3, #4
 c002e64:	2100      	movs	r1, #0
 c002e66:	4618      	mov	r0, r3
 c002e68:	f000 f97c 	bl	c003164 <RCCEx_PLLSAI1_Config>
 c002e6c:	4603      	mov	r3, r0
 c002e6e:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 c002e70:	e003      	b.n	c002e7a <HAL_RCCEx_PeriphCLKConfig+0x3fe>

      default:
        ret = HAL_ERROR;
 c002e72:	2301      	movs	r3, #1
 c002e74:	77fb      	strb	r3, [r7, #31]
        break;
 c002e76:	e000      	b.n	c002e7a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
        break;
 c002e78:	bf00      	nop
    }

    if (ret == HAL_OK)
 c002e7a:	7ffb      	ldrb	r3, [r7, #31]
 c002e7c:	2b00      	cmp	r3, #0
 c002e7e:	d10b      	bne.n	c002e98 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 c002e80:	4b4a      	ldr	r3, [pc, #296]	; (c002fac <HAL_RCCEx_PeriphCLKConfig+0x530>)
 c002e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c002e86:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 c002e8a:	687b      	ldr	r3, [r7, #4]
 c002e8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c002e8e:	4947      	ldr	r1, [pc, #284]	; (c002fac <HAL_RCCEx_PeriphCLKConfig+0x530>)
 c002e90:	4313      	orrs	r3, r2
 c002e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 c002e96:	e001      	b.n	c002e9c <HAL_RCCEx_PeriphCLKConfig+0x420>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c002e98:	7ffb      	ldrb	r3, [r7, #31]
 c002e9a:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 c002e9c:	687b      	ldr	r3, [r7, #4]
 c002e9e:	681b      	ldr	r3, [r3, #0]
 c002ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c002ea4:	2b00      	cmp	r3, #0
 c002ea6:	d00a      	beq.n	c002ebe <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 c002ea8:	4b40      	ldr	r3, [pc, #256]	; (c002fac <HAL_RCCEx_PeriphCLKConfig+0x530>)
 c002eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c002eae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 c002eb2:	687b      	ldr	r3, [r7, #4]
 c002eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c002eb6:	493d      	ldr	r1, [pc, #244]	; (c002fac <HAL_RCCEx_PeriphCLKConfig+0x530>)
 c002eb8:	4313      	orrs	r3, r2
 c002eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 c002ebe:	687b      	ldr	r3, [r7, #4]
 c002ec0:	681b      	ldr	r3, [r3, #0]
 c002ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c002ec6:	2b00      	cmp	r3, #0
 c002ec8:	d00a      	beq.n	c002ee0 <HAL_RCCEx_PeriphCLKConfig+0x464>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 c002eca:	4b38      	ldr	r3, [pc, #224]	; (c002fac <HAL_RCCEx_PeriphCLKConfig+0x530>)
 c002ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c002ed0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 c002ed4:	687b      	ldr	r3, [r7, #4]
 c002ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 c002ed8:	4934      	ldr	r1, [pc, #208]	; (c002fac <HAL_RCCEx_PeriphCLKConfig+0x530>)
 c002eda:	4313      	orrs	r3, r2
 c002edc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 c002ee0:	687b      	ldr	r3, [r7, #4]
 c002ee2:	681b      	ldr	r3, [r3, #0]
 c002ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c002ee8:	2b00      	cmp	r3, #0
 c002eea:	d00a      	beq.n	c002f02 <HAL_RCCEx_PeriphCLKConfig+0x486>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 c002eec:	4b2f      	ldr	r3, [pc, #188]	; (c002fac <HAL_RCCEx_PeriphCLKConfig+0x530>)
 c002eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c002ef2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 c002ef6:	687b      	ldr	r3, [r7, #4]
 c002ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c002efa:	492c      	ldr	r1, [pc, #176]	; (c002fac <HAL_RCCEx_PeriphCLKConfig+0x530>)
 c002efc:	4313      	orrs	r3, r2
 c002efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 c002f02:	687b      	ldr	r3, [r7, #4]
 c002f04:	681b      	ldr	r3, [r3, #0]
 c002f06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c002f0a:	2b00      	cmp	r3, #0
 c002f0c:	d00a      	beq.n	c002f24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 c002f0e:	4b27      	ldr	r3, [pc, #156]	; (c002fac <HAL_RCCEx_PeriphCLKConfig+0x530>)
 c002f10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c002f14:	f023 0203 	bic.w	r2, r3, #3
 c002f18:	687b      	ldr	r3, [r7, #4]
 c002f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c002f1c:	4923      	ldr	r1, [pc, #140]	; (c002fac <HAL_RCCEx_PeriphCLKConfig+0x530>)
 c002f1e:	4313      	orrs	r3, r2
 c002f20:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 c002f24:	687b      	ldr	r3, [r7, #4]
 c002f26:	681b      	ldr	r3, [r3, #0]
 c002f28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 c002f2c:	2b00      	cmp	r3, #0
 c002f2e:	d028      	beq.n	c002f82 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 c002f30:	4b1e      	ldr	r3, [pc, #120]	; (c002fac <HAL_RCCEx_PeriphCLKConfig+0x530>)
 c002f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c002f36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 c002f3a:	687b      	ldr	r3, [r7, #4]
 c002f3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c002f3e:	491b      	ldr	r1, [pc, #108]	; (c002fac <HAL_RCCEx_PeriphCLKConfig+0x530>)
 c002f40:	4313      	orrs	r3, r2
 c002f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 c002f46:	687b      	ldr	r3, [r7, #4]
 c002f48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c002f4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c002f4e:	d106      	bne.n	c002f5e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c002f50:	4b16      	ldr	r3, [pc, #88]	; (c002fac <HAL_RCCEx_PeriphCLKConfig+0x530>)
 c002f52:	68db      	ldr	r3, [r3, #12]
 c002f54:	4a15      	ldr	r2, [pc, #84]	; (c002fac <HAL_RCCEx_PeriphCLKConfig+0x530>)
 c002f56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c002f5a:	60d3      	str	r3, [r2, #12]
 c002f5c:	e011      	b.n	c002f82 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 c002f5e:	687b      	ldr	r3, [r7, #4]
 c002f60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c002f62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c002f66:	d10c      	bne.n	c002f82 <HAL_RCCEx_PeriphCLKConfig+0x506>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c002f68:	687b      	ldr	r3, [r7, #4]
 c002f6a:	3304      	adds	r3, #4
 c002f6c:	2101      	movs	r1, #1
 c002f6e:	4618      	mov	r0, r3
 c002f70:	f000 f8f8 	bl	c003164 <RCCEx_PLLSAI1_Config>
 c002f74:	4603      	mov	r3, r0
 c002f76:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 c002f78:	7ffb      	ldrb	r3, [r7, #31]
 c002f7a:	2b00      	cmp	r3, #0
 c002f7c:	d001      	beq.n	c002f82 <HAL_RCCEx_PeriphCLKConfig+0x506>
        {
          /* set overall return value */
          status = ret;
 c002f7e:	7ffb      	ldrb	r3, [r7, #31]
 c002f80:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 c002f82:	687b      	ldr	r3, [r7, #4]
 c002f84:	681b      	ldr	r3, [r3, #0]
 c002f86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 c002f8a:	2b00      	cmp	r3, #0
 c002f8c:	d04d      	beq.n	c00302a <HAL_RCCEx_PeriphCLKConfig+0x5ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 c002f8e:	687b      	ldr	r3, [r7, #4]
 c002f90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c002f92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c002f96:	d10b      	bne.n	c002fb0 <HAL_RCCEx_PeriphCLKConfig+0x534>
 c002f98:	4b04      	ldr	r3, [pc, #16]	; (c002fac <HAL_RCCEx_PeriphCLKConfig+0x530>)
 c002f9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c002f9e:	4a03      	ldr	r2, [pc, #12]	; (c002fac <HAL_RCCEx_PeriphCLKConfig+0x530>)
 c002fa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 c002fa4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 c002fa8:	e015      	b.n	c002fd6 <HAL_RCCEx_PeriphCLKConfig+0x55a>
 c002faa:	bf00      	nop
 c002fac:	50021000 	.word	0x50021000
 c002fb0:	4b6b      	ldr	r3, [pc, #428]	; (c003160 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 c002fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c002fb6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 c002fba:	687b      	ldr	r3, [r7, #4]
 c002fbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c002fbe:	4968      	ldr	r1, [pc, #416]	; (c003160 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 c002fc0:	4313      	orrs	r3, r2
 c002fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 c002fc6:	4b66      	ldr	r3, [pc, #408]	; (c003160 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 c002fc8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c002fcc:	4a64      	ldr	r2, [pc, #400]	; (c003160 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 c002fce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 c002fd2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 c002fd6:	687b      	ldr	r3, [r7, #4]
 c002fd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c002fda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c002fde:	d10d      	bne.n	c002ffc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c002fe0:	687b      	ldr	r3, [r7, #4]
 c002fe2:	3304      	adds	r3, #4
 c002fe4:	2101      	movs	r1, #1
 c002fe6:	4618      	mov	r0, r3
 c002fe8:	f000 f8bc 	bl	c003164 <RCCEx_PLLSAI1_Config>
 c002fec:	4603      	mov	r3, r0
 c002fee:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 c002ff0:	7ffb      	ldrb	r3, [r7, #31]
 c002ff2:	2b00      	cmp	r3, #0
 c002ff4:	d019      	beq.n	c00302a <HAL_RCCEx_PeriphCLKConfig+0x5ae>
      {
        /* set overall return value */
        status = ret;
 c002ff6:	7ffb      	ldrb	r3, [r7, #31]
 c002ff8:	77bb      	strb	r3, [r7, #30]
 c002ffa:	e016      	b.n	c00302a <HAL_RCCEx_PeriphCLKConfig+0x5ae>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 c002ffc:	687b      	ldr	r3, [r7, #4]
 c002ffe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c003000:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c003004:	d106      	bne.n	c003014 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c003006:	4b56      	ldr	r3, [pc, #344]	; (c003160 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 c003008:	68db      	ldr	r3, [r3, #12]
 c00300a:	4a55      	ldr	r2, [pc, #340]	; (c003160 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 c00300c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c003010:	60d3      	str	r3, [r2, #12]
 c003012:	e00a      	b.n	c00302a <HAL_RCCEx_PeriphCLKConfig+0x5ae>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 c003014:	687b      	ldr	r3, [r7, #4]
 c003016:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c003018:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c00301c:	d105      	bne.n	c00302a <HAL_RCCEx_PeriphCLKConfig+0x5ae>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c00301e:	4b50      	ldr	r3, [pc, #320]	; (c003160 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 c003020:	68db      	ldr	r3, [r3, #12]
 c003022:	4a4f      	ldr	r2, [pc, #316]	; (c003160 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 c003024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c003028:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 c00302a:	687b      	ldr	r3, [r7, #4]
 c00302c:	681b      	ldr	r3, [r3, #0]
 c00302e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 c003032:	2b00      	cmp	r3, #0
 c003034:	d028      	beq.n	c003088 <HAL_RCCEx_PeriphCLKConfig+0x60c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 c003036:	4b4a      	ldr	r3, [pc, #296]	; (c003160 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 c003038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00303c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 c003040:	687b      	ldr	r3, [r7, #4]
 c003042:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c003044:	4946      	ldr	r1, [pc, #280]	; (c003160 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 c003046:	4313      	orrs	r3, r2
 c003048:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 c00304c:	687b      	ldr	r3, [r7, #4]
 c00304e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c003050:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c003054:	d106      	bne.n	c003064 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c003056:	4b42      	ldr	r3, [pc, #264]	; (c003160 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 c003058:	68db      	ldr	r3, [r3, #12]
 c00305a:	4a41      	ldr	r2, [pc, #260]	; (c003160 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 c00305c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c003060:	60d3      	str	r3, [r2, #12]
 c003062:	e011      	b.n	c003088 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 c003064:	687b      	ldr	r3, [r7, #4]
 c003066:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c003068:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c00306c:	d10c      	bne.n	c003088 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c00306e:	687b      	ldr	r3, [r7, #4]
 c003070:	3304      	adds	r3, #4
 c003072:	2101      	movs	r1, #1
 c003074:	4618      	mov	r0, r3
 c003076:	f000 f875 	bl	c003164 <RCCEx_PLLSAI1_Config>
 c00307a:	4603      	mov	r3, r0
 c00307c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 c00307e:	7ffb      	ldrb	r3, [r7, #31]
 c003080:	2b00      	cmp	r3, #0
 c003082:	d001      	beq.n	c003088 <HAL_RCCEx_PeriphCLKConfig+0x60c>
      {
        /* set overall return value */
        status = ret;
 c003084:	7ffb      	ldrb	r3, [r7, #31]
 c003086:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 c003088:	687b      	ldr	r3, [r7, #4]
 c00308a:	681b      	ldr	r3, [r3, #0]
 c00308c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 c003090:	2b00      	cmp	r3, #0
 c003092:	d01e      	beq.n	c0030d2 <HAL_RCCEx_PeriphCLKConfig+0x656>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 c003094:	4b32      	ldr	r3, [pc, #200]	; (c003160 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 c003096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00309a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 c00309e:	687b      	ldr	r3, [r7, #4]
 c0030a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c0030a4:	492e      	ldr	r1, [pc, #184]	; (c003160 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 c0030a6:	4313      	orrs	r3, r2
 c0030a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 c0030ac:	687b      	ldr	r3, [r7, #4]
 c0030ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c0030b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 c0030b6:	d10c      	bne.n	c0030d2 <HAL_RCCEx_PeriphCLKConfig+0x656>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 c0030b8:	687b      	ldr	r3, [r7, #4]
 c0030ba:	3304      	adds	r3, #4
 c0030bc:	2102      	movs	r1, #2
 c0030be:	4618      	mov	r0, r3
 c0030c0:	f000 f850 	bl	c003164 <RCCEx_PLLSAI1_Config>
 c0030c4:	4603      	mov	r3, r0
 c0030c6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 c0030c8:	7ffb      	ldrb	r3, [r7, #31]
 c0030ca:	2b00      	cmp	r3, #0
 c0030cc:	d001      	beq.n	c0030d2 <HAL_RCCEx_PeriphCLKConfig+0x656>
      {
        /* set overall return value */
        status = ret;
 c0030ce:	7ffb      	ldrb	r3, [r7, #31]
 c0030d0:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 c0030d2:	687b      	ldr	r3, [r7, #4]
 c0030d4:	681b      	ldr	r3, [r3, #0]
 c0030d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c0030da:	2b00      	cmp	r3, #0
 c0030dc:	d00b      	beq.n	c0030f6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 c0030de:	4b20      	ldr	r3, [pc, #128]	; (c003160 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 c0030e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c0030e4:	f023 0204 	bic.w	r2, r3, #4
 c0030e8:	687b      	ldr	r3, [r7, #4]
 c0030ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c0030ee:	491c      	ldr	r1, [pc, #112]	; (c003160 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 c0030f0:	4313      	orrs	r3, r2
 c0030f2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 c0030f6:	687b      	ldr	r3, [r7, #4]
 c0030f8:	681b      	ldr	r3, [r3, #0]
 c0030fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 c0030fe:	2b00      	cmp	r3, #0
 c003100:	d00b      	beq.n	c00311a <HAL_RCCEx_PeriphCLKConfig+0x69e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 c003102:	4b17      	ldr	r3, [pc, #92]	; (c003160 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 c003104:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c003108:	f023 0218 	bic.w	r2, r3, #24
 c00310c:	687b      	ldr	r3, [r7, #4]
 c00310e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c003112:	4913      	ldr	r1, [pc, #76]	; (c003160 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 c003114:	4313      	orrs	r3, r2
 c003116:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 c00311a:	687b      	ldr	r3, [r7, #4]
 c00311c:	681b      	ldr	r3, [r3, #0]
 c00311e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 c003122:	2b00      	cmp	r3, #0
 c003124:	d017      	beq.n	c003156 <HAL_RCCEx_PeriphCLKConfig+0x6da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 c003126:	4b0e      	ldr	r3, [pc, #56]	; (c003160 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 c003128:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c00312c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 c003130:	687b      	ldr	r3, [r7, #4]
 c003132:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c003136:	490a      	ldr	r1, [pc, #40]	; (c003160 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 c003138:	4313      	orrs	r3, r2
 c00313a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
    
    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 c00313e:	687b      	ldr	r3, [r7, #4]
 c003140:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c003144:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 c003148:	d105      	bne.n	c003156 <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c00314a:	4b05      	ldr	r3, [pc, #20]	; (c003160 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 c00314c:	68db      	ldr	r3, [r3, #12]
 c00314e:	4a04      	ldr	r2, [pc, #16]	; (c003160 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 c003150:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c003154:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 c003156:	7fbb      	ldrb	r3, [r7, #30]
}
 c003158:	4618      	mov	r0, r3
 c00315a:	3720      	adds	r7, #32
 c00315c:	46bd      	mov	sp, r7
 c00315e:	bd80      	pop	{r7, pc}
 c003160:	50021000 	.word	0x50021000

0c003164 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 c003164:	b580      	push	{r7, lr}
 c003166:	b084      	sub	sp, #16
 c003168:	af00      	add	r7, sp, #0
 c00316a:	6078      	str	r0, [r7, #4]
 c00316c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 c00316e:	2300      	movs	r3, #0
 c003170:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 c003172:	687b      	ldr	r3, [r7, #4]
 c003174:	681b      	ldr	r3, [r3, #0]
 c003176:	2b03      	cmp	r3, #3
 c003178:	d018      	beq.n	c0031ac <RCCEx_PLLSAI1_Config+0x48>
 c00317a:	2b03      	cmp	r3, #3
 c00317c:	d81f      	bhi.n	c0031be <RCCEx_PLLSAI1_Config+0x5a>
 c00317e:	2b01      	cmp	r3, #1
 c003180:	d002      	beq.n	c003188 <RCCEx_PLLSAI1_Config+0x24>
 c003182:	2b02      	cmp	r3, #2
 c003184:	d009      	beq.n	c00319a <RCCEx_PLLSAI1_Config+0x36>
 c003186:	e01a      	b.n	c0031be <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 c003188:	4b5d      	ldr	r3, [pc, #372]	; (c003300 <RCCEx_PLLSAI1_Config+0x19c>)
 c00318a:	681b      	ldr	r3, [r3, #0]
 c00318c:	f003 0302 	and.w	r3, r3, #2
 c003190:	2b00      	cmp	r3, #0
 c003192:	d117      	bne.n	c0031c4 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 c003194:	2301      	movs	r3, #1
 c003196:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c003198:	e014      	b.n	c0031c4 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 c00319a:	4b59      	ldr	r3, [pc, #356]	; (c003300 <RCCEx_PLLSAI1_Config+0x19c>)
 c00319c:	681b      	ldr	r3, [r3, #0]
 c00319e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c0031a2:	2b00      	cmp	r3, #0
 c0031a4:	d110      	bne.n	c0031c8 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 c0031a6:	2301      	movs	r3, #1
 c0031a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c0031aa:	e00d      	b.n	c0031c8 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 c0031ac:	4b54      	ldr	r3, [pc, #336]	; (c003300 <RCCEx_PLLSAI1_Config+0x19c>)
 c0031ae:	681b      	ldr	r3, [r3, #0]
 c0031b0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 c0031b4:	2b00      	cmp	r3, #0
 c0031b6:	d109      	bne.n	c0031cc <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 c0031b8:	2301      	movs	r3, #1
 c0031ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c0031bc:	e006      	b.n	c0031cc <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 c0031be:	2301      	movs	r3, #1
 c0031c0:	73fb      	strb	r3, [r7, #15]
      break;
 c0031c2:	e004      	b.n	c0031ce <RCCEx_PLLSAI1_Config+0x6a>
      break;
 c0031c4:	bf00      	nop
 c0031c6:	e002      	b.n	c0031ce <RCCEx_PLLSAI1_Config+0x6a>
      break;
 c0031c8:	bf00      	nop
 c0031ca:	e000      	b.n	c0031ce <RCCEx_PLLSAI1_Config+0x6a>
      break;
 c0031cc:	bf00      	nop
  }

  if (status == HAL_OK)
 c0031ce:	7bfb      	ldrb	r3, [r7, #15]
 c0031d0:	2b00      	cmp	r3, #0
 c0031d2:	f040 808f 	bne.w	c0032f4 <RCCEx_PLLSAI1_Config+0x190>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 c0031d6:	4b4a      	ldr	r3, [pc, #296]	; (c003300 <RCCEx_PLLSAI1_Config+0x19c>)
 c0031d8:	681b      	ldr	r3, [r3, #0]
 c0031da:	4a49      	ldr	r2, [pc, #292]	; (c003300 <RCCEx_PLLSAI1_Config+0x19c>)
 c0031dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 c0031e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c0031e2:	f7fd ff89 	bl	c0010f8 <HAL_GetTick>
 c0031e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c0031e8:	e009      	b.n	c0031fe <RCCEx_PLLSAI1_Config+0x9a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 c0031ea:	f7fd ff85 	bl	c0010f8 <HAL_GetTick>
 c0031ee:	4602      	mov	r2, r0
 c0031f0:	68bb      	ldr	r3, [r7, #8]
 c0031f2:	1ad3      	subs	r3, r2, r3
 c0031f4:	2b02      	cmp	r3, #2
 c0031f6:	d902      	bls.n	c0031fe <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_TIMEOUT;
 c0031f8:	2303      	movs	r3, #3
 c0031fa:	73fb      	strb	r3, [r7, #15]
        break;
 c0031fc:	e005      	b.n	c00320a <RCCEx_PLLSAI1_Config+0xa6>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c0031fe:	4b40      	ldr	r3, [pc, #256]	; (c003300 <RCCEx_PLLSAI1_Config+0x19c>)
 c003200:	681b      	ldr	r3, [r3, #0]
 c003202:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c003206:	2b00      	cmp	r3, #0
 c003208:	d1ef      	bne.n	c0031ea <RCCEx_PLLSAI1_Config+0x86>
      }
    }

    if (status == HAL_OK)
 c00320a:	7bfb      	ldrb	r3, [r7, #15]
 c00320c:	2b00      	cmp	r3, #0
 c00320e:	d171      	bne.n	c0032f4 <RCCEx_PLLSAI1_Config+0x190>
    {
      if (Divider == DIVIDER_P_UPDATE)
 c003210:	683b      	ldr	r3, [r7, #0]
 c003212:	2b00      	cmp	r3, #0
 c003214:	d116      	bne.n	c003244 <RCCEx_PLLSAI1_Config+0xe0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c003216:	4b3a      	ldr	r3, [pc, #232]	; (c003300 <RCCEx_PLLSAI1_Config+0x19c>)
 c003218:	691a      	ldr	r2, [r3, #16]
 c00321a:	4b3a      	ldr	r3, [pc, #232]	; (c003304 <RCCEx_PLLSAI1_Config+0x1a0>)
 c00321c:	4013      	ands	r3, r2
 c00321e:	687a      	ldr	r2, [r7, #4]
 c003220:	6892      	ldr	r2, [r2, #8]
 c003222:	0211      	lsls	r1, r2, #8
 c003224:	687a      	ldr	r2, [r7, #4]
 c003226:	68d2      	ldr	r2, [r2, #12]
 c003228:	06d2      	lsls	r2, r2, #27
 c00322a:	4311      	orrs	r1, r2
 c00322c:	687a      	ldr	r2, [r7, #4]
 c00322e:	6852      	ldr	r2, [r2, #4]
 c003230:	3a01      	subs	r2, #1
 c003232:	0112      	lsls	r2, r2, #4
 c003234:	4311      	orrs	r1, r2
 c003236:	687a      	ldr	r2, [r7, #4]
 c003238:	6812      	ldr	r2, [r2, #0]
 c00323a:	430a      	orrs	r2, r1
 c00323c:	4930      	ldr	r1, [pc, #192]	; (c003300 <RCCEx_PLLSAI1_Config+0x19c>)
 c00323e:	4313      	orrs	r3, r2
 c003240:	610b      	str	r3, [r1, #16]
 c003242:	e033      	b.n	c0032ac <RCCEx_PLLSAI1_Config+0x148>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 c003244:	683b      	ldr	r3, [r7, #0]
 c003246:	2b01      	cmp	r3, #1
 c003248:	d118      	bne.n	c00327c <RCCEx_PLLSAI1_Config+0x118>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c00324a:	4b2d      	ldr	r3, [pc, #180]	; (c003300 <RCCEx_PLLSAI1_Config+0x19c>)
 c00324c:	691a      	ldr	r2, [r3, #16]
 c00324e:	4b2e      	ldr	r3, [pc, #184]	; (c003308 <RCCEx_PLLSAI1_Config+0x1a4>)
 c003250:	4013      	ands	r3, r2
 c003252:	687a      	ldr	r2, [r7, #4]
 c003254:	6892      	ldr	r2, [r2, #8]
 c003256:	0211      	lsls	r1, r2, #8
 c003258:	687a      	ldr	r2, [r7, #4]
 c00325a:	6912      	ldr	r2, [r2, #16]
 c00325c:	0852      	lsrs	r2, r2, #1
 c00325e:	3a01      	subs	r2, #1
 c003260:	0552      	lsls	r2, r2, #21
 c003262:	4311      	orrs	r1, r2
 c003264:	687a      	ldr	r2, [r7, #4]
 c003266:	6852      	ldr	r2, [r2, #4]
 c003268:	3a01      	subs	r2, #1
 c00326a:	0112      	lsls	r2, r2, #4
 c00326c:	4311      	orrs	r1, r2
 c00326e:	687a      	ldr	r2, [r7, #4]
 c003270:	6812      	ldr	r2, [r2, #0]
 c003272:	430a      	orrs	r2, r1
 c003274:	4922      	ldr	r1, [pc, #136]	; (c003300 <RCCEx_PLLSAI1_Config+0x19c>)
 c003276:	4313      	orrs	r3, r2
 c003278:	610b      	str	r3, [r1, #16]
 c00327a:	e017      	b.n	c0032ac <RCCEx_PLLSAI1_Config+0x148>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c00327c:	4b20      	ldr	r3, [pc, #128]	; (c003300 <RCCEx_PLLSAI1_Config+0x19c>)
 c00327e:	691a      	ldr	r2, [r3, #16]
 c003280:	4b22      	ldr	r3, [pc, #136]	; (c00330c <RCCEx_PLLSAI1_Config+0x1a8>)
 c003282:	4013      	ands	r3, r2
 c003284:	687a      	ldr	r2, [r7, #4]
 c003286:	6892      	ldr	r2, [r2, #8]
 c003288:	0211      	lsls	r1, r2, #8
 c00328a:	687a      	ldr	r2, [r7, #4]
 c00328c:	6952      	ldr	r2, [r2, #20]
 c00328e:	0852      	lsrs	r2, r2, #1
 c003290:	3a01      	subs	r2, #1
 c003292:	0652      	lsls	r2, r2, #25
 c003294:	4311      	orrs	r1, r2
 c003296:	687a      	ldr	r2, [r7, #4]
 c003298:	6852      	ldr	r2, [r2, #4]
 c00329a:	3a01      	subs	r2, #1
 c00329c:	0112      	lsls	r2, r2, #4
 c00329e:	4311      	orrs	r1, r2
 c0032a0:	687a      	ldr	r2, [r7, #4]
 c0032a2:	6812      	ldr	r2, [r2, #0]
 c0032a4:	430a      	orrs	r2, r1
 c0032a6:	4916      	ldr	r1, [pc, #88]	; (c003300 <RCCEx_PLLSAI1_Config+0x19c>)
 c0032a8:	4313      	orrs	r3, r2
 c0032aa:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 c0032ac:	4b14      	ldr	r3, [pc, #80]	; (c003300 <RCCEx_PLLSAI1_Config+0x19c>)
 c0032ae:	681b      	ldr	r3, [r3, #0]
 c0032b0:	4a13      	ldr	r2, [pc, #76]	; (c003300 <RCCEx_PLLSAI1_Config+0x19c>)
 c0032b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 c0032b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c0032b8:	f7fd ff1e 	bl	c0010f8 <HAL_GetTick>
 c0032bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c0032be:	e009      	b.n	c0032d4 <RCCEx_PLLSAI1_Config+0x170>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 c0032c0:	f7fd ff1a 	bl	c0010f8 <HAL_GetTick>
 c0032c4:	4602      	mov	r2, r0
 c0032c6:	68bb      	ldr	r3, [r7, #8]
 c0032c8:	1ad3      	subs	r3, r2, r3
 c0032ca:	2b02      	cmp	r3, #2
 c0032cc:	d902      	bls.n	c0032d4 <RCCEx_PLLSAI1_Config+0x170>
        {
          status = HAL_TIMEOUT;
 c0032ce:	2303      	movs	r3, #3
 c0032d0:	73fb      	strb	r3, [r7, #15]
          break;
 c0032d2:	e005      	b.n	c0032e0 <RCCEx_PLLSAI1_Config+0x17c>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c0032d4:	4b0a      	ldr	r3, [pc, #40]	; (c003300 <RCCEx_PLLSAI1_Config+0x19c>)
 c0032d6:	681b      	ldr	r3, [r3, #0]
 c0032d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c0032dc:	2b00      	cmp	r3, #0
 c0032de:	d0ef      	beq.n	c0032c0 <RCCEx_PLLSAI1_Config+0x15c>
        }
      }

      if (status == HAL_OK)
 c0032e0:	7bfb      	ldrb	r3, [r7, #15]
 c0032e2:	2b00      	cmp	r3, #0
 c0032e4:	d106      	bne.n	c0032f4 <RCCEx_PLLSAI1_Config+0x190>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 c0032e6:	4b06      	ldr	r3, [pc, #24]	; (c003300 <RCCEx_PLLSAI1_Config+0x19c>)
 c0032e8:	691a      	ldr	r2, [r3, #16]
 c0032ea:	687b      	ldr	r3, [r7, #4]
 c0032ec:	699b      	ldr	r3, [r3, #24]
 c0032ee:	4904      	ldr	r1, [pc, #16]	; (c003300 <RCCEx_PLLSAI1_Config+0x19c>)
 c0032f0:	4313      	orrs	r3, r2
 c0032f2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 c0032f4:	7bfb      	ldrb	r3, [r7, #15]
}
 c0032f6:	4618      	mov	r0, r3
 c0032f8:	3710      	adds	r7, #16
 c0032fa:	46bd      	mov	sp, r7
 c0032fc:	bd80      	pop	{r7, pc}
 c0032fe:	bf00      	nop
 c003300:	50021000 	.word	0x50021000
 c003304:	07ff800c 	.word	0x07ff800c
 c003308:	ff9f800c 	.word	0xff9f800c
 c00330c:	f9ff800c 	.word	0xf9ff800c

0c003310 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 c003310:	b580      	push	{r7, lr}
 c003312:	b084      	sub	sp, #16
 c003314:	af00      	add	r7, sp, #0
 c003316:	6078      	str	r0, [r7, #4]
 c003318:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 c00331a:	2300      	movs	r3, #0
 c00331c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 c00331e:	687b      	ldr	r3, [r7, #4]
 c003320:	681b      	ldr	r3, [r3, #0]
 c003322:	2b03      	cmp	r3, #3
 c003324:	d018      	beq.n	c003358 <RCCEx_PLLSAI2_Config+0x48>
 c003326:	2b03      	cmp	r3, #3
 c003328:	d81f      	bhi.n	c00336a <RCCEx_PLLSAI2_Config+0x5a>
 c00332a:	2b01      	cmp	r3, #1
 c00332c:	d002      	beq.n	c003334 <RCCEx_PLLSAI2_Config+0x24>
 c00332e:	2b02      	cmp	r3, #2
 c003330:	d009      	beq.n	c003346 <RCCEx_PLLSAI2_Config+0x36>
 c003332:	e01a      	b.n	c00336a <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 c003334:	4b42      	ldr	r3, [pc, #264]	; (c003440 <RCCEx_PLLSAI2_Config+0x130>)
 c003336:	681b      	ldr	r3, [r3, #0]
 c003338:	f003 0302 	and.w	r3, r3, #2
 c00333c:	2b00      	cmp	r3, #0
 c00333e:	d117      	bne.n	c003370 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 c003340:	2301      	movs	r3, #1
 c003342:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c003344:	e014      	b.n	c003370 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 c003346:	4b3e      	ldr	r3, [pc, #248]	; (c003440 <RCCEx_PLLSAI2_Config+0x130>)
 c003348:	681b      	ldr	r3, [r3, #0]
 c00334a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c00334e:	2b00      	cmp	r3, #0
 c003350:	d110      	bne.n	c003374 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 c003352:	2301      	movs	r3, #1
 c003354:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c003356:	e00d      	b.n	c003374 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 c003358:	4b39      	ldr	r3, [pc, #228]	; (c003440 <RCCEx_PLLSAI2_Config+0x130>)
 c00335a:	681b      	ldr	r3, [r3, #0]
 c00335c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 c003360:	2b00      	cmp	r3, #0
 c003362:	d109      	bne.n	c003378 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 c003364:	2301      	movs	r3, #1
 c003366:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c003368:	e006      	b.n	c003378 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 c00336a:	2301      	movs	r3, #1
 c00336c:	73fb      	strb	r3, [r7, #15]
      break;
 c00336e:	e004      	b.n	c00337a <RCCEx_PLLSAI2_Config+0x6a>
      break;
 c003370:	bf00      	nop
 c003372:	e002      	b.n	c00337a <RCCEx_PLLSAI2_Config+0x6a>
      break;
 c003374:	bf00      	nop
 c003376:	e000      	b.n	c00337a <RCCEx_PLLSAI2_Config+0x6a>
      break;
 c003378:	bf00      	nop
  }

  if (status == HAL_OK)
 c00337a:	7bfb      	ldrb	r3, [r7, #15]
 c00337c:	2b00      	cmp	r3, #0
 c00337e:	d159      	bne.n	c003434 <RCCEx_PLLSAI2_Config+0x124>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 c003380:	4b2f      	ldr	r3, [pc, #188]	; (c003440 <RCCEx_PLLSAI2_Config+0x130>)
 c003382:	681b      	ldr	r3, [r3, #0]
 c003384:	4a2e      	ldr	r2, [pc, #184]	; (c003440 <RCCEx_PLLSAI2_Config+0x130>)
 c003386:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c00338a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c00338c:	f7fd feb4 	bl	c0010f8 <HAL_GetTick>
 c003390:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c003392:	e009      	b.n	c0033a8 <RCCEx_PLLSAI2_Config+0x98>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 c003394:	f7fd feb0 	bl	c0010f8 <HAL_GetTick>
 c003398:	4602      	mov	r2, r0
 c00339a:	68bb      	ldr	r3, [r7, #8]
 c00339c:	1ad3      	subs	r3, r2, r3
 c00339e:	2b02      	cmp	r3, #2
 c0033a0:	d902      	bls.n	c0033a8 <RCCEx_PLLSAI2_Config+0x98>
      {
        status = HAL_TIMEOUT;
 c0033a2:	2303      	movs	r3, #3
 c0033a4:	73fb      	strb	r3, [r7, #15]
        break;
 c0033a6:	e005      	b.n	c0033b4 <RCCEx_PLLSAI2_Config+0xa4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c0033a8:	4b25      	ldr	r3, [pc, #148]	; (c003440 <RCCEx_PLLSAI2_Config+0x130>)
 c0033aa:	681b      	ldr	r3, [r3, #0]
 c0033ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c0033b0:	2b00      	cmp	r3, #0
 c0033b2:	d1ef      	bne.n	c003394 <RCCEx_PLLSAI2_Config+0x84>
      }
    }

    if (status == HAL_OK)
 c0033b4:	7bfb      	ldrb	r3, [r7, #15]
 c0033b6:	2b00      	cmp	r3, #0
 c0033b8:	d13c      	bne.n	c003434 <RCCEx_PLLSAI2_Config+0x124>
    {
      if (Divider == DIVIDER_P_UPDATE)
 c0033ba:	683b      	ldr	r3, [r7, #0]
 c0033bc:	2b00      	cmp	r3, #0
 c0033be:	d115      	bne.n	c0033ec <RCCEx_PLLSAI2_Config+0xdc>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 c0033c0:	4b1f      	ldr	r3, [pc, #124]	; (c003440 <RCCEx_PLLSAI2_Config+0x130>)
 c0033c2:	695a      	ldr	r2, [r3, #20]
 c0033c4:	4b1f      	ldr	r3, [pc, #124]	; (c003444 <RCCEx_PLLSAI2_Config+0x134>)
 c0033c6:	4013      	ands	r3, r2
 c0033c8:	687a      	ldr	r2, [r7, #4]
 c0033ca:	6892      	ldr	r2, [r2, #8]
 c0033cc:	0211      	lsls	r1, r2, #8
 c0033ce:	687a      	ldr	r2, [r7, #4]
 c0033d0:	68d2      	ldr	r2, [r2, #12]
 c0033d2:	06d2      	lsls	r2, r2, #27
 c0033d4:	4311      	orrs	r1, r2
 c0033d6:	687a      	ldr	r2, [r7, #4]
 c0033d8:	6852      	ldr	r2, [r2, #4]
 c0033da:	3a01      	subs	r2, #1
 c0033dc:	0112      	lsls	r2, r2, #4
 c0033de:	4311      	orrs	r1, r2
 c0033e0:	687a      	ldr	r2, [r7, #4]
 c0033e2:	6812      	ldr	r2, [r2, #0]
 c0033e4:	430a      	orrs	r2, r1
 c0033e6:	4916      	ldr	r1, [pc, #88]	; (c003440 <RCCEx_PLLSAI2_Config+0x130>)
 c0033e8:	4313      	orrs	r3, r2
 c0033ea:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 c0033ec:	4b14      	ldr	r3, [pc, #80]	; (c003440 <RCCEx_PLLSAI2_Config+0x130>)
 c0033ee:	681b      	ldr	r3, [r3, #0]
 c0033f0:	4a13      	ldr	r2, [pc, #76]	; (c003440 <RCCEx_PLLSAI2_Config+0x130>)
 c0033f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c0033f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c0033f8:	f7fd fe7e 	bl	c0010f8 <HAL_GetTick>
 c0033fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c0033fe:	e009      	b.n	c003414 <RCCEx_PLLSAI2_Config+0x104>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 c003400:	f7fd fe7a 	bl	c0010f8 <HAL_GetTick>
 c003404:	4602      	mov	r2, r0
 c003406:	68bb      	ldr	r3, [r7, #8]
 c003408:	1ad3      	subs	r3, r2, r3
 c00340a:	2b02      	cmp	r3, #2
 c00340c:	d902      	bls.n	c003414 <RCCEx_PLLSAI2_Config+0x104>
        {
          status = HAL_TIMEOUT;
 c00340e:	2303      	movs	r3, #3
 c003410:	73fb      	strb	r3, [r7, #15]
          break;
 c003412:	e005      	b.n	c003420 <RCCEx_PLLSAI2_Config+0x110>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c003414:	4b0a      	ldr	r3, [pc, #40]	; (c003440 <RCCEx_PLLSAI2_Config+0x130>)
 c003416:	681b      	ldr	r3, [r3, #0]
 c003418:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c00341c:	2b00      	cmp	r3, #0
 c00341e:	d0ef      	beq.n	c003400 <RCCEx_PLLSAI2_Config+0xf0>
        }
      }

      if (status == HAL_OK)
 c003420:	7bfb      	ldrb	r3, [r7, #15]
 c003422:	2b00      	cmp	r3, #0
 c003424:	d106      	bne.n	c003434 <RCCEx_PLLSAI2_Config+0x124>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 c003426:	4b06      	ldr	r3, [pc, #24]	; (c003440 <RCCEx_PLLSAI2_Config+0x130>)
 c003428:	695a      	ldr	r2, [r3, #20]
 c00342a:	687b      	ldr	r3, [r7, #4]
 c00342c:	691b      	ldr	r3, [r3, #16]
 c00342e:	4904      	ldr	r1, [pc, #16]	; (c003440 <RCCEx_PLLSAI2_Config+0x130>)
 c003430:	4313      	orrs	r3, r2
 c003432:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 c003434:	7bfb      	ldrb	r3, [r7, #15]
}
 c003436:	4618      	mov	r0, r3
 c003438:	3710      	adds	r7, #16
 c00343a:	46bd      	mov	sp, r7
 c00343c:	bd80      	pop	{r7, pc}
 c00343e:	bf00      	nop
 c003440:	50021000 	.word	0x50021000
 c003444:	07ff800c 	.word	0x07ff800c

0c003448 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 c003448:	b580      	push	{r7, lr}
 c00344a:	b082      	sub	sp, #8
 c00344c:	af00      	add	r7, sp, #0
 c00344e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 c003450:	687b      	ldr	r3, [r7, #4]
 c003452:	2b00      	cmp	r3, #0
 c003454:	d101      	bne.n	c00345a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 c003456:	2301      	movs	r3, #1
 c003458:	e042      	b.n	c0034e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 c00345a:	687b      	ldr	r3, [r7, #4]
 c00345c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c003460:	2b00      	cmp	r3, #0
 c003462:	d106      	bne.n	c003472 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 c003464:	687b      	ldr	r3, [r7, #4]
 c003466:	2200      	movs	r2, #0
 c003468:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 c00346c:	6878      	ldr	r0, [r7, #4]
 c00346e:	f7fd fb85 	bl	c000b7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 c003472:	687b      	ldr	r3, [r7, #4]
 c003474:	2224      	movs	r2, #36	; 0x24
 c003476:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 c00347a:	687b      	ldr	r3, [r7, #4]
 c00347c:	681b      	ldr	r3, [r3, #0]
 c00347e:	681a      	ldr	r2, [r3, #0]
 c003480:	687b      	ldr	r3, [r7, #4]
 c003482:	681b      	ldr	r3, [r3, #0]
 c003484:	f022 0201 	bic.w	r2, r2, #1
 c003488:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 c00348a:	6878      	ldr	r0, [r7, #4]
 c00348c:	f000 fa80 	bl	c003990 <UART_SetConfig>
 c003490:	4603      	mov	r3, r0
 c003492:	2b01      	cmp	r3, #1
 c003494:	d101      	bne.n	c00349a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 c003496:	2301      	movs	r3, #1
 c003498:	e022      	b.n	c0034e0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 c00349a:	687b      	ldr	r3, [r7, #4]
 c00349c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c00349e:	2b00      	cmp	r3, #0
 c0034a0:	d002      	beq.n	c0034a8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 c0034a2:	6878      	ldr	r0, [r7, #4]
 c0034a4:	f000 fd46 	bl	c003f34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 c0034a8:	687b      	ldr	r3, [r7, #4]
 c0034aa:	681b      	ldr	r3, [r3, #0]
 c0034ac:	685a      	ldr	r2, [r3, #4]
 c0034ae:	687b      	ldr	r3, [r7, #4]
 c0034b0:	681b      	ldr	r3, [r3, #0]
 c0034b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 c0034b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 c0034b8:	687b      	ldr	r3, [r7, #4]
 c0034ba:	681b      	ldr	r3, [r3, #0]
 c0034bc:	689a      	ldr	r2, [r3, #8]
 c0034be:	687b      	ldr	r3, [r7, #4]
 c0034c0:	681b      	ldr	r3, [r3, #0]
 c0034c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 c0034c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 c0034c8:	687b      	ldr	r3, [r7, #4]
 c0034ca:	681b      	ldr	r3, [r3, #0]
 c0034cc:	681a      	ldr	r2, [r3, #0]
 c0034ce:	687b      	ldr	r3, [r7, #4]
 c0034d0:	681b      	ldr	r3, [r3, #0]
 c0034d2:	f042 0201 	orr.w	r2, r2, #1
 c0034d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 c0034d8:	6878      	ldr	r0, [r7, #4]
 c0034da:	f000 fdcd 	bl	c004078 <UART_CheckIdleState>
 c0034de:	4603      	mov	r3, r0
}
 c0034e0:	4618      	mov	r0, r3
 c0034e2:	3708      	adds	r7, #8
 c0034e4:	46bd      	mov	sp, r7
 c0034e6:	bd80      	pop	{r7, pc}

0c0034e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 c0034e8:	b580      	push	{r7, lr}
 c0034ea:	b088      	sub	sp, #32
 c0034ec:	af00      	add	r7, sp, #0
 c0034ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 c0034f0:	687b      	ldr	r3, [r7, #4]
 c0034f2:	681b      	ldr	r3, [r3, #0]
 c0034f4:	69db      	ldr	r3, [r3, #28]
 c0034f6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 c0034f8:	687b      	ldr	r3, [r7, #4]
 c0034fa:	681b      	ldr	r3, [r3, #0]
 c0034fc:	681b      	ldr	r3, [r3, #0]
 c0034fe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 c003500:	687b      	ldr	r3, [r7, #4]
 c003502:	681b      	ldr	r3, [r3, #0]
 c003504:	689b      	ldr	r3, [r3, #8]
 c003506:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 c003508:	69fa      	ldr	r2, [r7, #28]
 c00350a:	f640 030f 	movw	r3, #2063	; 0x80f
 c00350e:	4013      	ands	r3, r2
 c003510:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 c003512:	693b      	ldr	r3, [r7, #16]
 c003514:	2b00      	cmp	r3, #0
 c003516:	d118      	bne.n	c00354a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 c003518:	69fb      	ldr	r3, [r7, #28]
 c00351a:	f003 0320 	and.w	r3, r3, #32
 c00351e:	2b00      	cmp	r3, #0
 c003520:	d013      	beq.n	c00354a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 c003522:	69bb      	ldr	r3, [r7, #24]
 c003524:	f003 0320 	and.w	r3, r3, #32
 c003528:	2b00      	cmp	r3, #0
 c00352a:	d104      	bne.n	c003536 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 c00352c:	697b      	ldr	r3, [r7, #20]
 c00352e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c003532:	2b00      	cmp	r3, #0
 c003534:	d009      	beq.n	c00354a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 c003536:	687b      	ldr	r3, [r7, #4]
 c003538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 c00353a:	2b00      	cmp	r3, #0
 c00353c:	f000 81fb 	beq.w	c003936 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 c003540:	687b      	ldr	r3, [r7, #4]
 c003542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 c003544:	6878      	ldr	r0, [r7, #4]
 c003546:	4798      	blx	r3
      }
      return;
 c003548:	e1f5      	b.n	c003936 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 c00354a:	693b      	ldr	r3, [r7, #16]
 c00354c:	2b00      	cmp	r3, #0
 c00354e:	f000 80ef 	beq.w	c003730 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 c003552:	697a      	ldr	r2, [r7, #20]
 c003554:	4b73      	ldr	r3, [pc, #460]	; (c003724 <HAL_UART_IRQHandler+0x23c>)
 c003556:	4013      	ands	r3, r2
 c003558:	2b00      	cmp	r3, #0
 c00355a:	d105      	bne.n	c003568 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 c00355c:	69ba      	ldr	r2, [r7, #24]
 c00355e:	4b72      	ldr	r3, [pc, #456]	; (c003728 <HAL_UART_IRQHandler+0x240>)
 c003560:	4013      	ands	r3, r2
 c003562:	2b00      	cmp	r3, #0
 c003564:	f000 80e4 	beq.w	c003730 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 c003568:	69fb      	ldr	r3, [r7, #28]
 c00356a:	f003 0301 	and.w	r3, r3, #1
 c00356e:	2b00      	cmp	r3, #0
 c003570:	d010      	beq.n	c003594 <HAL_UART_IRQHandler+0xac>
 c003572:	69bb      	ldr	r3, [r7, #24]
 c003574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c003578:	2b00      	cmp	r3, #0
 c00357a:	d00b      	beq.n	c003594 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 c00357c:	687b      	ldr	r3, [r7, #4]
 c00357e:	681b      	ldr	r3, [r3, #0]
 c003580:	2201      	movs	r2, #1
 c003582:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 c003584:	687b      	ldr	r3, [r7, #4]
 c003586:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c00358a:	f043 0201 	orr.w	r2, r3, #1
 c00358e:	687b      	ldr	r3, [r7, #4]
 c003590:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 c003594:	69fb      	ldr	r3, [r7, #28]
 c003596:	f003 0302 	and.w	r3, r3, #2
 c00359a:	2b00      	cmp	r3, #0
 c00359c:	d010      	beq.n	c0035c0 <HAL_UART_IRQHandler+0xd8>
 c00359e:	697b      	ldr	r3, [r7, #20]
 c0035a0:	f003 0301 	and.w	r3, r3, #1
 c0035a4:	2b00      	cmp	r3, #0
 c0035a6:	d00b      	beq.n	c0035c0 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 c0035a8:	687b      	ldr	r3, [r7, #4]
 c0035aa:	681b      	ldr	r3, [r3, #0]
 c0035ac:	2202      	movs	r2, #2
 c0035ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 c0035b0:	687b      	ldr	r3, [r7, #4]
 c0035b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c0035b6:	f043 0204 	orr.w	r2, r3, #4
 c0035ba:	687b      	ldr	r3, [r7, #4]
 c0035bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 c0035c0:	69fb      	ldr	r3, [r7, #28]
 c0035c2:	f003 0304 	and.w	r3, r3, #4
 c0035c6:	2b00      	cmp	r3, #0
 c0035c8:	d010      	beq.n	c0035ec <HAL_UART_IRQHandler+0x104>
 c0035ca:	697b      	ldr	r3, [r7, #20]
 c0035cc:	f003 0301 	and.w	r3, r3, #1
 c0035d0:	2b00      	cmp	r3, #0
 c0035d2:	d00b      	beq.n	c0035ec <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 c0035d4:	687b      	ldr	r3, [r7, #4]
 c0035d6:	681b      	ldr	r3, [r3, #0]
 c0035d8:	2204      	movs	r2, #4
 c0035da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 c0035dc:	687b      	ldr	r3, [r7, #4]
 c0035de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c0035e2:	f043 0202 	orr.w	r2, r3, #2
 c0035e6:	687b      	ldr	r3, [r7, #4]
 c0035e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 c0035ec:	69fb      	ldr	r3, [r7, #28]
 c0035ee:	f003 0308 	and.w	r3, r3, #8
 c0035f2:	2b00      	cmp	r3, #0
 c0035f4:	d015      	beq.n	c003622 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 c0035f6:	69bb      	ldr	r3, [r7, #24]
 c0035f8:	f003 0320 	and.w	r3, r3, #32
 c0035fc:	2b00      	cmp	r3, #0
 c0035fe:	d104      	bne.n	c00360a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 c003600:	697a      	ldr	r2, [r7, #20]
 c003602:	4b48      	ldr	r3, [pc, #288]	; (c003724 <HAL_UART_IRQHandler+0x23c>)
 c003604:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 c003606:	2b00      	cmp	r3, #0
 c003608:	d00b      	beq.n	c003622 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 c00360a:	687b      	ldr	r3, [r7, #4]
 c00360c:	681b      	ldr	r3, [r3, #0]
 c00360e:	2208      	movs	r2, #8
 c003610:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 c003612:	687b      	ldr	r3, [r7, #4]
 c003614:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c003618:	f043 0208 	orr.w	r2, r3, #8
 c00361c:	687b      	ldr	r3, [r7, #4]
 c00361e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 c003622:	69fb      	ldr	r3, [r7, #28]
 c003624:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c003628:	2b00      	cmp	r3, #0
 c00362a:	d011      	beq.n	c003650 <HAL_UART_IRQHandler+0x168>
 c00362c:	69bb      	ldr	r3, [r7, #24]
 c00362e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 c003632:	2b00      	cmp	r3, #0
 c003634:	d00c      	beq.n	c003650 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 c003636:	687b      	ldr	r3, [r7, #4]
 c003638:	681b      	ldr	r3, [r3, #0]
 c00363a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 c00363e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 c003640:	687b      	ldr	r3, [r7, #4]
 c003642:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c003646:	f043 0220 	orr.w	r2, r3, #32
 c00364a:	687b      	ldr	r3, [r7, #4]
 c00364c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 c003650:	687b      	ldr	r3, [r7, #4]
 c003652:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c003656:	2b00      	cmp	r3, #0
 c003658:	f000 816f 	beq.w	c00393a <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 c00365c:	69fb      	ldr	r3, [r7, #28]
 c00365e:	f003 0320 	and.w	r3, r3, #32
 c003662:	2b00      	cmp	r3, #0
 c003664:	d011      	beq.n	c00368a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 c003666:	69bb      	ldr	r3, [r7, #24]
 c003668:	f003 0320 	and.w	r3, r3, #32
 c00366c:	2b00      	cmp	r3, #0
 c00366e:	d104      	bne.n	c00367a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 c003670:	697b      	ldr	r3, [r7, #20]
 c003672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c003676:	2b00      	cmp	r3, #0
 c003678:	d007      	beq.n	c00368a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 c00367a:	687b      	ldr	r3, [r7, #4]
 c00367c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 c00367e:	2b00      	cmp	r3, #0
 c003680:	d003      	beq.n	c00368a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 c003682:	687b      	ldr	r3, [r7, #4]
 c003684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 c003686:	6878      	ldr	r0, [r7, #4]
 c003688:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 c00368a:	687b      	ldr	r3, [r7, #4]
 c00368c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c003690:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 c003692:	687b      	ldr	r3, [r7, #4]
 c003694:	681b      	ldr	r3, [r3, #0]
 c003696:	689b      	ldr	r3, [r3, #8]
 c003698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c00369c:	2b40      	cmp	r3, #64	; 0x40
 c00369e:	d004      	beq.n	c0036aa <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 c0036a0:	68fb      	ldr	r3, [r7, #12]
 c0036a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 c0036a6:	2b00      	cmp	r3, #0
 c0036a8:	d031      	beq.n	c00370e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 c0036aa:	6878      	ldr	r0, [r7, #4]
 c0036ac:	f000 fdaf 	bl	c00420e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 c0036b0:	687b      	ldr	r3, [r7, #4]
 c0036b2:	681b      	ldr	r3, [r3, #0]
 c0036b4:	689b      	ldr	r3, [r3, #8]
 c0036b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c0036ba:	2b40      	cmp	r3, #64	; 0x40
 c0036bc:	d123      	bne.n	c003706 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 c0036be:	687b      	ldr	r3, [r7, #4]
 c0036c0:	681b      	ldr	r3, [r3, #0]
 c0036c2:	689a      	ldr	r2, [r3, #8]
 c0036c4:	687b      	ldr	r3, [r7, #4]
 c0036c6:	681b      	ldr	r3, [r3, #0]
 c0036c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 c0036cc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 c0036ce:	687b      	ldr	r3, [r7, #4]
 c0036d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c0036d2:	2b00      	cmp	r3, #0
 c0036d4:	d013      	beq.n	c0036fe <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 c0036d6:	687b      	ldr	r3, [r7, #4]
 c0036d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c0036da:	4a14      	ldr	r2, [pc, #80]	; (c00372c <HAL_UART_IRQHandler+0x244>)
 c0036dc:	641a      	str	r2, [r3, #64]	; 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 c0036de:	687b      	ldr	r3, [r7, #4]
 c0036e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c0036e2:	4618      	mov	r0, r3
 c0036e4:	f7fd fe7f 	bl	c0013e6 <HAL_DMA_Abort_IT>
 c0036e8:	4603      	mov	r3, r0
 c0036ea:	2b00      	cmp	r3, #0
 c0036ec:	d017      	beq.n	c00371e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 c0036ee:	687b      	ldr	r3, [r7, #4]
 c0036f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c0036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c0036f4:	687a      	ldr	r2, [r7, #4]
 c0036f6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 c0036f8:	4610      	mov	r0, r2
 c0036fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 c0036fc:	e00f      	b.n	c00371e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 c0036fe:	6878      	ldr	r0, [r7, #4]
 c003700:	f000 f930 	bl	c003964 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 c003704:	e00b      	b.n	c00371e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 c003706:	6878      	ldr	r0, [r7, #4]
 c003708:	f000 f92c 	bl	c003964 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 c00370c:	e007      	b.n	c00371e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 c00370e:	6878      	ldr	r0, [r7, #4]
 c003710:	f000 f928 	bl	c003964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 c003714:	687b      	ldr	r3, [r7, #4]
 c003716:	2200      	movs	r2, #0
 c003718:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 c00371c:	e10d      	b.n	c00393a <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 c00371e:	bf00      	nop
    return;
 c003720:	e10b      	b.n	c00393a <HAL_UART_IRQHandler+0x452>
 c003722:	bf00      	nop
 c003724:	10000001 	.word	0x10000001
 c003728:	04000120 	.word	0x04000120
 c00372c:	0c004273 	.word	0x0c004273

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 c003730:	687b      	ldr	r3, [r7, #4]
 c003732:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 c003734:	2b01      	cmp	r3, #1
 c003736:	f040 80ab 	bne.w	c003890 <HAL_UART_IRQHandler+0x3a8>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 c00373a:	69fb      	ldr	r3, [r7, #28]
 c00373c:	f003 0310 	and.w	r3, r3, #16
 c003740:	2b00      	cmp	r3, #0
 c003742:	f000 80a5 	beq.w	c003890 <HAL_UART_IRQHandler+0x3a8>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 c003746:	69bb      	ldr	r3, [r7, #24]
 c003748:	f003 0310 	and.w	r3, r3, #16
 c00374c:	2b00      	cmp	r3, #0
 c00374e:	f000 809f 	beq.w	c003890 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 c003752:	687b      	ldr	r3, [r7, #4]
 c003754:	681b      	ldr	r3, [r3, #0]
 c003756:	2210      	movs	r2, #16
 c003758:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 c00375a:	687b      	ldr	r3, [r7, #4]
 c00375c:	681b      	ldr	r3, [r3, #0]
 c00375e:	689b      	ldr	r3, [r3, #8]
 c003760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c003764:	2b40      	cmp	r3, #64	; 0x40
 c003766:	d155      	bne.n	c003814 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 c003768:	687b      	ldr	r3, [r7, #4]
 c00376a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c00376c:	681b      	ldr	r3, [r3, #0]
 c00376e:	685b      	ldr	r3, [r3, #4]
 c003770:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 c003772:	893b      	ldrh	r3, [r7, #8]
 c003774:	2b00      	cmp	r3, #0
 c003776:	f000 80e2 	beq.w	c00393e <HAL_UART_IRQHandler+0x456>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 c00377a:	687b      	ldr	r3, [r7, #4]
 c00377c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 c003780:	893a      	ldrh	r2, [r7, #8]
 c003782:	429a      	cmp	r2, r3
 c003784:	f080 80db 	bcs.w	c00393e <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 c003788:	687b      	ldr	r3, [r7, #4]
 c00378a:	893a      	ldrh	r2, [r7, #8]
 c00378c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 c003790:	687b      	ldr	r3, [r7, #4]
 c003792:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c003794:	681b      	ldr	r3, [r3, #0]
 c003796:	681b      	ldr	r3, [r3, #0]
 c003798:	f003 0320 	and.w	r3, r3, #32
 c00379c:	2b00      	cmp	r3, #0
 c00379e:	d12b      	bne.n	c0037f8 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 c0037a0:	687b      	ldr	r3, [r7, #4]
 c0037a2:	681b      	ldr	r3, [r3, #0]
 c0037a4:	681a      	ldr	r2, [r3, #0]
 c0037a6:	687b      	ldr	r3, [r7, #4]
 c0037a8:	681b      	ldr	r3, [r3, #0]
 c0037aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 c0037ae:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 c0037b0:	687b      	ldr	r3, [r7, #4]
 c0037b2:	681b      	ldr	r3, [r3, #0]
 c0037b4:	689a      	ldr	r2, [r3, #8]
 c0037b6:	687b      	ldr	r3, [r7, #4]
 c0037b8:	681b      	ldr	r3, [r3, #0]
 c0037ba:	f022 0201 	bic.w	r2, r2, #1
 c0037be:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 c0037c0:	687b      	ldr	r3, [r7, #4]
 c0037c2:	681b      	ldr	r3, [r3, #0]
 c0037c4:	689a      	ldr	r2, [r3, #8]
 c0037c6:	687b      	ldr	r3, [r7, #4]
 c0037c8:	681b      	ldr	r3, [r3, #0]
 c0037ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 c0037ce:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 c0037d0:	687b      	ldr	r3, [r7, #4]
 c0037d2:	2220      	movs	r2, #32
 c0037d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 c0037d8:	687b      	ldr	r3, [r7, #4]
 c0037da:	2200      	movs	r2, #0
 c0037dc:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 c0037de:	687b      	ldr	r3, [r7, #4]
 c0037e0:	681b      	ldr	r3, [r3, #0]
 c0037e2:	681a      	ldr	r2, [r3, #0]
 c0037e4:	687b      	ldr	r3, [r7, #4]
 c0037e6:	681b      	ldr	r3, [r3, #0]
 c0037e8:	f022 0210 	bic.w	r2, r2, #16
 c0037ec:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 c0037ee:	687b      	ldr	r3, [r7, #4]
 c0037f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c0037f2:	4618      	mov	r0, r3
 c0037f4:	f7fd fd9b 	bl	c00132e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 c0037f8:	687b      	ldr	r3, [r7, #4]
 c0037fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 c0037fe:	687b      	ldr	r3, [r7, #4]
 c003800:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 c003804:	b29b      	uxth	r3, r3
 c003806:	1ad3      	subs	r3, r2, r3
 c003808:	b29b      	uxth	r3, r3
 c00380a:	4619      	mov	r1, r3
 c00380c:	6878      	ldr	r0, [r7, #4]
 c00380e:	f000 f8b3 	bl	c003978 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 c003812:	e094      	b.n	c00393e <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 c003814:	687b      	ldr	r3, [r7, #4]
 c003816:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 c00381a:	687b      	ldr	r3, [r7, #4]
 c00381c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 c003820:	b29b      	uxth	r3, r3
 c003822:	1ad3      	subs	r3, r2, r3
 c003824:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 c003826:	687b      	ldr	r3, [r7, #4]
 c003828:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 c00382c:	b29b      	uxth	r3, r3
 c00382e:	2b00      	cmp	r3, #0
 c003830:	f000 8087 	beq.w	c003942 <HAL_UART_IRQHandler+0x45a>
          &&(nb_rx_data > 0U) )
 c003834:	897b      	ldrh	r3, [r7, #10]
 c003836:	2b00      	cmp	r3, #0
 c003838:	f000 8083 	beq.w	c003942 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 c00383c:	687b      	ldr	r3, [r7, #4]
 c00383e:	681b      	ldr	r3, [r3, #0]
 c003840:	681a      	ldr	r2, [r3, #0]
 c003842:	687b      	ldr	r3, [r7, #4]
 c003844:	681b      	ldr	r3, [r3, #0]
 c003846:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 c00384a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 c00384c:	687b      	ldr	r3, [r7, #4]
 c00384e:	681b      	ldr	r3, [r3, #0]
 c003850:	689b      	ldr	r3, [r3, #8]
 c003852:	687a      	ldr	r2, [r7, #4]
 c003854:	6812      	ldr	r2, [r2, #0]
 c003856:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c00385a:	f023 0301 	bic.w	r3, r3, #1
 c00385e:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 c003860:	687b      	ldr	r3, [r7, #4]
 c003862:	2220      	movs	r2, #32
 c003864:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 c003868:	687b      	ldr	r3, [r7, #4]
 c00386a:	2200      	movs	r2, #0
 c00386c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 c00386e:	687b      	ldr	r3, [r7, #4]
 c003870:	2200      	movs	r2, #0
 c003872:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 c003874:	687b      	ldr	r3, [r7, #4]
 c003876:	681b      	ldr	r3, [r3, #0]
 c003878:	681a      	ldr	r2, [r3, #0]
 c00387a:	687b      	ldr	r3, [r7, #4]
 c00387c:	681b      	ldr	r3, [r3, #0]
 c00387e:	f022 0210 	bic.w	r2, r2, #16
 c003882:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 c003884:	897b      	ldrh	r3, [r7, #10]
 c003886:	4619      	mov	r1, r3
 c003888:	6878      	ldr	r0, [r7, #4]
 c00388a:	f000 f875 	bl	c003978 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 c00388e:	e058      	b.n	c003942 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 c003890:	69fb      	ldr	r3, [r7, #28]
 c003892:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c003896:	2b00      	cmp	r3, #0
 c003898:	d00d      	beq.n	c0038b6 <HAL_UART_IRQHandler+0x3ce>
 c00389a:	697b      	ldr	r3, [r7, #20]
 c00389c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 c0038a0:	2b00      	cmp	r3, #0
 c0038a2:	d008      	beq.n	c0038b6 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 c0038a4:	687b      	ldr	r3, [r7, #4]
 c0038a6:	681b      	ldr	r3, [r3, #0]
 c0038a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 c0038ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 c0038ae:	6878      	ldr	r0, [r7, #4]
 c0038b0:	f000 fd0f 	bl	c0042d2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 c0038b4:	e048      	b.n	c003948 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 c0038b6:	69fb      	ldr	r3, [r7, #28]
 c0038b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c0038bc:	2b00      	cmp	r3, #0
 c0038be:	d012      	beq.n	c0038e6 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 c0038c0:	69bb      	ldr	r3, [r7, #24]
 c0038c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c0038c6:	2b00      	cmp	r3, #0
 c0038c8:	d104      	bne.n	c0038d4 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 c0038ca:	697b      	ldr	r3, [r7, #20]
 c0038cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 c0038d0:	2b00      	cmp	r3, #0
 c0038d2:	d008      	beq.n	c0038e6 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 c0038d4:	687b      	ldr	r3, [r7, #4]
 c0038d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c0038d8:	2b00      	cmp	r3, #0
 c0038da:	d034      	beq.n	c003946 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 c0038dc:	687b      	ldr	r3, [r7, #4]
 c0038de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c0038e0:	6878      	ldr	r0, [r7, #4]
 c0038e2:	4798      	blx	r3
    }
    return;
 c0038e4:	e02f      	b.n	c003946 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 c0038e6:	69fb      	ldr	r3, [r7, #28]
 c0038e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c0038ec:	2b00      	cmp	r3, #0
 c0038ee:	d008      	beq.n	c003902 <HAL_UART_IRQHandler+0x41a>
 c0038f0:	69bb      	ldr	r3, [r7, #24]
 c0038f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c0038f6:	2b00      	cmp	r3, #0
 c0038f8:	d003      	beq.n	c003902 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 c0038fa:	6878      	ldr	r0, [r7, #4]
 c0038fc:	f000 fccf 	bl	c00429e <UART_EndTransmit_IT>
    return;
 c003900:	e022      	b.n	c003948 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 c003902:	69fb      	ldr	r3, [r7, #28]
 c003904:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 c003908:	2b00      	cmp	r3, #0
 c00390a:	d008      	beq.n	c00391e <HAL_UART_IRQHandler+0x436>
 c00390c:	69bb      	ldr	r3, [r7, #24]
 c00390e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 c003912:	2b00      	cmp	r3, #0
 c003914:	d003      	beq.n	c00391e <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 c003916:	6878      	ldr	r0, [r7, #4]
 c003918:	f000 fcef 	bl	c0042fa <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 c00391c:	e014      	b.n	c003948 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 c00391e:	69fb      	ldr	r3, [r7, #28]
 c003920:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 c003924:	2b00      	cmp	r3, #0
 c003926:	d00f      	beq.n	c003948 <HAL_UART_IRQHandler+0x460>
 c003928:	69bb      	ldr	r3, [r7, #24]
 c00392a:	2b00      	cmp	r3, #0
 c00392c:	da0c      	bge.n	c003948 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 c00392e:	6878      	ldr	r0, [r7, #4]
 c003930:	f000 fcd9 	bl	c0042e6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 c003934:	e008      	b.n	c003948 <HAL_UART_IRQHandler+0x460>
      return;
 c003936:	bf00      	nop
 c003938:	e006      	b.n	c003948 <HAL_UART_IRQHandler+0x460>
    return;
 c00393a:	bf00      	nop
 c00393c:	e004      	b.n	c003948 <HAL_UART_IRQHandler+0x460>
      return;
 c00393e:	bf00      	nop
 c003940:	e002      	b.n	c003948 <HAL_UART_IRQHandler+0x460>
      return;
 c003942:	bf00      	nop
 c003944:	e000      	b.n	c003948 <HAL_UART_IRQHandler+0x460>
    return;
 c003946:	bf00      	nop
  }
}
 c003948:	3720      	adds	r7, #32
 c00394a:	46bd      	mov	sp, r7
 c00394c:	bd80      	pop	{r7, pc}
 c00394e:	bf00      	nop

0c003950 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 c003950:	b480      	push	{r7}
 c003952:	b083      	sub	sp, #12
 c003954:	af00      	add	r7, sp, #0
 c003956:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 c003958:	bf00      	nop
 c00395a:	370c      	adds	r7, #12
 c00395c:	46bd      	mov	sp, r7
 c00395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003962:	4770      	bx	lr

0c003964 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 c003964:	b480      	push	{r7}
 c003966:	b083      	sub	sp, #12
 c003968:	af00      	add	r7, sp, #0
 c00396a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 c00396c:	bf00      	nop
 c00396e:	370c      	adds	r7, #12
 c003970:	46bd      	mov	sp, r7
 c003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003976:	4770      	bx	lr

0c003978 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 c003978:	b480      	push	{r7}
 c00397a:	b083      	sub	sp, #12
 c00397c:	af00      	add	r7, sp, #0
 c00397e:	6078      	str	r0, [r7, #4]
 c003980:	460b      	mov	r3, r1
 c003982:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 c003984:	bf00      	nop
 c003986:	370c      	adds	r7, #12
 c003988:	46bd      	mov	sp, r7
 c00398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00398e:	4770      	bx	lr

0c003990 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 c003990:	b5b0      	push	{r4, r5, r7, lr}
 c003992:	b088      	sub	sp, #32
 c003994:	af00      	add	r7, sp, #0
 c003996:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 c003998:	2300      	movs	r3, #0
 c00399a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 c00399c:	687b      	ldr	r3, [r7, #4]
 c00399e:	689a      	ldr	r2, [r3, #8]
 c0039a0:	687b      	ldr	r3, [r7, #4]
 c0039a2:	691b      	ldr	r3, [r3, #16]
 c0039a4:	431a      	orrs	r2, r3
 c0039a6:	687b      	ldr	r3, [r7, #4]
 c0039a8:	695b      	ldr	r3, [r3, #20]
 c0039aa:	431a      	orrs	r2, r3
 c0039ac:	687b      	ldr	r3, [r7, #4]
 c0039ae:	69db      	ldr	r3, [r3, #28]
 c0039b0:	4313      	orrs	r3, r2
 c0039b2:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 c0039b4:	687b      	ldr	r3, [r7, #4]
 c0039b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c0039b8:	69fa      	ldr	r2, [r7, #28]
 c0039ba:	4313      	orrs	r3, r2
 c0039bc:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 c0039be:	687b      	ldr	r3, [r7, #4]
 c0039c0:	681b      	ldr	r3, [r3, #0]
 c0039c2:	681a      	ldr	r2, [r3, #0]
 c0039c4:	4bb3      	ldr	r3, [pc, #716]	; (c003c94 <UART_SetConfig+0x304>)
 c0039c6:	4013      	ands	r3, r2
 c0039c8:	687a      	ldr	r2, [r7, #4]
 c0039ca:	6812      	ldr	r2, [r2, #0]
 c0039cc:	69f9      	ldr	r1, [r7, #28]
 c0039ce:	430b      	orrs	r3, r1
 c0039d0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 c0039d2:	687b      	ldr	r3, [r7, #4]
 c0039d4:	681b      	ldr	r3, [r3, #0]
 c0039d6:	685b      	ldr	r3, [r3, #4]
 c0039d8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 c0039dc:	687b      	ldr	r3, [r7, #4]
 c0039de:	68da      	ldr	r2, [r3, #12]
 c0039e0:	687b      	ldr	r3, [r7, #4]
 c0039e2:	681b      	ldr	r3, [r3, #0]
 c0039e4:	430a      	orrs	r2, r1
 c0039e6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 c0039e8:	687b      	ldr	r3, [r7, #4]
 c0039ea:	699b      	ldr	r3, [r3, #24]
 c0039ec:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 c0039ee:	687b      	ldr	r3, [r7, #4]
 c0039f0:	681b      	ldr	r3, [r3, #0]
 c0039f2:	4aa9      	ldr	r2, [pc, #676]	; (c003c98 <UART_SetConfig+0x308>)
 c0039f4:	4293      	cmp	r3, r2
 c0039f6:	d004      	beq.n	c003a02 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 c0039f8:	687b      	ldr	r3, [r7, #4]
 c0039fa:	6a1b      	ldr	r3, [r3, #32]
 c0039fc:	69fa      	ldr	r2, [r7, #28]
 c0039fe:	4313      	orrs	r3, r2
 c003a00:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 c003a02:	687b      	ldr	r3, [r7, #4]
 c003a04:	681b      	ldr	r3, [r3, #0]
 c003a06:	689b      	ldr	r3, [r3, #8]
 c003a08:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 c003a0c:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 c003a10:	687a      	ldr	r2, [r7, #4]
 c003a12:	6812      	ldr	r2, [r2, #0]
 c003a14:	69f9      	ldr	r1, [r7, #28]
 c003a16:	430b      	orrs	r3, r1
 c003a18:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 c003a1a:	687b      	ldr	r3, [r7, #4]
 c003a1c:	681b      	ldr	r3, [r3, #0]
 c003a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c003a20:	f023 010f 	bic.w	r1, r3, #15
 c003a24:	687b      	ldr	r3, [r7, #4]
 c003a26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c003a28:	687b      	ldr	r3, [r7, #4]
 c003a2a:	681b      	ldr	r3, [r3, #0]
 c003a2c:	430a      	orrs	r2, r1
 c003a2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 c003a30:	687b      	ldr	r3, [r7, #4]
 c003a32:	681b      	ldr	r3, [r3, #0]
 c003a34:	4a99      	ldr	r2, [pc, #612]	; (c003c9c <UART_SetConfig+0x30c>)
 c003a36:	4293      	cmp	r3, r2
 c003a38:	d121      	bne.n	c003a7e <UART_SetConfig+0xee>
 c003a3a:	4b99      	ldr	r3, [pc, #612]	; (c003ca0 <UART_SetConfig+0x310>)
 c003a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c003a40:	f003 0303 	and.w	r3, r3, #3
 c003a44:	2b03      	cmp	r3, #3
 c003a46:	d817      	bhi.n	c003a78 <UART_SetConfig+0xe8>
 c003a48:	a201      	add	r2, pc, #4	; (adr r2, c003a50 <UART_SetConfig+0xc0>)
 c003a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c003a4e:	bf00      	nop
 c003a50:	0c003a61 	.word	0x0c003a61
 c003a54:	0c003a6d 	.word	0x0c003a6d
 c003a58:	0c003a67 	.word	0x0c003a67
 c003a5c:	0c003a73 	.word	0x0c003a73
 c003a60:	2301      	movs	r3, #1
 c003a62:	76fb      	strb	r3, [r7, #27]
 c003a64:	e0e7      	b.n	c003c36 <UART_SetConfig+0x2a6>
 c003a66:	2302      	movs	r3, #2
 c003a68:	76fb      	strb	r3, [r7, #27]
 c003a6a:	e0e4      	b.n	c003c36 <UART_SetConfig+0x2a6>
 c003a6c:	2304      	movs	r3, #4
 c003a6e:	76fb      	strb	r3, [r7, #27]
 c003a70:	e0e1      	b.n	c003c36 <UART_SetConfig+0x2a6>
 c003a72:	2308      	movs	r3, #8
 c003a74:	76fb      	strb	r3, [r7, #27]
 c003a76:	e0de      	b.n	c003c36 <UART_SetConfig+0x2a6>
 c003a78:	2310      	movs	r3, #16
 c003a7a:	76fb      	strb	r3, [r7, #27]
 c003a7c:	e0db      	b.n	c003c36 <UART_SetConfig+0x2a6>
 c003a7e:	687b      	ldr	r3, [r7, #4]
 c003a80:	681b      	ldr	r3, [r3, #0]
 c003a82:	4a88      	ldr	r2, [pc, #544]	; (c003ca4 <UART_SetConfig+0x314>)
 c003a84:	4293      	cmp	r3, r2
 c003a86:	d132      	bne.n	c003aee <UART_SetConfig+0x15e>
 c003a88:	4b85      	ldr	r3, [pc, #532]	; (c003ca0 <UART_SetConfig+0x310>)
 c003a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c003a8e:	f003 030c 	and.w	r3, r3, #12
 c003a92:	2b0c      	cmp	r3, #12
 c003a94:	d828      	bhi.n	c003ae8 <UART_SetConfig+0x158>
 c003a96:	a201      	add	r2, pc, #4	; (adr r2, c003a9c <UART_SetConfig+0x10c>)
 c003a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c003a9c:	0c003ad1 	.word	0x0c003ad1
 c003aa0:	0c003ae9 	.word	0x0c003ae9
 c003aa4:	0c003ae9 	.word	0x0c003ae9
 c003aa8:	0c003ae9 	.word	0x0c003ae9
 c003aac:	0c003add 	.word	0x0c003add
 c003ab0:	0c003ae9 	.word	0x0c003ae9
 c003ab4:	0c003ae9 	.word	0x0c003ae9
 c003ab8:	0c003ae9 	.word	0x0c003ae9
 c003abc:	0c003ad7 	.word	0x0c003ad7
 c003ac0:	0c003ae9 	.word	0x0c003ae9
 c003ac4:	0c003ae9 	.word	0x0c003ae9
 c003ac8:	0c003ae9 	.word	0x0c003ae9
 c003acc:	0c003ae3 	.word	0x0c003ae3
 c003ad0:	2300      	movs	r3, #0
 c003ad2:	76fb      	strb	r3, [r7, #27]
 c003ad4:	e0af      	b.n	c003c36 <UART_SetConfig+0x2a6>
 c003ad6:	2302      	movs	r3, #2
 c003ad8:	76fb      	strb	r3, [r7, #27]
 c003ada:	e0ac      	b.n	c003c36 <UART_SetConfig+0x2a6>
 c003adc:	2304      	movs	r3, #4
 c003ade:	76fb      	strb	r3, [r7, #27]
 c003ae0:	e0a9      	b.n	c003c36 <UART_SetConfig+0x2a6>
 c003ae2:	2308      	movs	r3, #8
 c003ae4:	76fb      	strb	r3, [r7, #27]
 c003ae6:	e0a6      	b.n	c003c36 <UART_SetConfig+0x2a6>
 c003ae8:	2310      	movs	r3, #16
 c003aea:	76fb      	strb	r3, [r7, #27]
 c003aec:	e0a3      	b.n	c003c36 <UART_SetConfig+0x2a6>
 c003aee:	687b      	ldr	r3, [r7, #4]
 c003af0:	681b      	ldr	r3, [r3, #0]
 c003af2:	4a6d      	ldr	r2, [pc, #436]	; (c003ca8 <UART_SetConfig+0x318>)
 c003af4:	4293      	cmp	r3, r2
 c003af6:	d120      	bne.n	c003b3a <UART_SetConfig+0x1aa>
 c003af8:	4b69      	ldr	r3, [pc, #420]	; (c003ca0 <UART_SetConfig+0x310>)
 c003afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c003afe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 c003b02:	2b30      	cmp	r3, #48	; 0x30
 c003b04:	d013      	beq.n	c003b2e <UART_SetConfig+0x19e>
 c003b06:	2b30      	cmp	r3, #48	; 0x30
 c003b08:	d814      	bhi.n	c003b34 <UART_SetConfig+0x1a4>
 c003b0a:	2b20      	cmp	r3, #32
 c003b0c:	d009      	beq.n	c003b22 <UART_SetConfig+0x192>
 c003b0e:	2b20      	cmp	r3, #32
 c003b10:	d810      	bhi.n	c003b34 <UART_SetConfig+0x1a4>
 c003b12:	2b00      	cmp	r3, #0
 c003b14:	d002      	beq.n	c003b1c <UART_SetConfig+0x18c>
 c003b16:	2b10      	cmp	r3, #16
 c003b18:	d006      	beq.n	c003b28 <UART_SetConfig+0x198>
 c003b1a:	e00b      	b.n	c003b34 <UART_SetConfig+0x1a4>
 c003b1c:	2300      	movs	r3, #0
 c003b1e:	76fb      	strb	r3, [r7, #27]
 c003b20:	e089      	b.n	c003c36 <UART_SetConfig+0x2a6>
 c003b22:	2302      	movs	r3, #2
 c003b24:	76fb      	strb	r3, [r7, #27]
 c003b26:	e086      	b.n	c003c36 <UART_SetConfig+0x2a6>
 c003b28:	2304      	movs	r3, #4
 c003b2a:	76fb      	strb	r3, [r7, #27]
 c003b2c:	e083      	b.n	c003c36 <UART_SetConfig+0x2a6>
 c003b2e:	2308      	movs	r3, #8
 c003b30:	76fb      	strb	r3, [r7, #27]
 c003b32:	e080      	b.n	c003c36 <UART_SetConfig+0x2a6>
 c003b34:	2310      	movs	r3, #16
 c003b36:	76fb      	strb	r3, [r7, #27]
 c003b38:	e07d      	b.n	c003c36 <UART_SetConfig+0x2a6>
 c003b3a:	687b      	ldr	r3, [r7, #4]
 c003b3c:	681b      	ldr	r3, [r3, #0]
 c003b3e:	4a5b      	ldr	r2, [pc, #364]	; (c003cac <UART_SetConfig+0x31c>)
 c003b40:	4293      	cmp	r3, r2
 c003b42:	d120      	bne.n	c003b86 <UART_SetConfig+0x1f6>
 c003b44:	4b56      	ldr	r3, [pc, #344]	; (c003ca0 <UART_SetConfig+0x310>)
 c003b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c003b4a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 c003b4e:	2bc0      	cmp	r3, #192	; 0xc0
 c003b50:	d013      	beq.n	c003b7a <UART_SetConfig+0x1ea>
 c003b52:	2bc0      	cmp	r3, #192	; 0xc0
 c003b54:	d814      	bhi.n	c003b80 <UART_SetConfig+0x1f0>
 c003b56:	2b80      	cmp	r3, #128	; 0x80
 c003b58:	d009      	beq.n	c003b6e <UART_SetConfig+0x1de>
 c003b5a:	2b80      	cmp	r3, #128	; 0x80
 c003b5c:	d810      	bhi.n	c003b80 <UART_SetConfig+0x1f0>
 c003b5e:	2b00      	cmp	r3, #0
 c003b60:	d002      	beq.n	c003b68 <UART_SetConfig+0x1d8>
 c003b62:	2b40      	cmp	r3, #64	; 0x40
 c003b64:	d006      	beq.n	c003b74 <UART_SetConfig+0x1e4>
 c003b66:	e00b      	b.n	c003b80 <UART_SetConfig+0x1f0>
 c003b68:	2300      	movs	r3, #0
 c003b6a:	76fb      	strb	r3, [r7, #27]
 c003b6c:	e063      	b.n	c003c36 <UART_SetConfig+0x2a6>
 c003b6e:	2302      	movs	r3, #2
 c003b70:	76fb      	strb	r3, [r7, #27]
 c003b72:	e060      	b.n	c003c36 <UART_SetConfig+0x2a6>
 c003b74:	2304      	movs	r3, #4
 c003b76:	76fb      	strb	r3, [r7, #27]
 c003b78:	e05d      	b.n	c003c36 <UART_SetConfig+0x2a6>
 c003b7a:	2308      	movs	r3, #8
 c003b7c:	76fb      	strb	r3, [r7, #27]
 c003b7e:	e05a      	b.n	c003c36 <UART_SetConfig+0x2a6>
 c003b80:	2310      	movs	r3, #16
 c003b82:	76fb      	strb	r3, [r7, #27]
 c003b84:	e057      	b.n	c003c36 <UART_SetConfig+0x2a6>
 c003b86:	687b      	ldr	r3, [r7, #4]
 c003b88:	681b      	ldr	r3, [r3, #0]
 c003b8a:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
 c003b8e:	d125      	bne.n	c003bdc <UART_SetConfig+0x24c>
 c003b90:	4b43      	ldr	r3, [pc, #268]	; (c003ca0 <UART_SetConfig+0x310>)
 c003b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c003b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 c003b9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c003b9e:	d017      	beq.n	c003bd0 <UART_SetConfig+0x240>
 c003ba0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c003ba4:	d817      	bhi.n	c003bd6 <UART_SetConfig+0x246>
 c003ba6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c003baa:	d00b      	beq.n	c003bc4 <UART_SetConfig+0x234>
 c003bac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c003bb0:	d811      	bhi.n	c003bd6 <UART_SetConfig+0x246>
 c003bb2:	2b00      	cmp	r3, #0
 c003bb4:	d003      	beq.n	c003bbe <UART_SetConfig+0x22e>
 c003bb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c003bba:	d006      	beq.n	c003bca <UART_SetConfig+0x23a>
 c003bbc:	e00b      	b.n	c003bd6 <UART_SetConfig+0x246>
 c003bbe:	2300      	movs	r3, #0
 c003bc0:	76fb      	strb	r3, [r7, #27]
 c003bc2:	e038      	b.n	c003c36 <UART_SetConfig+0x2a6>
 c003bc4:	2302      	movs	r3, #2
 c003bc6:	76fb      	strb	r3, [r7, #27]
 c003bc8:	e035      	b.n	c003c36 <UART_SetConfig+0x2a6>
 c003bca:	2304      	movs	r3, #4
 c003bcc:	76fb      	strb	r3, [r7, #27]
 c003bce:	e032      	b.n	c003c36 <UART_SetConfig+0x2a6>
 c003bd0:	2308      	movs	r3, #8
 c003bd2:	76fb      	strb	r3, [r7, #27]
 c003bd4:	e02f      	b.n	c003c36 <UART_SetConfig+0x2a6>
 c003bd6:	2310      	movs	r3, #16
 c003bd8:	76fb      	strb	r3, [r7, #27]
 c003bda:	e02c      	b.n	c003c36 <UART_SetConfig+0x2a6>
 c003bdc:	687b      	ldr	r3, [r7, #4]
 c003bde:	681b      	ldr	r3, [r3, #0]
 c003be0:	4a2d      	ldr	r2, [pc, #180]	; (c003c98 <UART_SetConfig+0x308>)
 c003be2:	4293      	cmp	r3, r2
 c003be4:	d125      	bne.n	c003c32 <UART_SetConfig+0x2a2>
 c003be6:	4b2e      	ldr	r3, [pc, #184]	; (c003ca0 <UART_SetConfig+0x310>)
 c003be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c003bec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 c003bf0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 c003bf4:	d017      	beq.n	c003c26 <UART_SetConfig+0x296>
 c003bf6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 c003bfa:	d817      	bhi.n	c003c2c <UART_SetConfig+0x29c>
 c003bfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c003c00:	d00b      	beq.n	c003c1a <UART_SetConfig+0x28a>
 c003c02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c003c06:	d811      	bhi.n	c003c2c <UART_SetConfig+0x29c>
 c003c08:	2b00      	cmp	r3, #0
 c003c0a:	d003      	beq.n	c003c14 <UART_SetConfig+0x284>
 c003c0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c003c10:	d006      	beq.n	c003c20 <UART_SetConfig+0x290>
 c003c12:	e00b      	b.n	c003c2c <UART_SetConfig+0x29c>
 c003c14:	2300      	movs	r3, #0
 c003c16:	76fb      	strb	r3, [r7, #27]
 c003c18:	e00d      	b.n	c003c36 <UART_SetConfig+0x2a6>
 c003c1a:	2302      	movs	r3, #2
 c003c1c:	76fb      	strb	r3, [r7, #27]
 c003c1e:	e00a      	b.n	c003c36 <UART_SetConfig+0x2a6>
 c003c20:	2304      	movs	r3, #4
 c003c22:	76fb      	strb	r3, [r7, #27]
 c003c24:	e007      	b.n	c003c36 <UART_SetConfig+0x2a6>
 c003c26:	2308      	movs	r3, #8
 c003c28:	76fb      	strb	r3, [r7, #27]
 c003c2a:	e004      	b.n	c003c36 <UART_SetConfig+0x2a6>
 c003c2c:	2310      	movs	r3, #16
 c003c2e:	76fb      	strb	r3, [r7, #27]
 c003c30:	e001      	b.n	c003c36 <UART_SetConfig+0x2a6>
 c003c32:	2310      	movs	r3, #16
 c003c34:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 c003c36:	687b      	ldr	r3, [r7, #4]
 c003c38:	681b      	ldr	r3, [r3, #0]
 c003c3a:	4a17      	ldr	r2, [pc, #92]	; (c003c98 <UART_SetConfig+0x308>)
 c003c3c:	4293      	cmp	r3, r2
 c003c3e:	f040 80a1 	bne.w	c003d84 <UART_SetConfig+0x3f4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 c003c42:	7efb      	ldrb	r3, [r7, #27]
 c003c44:	2b08      	cmp	r3, #8
 c003c46:	d839      	bhi.n	c003cbc <UART_SetConfig+0x32c>
 c003c48:	a201      	add	r2, pc, #4	; (adr r2, c003c50 <UART_SetConfig+0x2c0>)
 c003c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c003c4e:	bf00      	nop
 c003c50:	0c003c75 	.word	0x0c003c75
 c003c54:	0c003c7d 	.word	0x0c003c7d
 c003c58:	0c003c85 	.word	0x0c003c85
 c003c5c:	0c003cbd 	.word	0x0c003cbd
 c003c60:	0c003c8b 	.word	0x0c003c8b
 c003c64:	0c003cbd 	.word	0x0c003cbd
 c003c68:	0c003cbd 	.word	0x0c003cbd
 c003c6c:	0c003cbd 	.word	0x0c003cbd
 c003c70:	0c003cb5 	.word	0x0c003cb5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 c003c74:	f7fe fdfc 	bl	c002870 <HAL_RCC_GetPCLK1Freq>
 c003c78:	6178      	str	r0, [r7, #20]
        break;
 c003c7a:	e024      	b.n	c003cc6 <UART_SetConfig+0x336>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 c003c7c:	f7fe fe0c 	bl	c002898 <HAL_RCC_GetPCLK2Freq>
 c003c80:	6178      	str	r0, [r7, #20]
        break;
 c003c82:	e020      	b.n	c003cc6 <UART_SetConfig+0x336>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 c003c84:	4b0a      	ldr	r3, [pc, #40]	; (c003cb0 <UART_SetConfig+0x320>)
 c003c86:	617b      	str	r3, [r7, #20]
        break;
 c003c88:	e01d      	b.n	c003cc6 <UART_SetConfig+0x336>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 c003c8a:	f7fe fd3f 	bl	c00270c <HAL_RCC_GetSysClockFreq>
 c003c8e:	6178      	str	r0, [r7, #20]
        break;
 c003c90:	e019      	b.n	c003cc6 <UART_SetConfig+0x336>
 c003c92:	bf00      	nop
 c003c94:	cfff69f3 	.word	0xcfff69f3
 c003c98:	50008000 	.word	0x50008000
 c003c9c:	50013800 	.word	0x50013800
 c003ca0:	50021000 	.word	0x50021000
 c003ca4:	50004400 	.word	0x50004400
 c003ca8:	50004800 	.word	0x50004800
 c003cac:	50004c00 	.word	0x50004c00
 c003cb0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 c003cb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c003cb8:	617b      	str	r3, [r7, #20]
        break;
 c003cba:	e004      	b.n	c003cc6 <UART_SetConfig+0x336>
      default:
        pclk = 0U;
 c003cbc:	2300      	movs	r3, #0
 c003cbe:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 c003cc0:	2301      	movs	r3, #1
 c003cc2:	76bb      	strb	r3, [r7, #26]
        break;
 c003cc4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 c003cc6:	697b      	ldr	r3, [r7, #20]
 c003cc8:	2b00      	cmp	r3, #0
 c003cca:	f000 811b 	beq.w	c003f04 <UART_SetConfig+0x574>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 c003cce:	687b      	ldr	r3, [r7, #4]
 c003cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c003cd2:	4a96      	ldr	r2, [pc, #600]	; (c003f2c <UART_SetConfig+0x59c>)
 c003cd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c003cd8:	461a      	mov	r2, r3
 c003cda:	697b      	ldr	r3, [r7, #20]
 c003cdc:	fbb3 f3f2 	udiv	r3, r3, r2
 c003ce0:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 c003ce2:	687b      	ldr	r3, [r7, #4]
 c003ce4:	685a      	ldr	r2, [r3, #4]
 c003ce6:	4613      	mov	r3, r2
 c003ce8:	005b      	lsls	r3, r3, #1
 c003cea:	4413      	add	r3, r2
 c003cec:	68ba      	ldr	r2, [r7, #8]
 c003cee:	429a      	cmp	r2, r3
 c003cf0:	d305      	bcc.n	c003cfe <UART_SetConfig+0x36e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 c003cf2:	687b      	ldr	r3, [r7, #4]
 c003cf4:	685b      	ldr	r3, [r3, #4]
 c003cf6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 c003cf8:	68ba      	ldr	r2, [r7, #8]
 c003cfa:	429a      	cmp	r2, r3
 c003cfc:	d902      	bls.n	c003d04 <UART_SetConfig+0x374>
      {
        ret = HAL_ERROR;
 c003cfe:	2301      	movs	r3, #1
 c003d00:	76bb      	strb	r3, [r7, #26]
 c003d02:	e0ff      	b.n	c003f04 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c003d04:	697b      	ldr	r3, [r7, #20]
 c003d06:	4618      	mov	r0, r3
 c003d08:	f04f 0100 	mov.w	r1, #0
 c003d0c:	687b      	ldr	r3, [r7, #4]
 c003d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c003d10:	4a86      	ldr	r2, [pc, #536]	; (c003f2c <UART_SetConfig+0x59c>)
 c003d12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c003d16:	b29a      	uxth	r2, r3
 c003d18:	f04f 0300 	mov.w	r3, #0
 c003d1c:	f7fc fac2 	bl	c0002a4 <__aeabi_uldivmod>
 c003d20:	4602      	mov	r2, r0
 c003d22:	460b      	mov	r3, r1
 c003d24:	4610      	mov	r0, r2
 c003d26:	4619      	mov	r1, r3
 c003d28:	f04f 0200 	mov.w	r2, #0
 c003d2c:	f04f 0300 	mov.w	r3, #0
 c003d30:	020b      	lsls	r3, r1, #8
 c003d32:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 c003d36:	0202      	lsls	r2, r0, #8
 c003d38:	6879      	ldr	r1, [r7, #4]
 c003d3a:	6849      	ldr	r1, [r1, #4]
 c003d3c:	0849      	lsrs	r1, r1, #1
 c003d3e:	4608      	mov	r0, r1
 c003d40:	f04f 0100 	mov.w	r1, #0
 c003d44:	1814      	adds	r4, r2, r0
 c003d46:	eb43 0501 	adc.w	r5, r3, r1
 c003d4a:	687b      	ldr	r3, [r7, #4]
 c003d4c:	685b      	ldr	r3, [r3, #4]
 c003d4e:	461a      	mov	r2, r3
 c003d50:	f04f 0300 	mov.w	r3, #0
 c003d54:	4620      	mov	r0, r4
 c003d56:	4629      	mov	r1, r5
 c003d58:	f7fc faa4 	bl	c0002a4 <__aeabi_uldivmod>
 c003d5c:	4602      	mov	r2, r0
 c003d5e:	460b      	mov	r3, r1
 c003d60:	4613      	mov	r3, r2
 c003d62:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 c003d64:	693b      	ldr	r3, [r7, #16]
 c003d66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c003d6a:	d308      	bcc.n	c003d7e <UART_SetConfig+0x3ee>
 c003d6c:	693b      	ldr	r3, [r7, #16]
 c003d6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 c003d72:	d204      	bcs.n	c003d7e <UART_SetConfig+0x3ee>
        {
          huart->Instance->BRR = usartdiv;
 c003d74:	687b      	ldr	r3, [r7, #4]
 c003d76:	681b      	ldr	r3, [r3, #0]
 c003d78:	693a      	ldr	r2, [r7, #16]
 c003d7a:	60da      	str	r2, [r3, #12]
 c003d7c:	e0c2      	b.n	c003f04 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 c003d7e:	2301      	movs	r3, #1
 c003d80:	76bb      	strb	r3, [r7, #26]
 c003d82:	e0bf      	b.n	c003f04 <UART_SetConfig+0x574>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 c003d84:	687b      	ldr	r3, [r7, #4]
 c003d86:	69db      	ldr	r3, [r3, #28]
 c003d88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c003d8c:	d165      	bne.n	c003e5a <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 c003d8e:	7efb      	ldrb	r3, [r7, #27]
 c003d90:	2b08      	cmp	r3, #8
 c003d92:	d828      	bhi.n	c003de6 <UART_SetConfig+0x456>
 c003d94:	a201      	add	r2, pc, #4	; (adr r2, c003d9c <UART_SetConfig+0x40c>)
 c003d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c003d9a:	bf00      	nop
 c003d9c:	0c003dc1 	.word	0x0c003dc1
 c003da0:	0c003dc9 	.word	0x0c003dc9
 c003da4:	0c003dd1 	.word	0x0c003dd1
 c003da8:	0c003de7 	.word	0x0c003de7
 c003dac:	0c003dd7 	.word	0x0c003dd7
 c003db0:	0c003de7 	.word	0x0c003de7
 c003db4:	0c003de7 	.word	0x0c003de7
 c003db8:	0c003de7 	.word	0x0c003de7
 c003dbc:	0c003ddf 	.word	0x0c003ddf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 c003dc0:	f7fe fd56 	bl	c002870 <HAL_RCC_GetPCLK1Freq>
 c003dc4:	6178      	str	r0, [r7, #20]
        break;
 c003dc6:	e013      	b.n	c003df0 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 c003dc8:	f7fe fd66 	bl	c002898 <HAL_RCC_GetPCLK2Freq>
 c003dcc:	6178      	str	r0, [r7, #20]
        break;
 c003dce:	e00f      	b.n	c003df0 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 c003dd0:	4b57      	ldr	r3, [pc, #348]	; (c003f30 <UART_SetConfig+0x5a0>)
 c003dd2:	617b      	str	r3, [r7, #20]
        break;
 c003dd4:	e00c      	b.n	c003df0 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 c003dd6:	f7fe fc99 	bl	c00270c <HAL_RCC_GetSysClockFreq>
 c003dda:	6178      	str	r0, [r7, #20]
        break;
 c003ddc:	e008      	b.n	c003df0 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 c003dde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c003de2:	617b      	str	r3, [r7, #20]
        break;
 c003de4:	e004      	b.n	c003df0 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 c003de6:	2300      	movs	r3, #0
 c003de8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 c003dea:	2301      	movs	r3, #1
 c003dec:	76bb      	strb	r3, [r7, #26]
        break;
 c003dee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 c003df0:	697b      	ldr	r3, [r7, #20]
 c003df2:	2b00      	cmp	r3, #0
 c003df4:	f000 8086 	beq.w	c003f04 <UART_SetConfig+0x574>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c003df8:	687b      	ldr	r3, [r7, #4]
 c003dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c003dfc:	4a4b      	ldr	r2, [pc, #300]	; (c003f2c <UART_SetConfig+0x59c>)
 c003dfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c003e02:	461a      	mov	r2, r3
 c003e04:	697b      	ldr	r3, [r7, #20]
 c003e06:	fbb3 f3f2 	udiv	r3, r3, r2
 c003e0a:	005a      	lsls	r2, r3, #1
 c003e0c:	687b      	ldr	r3, [r7, #4]
 c003e0e:	685b      	ldr	r3, [r3, #4]
 c003e10:	085b      	lsrs	r3, r3, #1
 c003e12:	441a      	add	r2, r3
 c003e14:	687b      	ldr	r3, [r7, #4]
 c003e16:	685b      	ldr	r3, [r3, #4]
 c003e18:	fbb2 f3f3 	udiv	r3, r2, r3
 c003e1c:	b29b      	uxth	r3, r3
 c003e1e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 c003e20:	693b      	ldr	r3, [r7, #16]
 c003e22:	2b0f      	cmp	r3, #15
 c003e24:	d916      	bls.n	c003e54 <UART_SetConfig+0x4c4>
 c003e26:	693b      	ldr	r3, [r7, #16]
 c003e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c003e2c:	d212      	bcs.n	c003e54 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 c003e2e:	693b      	ldr	r3, [r7, #16]
 c003e30:	b29b      	uxth	r3, r3
 c003e32:	f023 030f 	bic.w	r3, r3, #15
 c003e36:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 c003e38:	693b      	ldr	r3, [r7, #16]
 c003e3a:	085b      	lsrs	r3, r3, #1
 c003e3c:	b29b      	uxth	r3, r3
 c003e3e:	f003 0307 	and.w	r3, r3, #7
 c003e42:	b29a      	uxth	r2, r3
 c003e44:	89fb      	ldrh	r3, [r7, #14]
 c003e46:	4313      	orrs	r3, r2
 c003e48:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 c003e4a:	687b      	ldr	r3, [r7, #4]
 c003e4c:	681b      	ldr	r3, [r3, #0]
 c003e4e:	89fa      	ldrh	r2, [r7, #14]
 c003e50:	60da      	str	r2, [r3, #12]
 c003e52:	e057      	b.n	c003f04 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 c003e54:	2301      	movs	r3, #1
 c003e56:	76bb      	strb	r3, [r7, #26]
 c003e58:	e054      	b.n	c003f04 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 c003e5a:	7efb      	ldrb	r3, [r7, #27]
 c003e5c:	2b08      	cmp	r3, #8
 c003e5e:	d828      	bhi.n	c003eb2 <UART_SetConfig+0x522>
 c003e60:	a201      	add	r2, pc, #4	; (adr r2, c003e68 <UART_SetConfig+0x4d8>)
 c003e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c003e66:	bf00      	nop
 c003e68:	0c003e8d 	.word	0x0c003e8d
 c003e6c:	0c003e95 	.word	0x0c003e95
 c003e70:	0c003e9d 	.word	0x0c003e9d
 c003e74:	0c003eb3 	.word	0x0c003eb3
 c003e78:	0c003ea3 	.word	0x0c003ea3
 c003e7c:	0c003eb3 	.word	0x0c003eb3
 c003e80:	0c003eb3 	.word	0x0c003eb3
 c003e84:	0c003eb3 	.word	0x0c003eb3
 c003e88:	0c003eab 	.word	0x0c003eab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 c003e8c:	f7fe fcf0 	bl	c002870 <HAL_RCC_GetPCLK1Freq>
 c003e90:	6178      	str	r0, [r7, #20]
        break;
 c003e92:	e013      	b.n	c003ebc <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 c003e94:	f7fe fd00 	bl	c002898 <HAL_RCC_GetPCLK2Freq>
 c003e98:	6178      	str	r0, [r7, #20]
        break;
 c003e9a:	e00f      	b.n	c003ebc <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 c003e9c:	4b24      	ldr	r3, [pc, #144]	; (c003f30 <UART_SetConfig+0x5a0>)
 c003e9e:	617b      	str	r3, [r7, #20]
        break;
 c003ea0:	e00c      	b.n	c003ebc <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 c003ea2:	f7fe fc33 	bl	c00270c <HAL_RCC_GetSysClockFreq>
 c003ea6:	6178      	str	r0, [r7, #20]
        break;
 c003ea8:	e008      	b.n	c003ebc <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 c003eaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c003eae:	617b      	str	r3, [r7, #20]
        break;
 c003eb0:	e004      	b.n	c003ebc <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 c003eb2:	2300      	movs	r3, #0
 c003eb4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 c003eb6:	2301      	movs	r3, #1
 c003eb8:	76bb      	strb	r3, [r7, #26]
        break;
 c003eba:	bf00      	nop
    }

    if (pclk != 0U)
 c003ebc:	697b      	ldr	r3, [r7, #20]
 c003ebe:	2b00      	cmp	r3, #0
 c003ec0:	d020      	beq.n	c003f04 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c003ec2:	687b      	ldr	r3, [r7, #4]
 c003ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c003ec6:	4a19      	ldr	r2, [pc, #100]	; (c003f2c <UART_SetConfig+0x59c>)
 c003ec8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c003ecc:	461a      	mov	r2, r3
 c003ece:	697b      	ldr	r3, [r7, #20]
 c003ed0:	fbb3 f2f2 	udiv	r2, r3, r2
 c003ed4:	687b      	ldr	r3, [r7, #4]
 c003ed6:	685b      	ldr	r3, [r3, #4]
 c003ed8:	085b      	lsrs	r3, r3, #1
 c003eda:	441a      	add	r2, r3
 c003edc:	687b      	ldr	r3, [r7, #4]
 c003ede:	685b      	ldr	r3, [r3, #4]
 c003ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 c003ee4:	b29b      	uxth	r3, r3
 c003ee6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 c003ee8:	693b      	ldr	r3, [r7, #16]
 c003eea:	2b0f      	cmp	r3, #15
 c003eec:	d908      	bls.n	c003f00 <UART_SetConfig+0x570>
 c003eee:	693b      	ldr	r3, [r7, #16]
 c003ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c003ef4:	d204      	bcs.n	c003f00 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 c003ef6:	687b      	ldr	r3, [r7, #4]
 c003ef8:	681b      	ldr	r3, [r3, #0]
 c003efa:	693a      	ldr	r2, [r7, #16]
 c003efc:	60da      	str	r2, [r3, #12]
 c003efe:	e001      	b.n	c003f04 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 c003f00:	2301      	movs	r3, #1
 c003f02:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 c003f04:	687b      	ldr	r3, [r7, #4]
 c003f06:	2201      	movs	r2, #1
 c003f08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 c003f0c:	687b      	ldr	r3, [r7, #4]
 c003f0e:	2201      	movs	r2, #1
 c003f10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 c003f14:	687b      	ldr	r3, [r7, #4]
 c003f16:	2200      	movs	r2, #0
 c003f18:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 c003f1a:	687b      	ldr	r3, [r7, #4]
 c003f1c:	2200      	movs	r2, #0
 c003f1e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 c003f20:	7ebb      	ldrb	r3, [r7, #26]
}
 c003f22:	4618      	mov	r0, r3
 c003f24:	3720      	adds	r7, #32
 c003f26:	46bd      	mov	sp, r7
 c003f28:	bdb0      	pop	{r4, r5, r7, pc}
 c003f2a:	bf00      	nop
 c003f2c:	0c004620 	.word	0x0c004620
 c003f30:	00f42400 	.word	0x00f42400

0c003f34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 c003f34:	b480      	push	{r7}
 c003f36:	b083      	sub	sp, #12
 c003f38:	af00      	add	r7, sp, #0
 c003f3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 c003f3c:	687b      	ldr	r3, [r7, #4]
 c003f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c003f40:	f003 0301 	and.w	r3, r3, #1
 c003f44:	2b00      	cmp	r3, #0
 c003f46:	d00a      	beq.n	c003f5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 c003f48:	687b      	ldr	r3, [r7, #4]
 c003f4a:	681b      	ldr	r3, [r3, #0]
 c003f4c:	685b      	ldr	r3, [r3, #4]
 c003f4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 c003f52:	687b      	ldr	r3, [r7, #4]
 c003f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 c003f56:	687b      	ldr	r3, [r7, #4]
 c003f58:	681b      	ldr	r3, [r3, #0]
 c003f5a:	430a      	orrs	r2, r1
 c003f5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 c003f5e:	687b      	ldr	r3, [r7, #4]
 c003f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c003f62:	f003 0302 	and.w	r3, r3, #2
 c003f66:	2b00      	cmp	r3, #0
 c003f68:	d00a      	beq.n	c003f80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 c003f6a:	687b      	ldr	r3, [r7, #4]
 c003f6c:	681b      	ldr	r3, [r3, #0]
 c003f6e:	685b      	ldr	r3, [r3, #4]
 c003f70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 c003f74:	687b      	ldr	r3, [r7, #4]
 c003f76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 c003f78:	687b      	ldr	r3, [r7, #4]
 c003f7a:	681b      	ldr	r3, [r3, #0]
 c003f7c:	430a      	orrs	r2, r1
 c003f7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 c003f80:	687b      	ldr	r3, [r7, #4]
 c003f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c003f84:	f003 0304 	and.w	r3, r3, #4
 c003f88:	2b00      	cmp	r3, #0
 c003f8a:	d00a      	beq.n	c003fa2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 c003f8c:	687b      	ldr	r3, [r7, #4]
 c003f8e:	681b      	ldr	r3, [r3, #0]
 c003f90:	685b      	ldr	r3, [r3, #4]
 c003f92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 c003f96:	687b      	ldr	r3, [r7, #4]
 c003f98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 c003f9a:	687b      	ldr	r3, [r7, #4]
 c003f9c:	681b      	ldr	r3, [r3, #0]
 c003f9e:	430a      	orrs	r2, r1
 c003fa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 c003fa2:	687b      	ldr	r3, [r7, #4]
 c003fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c003fa6:	f003 0308 	and.w	r3, r3, #8
 c003faa:	2b00      	cmp	r3, #0
 c003fac:	d00a      	beq.n	c003fc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 c003fae:	687b      	ldr	r3, [r7, #4]
 c003fb0:	681b      	ldr	r3, [r3, #0]
 c003fb2:	685b      	ldr	r3, [r3, #4]
 c003fb4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 c003fb8:	687b      	ldr	r3, [r7, #4]
 c003fba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 c003fbc:	687b      	ldr	r3, [r7, #4]
 c003fbe:	681b      	ldr	r3, [r3, #0]
 c003fc0:	430a      	orrs	r2, r1
 c003fc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 c003fc4:	687b      	ldr	r3, [r7, #4]
 c003fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c003fc8:	f003 0310 	and.w	r3, r3, #16
 c003fcc:	2b00      	cmp	r3, #0
 c003fce:	d00a      	beq.n	c003fe6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 c003fd0:	687b      	ldr	r3, [r7, #4]
 c003fd2:	681b      	ldr	r3, [r3, #0]
 c003fd4:	689b      	ldr	r3, [r3, #8]
 c003fd6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 c003fda:	687b      	ldr	r3, [r7, #4]
 c003fdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 c003fde:	687b      	ldr	r3, [r7, #4]
 c003fe0:	681b      	ldr	r3, [r3, #0]
 c003fe2:	430a      	orrs	r2, r1
 c003fe4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 c003fe6:	687b      	ldr	r3, [r7, #4]
 c003fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c003fea:	f003 0320 	and.w	r3, r3, #32
 c003fee:	2b00      	cmp	r3, #0
 c003ff0:	d00a      	beq.n	c004008 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 c003ff2:	687b      	ldr	r3, [r7, #4]
 c003ff4:	681b      	ldr	r3, [r3, #0]
 c003ff6:	689b      	ldr	r3, [r3, #8]
 c003ff8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 c003ffc:	687b      	ldr	r3, [r7, #4]
 c003ffe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 c004000:	687b      	ldr	r3, [r7, #4]
 c004002:	681b      	ldr	r3, [r3, #0]
 c004004:	430a      	orrs	r2, r1
 c004006:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 c004008:	687b      	ldr	r3, [r7, #4]
 c00400a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c00400c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c004010:	2b00      	cmp	r3, #0
 c004012:	d01a      	beq.n	c00404a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 c004014:	687b      	ldr	r3, [r7, #4]
 c004016:	681b      	ldr	r3, [r3, #0]
 c004018:	685b      	ldr	r3, [r3, #4]
 c00401a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 c00401e:	687b      	ldr	r3, [r7, #4]
 c004020:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 c004022:	687b      	ldr	r3, [r7, #4]
 c004024:	681b      	ldr	r3, [r3, #0]
 c004026:	430a      	orrs	r2, r1
 c004028:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 c00402a:	687b      	ldr	r3, [r7, #4]
 c00402c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c00402e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 c004032:	d10a      	bne.n	c00404a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 c004034:	687b      	ldr	r3, [r7, #4]
 c004036:	681b      	ldr	r3, [r3, #0]
 c004038:	685b      	ldr	r3, [r3, #4]
 c00403a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 c00403e:	687b      	ldr	r3, [r7, #4]
 c004040:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 c004042:	687b      	ldr	r3, [r7, #4]
 c004044:	681b      	ldr	r3, [r3, #0]
 c004046:	430a      	orrs	r2, r1
 c004048:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 c00404a:	687b      	ldr	r3, [r7, #4]
 c00404c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c00404e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c004052:	2b00      	cmp	r3, #0
 c004054:	d00a      	beq.n	c00406c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 c004056:	687b      	ldr	r3, [r7, #4]
 c004058:	681b      	ldr	r3, [r3, #0]
 c00405a:	685b      	ldr	r3, [r3, #4]
 c00405c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 c004060:	687b      	ldr	r3, [r7, #4]
 c004062:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c004064:	687b      	ldr	r3, [r7, #4]
 c004066:	681b      	ldr	r3, [r3, #0]
 c004068:	430a      	orrs	r2, r1
 c00406a:	605a      	str	r2, [r3, #4]
  }
}
 c00406c:	bf00      	nop
 c00406e:	370c      	adds	r7, #12
 c004070:	46bd      	mov	sp, r7
 c004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 c004076:	4770      	bx	lr

0c004078 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 c004078:	b580      	push	{r7, lr}
 c00407a:	b086      	sub	sp, #24
 c00407c:	af02      	add	r7, sp, #8
 c00407e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 c004080:	687b      	ldr	r3, [r7, #4]
 c004082:	2200      	movs	r2, #0
 c004084:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 c004088:	f7fd f836 	bl	c0010f8 <HAL_GetTick>
 c00408c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 c00408e:	687b      	ldr	r3, [r7, #4]
 c004090:	681b      	ldr	r3, [r3, #0]
 c004092:	681b      	ldr	r3, [r3, #0]
 c004094:	f003 0308 	and.w	r3, r3, #8
 c004098:	2b08      	cmp	r3, #8
 c00409a:	d10e      	bne.n	c0040ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 c00409c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 c0040a0:	9300      	str	r3, [sp, #0]
 c0040a2:	68fb      	ldr	r3, [r7, #12]
 c0040a4:	2200      	movs	r2, #0
 c0040a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 c0040aa:	6878      	ldr	r0, [r7, #4]
 c0040ac:	f000 f82f 	bl	c00410e <UART_WaitOnFlagUntilTimeout>
 c0040b0:	4603      	mov	r3, r0
 c0040b2:	2b00      	cmp	r3, #0
 c0040b4:	d001      	beq.n	c0040ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 c0040b6:	2303      	movs	r3, #3
 c0040b8:	e025      	b.n	c004106 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 c0040ba:	687b      	ldr	r3, [r7, #4]
 c0040bc:	681b      	ldr	r3, [r3, #0]
 c0040be:	681b      	ldr	r3, [r3, #0]
 c0040c0:	f003 0304 	and.w	r3, r3, #4
 c0040c4:	2b04      	cmp	r3, #4
 c0040c6:	d10e      	bne.n	c0040e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 c0040c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 c0040cc:	9300      	str	r3, [sp, #0]
 c0040ce:	68fb      	ldr	r3, [r7, #12]
 c0040d0:	2200      	movs	r2, #0
 c0040d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 c0040d6:	6878      	ldr	r0, [r7, #4]
 c0040d8:	f000 f819 	bl	c00410e <UART_WaitOnFlagUntilTimeout>
 c0040dc:	4603      	mov	r3, r0
 c0040de:	2b00      	cmp	r3, #0
 c0040e0:	d001      	beq.n	c0040e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 c0040e2:	2303      	movs	r3, #3
 c0040e4:	e00f      	b.n	c004106 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 c0040e6:	687b      	ldr	r3, [r7, #4]
 c0040e8:	2220      	movs	r2, #32
 c0040ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 c0040ee:	687b      	ldr	r3, [r7, #4]
 c0040f0:	2220      	movs	r2, #32
 c0040f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 c0040f6:	687b      	ldr	r3, [r7, #4]
 c0040f8:	2200      	movs	r2, #0
 c0040fa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 c0040fc:	687b      	ldr	r3, [r7, #4]
 c0040fe:	2200      	movs	r2, #0
 c004100:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 c004104:	2300      	movs	r3, #0
}
 c004106:	4618      	mov	r0, r3
 c004108:	3710      	adds	r7, #16
 c00410a:	46bd      	mov	sp, r7
 c00410c:	bd80      	pop	{r7, pc}

0c00410e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 c00410e:	b580      	push	{r7, lr}
 c004110:	b084      	sub	sp, #16
 c004112:	af00      	add	r7, sp, #0
 c004114:	60f8      	str	r0, [r7, #12]
 c004116:	60b9      	str	r1, [r7, #8]
 c004118:	603b      	str	r3, [r7, #0]
 c00411a:	4613      	mov	r3, r2
 c00411c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c00411e:	e062      	b.n	c0041e6 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 c004120:	69bb      	ldr	r3, [r7, #24]
 c004122:	f1b3 3fff 	cmp.w	r3, #4294967295
 c004126:	d05e      	beq.n	c0041e6 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 c004128:	f7fc ffe6 	bl	c0010f8 <HAL_GetTick>
 c00412c:	4602      	mov	r2, r0
 c00412e:	683b      	ldr	r3, [r7, #0]
 c004130:	1ad3      	subs	r3, r2, r3
 c004132:	69ba      	ldr	r2, [r7, #24]
 c004134:	429a      	cmp	r2, r3
 c004136:	d302      	bcc.n	c00413e <UART_WaitOnFlagUntilTimeout+0x30>
 c004138:	69bb      	ldr	r3, [r7, #24]
 c00413a:	2b00      	cmp	r3, #0
 c00413c:	d11d      	bne.n	c00417a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 c00413e:	68fb      	ldr	r3, [r7, #12]
 c004140:	681b      	ldr	r3, [r3, #0]
 c004142:	681a      	ldr	r2, [r3, #0]
 c004144:	68fb      	ldr	r3, [r7, #12]
 c004146:	681b      	ldr	r3, [r3, #0]
 c004148:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 c00414c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 c00414e:	68fb      	ldr	r3, [r7, #12]
 c004150:	681b      	ldr	r3, [r3, #0]
 c004152:	689a      	ldr	r2, [r3, #8]
 c004154:	68fb      	ldr	r3, [r7, #12]
 c004156:	681b      	ldr	r3, [r3, #0]
 c004158:	f022 0201 	bic.w	r2, r2, #1
 c00415c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 c00415e:	68fb      	ldr	r3, [r7, #12]
 c004160:	2220      	movs	r2, #32
 c004162:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 c004166:	68fb      	ldr	r3, [r7, #12]
 c004168:	2220      	movs	r2, #32
 c00416a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 c00416e:	68fb      	ldr	r3, [r7, #12]
 c004170:	2200      	movs	r2, #0
 c004172:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 c004176:	2303      	movs	r3, #3
 c004178:	e045      	b.n	c004206 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 c00417a:	68fb      	ldr	r3, [r7, #12]
 c00417c:	681b      	ldr	r3, [r3, #0]
 c00417e:	681b      	ldr	r3, [r3, #0]
 c004180:	f003 0304 	and.w	r3, r3, #4
 c004184:	2b00      	cmp	r3, #0
 c004186:	d02e      	beq.n	c0041e6 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 c004188:	68fb      	ldr	r3, [r7, #12]
 c00418a:	681b      	ldr	r3, [r3, #0]
 c00418c:	69db      	ldr	r3, [r3, #28]
 c00418e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c004192:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c004196:	d126      	bne.n	c0041e6 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 c004198:	68fb      	ldr	r3, [r7, #12]
 c00419a:	681b      	ldr	r3, [r3, #0]
 c00419c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 c0041a0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 c0041a2:	68fb      	ldr	r3, [r7, #12]
 c0041a4:	681b      	ldr	r3, [r3, #0]
 c0041a6:	681a      	ldr	r2, [r3, #0]
 c0041a8:	68fb      	ldr	r3, [r7, #12]
 c0041aa:	681b      	ldr	r3, [r3, #0]
 c0041ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 c0041b0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 c0041b2:	68fb      	ldr	r3, [r7, #12]
 c0041b4:	681b      	ldr	r3, [r3, #0]
 c0041b6:	689a      	ldr	r2, [r3, #8]
 c0041b8:	68fb      	ldr	r3, [r7, #12]
 c0041ba:	681b      	ldr	r3, [r3, #0]
 c0041bc:	f022 0201 	bic.w	r2, r2, #1
 c0041c0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 c0041c2:	68fb      	ldr	r3, [r7, #12]
 c0041c4:	2220      	movs	r2, #32
 c0041c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 c0041ca:	68fb      	ldr	r3, [r7, #12]
 c0041cc:	2220      	movs	r2, #32
 c0041ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 c0041d2:	68fb      	ldr	r3, [r7, #12]
 c0041d4:	2220      	movs	r2, #32
 c0041d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 c0041da:	68fb      	ldr	r3, [r7, #12]
 c0041dc:	2200      	movs	r2, #0
 c0041de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 c0041e2:	2303      	movs	r3, #3
 c0041e4:	e00f      	b.n	c004206 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c0041e6:	68fb      	ldr	r3, [r7, #12]
 c0041e8:	681b      	ldr	r3, [r3, #0]
 c0041ea:	69da      	ldr	r2, [r3, #28]
 c0041ec:	68bb      	ldr	r3, [r7, #8]
 c0041ee:	4013      	ands	r3, r2
 c0041f0:	68ba      	ldr	r2, [r7, #8]
 c0041f2:	429a      	cmp	r2, r3
 c0041f4:	bf0c      	ite	eq
 c0041f6:	2301      	moveq	r3, #1
 c0041f8:	2300      	movne	r3, #0
 c0041fa:	b2db      	uxtb	r3, r3
 c0041fc:	461a      	mov	r2, r3
 c0041fe:	79fb      	ldrb	r3, [r7, #7]
 c004200:	429a      	cmp	r2, r3
 c004202:	d08d      	beq.n	c004120 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 c004204:	2300      	movs	r3, #0
}
 c004206:	4618      	mov	r0, r3
 c004208:	3710      	adds	r7, #16
 c00420a:	46bd      	mov	sp, r7
 c00420c:	bd80      	pop	{r7, pc}

0c00420e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 c00420e:	b480      	push	{r7}
 c004210:	b083      	sub	sp, #12
 c004212:	af00      	add	r7, sp, #0
 c004214:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 c004216:	687b      	ldr	r3, [r7, #4]
 c004218:	681b      	ldr	r3, [r3, #0]
 c00421a:	681a      	ldr	r2, [r3, #0]
 c00421c:	687b      	ldr	r3, [r7, #4]
 c00421e:	681b      	ldr	r3, [r3, #0]
 c004220:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 c004224:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 c004226:	687b      	ldr	r3, [r7, #4]
 c004228:	681b      	ldr	r3, [r3, #0]
 c00422a:	689b      	ldr	r3, [r3, #8]
 c00422c:	687a      	ldr	r2, [r7, #4]
 c00422e:	6812      	ldr	r2, [r2, #0]
 c004230:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c004234:	f023 0301 	bic.w	r3, r3, #1
 c004238:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 c00423a:	687b      	ldr	r3, [r7, #4]
 c00423c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 c00423e:	2b01      	cmp	r3, #1
 c004240:	d107      	bne.n	c004252 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 c004242:	687b      	ldr	r3, [r7, #4]
 c004244:	681b      	ldr	r3, [r3, #0]
 c004246:	681a      	ldr	r2, [r3, #0]
 c004248:	687b      	ldr	r3, [r7, #4]
 c00424a:	681b      	ldr	r3, [r3, #0]
 c00424c:	f022 0210 	bic.w	r2, r2, #16
 c004250:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 c004252:	687b      	ldr	r3, [r7, #4]
 c004254:	2220      	movs	r2, #32
 c004256:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 c00425a:	687b      	ldr	r3, [r7, #4]
 c00425c:	2200      	movs	r2, #0
 c00425e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 c004260:	687b      	ldr	r3, [r7, #4]
 c004262:	2200      	movs	r2, #0
 c004264:	671a      	str	r2, [r3, #112]	; 0x70
}
 c004266:	bf00      	nop
 c004268:	370c      	adds	r7, #12
 c00426a:	46bd      	mov	sp, r7
 c00426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c004270:	4770      	bx	lr

0c004272 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 c004272:	b580      	push	{r7, lr}
 c004274:	b084      	sub	sp, #16
 c004276:	af00      	add	r7, sp, #0
 c004278:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 c00427a:	687b      	ldr	r3, [r7, #4]
 c00427c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c00427e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 c004280:	68fb      	ldr	r3, [r7, #12]
 c004282:	2200      	movs	r2, #0
 c004284:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 c004288:	68fb      	ldr	r3, [r7, #12]
 c00428a:	2200      	movs	r2, #0
 c00428c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 c004290:	68f8      	ldr	r0, [r7, #12]
 c004292:	f7ff fb67 	bl	c003964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 c004296:	bf00      	nop
 c004298:	3710      	adds	r7, #16
 c00429a:	46bd      	mov	sp, r7
 c00429c:	bd80      	pop	{r7, pc}

0c00429e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 c00429e:	b580      	push	{r7, lr}
 c0042a0:	b082      	sub	sp, #8
 c0042a2:	af00      	add	r7, sp, #0
 c0042a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 c0042a6:	687b      	ldr	r3, [r7, #4]
 c0042a8:	681b      	ldr	r3, [r3, #0]
 c0042aa:	681a      	ldr	r2, [r3, #0]
 c0042ac:	687b      	ldr	r3, [r7, #4]
 c0042ae:	681b      	ldr	r3, [r3, #0]
 c0042b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 c0042b4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 c0042b6:	687b      	ldr	r3, [r7, #4]
 c0042b8:	2220      	movs	r2, #32
 c0042ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 c0042be:	687b      	ldr	r3, [r7, #4]
 c0042c0:	2200      	movs	r2, #0
 c0042c2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 c0042c4:	6878      	ldr	r0, [r7, #4]
 c0042c6:	f7ff fb43 	bl	c003950 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 c0042ca:	bf00      	nop
 c0042cc:	3708      	adds	r7, #8
 c0042ce:	46bd      	mov	sp, r7
 c0042d0:	bd80      	pop	{r7, pc}

0c0042d2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 c0042d2:	b480      	push	{r7}
 c0042d4:	b083      	sub	sp, #12
 c0042d6:	af00      	add	r7, sp, #0
 c0042d8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 c0042da:	bf00      	nop
 c0042dc:	370c      	adds	r7, #12
 c0042de:	46bd      	mov	sp, r7
 c0042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0042e4:	4770      	bx	lr

0c0042e6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 c0042e6:	b480      	push	{r7}
 c0042e8:	b083      	sub	sp, #12
 c0042ea:	af00      	add	r7, sp, #0
 c0042ec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 c0042ee:	bf00      	nop
 c0042f0:	370c      	adds	r7, #12
 c0042f2:	46bd      	mov	sp, r7
 c0042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0042f8:	4770      	bx	lr

0c0042fa <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 c0042fa:	b480      	push	{r7}
 c0042fc:	b083      	sub	sp, #12
 c0042fe:	af00      	add	r7, sp, #0
 c004300:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 c004302:	bf00      	nop
 c004304:	370c      	adds	r7, #12
 c004306:	46bd      	mov	sp, r7
 c004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00430c:	4770      	bx	lr

0c00430e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 c00430e:	b480      	push	{r7}
 c004310:	b085      	sub	sp, #20
 c004312:	af00      	add	r7, sp, #0
 c004314:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 c004316:	687b      	ldr	r3, [r7, #4]
 c004318:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 c00431c:	2b01      	cmp	r3, #1
 c00431e:	d101      	bne.n	c004324 <HAL_UARTEx_DisableFifoMode+0x16>
 c004320:	2302      	movs	r3, #2
 c004322:	e027      	b.n	c004374 <HAL_UARTEx_DisableFifoMode+0x66>
 c004324:	687b      	ldr	r3, [r7, #4]
 c004326:	2201      	movs	r2, #1
 c004328:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 c00432c:	687b      	ldr	r3, [r7, #4]
 c00432e:	2224      	movs	r2, #36	; 0x24
 c004330:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c004334:	687b      	ldr	r3, [r7, #4]
 c004336:	681b      	ldr	r3, [r3, #0]
 c004338:	681b      	ldr	r3, [r3, #0]
 c00433a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c00433c:	687b      	ldr	r3, [r7, #4]
 c00433e:	681b      	ldr	r3, [r3, #0]
 c004340:	681a      	ldr	r2, [r3, #0]
 c004342:	687b      	ldr	r3, [r7, #4]
 c004344:	681b      	ldr	r3, [r3, #0]
 c004346:	f022 0201 	bic.w	r2, r2, #1
 c00434a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 c00434c:	68fb      	ldr	r3, [r7, #12]
 c00434e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 c004352:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 c004354:	687b      	ldr	r3, [r7, #4]
 c004356:	2200      	movs	r2, #0
 c004358:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c00435a:	687b      	ldr	r3, [r7, #4]
 c00435c:	681b      	ldr	r3, [r3, #0]
 c00435e:	68fa      	ldr	r2, [r7, #12]
 c004360:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c004362:	687b      	ldr	r3, [r7, #4]
 c004364:	2220      	movs	r2, #32
 c004366:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c00436a:	687b      	ldr	r3, [r7, #4]
 c00436c:	2200      	movs	r2, #0
 c00436e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 c004372:	2300      	movs	r3, #0
}
 c004374:	4618      	mov	r0, r3
 c004376:	3714      	adds	r7, #20
 c004378:	46bd      	mov	sp, r7
 c00437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00437e:	4770      	bx	lr

0c004380 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 c004380:	b580      	push	{r7, lr}
 c004382:	b084      	sub	sp, #16
 c004384:	af00      	add	r7, sp, #0
 c004386:	6078      	str	r0, [r7, #4]
 c004388:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 c00438a:	687b      	ldr	r3, [r7, #4]
 c00438c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 c004390:	2b01      	cmp	r3, #1
 c004392:	d101      	bne.n	c004398 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 c004394:	2302      	movs	r3, #2
 c004396:	e02d      	b.n	c0043f4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 c004398:	687b      	ldr	r3, [r7, #4]
 c00439a:	2201      	movs	r2, #1
 c00439c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 c0043a0:	687b      	ldr	r3, [r7, #4]
 c0043a2:	2224      	movs	r2, #36	; 0x24
 c0043a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c0043a8:	687b      	ldr	r3, [r7, #4]
 c0043aa:	681b      	ldr	r3, [r3, #0]
 c0043ac:	681b      	ldr	r3, [r3, #0]
 c0043ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c0043b0:	687b      	ldr	r3, [r7, #4]
 c0043b2:	681b      	ldr	r3, [r3, #0]
 c0043b4:	681a      	ldr	r2, [r3, #0]
 c0043b6:	687b      	ldr	r3, [r7, #4]
 c0043b8:	681b      	ldr	r3, [r3, #0]
 c0043ba:	f022 0201 	bic.w	r2, r2, #1
 c0043be:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 c0043c0:	687b      	ldr	r3, [r7, #4]
 c0043c2:	681b      	ldr	r3, [r3, #0]
 c0043c4:	689b      	ldr	r3, [r3, #8]
 c0043c6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 c0043ca:	687b      	ldr	r3, [r7, #4]
 c0043cc:	681b      	ldr	r3, [r3, #0]
 c0043ce:	683a      	ldr	r2, [r7, #0]
 c0043d0:	430a      	orrs	r2, r1
 c0043d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 c0043d4:	6878      	ldr	r0, [r7, #4]
 c0043d6:	f000 f84f 	bl	c004478 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c0043da:	687b      	ldr	r3, [r7, #4]
 c0043dc:	681b      	ldr	r3, [r3, #0]
 c0043de:	68fa      	ldr	r2, [r7, #12]
 c0043e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c0043e2:	687b      	ldr	r3, [r7, #4]
 c0043e4:	2220      	movs	r2, #32
 c0043e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c0043ea:	687b      	ldr	r3, [r7, #4]
 c0043ec:	2200      	movs	r2, #0
 c0043ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 c0043f2:	2300      	movs	r3, #0
}
 c0043f4:	4618      	mov	r0, r3
 c0043f6:	3710      	adds	r7, #16
 c0043f8:	46bd      	mov	sp, r7
 c0043fa:	bd80      	pop	{r7, pc}

0c0043fc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 c0043fc:	b580      	push	{r7, lr}
 c0043fe:	b084      	sub	sp, #16
 c004400:	af00      	add	r7, sp, #0
 c004402:	6078      	str	r0, [r7, #4]
 c004404:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 c004406:	687b      	ldr	r3, [r7, #4]
 c004408:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 c00440c:	2b01      	cmp	r3, #1
 c00440e:	d101      	bne.n	c004414 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 c004410:	2302      	movs	r3, #2
 c004412:	e02d      	b.n	c004470 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 c004414:	687b      	ldr	r3, [r7, #4]
 c004416:	2201      	movs	r2, #1
 c004418:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 c00441c:	687b      	ldr	r3, [r7, #4]
 c00441e:	2224      	movs	r2, #36	; 0x24
 c004420:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c004424:	687b      	ldr	r3, [r7, #4]
 c004426:	681b      	ldr	r3, [r3, #0]
 c004428:	681b      	ldr	r3, [r3, #0]
 c00442a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c00442c:	687b      	ldr	r3, [r7, #4]
 c00442e:	681b      	ldr	r3, [r3, #0]
 c004430:	681a      	ldr	r2, [r3, #0]
 c004432:	687b      	ldr	r3, [r7, #4]
 c004434:	681b      	ldr	r3, [r3, #0]
 c004436:	f022 0201 	bic.w	r2, r2, #1
 c00443a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 c00443c:	687b      	ldr	r3, [r7, #4]
 c00443e:	681b      	ldr	r3, [r3, #0]
 c004440:	689b      	ldr	r3, [r3, #8]
 c004442:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 c004446:	687b      	ldr	r3, [r7, #4]
 c004448:	681b      	ldr	r3, [r3, #0]
 c00444a:	683a      	ldr	r2, [r7, #0]
 c00444c:	430a      	orrs	r2, r1
 c00444e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 c004450:	6878      	ldr	r0, [r7, #4]
 c004452:	f000 f811 	bl	c004478 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c004456:	687b      	ldr	r3, [r7, #4]
 c004458:	681b      	ldr	r3, [r3, #0]
 c00445a:	68fa      	ldr	r2, [r7, #12]
 c00445c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c00445e:	687b      	ldr	r3, [r7, #4]
 c004460:	2220      	movs	r2, #32
 c004462:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c004466:	687b      	ldr	r3, [r7, #4]
 c004468:	2200      	movs	r2, #0
 c00446a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 c00446e:	2300      	movs	r3, #0
}
 c004470:	4618      	mov	r0, r3
 c004472:	3710      	adds	r7, #16
 c004474:	46bd      	mov	sp, r7
 c004476:	bd80      	pop	{r7, pc}

0c004478 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 c004478:	b480      	push	{r7}
 c00447a:	b089      	sub	sp, #36	; 0x24
 c00447c:	af00      	add	r7, sp, #0
 c00447e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 c004480:	4a2f      	ldr	r2, [pc, #188]	; (c004540 <UARTEx_SetNbDataToProcess+0xc8>)
 c004482:	f107 0314 	add.w	r3, r7, #20
 c004486:	e892 0003 	ldmia.w	r2, {r0, r1}
 c00448a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 c00448e:	4a2d      	ldr	r2, [pc, #180]	; (c004544 <UARTEx_SetNbDataToProcess+0xcc>)
 c004490:	f107 030c 	add.w	r3, r7, #12
 c004494:	e892 0003 	ldmia.w	r2, {r0, r1}
 c004498:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 c00449c:	687b      	ldr	r3, [r7, #4]
 c00449e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c0044a0:	2b00      	cmp	r3, #0
 c0044a2:	d108      	bne.n	c0044b6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 c0044a4:	687b      	ldr	r3, [r7, #4]
 c0044a6:	2201      	movs	r2, #1
 c0044a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 c0044ac:	687b      	ldr	r3, [r7, #4]
 c0044ae:	2201      	movs	r2, #1
 c0044b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 c0044b4:	e03d      	b.n	c004532 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 c0044b6:	2308      	movs	r3, #8
 c0044b8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 c0044ba:	2308      	movs	r3, #8
 c0044bc:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 c0044be:	687b      	ldr	r3, [r7, #4]
 c0044c0:	681b      	ldr	r3, [r3, #0]
 c0044c2:	689b      	ldr	r3, [r3, #8]
 c0044c4:	0e5b      	lsrs	r3, r3, #25
 c0044c6:	b2db      	uxtb	r3, r3
 c0044c8:	f003 0307 	and.w	r3, r3, #7
 c0044cc:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 c0044ce:	687b      	ldr	r3, [r7, #4]
 c0044d0:	681b      	ldr	r3, [r3, #0]
 c0044d2:	689b      	ldr	r3, [r3, #8]
 c0044d4:	0f5b      	lsrs	r3, r3, #29
 c0044d6:	b2db      	uxtb	r3, r3
 c0044d8:	f003 0307 	and.w	r3, r3, #7
 c0044dc:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 c0044de:	7fbb      	ldrb	r3, [r7, #30]
 c0044e0:	7f3a      	ldrb	r2, [r7, #28]
 c0044e2:	f107 0120 	add.w	r1, r7, #32
 c0044e6:	440a      	add	r2, r1
 c0044e8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 c0044ec:	fb02 f303 	mul.w	r3, r2, r3
 c0044f0:	7f3a      	ldrb	r2, [r7, #28]
 c0044f2:	f107 0120 	add.w	r1, r7, #32
 c0044f6:	440a      	add	r2, r1
 c0044f8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 c0044fc:	fb93 f3f2 	sdiv	r3, r3, r2
 c004500:	b29a      	uxth	r2, r3
 c004502:	687b      	ldr	r3, [r7, #4]
 c004504:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 c004508:	7ffb      	ldrb	r3, [r7, #31]
 c00450a:	7f7a      	ldrb	r2, [r7, #29]
 c00450c:	f107 0120 	add.w	r1, r7, #32
 c004510:	440a      	add	r2, r1
 c004512:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 c004516:	fb02 f303 	mul.w	r3, r2, r3
 c00451a:	7f7a      	ldrb	r2, [r7, #29]
 c00451c:	f107 0120 	add.w	r1, r7, #32
 c004520:	440a      	add	r2, r1
 c004522:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 c004526:	fb93 f3f2 	sdiv	r3, r3, r2
 c00452a:	b29a      	uxth	r2, r3
 c00452c:	687b      	ldr	r3, [r7, #4]
 c00452e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 c004532:	bf00      	nop
 c004534:	3724      	adds	r7, #36	; 0x24
 c004536:	46bd      	mov	sp, r7
 c004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00453c:	4770      	bx	lr
 c00453e:	bf00      	nop
 c004540:	0c0045b8 	.word	0x0c0045b8
 c004544:	0c0045c0 	.word	0x0c0045c0

0c004548 <__libc_init_array>:
 c004548:	b570      	push	{r4, r5, r6, lr}
 c00454a:	4d0d      	ldr	r5, [pc, #52]	; (c004580 <__libc_init_array+0x38>)
 c00454c:	2600      	movs	r6, #0
 c00454e:	4c0d      	ldr	r4, [pc, #52]	; (c004584 <__libc_init_array+0x3c>)
 c004550:	1b64      	subs	r4, r4, r5
 c004552:	10a4      	asrs	r4, r4, #2
 c004554:	42a6      	cmp	r6, r4
 c004556:	d109      	bne.n	c00456c <__libc_init_array+0x24>
 c004558:	4d0b      	ldr	r5, [pc, #44]	; (c004588 <__libc_init_array+0x40>)
 c00455a:	2600      	movs	r6, #0
 c00455c:	4c0b      	ldr	r4, [pc, #44]	; (c00458c <__libc_init_array+0x44>)
 c00455e:	f000 f81f 	bl	c0045a0 <_init>
 c004562:	1b64      	subs	r4, r4, r5
 c004564:	10a4      	asrs	r4, r4, #2
 c004566:	42a6      	cmp	r6, r4
 c004568:	d105      	bne.n	c004576 <__libc_init_array+0x2e>
 c00456a:	bd70      	pop	{r4, r5, r6, pc}
 c00456c:	f855 3b04 	ldr.w	r3, [r5], #4
 c004570:	3601      	adds	r6, #1
 c004572:	4798      	blx	r3
 c004574:	e7ee      	b.n	c004554 <__libc_init_array+0xc>
 c004576:	f855 3b04 	ldr.w	r3, [r5], #4
 c00457a:	3601      	adds	r6, #1
 c00457c:	4798      	blx	r3
 c00457e:	e7f2      	b.n	c004566 <__libc_init_array+0x1e>
 c004580:	0c004640 	.word	0x0c004640
 c004584:	0c004640 	.word	0x0c004640
 c004588:	0c004640 	.word	0x0c004640
 c00458c:	0c004644 	.word	0x0c004644

0c004590 <memset>:
 c004590:	4402      	add	r2, r0
 c004592:	4603      	mov	r3, r0
 c004594:	4293      	cmp	r3, r2
 c004596:	d100      	bne.n	c00459a <memset+0xa>
 c004598:	4770      	bx	lr
 c00459a:	f803 1b01 	strb.w	r1, [r3], #1
 c00459e:	e7f9      	b.n	c004594 <memset+0x4>

0c0045a0 <_init>:
 c0045a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c0045a2:	bf00      	nop
 c0045a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c0045a6:	bc08      	pop	{r3}
 c0045a8:	469e      	mov	lr, r3
 c0045aa:	4770      	bx	lr

0c0045ac <_fini>:
 c0045ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c0045ae:	bf00      	nop
 c0045b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c0045b2:	bc08      	pop	{r3}
 c0045b4:	469e      	mov	lr, r3
 c0045b6:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

0c03e000 <SECURE_SystemCoreClockUpdate>:
 c03e000:	e97f e97f 	sg
 c03e004:	f7c2 bfa4 	b.w	c000f50 <__acle_se_SECURE_SystemCoreClockUpdate>

0c03e008 <trust_interface>:
 c03e008:	e97f e97f 	sg
 c03e00c:	f7c2 bd0a 	b.w	c000a24 <__acle_se_trust_interface>

0c03e010 <SECURE_RegisterCallback>:
 c03e010:	e97f e97f 	sg
 c03e014:	f7c2 bcb0 	b.w	c000978 <__acle_se_SECURE_RegisterCallback>
	...
