
pinlock_NonSecure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f00  080401f8  080401f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000056c  080470f8  080470f8  000170f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08047664  08047664  000181f0  2**0
                  CONTENTS
  4 .ARM          00000008  08047664  08047664  00017664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0804766c  0804766c  000181f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0804766c  0804766c  0001766c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08047670  08047670  00017670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20018000  08047674  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  200181f0  08047864  000181f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001830c  08047864  0001830c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000181f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f6a3  00000000  00000000  00018226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024c1  00000000  00000000  000278c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  00029d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b50  00000000  00000000  0002a9c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003dbd  00000000  00000000  0002b518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dcc0  00000000  00000000  0002f2d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105df9  00000000  00000000  0003cf95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00142d8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004430  00000000  00000000  00142de4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080401f8 <__do_global_dtors_aux>:
 80401f8:	b510      	push	{r4, lr}
 80401fa:	4c05      	ldr	r4, [pc, #20]	; (8040210 <__do_global_dtors_aux+0x18>)
 80401fc:	7823      	ldrb	r3, [r4, #0]
 80401fe:	b933      	cbnz	r3, 804020e <__do_global_dtors_aux+0x16>
 8040200:	4b04      	ldr	r3, [pc, #16]	; (8040214 <__do_global_dtors_aux+0x1c>)
 8040202:	b113      	cbz	r3, 804020a <__do_global_dtors_aux+0x12>
 8040204:	4804      	ldr	r0, [pc, #16]	; (8040218 <__do_global_dtors_aux+0x20>)
 8040206:	e000      	b.n	804020a <__do_global_dtors_aux+0x12>
 8040208:	bf00      	nop
 804020a:	2301      	movs	r3, #1
 804020c:	7023      	strb	r3, [r4, #0]
 804020e:	bd10      	pop	{r4, pc}
 8040210:	200181f0 	.word	0x200181f0
 8040214:	00000000 	.word	0x00000000
 8040218:	080470cc 	.word	0x080470cc

0804021c <frame_dummy>:
 804021c:	b508      	push	{r3, lr}
 804021e:	4b03      	ldr	r3, [pc, #12]	; (804022c <frame_dummy+0x10>)
 8040220:	b11b      	cbz	r3, 804022a <frame_dummy+0xe>
 8040222:	4903      	ldr	r1, [pc, #12]	; (8040230 <frame_dummy+0x14>)
 8040224:	4803      	ldr	r0, [pc, #12]	; (8040234 <frame_dummy+0x18>)
 8040226:	e000      	b.n	804022a <frame_dummy+0xe>
 8040228:	bf00      	nop
 804022a:	bd08      	pop	{r3, pc}
 804022c:	00000000 	.word	0x00000000
 8040230:	200181f4 	.word	0x200181f4
 8040234:	080470cc 	.word	0x080470cc

08040238 <strlen>:
 8040238:	4603      	mov	r3, r0
 804023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 804023e:	2a00      	cmp	r2, #0
 8040240:	d1fb      	bne.n	804023a <strlen+0x2>
 8040242:	1a18      	subs	r0, r3, r0
 8040244:	3801      	subs	r0, #1
 8040246:	4770      	bx	lr

08040248 <__aeabi_drsub>:
 8040248:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 804024c:	e002      	b.n	8040254 <__adddf3>
 804024e:	bf00      	nop

08040250 <__aeabi_dsub>:
 8040250:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08040254 <__adddf3>:
 8040254:	b530      	push	{r4, r5, lr}
 8040256:	ea4f 0441 	mov.w	r4, r1, lsl #1
 804025a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 804025e:	ea94 0f05 	teq	r4, r5
 8040262:	bf08      	it	eq
 8040264:	ea90 0f02 	teqeq	r0, r2
 8040268:	bf1f      	itttt	ne
 804026a:	ea54 0c00 	orrsne.w	ip, r4, r0
 804026e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8040272:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8040276:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 804027a:	f000 80e2 	beq.w	8040442 <__adddf3+0x1ee>
 804027e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8040282:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8040286:	bfb8      	it	lt
 8040288:	426d      	neglt	r5, r5
 804028a:	dd0c      	ble.n	80402a6 <__adddf3+0x52>
 804028c:	442c      	add	r4, r5
 804028e:	ea80 0202 	eor.w	r2, r0, r2
 8040292:	ea81 0303 	eor.w	r3, r1, r3
 8040296:	ea82 0000 	eor.w	r0, r2, r0
 804029a:	ea83 0101 	eor.w	r1, r3, r1
 804029e:	ea80 0202 	eor.w	r2, r0, r2
 80402a2:	ea81 0303 	eor.w	r3, r1, r3
 80402a6:	2d36      	cmp	r5, #54	; 0x36
 80402a8:	bf88      	it	hi
 80402aa:	bd30      	pophi	{r4, r5, pc}
 80402ac:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80402b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80402b4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80402b8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80402bc:	d002      	beq.n	80402c4 <__adddf3+0x70>
 80402be:	4240      	negs	r0, r0
 80402c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80402c4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80402c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80402cc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80402d0:	d002      	beq.n	80402d8 <__adddf3+0x84>
 80402d2:	4252      	negs	r2, r2
 80402d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80402d8:	ea94 0f05 	teq	r4, r5
 80402dc:	f000 80a7 	beq.w	804042e <__adddf3+0x1da>
 80402e0:	f1a4 0401 	sub.w	r4, r4, #1
 80402e4:	f1d5 0e20 	rsbs	lr, r5, #32
 80402e8:	db0d      	blt.n	8040306 <__adddf3+0xb2>
 80402ea:	fa02 fc0e 	lsl.w	ip, r2, lr
 80402ee:	fa22 f205 	lsr.w	r2, r2, r5
 80402f2:	1880      	adds	r0, r0, r2
 80402f4:	f141 0100 	adc.w	r1, r1, #0
 80402f8:	fa03 f20e 	lsl.w	r2, r3, lr
 80402fc:	1880      	adds	r0, r0, r2
 80402fe:	fa43 f305 	asr.w	r3, r3, r5
 8040302:	4159      	adcs	r1, r3
 8040304:	e00e      	b.n	8040324 <__adddf3+0xd0>
 8040306:	f1a5 0520 	sub.w	r5, r5, #32
 804030a:	f10e 0e20 	add.w	lr, lr, #32
 804030e:	2a01      	cmp	r2, #1
 8040310:	fa03 fc0e 	lsl.w	ip, r3, lr
 8040314:	bf28      	it	cs
 8040316:	f04c 0c02 	orrcs.w	ip, ip, #2
 804031a:	fa43 f305 	asr.w	r3, r3, r5
 804031e:	18c0      	adds	r0, r0, r3
 8040320:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8040324:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8040328:	d507      	bpl.n	804033a <__adddf3+0xe6>
 804032a:	f04f 0e00 	mov.w	lr, #0
 804032e:	f1dc 0c00 	rsbs	ip, ip, #0
 8040332:	eb7e 0000 	sbcs.w	r0, lr, r0
 8040336:	eb6e 0101 	sbc.w	r1, lr, r1
 804033a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 804033e:	d31b      	bcc.n	8040378 <__adddf3+0x124>
 8040340:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8040344:	d30c      	bcc.n	8040360 <__adddf3+0x10c>
 8040346:	0849      	lsrs	r1, r1, #1
 8040348:	ea5f 0030 	movs.w	r0, r0, rrx
 804034c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8040350:	f104 0401 	add.w	r4, r4, #1
 8040354:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8040358:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 804035c:	f080 809a 	bcs.w	8040494 <__adddf3+0x240>
 8040360:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8040364:	bf08      	it	eq
 8040366:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 804036a:	f150 0000 	adcs.w	r0, r0, #0
 804036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8040372:	ea41 0105 	orr.w	r1, r1, r5
 8040376:	bd30      	pop	{r4, r5, pc}
 8040378:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 804037c:	4140      	adcs	r0, r0
 804037e:	eb41 0101 	adc.w	r1, r1, r1
 8040382:	3c01      	subs	r4, #1
 8040384:	bf28      	it	cs
 8040386:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 804038a:	d2e9      	bcs.n	8040360 <__adddf3+0x10c>
 804038c:	f091 0f00 	teq	r1, #0
 8040390:	bf04      	itt	eq
 8040392:	4601      	moveq	r1, r0
 8040394:	2000      	moveq	r0, #0
 8040396:	fab1 f381 	clz	r3, r1
 804039a:	bf08      	it	eq
 804039c:	3320      	addeq	r3, #32
 804039e:	f1a3 030b 	sub.w	r3, r3, #11
 80403a2:	f1b3 0220 	subs.w	r2, r3, #32
 80403a6:	da0c      	bge.n	80403c2 <__adddf3+0x16e>
 80403a8:	320c      	adds	r2, #12
 80403aa:	dd08      	ble.n	80403be <__adddf3+0x16a>
 80403ac:	f102 0c14 	add.w	ip, r2, #20
 80403b0:	f1c2 020c 	rsb	r2, r2, #12
 80403b4:	fa01 f00c 	lsl.w	r0, r1, ip
 80403b8:	fa21 f102 	lsr.w	r1, r1, r2
 80403bc:	e00c      	b.n	80403d8 <__adddf3+0x184>
 80403be:	f102 0214 	add.w	r2, r2, #20
 80403c2:	bfd8      	it	le
 80403c4:	f1c2 0c20 	rsble	ip, r2, #32
 80403c8:	fa01 f102 	lsl.w	r1, r1, r2
 80403cc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80403d0:	bfdc      	itt	le
 80403d2:	ea41 010c 	orrle.w	r1, r1, ip
 80403d6:	4090      	lslle	r0, r2
 80403d8:	1ae4      	subs	r4, r4, r3
 80403da:	bfa2      	ittt	ge
 80403dc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80403e0:	4329      	orrge	r1, r5
 80403e2:	bd30      	popge	{r4, r5, pc}
 80403e4:	ea6f 0404 	mvn.w	r4, r4
 80403e8:	3c1f      	subs	r4, #31
 80403ea:	da1c      	bge.n	8040426 <__adddf3+0x1d2>
 80403ec:	340c      	adds	r4, #12
 80403ee:	dc0e      	bgt.n	804040e <__adddf3+0x1ba>
 80403f0:	f104 0414 	add.w	r4, r4, #20
 80403f4:	f1c4 0220 	rsb	r2, r4, #32
 80403f8:	fa20 f004 	lsr.w	r0, r0, r4
 80403fc:	fa01 f302 	lsl.w	r3, r1, r2
 8040400:	ea40 0003 	orr.w	r0, r0, r3
 8040404:	fa21 f304 	lsr.w	r3, r1, r4
 8040408:	ea45 0103 	orr.w	r1, r5, r3
 804040c:	bd30      	pop	{r4, r5, pc}
 804040e:	f1c4 040c 	rsb	r4, r4, #12
 8040412:	f1c4 0220 	rsb	r2, r4, #32
 8040416:	fa20 f002 	lsr.w	r0, r0, r2
 804041a:	fa01 f304 	lsl.w	r3, r1, r4
 804041e:	ea40 0003 	orr.w	r0, r0, r3
 8040422:	4629      	mov	r1, r5
 8040424:	bd30      	pop	{r4, r5, pc}
 8040426:	fa21 f004 	lsr.w	r0, r1, r4
 804042a:	4629      	mov	r1, r5
 804042c:	bd30      	pop	{r4, r5, pc}
 804042e:	f094 0f00 	teq	r4, #0
 8040432:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8040436:	bf06      	itte	eq
 8040438:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 804043c:	3401      	addeq	r4, #1
 804043e:	3d01      	subne	r5, #1
 8040440:	e74e      	b.n	80402e0 <__adddf3+0x8c>
 8040442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8040446:	bf18      	it	ne
 8040448:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 804044c:	d029      	beq.n	80404a2 <__adddf3+0x24e>
 804044e:	ea94 0f05 	teq	r4, r5
 8040452:	bf08      	it	eq
 8040454:	ea90 0f02 	teqeq	r0, r2
 8040458:	d005      	beq.n	8040466 <__adddf3+0x212>
 804045a:	ea54 0c00 	orrs.w	ip, r4, r0
 804045e:	bf04      	itt	eq
 8040460:	4619      	moveq	r1, r3
 8040462:	4610      	moveq	r0, r2
 8040464:	bd30      	pop	{r4, r5, pc}
 8040466:	ea91 0f03 	teq	r1, r3
 804046a:	bf1e      	ittt	ne
 804046c:	2100      	movne	r1, #0
 804046e:	2000      	movne	r0, #0
 8040470:	bd30      	popne	{r4, r5, pc}
 8040472:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8040476:	d105      	bne.n	8040484 <__adddf3+0x230>
 8040478:	0040      	lsls	r0, r0, #1
 804047a:	4149      	adcs	r1, r1
 804047c:	bf28      	it	cs
 804047e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8040482:	bd30      	pop	{r4, r5, pc}
 8040484:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8040488:	bf3c      	itt	cc
 804048a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 804048e:	bd30      	popcc	{r4, r5, pc}
 8040490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8040494:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8040498:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 804049c:	f04f 0000 	mov.w	r0, #0
 80404a0:	bd30      	pop	{r4, r5, pc}
 80404a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80404a6:	bf1a      	itte	ne
 80404a8:	4619      	movne	r1, r3
 80404aa:	4610      	movne	r0, r2
 80404ac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80404b0:	bf1c      	itt	ne
 80404b2:	460b      	movne	r3, r1
 80404b4:	4602      	movne	r2, r0
 80404b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80404ba:	bf06      	itte	eq
 80404bc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80404c0:	ea91 0f03 	teqeq	r1, r3
 80404c4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80404c8:	bd30      	pop	{r4, r5, pc}
 80404ca:	bf00      	nop

080404cc <__aeabi_ui2d>:
 80404cc:	f090 0f00 	teq	r0, #0
 80404d0:	bf04      	itt	eq
 80404d2:	2100      	moveq	r1, #0
 80404d4:	4770      	bxeq	lr
 80404d6:	b530      	push	{r4, r5, lr}
 80404d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80404dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80404e0:	f04f 0500 	mov.w	r5, #0
 80404e4:	f04f 0100 	mov.w	r1, #0
 80404e8:	e750      	b.n	804038c <__adddf3+0x138>
 80404ea:	bf00      	nop

080404ec <__aeabi_i2d>:
 80404ec:	f090 0f00 	teq	r0, #0
 80404f0:	bf04      	itt	eq
 80404f2:	2100      	moveq	r1, #0
 80404f4:	4770      	bxeq	lr
 80404f6:	b530      	push	{r4, r5, lr}
 80404f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80404fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8040500:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8040504:	bf48      	it	mi
 8040506:	4240      	negmi	r0, r0
 8040508:	f04f 0100 	mov.w	r1, #0
 804050c:	e73e      	b.n	804038c <__adddf3+0x138>
 804050e:	bf00      	nop

08040510 <__aeabi_f2d>:
 8040510:	0042      	lsls	r2, r0, #1
 8040512:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8040516:	ea4f 0131 	mov.w	r1, r1, rrx
 804051a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 804051e:	bf1f      	itttt	ne
 8040520:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8040524:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8040528:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 804052c:	4770      	bxne	lr
 804052e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8040532:	bf08      	it	eq
 8040534:	4770      	bxeq	lr
 8040536:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 804053a:	bf04      	itt	eq
 804053c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8040540:	4770      	bxeq	lr
 8040542:	b530      	push	{r4, r5, lr}
 8040544:	f44f 7460 	mov.w	r4, #896	; 0x380
 8040548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 804054c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8040550:	e71c      	b.n	804038c <__adddf3+0x138>
 8040552:	bf00      	nop

08040554 <__aeabi_ul2d>:
 8040554:	ea50 0201 	orrs.w	r2, r0, r1
 8040558:	bf08      	it	eq
 804055a:	4770      	bxeq	lr
 804055c:	b530      	push	{r4, r5, lr}
 804055e:	f04f 0500 	mov.w	r5, #0
 8040562:	e00a      	b.n	804057a <__aeabi_l2d+0x16>

08040564 <__aeabi_l2d>:
 8040564:	ea50 0201 	orrs.w	r2, r0, r1
 8040568:	bf08      	it	eq
 804056a:	4770      	bxeq	lr
 804056c:	b530      	push	{r4, r5, lr}
 804056e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8040572:	d502      	bpl.n	804057a <__aeabi_l2d+0x16>
 8040574:	4240      	negs	r0, r0
 8040576:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 804057a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 804057e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8040582:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8040586:	f43f aed8 	beq.w	804033a <__adddf3+0xe6>
 804058a:	f04f 0203 	mov.w	r2, #3
 804058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8040592:	bf18      	it	ne
 8040594:	3203      	addne	r2, #3
 8040596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 804059a:	bf18      	it	ne
 804059c:	3203      	addne	r2, #3
 804059e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80405a2:	f1c2 0320 	rsb	r3, r2, #32
 80405a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80405aa:	fa20 f002 	lsr.w	r0, r0, r2
 80405ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80405b2:	ea40 000e 	orr.w	r0, r0, lr
 80405b6:	fa21 f102 	lsr.w	r1, r1, r2
 80405ba:	4414      	add	r4, r2
 80405bc:	e6bd      	b.n	804033a <__adddf3+0xe6>
 80405be:	bf00      	nop

080405c0 <__aeabi_dmul>:
 80405c0:	b570      	push	{r4, r5, r6, lr}
 80405c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80405c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80405ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80405ce:	bf1d      	ittte	ne
 80405d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80405d4:	ea94 0f0c 	teqne	r4, ip
 80405d8:	ea95 0f0c 	teqne	r5, ip
 80405dc:	f000 f8de 	bleq	804079c <__aeabi_dmul+0x1dc>
 80405e0:	442c      	add	r4, r5
 80405e2:	ea81 0603 	eor.w	r6, r1, r3
 80405e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80405ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80405ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80405f2:	bf18      	it	ne
 80405f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80405f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80405fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8040600:	d038      	beq.n	8040674 <__aeabi_dmul+0xb4>
 8040602:	fba0 ce02 	umull	ip, lr, r0, r2
 8040606:	f04f 0500 	mov.w	r5, #0
 804060a:	fbe1 e502 	umlal	lr, r5, r1, r2
 804060e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8040612:	fbe0 e503 	umlal	lr, r5, r0, r3
 8040616:	f04f 0600 	mov.w	r6, #0
 804061a:	fbe1 5603 	umlal	r5, r6, r1, r3
 804061e:	f09c 0f00 	teq	ip, #0
 8040622:	bf18      	it	ne
 8040624:	f04e 0e01 	orrne.w	lr, lr, #1
 8040628:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 804062c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8040630:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8040634:	d204      	bcs.n	8040640 <__aeabi_dmul+0x80>
 8040636:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 804063a:	416d      	adcs	r5, r5
 804063c:	eb46 0606 	adc.w	r6, r6, r6
 8040640:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8040644:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8040648:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 804064c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8040650:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8040654:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8040658:	bf88      	it	hi
 804065a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 804065e:	d81e      	bhi.n	804069e <__aeabi_dmul+0xde>
 8040660:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8040664:	bf08      	it	eq
 8040666:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 804066a:	f150 0000 	adcs.w	r0, r0, #0
 804066e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8040672:	bd70      	pop	{r4, r5, r6, pc}
 8040674:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8040678:	ea46 0101 	orr.w	r1, r6, r1
 804067c:	ea40 0002 	orr.w	r0, r0, r2
 8040680:	ea81 0103 	eor.w	r1, r1, r3
 8040684:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8040688:	bfc2      	ittt	gt
 804068a:	ebd4 050c 	rsbsgt	r5, r4, ip
 804068e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8040692:	bd70      	popgt	{r4, r5, r6, pc}
 8040694:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8040698:	f04f 0e00 	mov.w	lr, #0
 804069c:	3c01      	subs	r4, #1
 804069e:	f300 80ab 	bgt.w	80407f8 <__aeabi_dmul+0x238>
 80406a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80406a6:	bfde      	ittt	le
 80406a8:	2000      	movle	r0, #0
 80406aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80406ae:	bd70      	pople	{r4, r5, r6, pc}
 80406b0:	f1c4 0400 	rsb	r4, r4, #0
 80406b4:	3c20      	subs	r4, #32
 80406b6:	da35      	bge.n	8040724 <__aeabi_dmul+0x164>
 80406b8:	340c      	adds	r4, #12
 80406ba:	dc1b      	bgt.n	80406f4 <__aeabi_dmul+0x134>
 80406bc:	f104 0414 	add.w	r4, r4, #20
 80406c0:	f1c4 0520 	rsb	r5, r4, #32
 80406c4:	fa00 f305 	lsl.w	r3, r0, r5
 80406c8:	fa20 f004 	lsr.w	r0, r0, r4
 80406cc:	fa01 f205 	lsl.w	r2, r1, r5
 80406d0:	ea40 0002 	orr.w	r0, r0, r2
 80406d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80406d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80406dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80406e0:	fa21 f604 	lsr.w	r6, r1, r4
 80406e4:	eb42 0106 	adc.w	r1, r2, r6
 80406e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80406ec:	bf08      	it	eq
 80406ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80406f2:	bd70      	pop	{r4, r5, r6, pc}
 80406f4:	f1c4 040c 	rsb	r4, r4, #12
 80406f8:	f1c4 0520 	rsb	r5, r4, #32
 80406fc:	fa00 f304 	lsl.w	r3, r0, r4
 8040700:	fa20 f005 	lsr.w	r0, r0, r5
 8040704:	fa01 f204 	lsl.w	r2, r1, r4
 8040708:	ea40 0002 	orr.w	r0, r0, r2
 804070c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8040710:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8040714:	f141 0100 	adc.w	r1, r1, #0
 8040718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 804071c:	bf08      	it	eq
 804071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8040722:	bd70      	pop	{r4, r5, r6, pc}
 8040724:	f1c4 0520 	rsb	r5, r4, #32
 8040728:	fa00 f205 	lsl.w	r2, r0, r5
 804072c:	ea4e 0e02 	orr.w	lr, lr, r2
 8040730:	fa20 f304 	lsr.w	r3, r0, r4
 8040734:	fa01 f205 	lsl.w	r2, r1, r5
 8040738:	ea43 0302 	orr.w	r3, r3, r2
 804073c:	fa21 f004 	lsr.w	r0, r1, r4
 8040740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8040744:	fa21 f204 	lsr.w	r2, r1, r4
 8040748:	ea20 0002 	bic.w	r0, r0, r2
 804074c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8040750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8040754:	bf08      	it	eq
 8040756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 804075a:	bd70      	pop	{r4, r5, r6, pc}
 804075c:	f094 0f00 	teq	r4, #0
 8040760:	d10f      	bne.n	8040782 <__aeabi_dmul+0x1c2>
 8040762:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8040766:	0040      	lsls	r0, r0, #1
 8040768:	eb41 0101 	adc.w	r1, r1, r1
 804076c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8040770:	bf08      	it	eq
 8040772:	3c01      	subeq	r4, #1
 8040774:	d0f7      	beq.n	8040766 <__aeabi_dmul+0x1a6>
 8040776:	ea41 0106 	orr.w	r1, r1, r6
 804077a:	f095 0f00 	teq	r5, #0
 804077e:	bf18      	it	ne
 8040780:	4770      	bxne	lr
 8040782:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8040786:	0052      	lsls	r2, r2, #1
 8040788:	eb43 0303 	adc.w	r3, r3, r3
 804078c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8040790:	bf08      	it	eq
 8040792:	3d01      	subeq	r5, #1
 8040794:	d0f7      	beq.n	8040786 <__aeabi_dmul+0x1c6>
 8040796:	ea43 0306 	orr.w	r3, r3, r6
 804079a:	4770      	bx	lr
 804079c:	ea94 0f0c 	teq	r4, ip
 80407a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80407a4:	bf18      	it	ne
 80407a6:	ea95 0f0c 	teqne	r5, ip
 80407aa:	d00c      	beq.n	80407c6 <__aeabi_dmul+0x206>
 80407ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80407b0:	bf18      	it	ne
 80407b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80407b6:	d1d1      	bne.n	804075c <__aeabi_dmul+0x19c>
 80407b8:	ea81 0103 	eor.w	r1, r1, r3
 80407bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80407c0:	f04f 0000 	mov.w	r0, #0
 80407c4:	bd70      	pop	{r4, r5, r6, pc}
 80407c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80407ca:	bf06      	itte	eq
 80407cc:	4610      	moveq	r0, r2
 80407ce:	4619      	moveq	r1, r3
 80407d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80407d4:	d019      	beq.n	804080a <__aeabi_dmul+0x24a>
 80407d6:	ea94 0f0c 	teq	r4, ip
 80407da:	d102      	bne.n	80407e2 <__aeabi_dmul+0x222>
 80407dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80407e0:	d113      	bne.n	804080a <__aeabi_dmul+0x24a>
 80407e2:	ea95 0f0c 	teq	r5, ip
 80407e6:	d105      	bne.n	80407f4 <__aeabi_dmul+0x234>
 80407e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80407ec:	bf1c      	itt	ne
 80407ee:	4610      	movne	r0, r2
 80407f0:	4619      	movne	r1, r3
 80407f2:	d10a      	bne.n	804080a <__aeabi_dmul+0x24a>
 80407f4:	ea81 0103 	eor.w	r1, r1, r3
 80407f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80407fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8040800:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8040804:	f04f 0000 	mov.w	r0, #0
 8040808:	bd70      	pop	{r4, r5, r6, pc}
 804080a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 804080e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8040812:	bd70      	pop	{r4, r5, r6, pc}

08040814 <__aeabi_ddiv>:
 8040814:	b570      	push	{r4, r5, r6, lr}
 8040816:	f04f 0cff 	mov.w	ip, #255	; 0xff
 804081a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 804081e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8040822:	bf1d      	ittte	ne
 8040824:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8040828:	ea94 0f0c 	teqne	r4, ip
 804082c:	ea95 0f0c 	teqne	r5, ip
 8040830:	f000 f8a7 	bleq	8040982 <__aeabi_ddiv+0x16e>
 8040834:	eba4 0405 	sub.w	r4, r4, r5
 8040838:	ea81 0e03 	eor.w	lr, r1, r3
 804083c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8040840:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8040844:	f000 8088 	beq.w	8040958 <__aeabi_ddiv+0x144>
 8040848:	ea4f 3303 	mov.w	r3, r3, lsl #12
 804084c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8040850:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8040854:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8040858:	ea4f 2202 	mov.w	r2, r2, lsl #8
 804085c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8040860:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8040864:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8040868:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 804086c:	429d      	cmp	r5, r3
 804086e:	bf08      	it	eq
 8040870:	4296      	cmpeq	r6, r2
 8040872:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8040876:	f504 7440 	add.w	r4, r4, #768	; 0x300
 804087a:	d202      	bcs.n	8040882 <__aeabi_ddiv+0x6e>
 804087c:	085b      	lsrs	r3, r3, #1
 804087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8040882:	1ab6      	subs	r6, r6, r2
 8040884:	eb65 0503 	sbc.w	r5, r5, r3
 8040888:	085b      	lsrs	r3, r3, #1
 804088a:	ea4f 0232 	mov.w	r2, r2, rrx
 804088e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8040892:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8040896:	ebb6 0e02 	subs.w	lr, r6, r2
 804089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 804089e:	bf22      	ittt	cs
 80408a0:	1ab6      	subcs	r6, r6, r2
 80408a2:	4675      	movcs	r5, lr
 80408a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80408a8:	085b      	lsrs	r3, r3, #1
 80408aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80408ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80408b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80408b6:	bf22      	ittt	cs
 80408b8:	1ab6      	subcs	r6, r6, r2
 80408ba:	4675      	movcs	r5, lr
 80408bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80408c0:	085b      	lsrs	r3, r3, #1
 80408c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80408c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80408ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80408ce:	bf22      	ittt	cs
 80408d0:	1ab6      	subcs	r6, r6, r2
 80408d2:	4675      	movcs	r5, lr
 80408d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80408d8:	085b      	lsrs	r3, r3, #1
 80408da:	ea4f 0232 	mov.w	r2, r2, rrx
 80408de:	ebb6 0e02 	subs.w	lr, r6, r2
 80408e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80408e6:	bf22      	ittt	cs
 80408e8:	1ab6      	subcs	r6, r6, r2
 80408ea:	4675      	movcs	r5, lr
 80408ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80408f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80408f4:	d018      	beq.n	8040928 <__aeabi_ddiv+0x114>
 80408f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80408fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80408fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8040902:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8040906:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 804090a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 804090e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8040912:	d1c0      	bne.n	8040896 <__aeabi_ddiv+0x82>
 8040914:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8040918:	d10b      	bne.n	8040932 <__aeabi_ddiv+0x11e>
 804091a:	ea41 0100 	orr.w	r1, r1, r0
 804091e:	f04f 0000 	mov.w	r0, #0
 8040922:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8040926:	e7b6      	b.n	8040896 <__aeabi_ddiv+0x82>
 8040928:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 804092c:	bf04      	itt	eq
 804092e:	4301      	orreq	r1, r0
 8040930:	2000      	moveq	r0, #0
 8040932:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8040936:	bf88      	it	hi
 8040938:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 804093c:	f63f aeaf 	bhi.w	804069e <__aeabi_dmul+0xde>
 8040940:	ebb5 0c03 	subs.w	ip, r5, r3
 8040944:	bf04      	itt	eq
 8040946:	ebb6 0c02 	subseq.w	ip, r6, r2
 804094a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 804094e:	f150 0000 	adcs.w	r0, r0, #0
 8040952:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8040956:	bd70      	pop	{r4, r5, r6, pc}
 8040958:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 804095c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8040960:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8040964:	bfc2      	ittt	gt
 8040966:	ebd4 050c 	rsbsgt	r5, r4, ip
 804096a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 804096e:	bd70      	popgt	{r4, r5, r6, pc}
 8040970:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8040974:	f04f 0e00 	mov.w	lr, #0
 8040978:	3c01      	subs	r4, #1
 804097a:	e690      	b.n	804069e <__aeabi_dmul+0xde>
 804097c:	ea45 0e06 	orr.w	lr, r5, r6
 8040980:	e68d      	b.n	804069e <__aeabi_dmul+0xde>
 8040982:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8040986:	ea94 0f0c 	teq	r4, ip
 804098a:	bf08      	it	eq
 804098c:	ea95 0f0c 	teqeq	r5, ip
 8040990:	f43f af3b 	beq.w	804080a <__aeabi_dmul+0x24a>
 8040994:	ea94 0f0c 	teq	r4, ip
 8040998:	d10a      	bne.n	80409b0 <__aeabi_ddiv+0x19c>
 804099a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 804099e:	f47f af34 	bne.w	804080a <__aeabi_dmul+0x24a>
 80409a2:	ea95 0f0c 	teq	r5, ip
 80409a6:	f47f af25 	bne.w	80407f4 <__aeabi_dmul+0x234>
 80409aa:	4610      	mov	r0, r2
 80409ac:	4619      	mov	r1, r3
 80409ae:	e72c      	b.n	804080a <__aeabi_dmul+0x24a>
 80409b0:	ea95 0f0c 	teq	r5, ip
 80409b4:	d106      	bne.n	80409c4 <__aeabi_ddiv+0x1b0>
 80409b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80409ba:	f43f aefd 	beq.w	80407b8 <__aeabi_dmul+0x1f8>
 80409be:	4610      	mov	r0, r2
 80409c0:	4619      	mov	r1, r3
 80409c2:	e722      	b.n	804080a <__aeabi_dmul+0x24a>
 80409c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80409c8:	bf18      	it	ne
 80409ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80409ce:	f47f aec5 	bne.w	804075c <__aeabi_dmul+0x19c>
 80409d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80409d6:	f47f af0d 	bne.w	80407f4 <__aeabi_dmul+0x234>
 80409da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80409de:	f47f aeeb 	bne.w	80407b8 <__aeabi_dmul+0x1f8>
 80409e2:	e712      	b.n	804080a <__aeabi_dmul+0x24a>

080409e4 <__gedf2>:
 80409e4:	f04f 3cff 	mov.w	ip, #4294967295
 80409e8:	e006      	b.n	80409f8 <__cmpdf2+0x4>
 80409ea:	bf00      	nop

080409ec <__ledf2>:
 80409ec:	f04f 0c01 	mov.w	ip, #1
 80409f0:	e002      	b.n	80409f8 <__cmpdf2+0x4>
 80409f2:	bf00      	nop

080409f4 <__cmpdf2>:
 80409f4:	f04f 0c01 	mov.w	ip, #1
 80409f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80409fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8040a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040a04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8040a08:	bf18      	it	ne
 8040a0a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8040a0e:	d01b      	beq.n	8040a48 <__cmpdf2+0x54>
 8040a10:	b001      	add	sp, #4
 8040a12:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8040a16:	bf0c      	ite	eq
 8040a18:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8040a1c:	ea91 0f03 	teqne	r1, r3
 8040a20:	bf02      	ittt	eq
 8040a22:	ea90 0f02 	teqeq	r0, r2
 8040a26:	2000      	moveq	r0, #0
 8040a28:	4770      	bxeq	lr
 8040a2a:	f110 0f00 	cmn.w	r0, #0
 8040a2e:	ea91 0f03 	teq	r1, r3
 8040a32:	bf58      	it	pl
 8040a34:	4299      	cmppl	r1, r3
 8040a36:	bf08      	it	eq
 8040a38:	4290      	cmpeq	r0, r2
 8040a3a:	bf2c      	ite	cs
 8040a3c:	17d8      	asrcs	r0, r3, #31
 8040a3e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8040a42:	f040 0001 	orr.w	r0, r0, #1
 8040a46:	4770      	bx	lr
 8040a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8040a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040a50:	d102      	bne.n	8040a58 <__cmpdf2+0x64>
 8040a52:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8040a56:	d107      	bne.n	8040a68 <__cmpdf2+0x74>
 8040a58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8040a5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040a60:	d1d6      	bne.n	8040a10 <__cmpdf2+0x1c>
 8040a62:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8040a66:	d0d3      	beq.n	8040a10 <__cmpdf2+0x1c>
 8040a68:	f85d 0b04 	ldr.w	r0, [sp], #4
 8040a6c:	4770      	bx	lr
 8040a6e:	bf00      	nop

08040a70 <__aeabi_cdrcmple>:
 8040a70:	4684      	mov	ip, r0
 8040a72:	4610      	mov	r0, r2
 8040a74:	4662      	mov	r2, ip
 8040a76:	468c      	mov	ip, r1
 8040a78:	4619      	mov	r1, r3
 8040a7a:	4663      	mov	r3, ip
 8040a7c:	e000      	b.n	8040a80 <__aeabi_cdcmpeq>
 8040a7e:	bf00      	nop

08040a80 <__aeabi_cdcmpeq>:
 8040a80:	b501      	push	{r0, lr}
 8040a82:	f7ff ffb7 	bl	80409f4 <__cmpdf2>
 8040a86:	2800      	cmp	r0, #0
 8040a88:	bf48      	it	mi
 8040a8a:	f110 0f00 	cmnmi.w	r0, #0
 8040a8e:	bd01      	pop	{r0, pc}

08040a90 <__aeabi_dcmpeq>:
 8040a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040a94:	f7ff fff4 	bl	8040a80 <__aeabi_cdcmpeq>
 8040a98:	bf0c      	ite	eq
 8040a9a:	2001      	moveq	r0, #1
 8040a9c:	2000      	movne	r0, #0
 8040a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8040aa2:	bf00      	nop

08040aa4 <__aeabi_dcmplt>:
 8040aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040aa8:	f7ff ffea 	bl	8040a80 <__aeabi_cdcmpeq>
 8040aac:	bf34      	ite	cc
 8040aae:	2001      	movcc	r0, #1
 8040ab0:	2000      	movcs	r0, #0
 8040ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8040ab6:	bf00      	nop

08040ab8 <__aeabi_dcmple>:
 8040ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040abc:	f7ff ffe0 	bl	8040a80 <__aeabi_cdcmpeq>
 8040ac0:	bf94      	ite	ls
 8040ac2:	2001      	movls	r0, #1
 8040ac4:	2000      	movhi	r0, #0
 8040ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8040aca:	bf00      	nop

08040acc <__aeabi_dcmpge>:
 8040acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040ad0:	f7ff ffce 	bl	8040a70 <__aeabi_cdrcmple>
 8040ad4:	bf94      	ite	ls
 8040ad6:	2001      	movls	r0, #1
 8040ad8:	2000      	movhi	r0, #0
 8040ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8040ade:	bf00      	nop

08040ae0 <__aeabi_dcmpgt>:
 8040ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040ae4:	f7ff ffc4 	bl	8040a70 <__aeabi_cdrcmple>
 8040ae8:	bf34      	ite	cc
 8040aea:	2001      	movcc	r0, #1
 8040aec:	2000      	movcs	r0, #0
 8040aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8040af2:	bf00      	nop

08040af4 <__aeabi_d2uiz>:
 8040af4:	004a      	lsls	r2, r1, #1
 8040af6:	d211      	bcs.n	8040b1c <__aeabi_d2uiz+0x28>
 8040af8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8040afc:	d211      	bcs.n	8040b22 <__aeabi_d2uiz+0x2e>
 8040afe:	d50d      	bpl.n	8040b1c <__aeabi_d2uiz+0x28>
 8040b00:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8040b04:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8040b08:	d40e      	bmi.n	8040b28 <__aeabi_d2uiz+0x34>
 8040b0a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8040b0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8040b12:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8040b16:	fa23 f002 	lsr.w	r0, r3, r2
 8040b1a:	4770      	bx	lr
 8040b1c:	f04f 0000 	mov.w	r0, #0
 8040b20:	4770      	bx	lr
 8040b22:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8040b26:	d102      	bne.n	8040b2e <__aeabi_d2uiz+0x3a>
 8040b28:	f04f 30ff 	mov.w	r0, #4294967295
 8040b2c:	4770      	bx	lr
 8040b2e:	f04f 0000 	mov.w	r0, #0
 8040b32:	4770      	bx	lr

08040b34 <__aeabi_uldivmod>:
 8040b34:	b953      	cbnz	r3, 8040b4c <__aeabi_uldivmod+0x18>
 8040b36:	b94a      	cbnz	r2, 8040b4c <__aeabi_uldivmod+0x18>
 8040b38:	2900      	cmp	r1, #0
 8040b3a:	bf08      	it	eq
 8040b3c:	2800      	cmpeq	r0, #0
 8040b3e:	bf1c      	itt	ne
 8040b40:	f04f 31ff 	movne.w	r1, #4294967295
 8040b44:	f04f 30ff 	movne.w	r0, #4294967295
 8040b48:	f000 b9b6 	b.w	8040eb8 <__aeabi_idiv0>
 8040b4c:	f1ad 0c08 	sub.w	ip, sp, #8
 8040b50:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8040b54:	f000 f83c 	bl	8040bd0 <__udivmoddi4>
 8040b58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040b5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8040b60:	b004      	add	sp, #16
 8040b62:	4770      	bx	lr

08040b64 <__aeabi_d2lz>:
 8040b64:	b538      	push	{r3, r4, r5, lr}
 8040b66:	2200      	movs	r2, #0
 8040b68:	2300      	movs	r3, #0
 8040b6a:	4604      	mov	r4, r0
 8040b6c:	460d      	mov	r5, r1
 8040b6e:	f7ff ff99 	bl	8040aa4 <__aeabi_dcmplt>
 8040b72:	b928      	cbnz	r0, 8040b80 <__aeabi_d2lz+0x1c>
 8040b74:	4620      	mov	r0, r4
 8040b76:	4629      	mov	r1, r5
 8040b78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8040b7c:	f000 b80a 	b.w	8040b94 <__aeabi_d2ulz>
 8040b80:	4620      	mov	r0, r4
 8040b82:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8040b86:	f000 f805 	bl	8040b94 <__aeabi_d2ulz>
 8040b8a:	4240      	negs	r0, r0
 8040b8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8040b90:	bd38      	pop	{r3, r4, r5, pc}
 8040b92:	bf00      	nop

08040b94 <__aeabi_d2ulz>:
 8040b94:	b5d0      	push	{r4, r6, r7, lr}
 8040b96:	2200      	movs	r2, #0
 8040b98:	4b0b      	ldr	r3, [pc, #44]	; (8040bc8 <__aeabi_d2ulz+0x34>)
 8040b9a:	4606      	mov	r6, r0
 8040b9c:	460f      	mov	r7, r1
 8040b9e:	f7ff fd0f 	bl	80405c0 <__aeabi_dmul>
 8040ba2:	f7ff ffa7 	bl	8040af4 <__aeabi_d2uiz>
 8040ba6:	4604      	mov	r4, r0
 8040ba8:	f7ff fc90 	bl	80404cc <__aeabi_ui2d>
 8040bac:	2200      	movs	r2, #0
 8040bae:	4b07      	ldr	r3, [pc, #28]	; (8040bcc <__aeabi_d2ulz+0x38>)
 8040bb0:	f7ff fd06 	bl	80405c0 <__aeabi_dmul>
 8040bb4:	4602      	mov	r2, r0
 8040bb6:	460b      	mov	r3, r1
 8040bb8:	4630      	mov	r0, r6
 8040bba:	4639      	mov	r1, r7
 8040bbc:	f7ff fb48 	bl	8040250 <__aeabi_dsub>
 8040bc0:	f7ff ff98 	bl	8040af4 <__aeabi_d2uiz>
 8040bc4:	4621      	mov	r1, r4
 8040bc6:	bdd0      	pop	{r4, r6, r7, pc}
 8040bc8:	3df00000 	.word	0x3df00000
 8040bcc:	41f00000 	.word	0x41f00000

08040bd0 <__udivmoddi4>:
 8040bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8040bd4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8040bd6:	4604      	mov	r4, r0
 8040bd8:	4688      	mov	r8, r1
 8040bda:	2b00      	cmp	r3, #0
 8040bdc:	f040 8084 	bne.w	8040ce8 <__udivmoddi4+0x118>
 8040be0:	428a      	cmp	r2, r1
 8040be2:	4617      	mov	r7, r2
 8040be4:	d943      	bls.n	8040c6e <__udivmoddi4+0x9e>
 8040be6:	fab2 f282 	clz	r2, r2
 8040bea:	b142      	cbz	r2, 8040bfe <__udivmoddi4+0x2e>
 8040bec:	f1c2 0020 	rsb	r0, r2, #32
 8040bf0:	4091      	lsls	r1, r2
 8040bf2:	4097      	lsls	r7, r2
 8040bf4:	fa24 f000 	lsr.w	r0, r4, r0
 8040bf8:	4094      	lsls	r4, r2
 8040bfa:	ea40 0801 	orr.w	r8, r0, r1
 8040bfe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8040c02:	0c23      	lsrs	r3, r4, #16
 8040c04:	fa1f fe87 	uxth.w	lr, r7
 8040c08:	fbb8 f6fc 	udiv	r6, r8, ip
 8040c0c:	fb0c 8116 	mls	r1, ip, r6, r8
 8040c10:	fb06 f00e 	mul.w	r0, r6, lr
 8040c14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8040c18:	4298      	cmp	r0, r3
 8040c1a:	d907      	bls.n	8040c2c <__udivmoddi4+0x5c>
 8040c1c:	18fb      	adds	r3, r7, r3
 8040c1e:	f106 31ff 	add.w	r1, r6, #4294967295
 8040c22:	d202      	bcs.n	8040c2a <__udivmoddi4+0x5a>
 8040c24:	4298      	cmp	r0, r3
 8040c26:	f200 8131 	bhi.w	8040e8c <__udivmoddi4+0x2bc>
 8040c2a:	460e      	mov	r6, r1
 8040c2c:	1a19      	subs	r1, r3, r0
 8040c2e:	b2a3      	uxth	r3, r4
 8040c30:	fbb1 f0fc 	udiv	r0, r1, ip
 8040c34:	fb0c 1110 	mls	r1, ip, r0, r1
 8040c38:	fb00 fe0e 	mul.w	lr, r0, lr
 8040c3c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8040c40:	45a6      	cmp	lr, r4
 8040c42:	d907      	bls.n	8040c54 <__udivmoddi4+0x84>
 8040c44:	193c      	adds	r4, r7, r4
 8040c46:	f100 33ff 	add.w	r3, r0, #4294967295
 8040c4a:	d202      	bcs.n	8040c52 <__udivmoddi4+0x82>
 8040c4c:	45a6      	cmp	lr, r4
 8040c4e:	f200 811a 	bhi.w	8040e86 <__udivmoddi4+0x2b6>
 8040c52:	4618      	mov	r0, r3
 8040c54:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8040c58:	eba4 040e 	sub.w	r4, r4, lr
 8040c5c:	2600      	movs	r6, #0
 8040c5e:	b11d      	cbz	r5, 8040c68 <__udivmoddi4+0x98>
 8040c60:	40d4      	lsrs	r4, r2
 8040c62:	2300      	movs	r3, #0
 8040c64:	e9c5 4300 	strd	r4, r3, [r5]
 8040c68:	4631      	mov	r1, r6
 8040c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8040c6e:	b902      	cbnz	r2, 8040c72 <__udivmoddi4+0xa2>
 8040c70:	deff      	udf	#255	; 0xff
 8040c72:	fab2 f282 	clz	r2, r2
 8040c76:	2a00      	cmp	r2, #0
 8040c78:	d152      	bne.n	8040d20 <__udivmoddi4+0x150>
 8040c7a:	1bcb      	subs	r3, r1, r7
 8040c7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8040c80:	fa1f f887 	uxth.w	r8, r7
 8040c84:	2601      	movs	r6, #1
 8040c86:	0c21      	lsrs	r1, r4, #16
 8040c88:	fbb3 fcfe 	udiv	ip, r3, lr
 8040c8c:	fb0e 301c 	mls	r0, lr, ip, r3
 8040c90:	fb08 f90c 	mul.w	r9, r8, ip
 8040c94:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8040c98:	4589      	cmp	r9, r1
 8040c9a:	d90b      	bls.n	8040cb4 <__udivmoddi4+0xe4>
 8040c9c:	1879      	adds	r1, r7, r1
 8040c9e:	f10c 33ff 	add.w	r3, ip, #4294967295
 8040ca2:	bf2c      	ite	cs
 8040ca4:	2001      	movcs	r0, #1
 8040ca6:	2000      	movcc	r0, #0
 8040ca8:	4589      	cmp	r9, r1
 8040caa:	d902      	bls.n	8040cb2 <__udivmoddi4+0xe2>
 8040cac:	2800      	cmp	r0, #0
 8040cae:	f000 80f0 	beq.w	8040e92 <__udivmoddi4+0x2c2>
 8040cb2:	469c      	mov	ip, r3
 8040cb4:	eba1 0109 	sub.w	r1, r1, r9
 8040cb8:	b2a3      	uxth	r3, r4
 8040cba:	fbb1 f0fe 	udiv	r0, r1, lr
 8040cbe:	fb0e 1110 	mls	r1, lr, r0, r1
 8040cc2:	fb08 f800 	mul.w	r8, r8, r0
 8040cc6:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8040cca:	45a0      	cmp	r8, r4
 8040ccc:	d907      	bls.n	8040cde <__udivmoddi4+0x10e>
 8040cce:	193c      	adds	r4, r7, r4
 8040cd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8040cd4:	d202      	bcs.n	8040cdc <__udivmoddi4+0x10c>
 8040cd6:	45a0      	cmp	r8, r4
 8040cd8:	f200 80d2 	bhi.w	8040e80 <__udivmoddi4+0x2b0>
 8040cdc:	4618      	mov	r0, r3
 8040cde:	eba4 0408 	sub.w	r4, r4, r8
 8040ce2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8040ce6:	e7ba      	b.n	8040c5e <__udivmoddi4+0x8e>
 8040ce8:	428b      	cmp	r3, r1
 8040cea:	d909      	bls.n	8040d00 <__udivmoddi4+0x130>
 8040cec:	2d00      	cmp	r5, #0
 8040cee:	f000 80be 	beq.w	8040e6e <__udivmoddi4+0x29e>
 8040cf2:	2600      	movs	r6, #0
 8040cf4:	e9c5 0100 	strd	r0, r1, [r5]
 8040cf8:	4630      	mov	r0, r6
 8040cfa:	4631      	mov	r1, r6
 8040cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8040d00:	fab3 f683 	clz	r6, r3
 8040d04:	2e00      	cmp	r6, #0
 8040d06:	d14d      	bne.n	8040da4 <__udivmoddi4+0x1d4>
 8040d08:	428b      	cmp	r3, r1
 8040d0a:	f0c0 80b3 	bcc.w	8040e74 <__udivmoddi4+0x2a4>
 8040d0e:	4282      	cmp	r2, r0
 8040d10:	f240 80b0 	bls.w	8040e74 <__udivmoddi4+0x2a4>
 8040d14:	4630      	mov	r0, r6
 8040d16:	2d00      	cmp	r5, #0
 8040d18:	d0a6      	beq.n	8040c68 <__udivmoddi4+0x98>
 8040d1a:	e9c5 4800 	strd	r4, r8, [r5]
 8040d1e:	e7a3      	b.n	8040c68 <__udivmoddi4+0x98>
 8040d20:	4097      	lsls	r7, r2
 8040d22:	f1c2 0320 	rsb	r3, r2, #32
 8040d26:	fa01 f002 	lsl.w	r0, r1, r2
 8040d2a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8040d2e:	40d9      	lsrs	r1, r3
 8040d30:	fa24 f303 	lsr.w	r3, r4, r3
 8040d34:	fa1f f887 	uxth.w	r8, r7
 8040d38:	4094      	lsls	r4, r2
 8040d3a:	4303      	orrs	r3, r0
 8040d3c:	fbb1 f0fe 	udiv	r0, r1, lr
 8040d40:	0c1e      	lsrs	r6, r3, #16
 8040d42:	fb0e 1110 	mls	r1, lr, r0, r1
 8040d46:	fb00 fc08 	mul.w	ip, r0, r8
 8040d4a:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
 8040d4e:	458c      	cmp	ip, r1
 8040d50:	d90e      	bls.n	8040d70 <__udivmoddi4+0x1a0>
 8040d52:	1879      	adds	r1, r7, r1
 8040d54:	f100 36ff 	add.w	r6, r0, #4294967295
 8040d58:	bf2c      	ite	cs
 8040d5a:	f04f 0901 	movcs.w	r9, #1
 8040d5e:	f04f 0900 	movcc.w	r9, #0
 8040d62:	458c      	cmp	ip, r1
 8040d64:	d903      	bls.n	8040d6e <__udivmoddi4+0x19e>
 8040d66:	f1b9 0f00 	cmp.w	r9, #0
 8040d6a:	f000 8096 	beq.w	8040e9a <__udivmoddi4+0x2ca>
 8040d6e:	4630      	mov	r0, r6
 8040d70:	eba1 010c 	sub.w	r1, r1, ip
 8040d74:	b29b      	uxth	r3, r3
 8040d76:	fbb1 f6fe 	udiv	r6, r1, lr
 8040d7a:	fb0e 1116 	mls	r1, lr, r6, r1
 8040d7e:	fb06 fc08 	mul.w	ip, r6, r8
 8040d82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8040d86:	458c      	cmp	ip, r1
 8040d88:	d907      	bls.n	8040d9a <__udivmoddi4+0x1ca>
 8040d8a:	1879      	adds	r1, r7, r1
 8040d8c:	f106 33ff 	add.w	r3, r6, #4294967295
 8040d90:	d202      	bcs.n	8040d98 <__udivmoddi4+0x1c8>
 8040d92:	458c      	cmp	ip, r1
 8040d94:	f200 8088 	bhi.w	8040ea8 <__udivmoddi4+0x2d8>
 8040d98:	461e      	mov	r6, r3
 8040d9a:	eba1 030c 	sub.w	r3, r1, ip
 8040d9e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8040da2:	e770      	b.n	8040c86 <__udivmoddi4+0xb6>
 8040da4:	f1c6 0720 	rsb	r7, r6, #32
 8040da8:	fa03 f406 	lsl.w	r4, r3, r6
 8040dac:	fa02 fc06 	lsl.w	ip, r2, r6
 8040db0:	fa01 fe06 	lsl.w	lr, r1, r6
 8040db4:	40fa      	lsrs	r2, r7
 8040db6:	fa20 f807 	lsr.w	r8, r0, r7
 8040dba:	40f9      	lsrs	r1, r7
 8040dbc:	fa00 f306 	lsl.w	r3, r0, r6
 8040dc0:	4322      	orrs	r2, r4
 8040dc2:	ea48 040e 	orr.w	r4, r8, lr
 8040dc6:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8040dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8040dce:	fa1f f982 	uxth.w	r9, r2
 8040dd2:	fbb1 faf8 	udiv	sl, r1, r8
 8040dd6:	fb08 111a 	mls	r1, r8, sl, r1
 8040dda:	fb0a f009 	mul.w	r0, sl, r9
 8040dde:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
 8040de2:	4570      	cmp	r0, lr
 8040de4:	d90e      	bls.n	8040e04 <__udivmoddi4+0x234>
 8040de6:	eb12 0e0e 	adds.w	lr, r2, lr
 8040dea:	f10a 31ff 	add.w	r1, sl, #4294967295
 8040dee:	bf2c      	ite	cs
 8040df0:	f04f 0b01 	movcs.w	fp, #1
 8040df4:	f04f 0b00 	movcc.w	fp, #0
 8040df8:	4570      	cmp	r0, lr
 8040dfa:	d902      	bls.n	8040e02 <__udivmoddi4+0x232>
 8040dfc:	f1bb 0f00 	cmp.w	fp, #0
 8040e00:	d04e      	beq.n	8040ea0 <__udivmoddi4+0x2d0>
 8040e02:	468a      	mov	sl, r1
 8040e04:	ebae 0e00 	sub.w	lr, lr, r0
 8040e08:	b2a4      	uxth	r4, r4
 8040e0a:	fbbe f0f8 	udiv	r0, lr, r8
 8040e0e:	fb08 ee10 	mls	lr, r8, r0, lr
 8040e12:	fb00 f909 	mul.w	r9, r0, r9
 8040e16:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
 8040e1a:	45f1      	cmp	r9, lr
 8040e1c:	d907      	bls.n	8040e2e <__udivmoddi4+0x25e>
 8040e1e:	eb12 0e0e 	adds.w	lr, r2, lr
 8040e22:	f100 31ff 	add.w	r1, r0, #4294967295
 8040e26:	d201      	bcs.n	8040e2c <__udivmoddi4+0x25c>
 8040e28:	45f1      	cmp	r9, lr
 8040e2a:	d840      	bhi.n	8040eae <__udivmoddi4+0x2de>
 8040e2c:	4608      	mov	r0, r1
 8040e2e:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
 8040e32:	ebae 0e09 	sub.w	lr, lr, r9
 8040e36:	fba0 890c 	umull	r8, r9, r0, ip
 8040e3a:	45ce      	cmp	lr, r9
 8040e3c:	4641      	mov	r1, r8
 8040e3e:	464c      	mov	r4, r9
 8040e40:	d302      	bcc.n	8040e48 <__udivmoddi4+0x278>
 8040e42:	d106      	bne.n	8040e52 <__udivmoddi4+0x282>
 8040e44:	4543      	cmp	r3, r8
 8040e46:	d204      	bcs.n	8040e52 <__udivmoddi4+0x282>
 8040e48:	3801      	subs	r0, #1
 8040e4a:	ebb8 010c 	subs.w	r1, r8, ip
 8040e4e:	eb69 0402 	sbc.w	r4, r9, r2
 8040e52:	b37d      	cbz	r5, 8040eb4 <__udivmoddi4+0x2e4>
 8040e54:	1a5a      	subs	r2, r3, r1
 8040e56:	eb6e 0e04 	sbc.w	lr, lr, r4
 8040e5a:	40f2      	lsrs	r2, r6
 8040e5c:	fa0e f707 	lsl.w	r7, lr, r7
 8040e60:	fa2e f306 	lsr.w	r3, lr, r6
 8040e64:	2600      	movs	r6, #0
 8040e66:	4317      	orrs	r7, r2
 8040e68:	e9c5 7300 	strd	r7, r3, [r5]
 8040e6c:	e6fc      	b.n	8040c68 <__udivmoddi4+0x98>
 8040e6e:	462e      	mov	r6, r5
 8040e70:	4628      	mov	r0, r5
 8040e72:	e6f9      	b.n	8040c68 <__udivmoddi4+0x98>
 8040e74:	1a84      	subs	r4, r0, r2
 8040e76:	eb61 0103 	sbc.w	r1, r1, r3
 8040e7a:	2001      	movs	r0, #1
 8040e7c:	4688      	mov	r8, r1
 8040e7e:	e74a      	b.n	8040d16 <__udivmoddi4+0x146>
 8040e80:	3802      	subs	r0, #2
 8040e82:	443c      	add	r4, r7
 8040e84:	e72b      	b.n	8040cde <__udivmoddi4+0x10e>
 8040e86:	3802      	subs	r0, #2
 8040e88:	443c      	add	r4, r7
 8040e8a:	e6e3      	b.n	8040c54 <__udivmoddi4+0x84>
 8040e8c:	3e02      	subs	r6, #2
 8040e8e:	443b      	add	r3, r7
 8040e90:	e6cc      	b.n	8040c2c <__udivmoddi4+0x5c>
 8040e92:	f1ac 0c02 	sub.w	ip, ip, #2
 8040e96:	4439      	add	r1, r7
 8040e98:	e70c      	b.n	8040cb4 <__udivmoddi4+0xe4>
 8040e9a:	3802      	subs	r0, #2
 8040e9c:	4439      	add	r1, r7
 8040e9e:	e767      	b.n	8040d70 <__udivmoddi4+0x1a0>
 8040ea0:	f1aa 0a02 	sub.w	sl, sl, #2
 8040ea4:	4496      	add	lr, r2
 8040ea6:	e7ad      	b.n	8040e04 <__udivmoddi4+0x234>
 8040ea8:	3e02      	subs	r6, #2
 8040eaa:	4439      	add	r1, r7
 8040eac:	e775      	b.n	8040d9a <__udivmoddi4+0x1ca>
 8040eae:	3802      	subs	r0, #2
 8040eb0:	4496      	add	lr, r2
 8040eb2:	e7bc      	b.n	8040e2e <__udivmoddi4+0x25e>
 8040eb4:	462e      	mov	r6, r5
 8040eb6:	e6d7      	b.n	8040c68 <__udivmoddi4+0x98>

08040eb8 <__aeabi_idiv0>:
 8040eb8:	4770      	bx	lr
 8040eba:	bf00      	nop

08040ebc <print>:
//    {
//    }
//
//}

static void print(unsigned char* str, int len) {
 8040ebc:	b580      	push	{r7, lr}
 8040ebe:	b082      	sub	sp, #8
 8040ec0:	af00      	add	r7, sp, #0
 8040ec2:	6078      	str	r0, [r7, #4]
 8040ec4:	6039      	str	r1, [r7, #0]

  if (HAL_UART_Transmit_IT(&huart1, (uint8_t *) str, len) != HAL_OK) {
 8040ec6:	683b      	ldr	r3, [r7, #0]
 8040ec8:	b29b      	uxth	r3, r3
 8040eca:	461a      	mov	r2, r3
 8040ecc:	6879      	ldr	r1, [r7, #4]
 8040ece:	480b      	ldr	r0, [pc, #44]	; (8040efc <print+0x40>)
 8040ed0:	f001 fe8c 	bl	8042bec <HAL_UART_Transmit_IT>
 8040ed4:	4603      	mov	r3, r0
 8040ed6:	2b00      	cmp	r3, #0
 8040ed8:	d001      	beq.n	8040ede <print+0x22>
    Error_Handler();
 8040eda:	f000 fa53 	bl	8041384 <Error_Handler>
  }

  while(HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY)
 8040ede:	bf00      	nop
 8040ee0:	4806      	ldr	r0, [pc, #24]	; (8040efc <print+0x40>)
 8040ee2:	f002 f95b 	bl	804319c <HAL_UART_GetState>
 8040ee6:	4603      	mov	r3, r0
 8040ee8:	2b20      	cmp	r3, #32
 8040eea:	d1f9      	bne.n	8040ee0 <print+0x24>
  {
  }
  // Reset transmission flag
  UartReady = HAL_UART_STATE_RESET;
 8040eec:	4b04      	ldr	r3, [pc, #16]	; (8040f00 <print+0x44>)
 8040eee:	2200      	movs	r2, #0
 8040ef0:	701a      	strb	r2, [r3, #0]

}
 8040ef2:	bf00      	nop
 8040ef4:	3708      	adds	r7, #8
 8040ef6:	46bd      	mov	sp, r7
 8040ef8:	bd80      	pop	{r7, pc}
 8040efa:	bf00      	nop
 8040efc:	20018268 	.word	0x20018268
 8040f00:	20018210 	.word	0x20018210

08040f04 <get_humidity>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

float get_humidity() {
 8040f04:	b480      	push	{r7}
 8040f06:	b083      	sub	sp, #12
 8040f08:	af00      	add	r7, sp, #0
	float humidity;
//	rx_from_uart(4);
	uint8_t reply[4] = {1,2,3,4};
 8040f0a:	4b17      	ldr	r3, [pc, #92]	; (8040f68 <get_humidity+0x64>)
 8040f0c:	603b      	str	r3, [r7, #0]
	humidity = reply[2];
 8040f0e:	78bb      	ldrb	r3, [r7, #2]
 8040f10:	ee07 3a90 	vmov	s15, r3
 8040f14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8040f18:	edc7 7a01 	vstr	s15, [r7, #4]
	humidity *= 256;
 8040f1c:	edd7 7a01 	vldr	s15, [r7, #4]
 8040f20:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8040f6c <get_humidity+0x68>
 8040f24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8040f28:	edc7 7a01 	vstr	s15, [r7, #4]
	humidity += reply[3];
 8040f2c:	78fb      	ldrb	r3, [r7, #3]
 8040f2e:	ee07 3a90 	vmov	s15, r3
 8040f32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8040f36:	ed97 7a01 	vldr	s14, [r7, #4]
 8040f3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8040f3e:	edc7 7a01 	vstr	s15, [r7, #4]
	humidity /= 10;
 8040f42:	ed97 7a01 	vldr	s14, [r7, #4]
 8040f46:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8040f4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8040f4e:	edc7 7a01 	vstr	s15, [r7, #4]
	return humidity;
 8040f52:	687b      	ldr	r3, [r7, #4]
 8040f54:	ee07 3a90 	vmov	s15, r3
}
 8040f58:	eeb0 0a67 	vmov.f32	s0, s15
 8040f5c:	370c      	adds	r7, #12
 8040f5e:	46bd      	mov	sp, r7
 8040f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040f64:	4770      	bx	lr
 8040f66:	bf00      	nop
 8040f68:	04030201 	.word	0x04030201
 8040f6c:	43800000 	.word	0x43800000

08040f70 <get_temp>:

float get_temp() {
 8040f70:	b480      	push	{r7}
 8040f72:	b085      	sub	sp, #20
 8040f74:	af00      	add	r7, sp, #0
	float temp;
//	rx_from_uart(6);
	uint8_t reply[6] = {1,2,3,0,0,9};
 8040f76:	4a1a      	ldr	r2, [pc, #104]	; (8040fe0 <get_temp+0x70>)
 8040f78:	1d3b      	adds	r3, r7, #4
 8040f7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8040f7e:	6018      	str	r0, [r3, #0]
 8040f80:	3304      	adds	r3, #4
 8040f82:	8019      	strh	r1, [r3, #0]
	temp = reply[4] & 0x7F;
 8040f84:	7a3b      	ldrb	r3, [r7, #8]
 8040f86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8040f8a:	ee07 3a90 	vmov	s15, r3
 8040f8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8040f92:	edc7 7a03 	vstr	s15, [r7, #12]
	temp *= 256;
 8040f96:	edd7 7a03 	vldr	s15, [r7, #12]
 8040f9a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8040fe4 <get_temp+0x74>
 8040f9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8040fa2:	edc7 7a03 	vstr	s15, [r7, #12]
	temp += reply[5];
 8040fa6:	7a7b      	ldrb	r3, [r7, #9]
 8040fa8:	ee07 3a90 	vmov	s15, r3
 8040fac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8040fb0:	ed97 7a03 	vldr	s14, [r7, #12]
 8040fb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8040fb8:	edc7 7a03 	vstr	s15, [r7, #12]
	temp /= 10;
 8040fbc:	ed97 7a03 	vldr	s14, [r7, #12]
 8040fc0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8040fc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8040fc8:	edc7 7a03 	vstr	s15, [r7, #12]
	return temp;
 8040fcc:	68fb      	ldr	r3, [r7, #12]
 8040fce:	ee07 3a90 	vmov	s15, r3
}
 8040fd2:	eeb0 0a67 	vmov.f32	s0, s15
 8040fd6:	3714      	adds	r7, #20
 8040fd8:	46bd      	mov	sp, r7
 8040fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040fde:	4770      	bx	lr
 8040fe0:	080470f8 	.word	0x080470f8
 8040fe4:	43800000 	.word	0x43800000

08040fe8 <check_temp>:

void check_temp(float temp) {
 8040fe8:	b5b0      	push	{r4, r5, r7, lr}
 8040fea:	b082      	sub	sp, #8
 8040fec:	af00      	add	r7, sp, #0
 8040fee:	ed87 0a01 	vstr	s0, [r7, #4]
	if (temp > target_temp + 0.5) {
 8040ff2:	6878      	ldr	r0, [r7, #4]
 8040ff4:	f7ff fa8c 	bl	8040510 <__aeabi_f2d>
 8040ff8:	4604      	mov	r4, r0
 8040ffa:	460d      	mov	r5, r1
 8040ffc:	4b28      	ldr	r3, [pc, #160]	; (80410a0 <check_temp+0xb8>)
 8040ffe:	681b      	ldr	r3, [r3, #0]
 8041000:	4618      	mov	r0, r3
 8041002:	f7ff fa85 	bl	8040510 <__aeabi_f2d>
 8041006:	f04f 0200 	mov.w	r2, #0
 804100a:	4b26      	ldr	r3, [pc, #152]	; (80410a4 <check_temp+0xbc>)
 804100c:	f7ff f922 	bl	8040254 <__adddf3>
 8041010:	4602      	mov	r2, r0
 8041012:	460b      	mov	r3, r1
 8041014:	4620      	mov	r0, r4
 8041016:	4629      	mov	r1, r5
 8041018:	f7ff fd62 	bl	8040ae0 <__aeabi_dcmpgt>
 804101c:	4603      	mov	r3, r0
 804101e:	2b00      	cmp	r3, #0
 8041020:	d00b      	beq.n	804103a <check_temp+0x52>
		if (!myled) {
 8041022:	4b21      	ldr	r3, [pc, #132]	; (80410a8 <check_temp+0xc0>)
 8041024:	681b      	ldr	r3, [r3, #0]
 8041026:	2b00      	cmp	r3, #0
 8041028:	d136      	bne.n	8041098 <check_temp+0xb0>
			print("AC ON!\r\n", sizeof("AC ON!\r\n"));
 804102a:	2109      	movs	r1, #9
 804102c:	481f      	ldr	r0, [pc, #124]	; (80410ac <check_temp+0xc4>)
 804102e:	f7ff ff45 	bl	8040ebc <print>
			myled = 1;
 8041032:	4b1d      	ldr	r3, [pc, #116]	; (80410a8 <check_temp+0xc0>)
 8041034:	2201      	movs	r2, #1
 8041036:	601a      	str	r2, [r3, #0]
		if (myled) {
			print("HEAT/AC OFF\r\n", sizeof("HEAT/AC OFF\r\n"));
			myled = 0;
		}
	}
}
 8041038:	e02e      	b.n	8041098 <check_temp+0xb0>
	else if (temp < target_temp - 0.5) {
 804103a:	6878      	ldr	r0, [r7, #4]
 804103c:	f7ff fa68 	bl	8040510 <__aeabi_f2d>
 8041040:	4604      	mov	r4, r0
 8041042:	460d      	mov	r5, r1
 8041044:	4b16      	ldr	r3, [pc, #88]	; (80410a0 <check_temp+0xb8>)
 8041046:	681b      	ldr	r3, [r3, #0]
 8041048:	4618      	mov	r0, r3
 804104a:	f7ff fa61 	bl	8040510 <__aeabi_f2d>
 804104e:	f04f 0200 	mov.w	r2, #0
 8041052:	4b14      	ldr	r3, [pc, #80]	; (80410a4 <check_temp+0xbc>)
 8041054:	f7ff f8fc 	bl	8040250 <__aeabi_dsub>
 8041058:	4602      	mov	r2, r0
 804105a:	460b      	mov	r3, r1
 804105c:	4620      	mov	r0, r4
 804105e:	4629      	mov	r1, r5
 8041060:	f7ff fd20 	bl	8040aa4 <__aeabi_dcmplt>
 8041064:	4603      	mov	r3, r0
 8041066:	2b00      	cmp	r3, #0
 8041068:	d00b      	beq.n	8041082 <check_temp+0x9a>
		if (!myled) {
 804106a:	4b0f      	ldr	r3, [pc, #60]	; (80410a8 <check_temp+0xc0>)
 804106c:	681b      	ldr	r3, [r3, #0]
 804106e:	2b00      	cmp	r3, #0
 8041070:	d112      	bne.n	8041098 <check_temp+0xb0>
			print("HEATER ON!\r\n", sizeof("HEATER ON!\r\n"));
 8041072:	210d      	movs	r1, #13
 8041074:	480e      	ldr	r0, [pc, #56]	; (80410b0 <check_temp+0xc8>)
 8041076:	f7ff ff21 	bl	8040ebc <print>
			myled = 1;
 804107a:	4b0b      	ldr	r3, [pc, #44]	; (80410a8 <check_temp+0xc0>)
 804107c:	2201      	movs	r2, #1
 804107e:	601a      	str	r2, [r3, #0]
}
 8041080:	e00a      	b.n	8041098 <check_temp+0xb0>
		if (myled) {
 8041082:	4b09      	ldr	r3, [pc, #36]	; (80410a8 <check_temp+0xc0>)
 8041084:	681b      	ldr	r3, [r3, #0]
 8041086:	2b00      	cmp	r3, #0
 8041088:	d006      	beq.n	8041098 <check_temp+0xb0>
			print("HEAT/AC OFF\r\n", sizeof("HEAT/AC OFF\r\n"));
 804108a:	210e      	movs	r1, #14
 804108c:	4809      	ldr	r0, [pc, #36]	; (80410b4 <check_temp+0xcc>)
 804108e:	f7ff ff15 	bl	8040ebc <print>
			myled = 0;
 8041092:	4b05      	ldr	r3, [pc, #20]	; (80410a8 <check_temp+0xc0>)
 8041094:	2200      	movs	r2, #0
 8041096:	601a      	str	r2, [r3, #0]
}
 8041098:	bf00      	nop
 804109a:	3708      	adds	r7, #8
 804109c:	46bd      	mov	sp, r7
 804109e:	bdb0      	pop	{r4, r5, r7, pc}
 80410a0:	20018000 	.word	0x20018000
 80410a4:	3fe00000 	.word	0x3fe00000
 80410a8:	2001820c 	.word	0x2001820c
 80410ac:	08047100 	.word	0x08047100
 80410b0:	0804710c 	.word	0x0804710c
 80410b4:	0804711c 	.word	0x0804711c

080410b8 <get_new_temp>:

float get_new_temp() {
 80410b8:	b580      	push	{r7, lr}
 80410ba:	b088      	sub	sp, #32
 80410bc:	af00      	add	r7, sp, #0
	float new_temp = 0.0;
 80410be:	f04f 0300 	mov.w	r3, #0
 80410c2:	61bb      	str	r3, [r7, #24]

	char buf[16];
	int i = 0;
 80410c4:	2300      	movs	r3, #0
 80410c6:	61fb      	str	r3, [r7, #28]
	char c;
	while (1) {
		c=0xd;
 80410c8:	230d      	movs	r3, #13
 80410ca:	75fb      	strb	r3, [r7, #23]
//		rx_from_uart(2, buf);
		strcpy(buf, "12");
 80410cc:	1d3b      	adds	r3, r7, #4
 80410ce:	4a1e      	ldr	r2, [pc, #120]	; (8041148 <get_new_temp+0x90>)
 80410d0:	6812      	ldr	r2, [r2, #0]
 80410d2:	4611      	mov	r1, r2
 80410d4:	8019      	strh	r1, [r3, #0]
 80410d6:	3302      	adds	r3, #2
 80410d8:	0c12      	lsrs	r2, r2, #16
 80410da:	701a      	strb	r2, [r3, #0]
		if (c == 0)
 80410dc:	7dfb      	ldrb	r3, [r7, #23]
 80410de:	2b00      	cmp	r3, #0
 80410e0:	d028      	beq.n	8041134 <get_new_temp+0x7c>
			continue;
		else if (c == 0xd) {
 80410e2:	7dfb      	ldrb	r3, [r7, #23]
 80410e4:	2b0d      	cmp	r3, #13
 80410e6:	d11c      	bne.n	8041122 <get_new_temp+0x6a>
			buf[i] = 0;
 80410e8:	1d3a      	adds	r2, r7, #4
 80410ea:	69fb      	ldr	r3, [r7, #28]
 80410ec:	4413      	add	r3, r2
 80410ee:	2200      	movs	r2, #0
 80410f0:	701a      	strb	r2, [r3, #0]
			new_temp = atof(buf);
 80410f2:	1d3b      	adds	r3, r7, #4
 80410f4:	4618      	mov	r0, r3
 80410f6:	f002 ff64 	bl	8043fc2 <atof>
 80410fa:	ee07 0a90 	vmov	s15, r0
 80410fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8041102:	edc7 7a06 	vstr	s15, [r7, #24]
			sprintf(OutBuf, "Temp set to %2f\r\n", new_temp);
 8041106:	69b8      	ldr	r0, [r7, #24]
 8041108:	f7ff fa02 	bl	8040510 <__aeabi_f2d>
 804110c:	4602      	mov	r2, r0
 804110e:	460b      	mov	r3, r1
 8041110:	490e      	ldr	r1, [pc, #56]	; (804114c <get_new_temp+0x94>)
 8041112:	480f      	ldr	r0, [pc, #60]	; (8041150 <get_new_temp+0x98>)
 8041114:	f003 f882 	bl	804421c <siprintf>
			print((uint8_t *)OutBuf, sizeof(OutBuf));
 8041118:	2132      	movs	r1, #50	; 0x32
 804111a:	480d      	ldr	r0, [pc, #52]	; (8041150 <get_new_temp+0x98>)
 804111c:	f7ff fece 	bl	8040ebc <print>
			break;
 8041120:	e00a      	b.n	8041138 <get_new_temp+0x80>
		}
		else {
			buf[i] = c;
 8041122:	1d3a      	adds	r2, r7, #4
 8041124:	69fb      	ldr	r3, [r7, #28]
 8041126:	4413      	add	r3, r2
 8041128:	7dfa      	ldrb	r2, [r7, #23]
 804112a:	701a      	strb	r2, [r3, #0]
			i++;
 804112c:	69fb      	ldr	r3, [r7, #28]
 804112e:	3301      	adds	r3, #1
 8041130:	61fb      	str	r3, [r7, #28]
 8041132:	e7c9      	b.n	80410c8 <get_new_temp+0x10>
			continue;
 8041134:	bf00      	nop
	while (1) {
 8041136:	e7c7      	b.n	80410c8 <get_new_temp+0x10>
		}
	}
	return new_temp;
 8041138:	69bb      	ldr	r3, [r7, #24]
 804113a:	ee07 3a90 	vmov	s15, r3
}
 804113e:	eeb0 0a67 	vmov.f32	s0, s15
 8041142:	3720      	adds	r7, #32
 8041144:	46bd      	mov	sp, r7
 8041146:	bd80      	pop	{r7, pc}
 8041148:	0804712c 	.word	0x0804712c
 804114c:	08047130 	.word	0x08047130
 8041150:	20018220 	.word	0x20018220

08041154 <init>:


/* USER CODE END 0 */

void init(){
 8041154:	b580      	push	{r7, lr}
 8041156:	af00      	add	r7, sp, #0

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8041158:	f000 fb2c 	bl	80417b4 <HAL_Init>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 804115c:	f000 f8ee 	bl	804133c <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8041160:	f000 f8a0 	bl	80412a4 <MX_USART1_UART_Init>
	MX_MBEDTLS_Init();
 8041164:	f002 ff26 	bl	8043fb4 <MX_MBEDTLS_Init>
	BSP_LED_Init(LED_GREEN_Pin);
 8041168:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 804116c:	f000 fac4 	bl	80416f8 <BSP_LED_Init>
   
 }
 8041170:	bf00      	nop
 8041172:	bd80      	pop	{r7, pc}

08041174 <main>:
// void test_ptr(int *ptr){
//   *ptr += 1;

// }

int main(){
 8041174:	b580      	push	{r7, lr}
 8041176:	af00      	add	r7, sp, #0

  init();
 8041178:	f7ff ffec 	bl	8041154 <init>
  main_logic();
 804117c:	f000 f804 	bl	8041188 <main_logic>
  return 0;
 8041180:	2300      	movs	r3, #0
}
 8041182:	4618      	mov	r0, r3
 8041184:	bd80      	pop	{r7, pc}
	...

08041188 <main_logic>:



int main_logic(void)
{
 8041188:	b580      	push	{r7, lr}
 804118a:	b086      	sub	sp, #24
 804118c:	af00      	add	r7, sp, #0



  /* USER CODE BEGIN Init */
  int cmd;
  print("Booting firmware...\r\n", sizeof("Booting firmware...\r\n"));
 804118e:	2116      	movs	r1, #22
 8041190:	483a      	ldr	r0, [pc, #232]	; (804127c <main_logic+0xf4>)
 8041192:	f7ff fe93 	bl	8040ebc <print>
  HAL_Delay(5);
 8041196:	2005      	movs	r0, #5
 8041198:	f000 fb82 	bl	80418a0 <HAL_Delay>
  print("Booted!\r\n", sizeof("Booted!\r\n"));
 804119c:	210a      	movs	r1, #10
 804119e:	4838      	ldr	r0, [pc, #224]	; (8041280 <main_logic+0xf8>)
 80411a0:	f7ff fe8c 	bl	8040ebc <print>

  while (1) {

	print("Reading sensor...\r\n", sizeof("Reading sensor...\r\n"));
 80411a4:	2114      	movs	r1, #20
 80411a6:	4837      	ldr	r0, [pc, #220]	; (8041284 <main_logic+0xfc>)
 80411a8:	f7ff fe88 	bl	8040ebc <print>
	float temp;
	float humidity;

	uint32_t start, end;

	start = HAL_GetTick();
 80411ac:	f000 fb6c 	bl	8041888 <HAL_GetTick>
 80411b0:	6178      	str	r0, [r7, #20]
	sprintf(OutBuf, "start: %u\r\n", start);
 80411b2:	697a      	ldr	r2, [r7, #20]
 80411b4:	4934      	ldr	r1, [pc, #208]	; (8041288 <main_logic+0x100>)
 80411b6:	4835      	ldr	r0, [pc, #212]	; (804128c <main_logic+0x104>)
 80411b8:	f003 f830 	bl	804421c <siprintf>
	print((uint8_t *)OutBuf, sizeof(OutBuf));
 80411bc:	2132      	movs	r1, #50	; 0x32
 80411be:	4833      	ldr	r0, [pc, #204]	; (804128c <main_logic+0x104>)
 80411c0:	f7ff fe7c 	bl	8040ebc <print>

//	rx_from_uart(1, cmd);

	cmd = 1;
 80411c4:	2301      	movs	r3, #1
 80411c6:	613b      	str	r3, [r7, #16]

	switch (cmd) {
 80411c8:	693b      	ldr	r3, [r7, #16]
 80411ca:	2b03      	cmp	r3, #3
 80411cc:	d031      	beq.n	8041232 <main_logic+0xaa>
 80411ce:	693b      	ldr	r3, [r7, #16]
 80411d0:	2b03      	cmp	r3, #3
 80411d2:	dc36      	bgt.n	8041242 <main_logic+0xba>
 80411d4:	693b      	ldr	r3, [r7, #16]
 80411d6:	2b01      	cmp	r3, #1
 80411d8:	d003      	beq.n	80411e2 <main_logic+0x5a>
 80411da:	693b      	ldr	r3, [r7, #16]
 80411dc:	2b02      	cmp	r3, #2
 80411de:	d016      	beq.n	804120e <main_logic+0x86>
 80411e0:	e02f      	b.n	8041242 <main_logic+0xba>
		case 1:
			temp = get_temp();
 80411e2:	f7ff fec5 	bl	8040f70 <get_temp>
 80411e6:	ed87 0a02 	vstr	s0, [r7, #8]
			check_temp(temp);
 80411ea:	ed97 0a02 	vldr	s0, [r7, #8]
 80411ee:	f7ff fefb 	bl	8040fe8 <check_temp>
			sprintf(OutBuf, "%2f\r\n", temp);
 80411f2:	68b8      	ldr	r0, [r7, #8]
 80411f4:	f7ff f98c 	bl	8040510 <__aeabi_f2d>
 80411f8:	4602      	mov	r2, r0
 80411fa:	460b      	mov	r3, r1
 80411fc:	4924      	ldr	r1, [pc, #144]	; (8041290 <main_logic+0x108>)
 80411fe:	4823      	ldr	r0, [pc, #140]	; (804128c <main_logic+0x104>)
 8041200:	f003 f80c 	bl	804421c <siprintf>
			print((uint8_t *)OutBuf, sizeof(OutBuf));
 8041204:	2132      	movs	r1, #50	; 0x32
 8041206:	4821      	ldr	r0, [pc, #132]	; (804128c <main_logic+0x104>)
 8041208:	f7ff fe58 	bl	8040ebc <print>
			break;
 804120c:	e019      	b.n	8041242 <main_logic+0xba>
		case 2:
			humidity = get_humidity();
 804120e:	f7ff fe79 	bl	8040f04 <get_humidity>
 8041212:	ed87 0a03 	vstr	s0, [r7, #12]
			sprintf(OutBuf, "%2f\r\n", humidity);
 8041216:	68f8      	ldr	r0, [r7, #12]
 8041218:	f7ff f97a 	bl	8040510 <__aeabi_f2d>
 804121c:	4602      	mov	r2, r0
 804121e:	460b      	mov	r3, r1
 8041220:	491b      	ldr	r1, [pc, #108]	; (8041290 <main_logic+0x108>)
 8041222:	481a      	ldr	r0, [pc, #104]	; (804128c <main_logic+0x104>)
 8041224:	f002 fffa 	bl	804421c <siprintf>
			print((uint8_t *)OutBuf, sizeof(OutBuf));
 8041228:	2132      	movs	r1, #50	; 0x32
 804122a:	4818      	ldr	r0, [pc, #96]	; (804128c <main_logic+0x104>)
 804122c:	f7ff fe46 	bl	8040ebc <print>
			break;
 8041230:	e007      	b.n	8041242 <main_logic+0xba>
		case 3:
			target_temp = get_new_temp();
 8041232:	f7ff ff41 	bl	80410b8 <get_new_temp>
 8041236:	eef0 7a40 	vmov.f32	s15, s0
 804123a:	4b16      	ldr	r3, [pc, #88]	; (8041294 <main_logic+0x10c>)
 804123c:	edc3 7a00 	vstr	s15, [r3]
			break;
 8041240:	bf00      	nop
      }

	  end = HAL_GetTick();
 8041242:	f000 fb21 	bl	8041888 <HAL_GetTick>
 8041246:	6078      	str	r0, [r7, #4]
	  sprintf(OutBuf, "end: %u\r\n", end);
 8041248:	687a      	ldr	r2, [r7, #4]
 804124a:	4913      	ldr	r1, [pc, #76]	; (8041298 <main_logic+0x110>)
 804124c:	480f      	ldr	r0, [pc, #60]	; (804128c <main_logic+0x104>)
 804124e:	f002 ffe5 	bl	804421c <siprintf>
	  print((uint8_t *)OutBuf, sizeof(OutBuf));
 8041252:	2132      	movs	r1, #50	; 0x32
 8041254:	480d      	ldr	r0, [pc, #52]	; (804128c <main_logic+0x104>)
 8041256:	f7ff fe31 	bl	8040ebc <print>

	  sprintf(OutBuf, "duration: %ld\r\n", (end-start)/200);
 804125a:	687a      	ldr	r2, [r7, #4]
 804125c:	697b      	ldr	r3, [r7, #20]
 804125e:	1ad3      	subs	r3, r2, r3
 8041260:	4a0e      	ldr	r2, [pc, #56]	; (804129c <main_logic+0x114>)
 8041262:	fba2 2303 	umull	r2, r3, r2, r3
 8041266:	099b      	lsrs	r3, r3, #6
 8041268:	461a      	mov	r2, r3
 804126a:	490d      	ldr	r1, [pc, #52]	; (80412a0 <main_logic+0x118>)
 804126c:	4807      	ldr	r0, [pc, #28]	; (804128c <main_logic+0x104>)
 804126e:	f002 ffd5 	bl	804421c <siprintf>
	  print((uint8_t *)OutBuf, sizeof(OutBuf));
 8041272:	2132      	movs	r1, #50	; 0x32
 8041274:	4805      	ldr	r0, [pc, #20]	; (804128c <main_logic+0x104>)
 8041276:	f7ff fe21 	bl	8040ebc <print>
  while (1) {
 804127a:	e793      	b.n	80411a4 <main_logic+0x1c>
 804127c:	08047144 	.word	0x08047144
 8041280:	0804715c 	.word	0x0804715c
 8041284:	08047168 	.word	0x08047168
 8041288:	0804717c 	.word	0x0804717c
 804128c:	20018220 	.word	0x20018220
 8041290:	08047188 	.word	0x08047188
 8041294:	20018000 	.word	0x20018000
 8041298:	08047190 	.word	0x08047190
 804129c:	51eb851f 	.word	0x51eb851f
 80412a0:	0804719c 	.word	0x0804719c

080412a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80412a4:	b580      	push	{r7, lr}
 80412a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80412a8:	4b22      	ldr	r3, [pc, #136]	; (8041334 <MX_USART1_UART_Init+0x90>)
 80412aa:	4a23      	ldr	r2, [pc, #140]	; (8041338 <MX_USART1_UART_Init+0x94>)
 80412ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80412ae:	4b21      	ldr	r3, [pc, #132]	; (8041334 <MX_USART1_UART_Init+0x90>)
 80412b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80412b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80412b6:	4b1f      	ldr	r3, [pc, #124]	; (8041334 <MX_USART1_UART_Init+0x90>)
 80412b8:	2200      	movs	r2, #0
 80412ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80412bc:	4b1d      	ldr	r3, [pc, #116]	; (8041334 <MX_USART1_UART_Init+0x90>)
 80412be:	2200      	movs	r2, #0
 80412c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80412c2:	4b1c      	ldr	r3, [pc, #112]	; (8041334 <MX_USART1_UART_Init+0x90>)
 80412c4:	2200      	movs	r2, #0
 80412c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80412c8:	4b1a      	ldr	r3, [pc, #104]	; (8041334 <MX_USART1_UART_Init+0x90>)
 80412ca:	220c      	movs	r2, #12
 80412cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80412ce:	4b19      	ldr	r3, [pc, #100]	; (8041334 <MX_USART1_UART_Init+0x90>)
 80412d0:	2200      	movs	r2, #0
 80412d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80412d4:	4b17      	ldr	r3, [pc, #92]	; (8041334 <MX_USART1_UART_Init+0x90>)
 80412d6:	2200      	movs	r2, #0
 80412d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80412da:	4b16      	ldr	r3, [pc, #88]	; (8041334 <MX_USART1_UART_Init+0x90>)
 80412dc:	2200      	movs	r2, #0
 80412de:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80412e0:	4b14      	ldr	r3, [pc, #80]	; (8041334 <MX_USART1_UART_Init+0x90>)
 80412e2:	2200      	movs	r2, #0
 80412e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80412e6:	4b13      	ldr	r3, [pc, #76]	; (8041334 <MX_USART1_UART_Init+0x90>)
 80412e8:	2200      	movs	r2, #0
 80412ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80412ec:	4811      	ldr	r0, [pc, #68]	; (8041334 <MX_USART1_UART_Init+0x90>)
 80412ee:	f001 fc2d 	bl	8042b4c <HAL_UART_Init>
 80412f2:	4603      	mov	r3, r0
 80412f4:	2b00      	cmp	r3, #0
 80412f6:	d001      	beq.n	80412fc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80412f8:	f000 f844 	bl	8041384 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80412fc:	2100      	movs	r1, #0
 80412fe:	480d      	ldr	r0, [pc, #52]	; (8041334 <MX_USART1_UART_Init+0x90>)
 8041300:	f002 fd74 	bl	8043dec <HAL_UARTEx_SetTxFifoThreshold>
 8041304:	4603      	mov	r3, r0
 8041306:	2b00      	cmp	r3, #0
 8041308:	d001      	beq.n	804130e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 804130a:	f000 f83b 	bl	8041384 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 804130e:	2100      	movs	r1, #0
 8041310:	4808      	ldr	r0, [pc, #32]	; (8041334 <MX_USART1_UART_Init+0x90>)
 8041312:	f002 fda9 	bl	8043e68 <HAL_UARTEx_SetRxFifoThreshold>
 8041316:	4603      	mov	r3, r0
 8041318:	2b00      	cmp	r3, #0
 804131a:	d001      	beq.n	8041320 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 804131c:	f000 f832 	bl	8041384 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8041320:	4804      	ldr	r0, [pc, #16]	; (8041334 <MX_USART1_UART_Init+0x90>)
 8041322:	f002 fd2a 	bl	8043d7a <HAL_UARTEx_DisableFifoMode>
 8041326:	4603      	mov	r3, r0
 8041328:	2b00      	cmp	r3, #0
 804132a:	d001      	beq.n	8041330 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 804132c:	f000 f82a 	bl	8041384 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8041330:	bf00      	nop
 8041332:	bd80      	pop	{r7, pc}
 8041334:	20018268 	.word	0x20018268
 8041338:	40013800 	.word	0x40013800

0804133c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 804133c:	b480      	push	{r7}
 804133e:	b083      	sub	sp, #12
 8041340:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8041342:	4b0f      	ldr	r3, [pc, #60]	; (8041380 <MX_GPIO_Init+0x44>)
 8041344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8041346:	4a0e      	ldr	r2, [pc, #56]	; (8041380 <MX_GPIO_Init+0x44>)
 8041348:	f043 0304 	orr.w	r3, r3, #4
 804134c:	64d3      	str	r3, [r2, #76]	; 0x4c
 804134e:	4b0c      	ldr	r3, [pc, #48]	; (8041380 <MX_GPIO_Init+0x44>)
 8041350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8041352:	f003 0304 	and.w	r3, r3, #4
 8041356:	607b      	str	r3, [r7, #4]
 8041358:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 804135a:	4b09      	ldr	r3, [pc, #36]	; (8041380 <MX_GPIO_Init+0x44>)
 804135c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804135e:	4a08      	ldr	r2, [pc, #32]	; (8041380 <MX_GPIO_Init+0x44>)
 8041360:	f043 0301 	orr.w	r3, r3, #1
 8041364:	64d3      	str	r3, [r2, #76]	; 0x4c
 8041366:	4b06      	ldr	r3, [pc, #24]	; (8041380 <MX_GPIO_Init+0x44>)
 8041368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804136a:	f003 0301 	and.w	r3, r3, #1
 804136e:	603b      	str	r3, [r7, #0]
 8041370:	683b      	ldr	r3, [r7, #0]

}
 8041372:	bf00      	nop
 8041374:	370c      	adds	r7, #12
 8041376:	46bd      	mov	sp, r7
 8041378:	f85d 7b04 	ldr.w	r7, [sp], #4
 804137c:	4770      	bx	lr
 804137e:	bf00      	nop
 8041380:	40021000 	.word	0x40021000

08041384 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8041384:	b480      	push	{r7}
 8041386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8041388:	bf00      	nop
 804138a:	46bd      	mov	sp, r7
 804138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041390:	4770      	bx	lr
	...

08041394 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8041394:	b480      	push	{r7}
 8041396:	b083      	sub	sp, #12
 8041398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 804139a:	4b0f      	ldr	r3, [pc, #60]	; (80413d8 <HAL_MspInit+0x44>)
 804139c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804139e:	4a0e      	ldr	r2, [pc, #56]	; (80413d8 <HAL_MspInit+0x44>)
 80413a0:	f043 0301 	orr.w	r3, r3, #1
 80413a4:	6613      	str	r3, [r2, #96]	; 0x60
 80413a6:	4b0c      	ldr	r3, [pc, #48]	; (80413d8 <HAL_MspInit+0x44>)
 80413a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80413aa:	f003 0301 	and.w	r3, r3, #1
 80413ae:	607b      	str	r3, [r7, #4]
 80413b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80413b2:	4b09      	ldr	r3, [pc, #36]	; (80413d8 <HAL_MspInit+0x44>)
 80413b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80413b6:	4a08      	ldr	r2, [pc, #32]	; (80413d8 <HAL_MspInit+0x44>)
 80413b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80413bc:	6593      	str	r3, [r2, #88]	; 0x58
 80413be:	4b06      	ldr	r3, [pc, #24]	; (80413d8 <HAL_MspInit+0x44>)
 80413c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80413c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80413c6:	603b      	str	r3, [r7, #0]
 80413c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80413ca:	bf00      	nop
 80413cc:	370c      	adds	r7, #12
 80413ce:	46bd      	mov	sp, r7
 80413d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80413d4:	4770      	bx	lr
 80413d6:	bf00      	nop
 80413d8:	40021000 	.word	0x40021000

080413dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80413dc:	b580      	push	{r7, lr}
 80413de:	b0ae      	sub	sp, #184	; 0xb8
 80413e0:	af00      	add	r7, sp, #0
 80413e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80413e4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80413e8:	2200      	movs	r2, #0
 80413ea:	601a      	str	r2, [r3, #0]
 80413ec:	605a      	str	r2, [r3, #4]
 80413ee:	609a      	str	r2, [r3, #8]
 80413f0:	60da      	str	r2, [r3, #12]
 80413f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80413f4:	f107 0310 	add.w	r3, r7, #16
 80413f8:	2294      	movs	r2, #148	; 0x94
 80413fa:	2100      	movs	r1, #0
 80413fc:	4618      	mov	r0, r3
 80413fe:	f002 fe3c 	bl	804407a <memset>
  if(huart->Instance==USART1)
 8041402:	687b      	ldr	r3, [r7, #4]
 8041404:	681b      	ldr	r3, [r3, #0]
 8041406:	4a25      	ldr	r2, [pc, #148]	; (804149c <HAL_UART_MspInit+0xc0>)
 8041408:	4293      	cmp	r3, r2
 804140a:	d143      	bne.n	8041494 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 804140c:	2301      	movs	r3, #1
 804140e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8041410:	2300      	movs	r3, #0
 8041412:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8041414:	f107 0310 	add.w	r3, r7, #16
 8041418:	4618      	mov	r0, r3
 804141a:	f000 feb1 	bl	8042180 <HAL_RCCEx_PeriphCLKConfig>
 804141e:	4603      	mov	r3, r0
 8041420:	2b00      	cmp	r3, #0
 8041422:	d001      	beq.n	8041428 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8041424:	f7ff ffae 	bl	8041384 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8041428:	4b1d      	ldr	r3, [pc, #116]	; (80414a0 <HAL_UART_MspInit+0xc4>)
 804142a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804142c:	4a1c      	ldr	r2, [pc, #112]	; (80414a0 <HAL_UART_MspInit+0xc4>)
 804142e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8041432:	6613      	str	r3, [r2, #96]	; 0x60
 8041434:	4b1a      	ldr	r3, [pc, #104]	; (80414a0 <HAL_UART_MspInit+0xc4>)
 8041436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8041438:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 804143c:	60fb      	str	r3, [r7, #12]
 804143e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8041440:	4b17      	ldr	r3, [pc, #92]	; (80414a0 <HAL_UART_MspInit+0xc4>)
 8041442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8041444:	4a16      	ldr	r2, [pc, #88]	; (80414a0 <HAL_UART_MspInit+0xc4>)
 8041446:	f043 0301 	orr.w	r3, r3, #1
 804144a:	64d3      	str	r3, [r2, #76]	; 0x4c
 804144c:	4b14      	ldr	r3, [pc, #80]	; (80414a0 <HAL_UART_MspInit+0xc4>)
 804144e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8041450:	f003 0301 	and.w	r3, r3, #1
 8041454:	60bb      	str	r3, [r7, #8]
 8041456:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8041458:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 804145c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041460:	2302      	movs	r3, #2
 8041462:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041466:	2300      	movs	r3, #0
 8041468:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 804146c:	2300      	movs	r3, #0
 804146e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8041472:	2307      	movs	r3, #7
 8041474:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8041478:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 804147c:	4619      	mov	r1, r3
 804147e:	4809      	ldr	r0, [pc, #36]	; (80414a4 <HAL_UART_MspInit+0xc8>)
 8041480:	f000 fbfc 	bl	8041c7c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8041484:	2200      	movs	r2, #0
 8041486:	2100      	movs	r1, #0
 8041488:	203d      	movs	r0, #61	; 0x3d
 804148a:	f000 fb08 	bl	8041a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 804148e:	203d      	movs	r0, #61	; 0x3d
 8041490:	f000 fb1f 	bl	8041ad2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8041494:	bf00      	nop
 8041496:	37b8      	adds	r7, #184	; 0xb8
 8041498:	46bd      	mov	sp, r7
 804149a:	bd80      	pop	{r7, pc}
 804149c:	40013800 	.word	0x40013800
 80414a0:	40021000 	.word	0x40021000
 80414a4:	42020000 	.word	0x42020000

080414a8 <MemManage_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80414a8:	b480      	push	{r7}
 80414aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80414ac:	e7fe      	b.n	80414ac <MemManage_Handler+0x4>

080414ae <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80414ae:	b480      	push	{r7}
 80414b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80414b2:	e7fe      	b.n	80414b2 <UsageFault_Handler+0x4>

080414b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80414b4:	b480      	push	{r7}
 80414b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80414b8:	bf00      	nop
 80414ba:	46bd      	mov	sp, r7
 80414bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80414c0:	4770      	bx	lr

080414c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80414c2:	b480      	push	{r7}
 80414c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80414c6:	bf00      	nop
 80414c8:	46bd      	mov	sp, r7
 80414ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80414ce:	4770      	bx	lr

080414d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80414d0:	b580      	push	{r7, lr}
 80414d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80414d4:	f000 f9c4 	bl	8041860 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80414d8:	bf00      	nop
 80414da:	bd80      	pop	{r7, pc}

080414dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 26.
  */
void USART1_IRQHandler(void)
{
 80414dc:	b580      	push	{r7, lr}
 80414de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80414e0:	4802      	ldr	r0, [pc, #8]	; (80414ec <USART1_IRQHandler+0x10>)
 80414e2:	f001 fc07 	bl	8042cf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80414e6:	bf00      	nop
 80414e8:	bd80      	pop	{r7, pc}
 80414ea:	bf00      	nop
 80414ec:	20018268 	.word	0x20018268

080414f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80414f0:	b480      	push	{r7}
 80414f2:	af00      	add	r7, sp, #0
	return 1;
 80414f4:	2301      	movs	r3, #1
}
 80414f6:	4618      	mov	r0, r3
 80414f8:	46bd      	mov	sp, r7
 80414fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80414fe:	4770      	bx	lr

08041500 <_kill>:

int _kill(int pid, int sig)
{
 8041500:	b580      	push	{r7, lr}
 8041502:	b082      	sub	sp, #8
 8041504:	af00      	add	r7, sp, #0
 8041506:	6078      	str	r0, [r7, #4]
 8041508:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 804150a:	f002 fd5d 	bl	8043fc8 <__errno>
 804150e:	4603      	mov	r3, r0
 8041510:	2216      	movs	r2, #22
 8041512:	601a      	str	r2, [r3, #0]
	return -1;
 8041514:	f04f 33ff 	mov.w	r3, #4294967295
}
 8041518:	4618      	mov	r0, r3
 804151a:	3708      	adds	r7, #8
 804151c:	46bd      	mov	sp, r7
 804151e:	bd80      	pop	{r7, pc}

08041520 <_exit>:

void _exit (int status)
{
 8041520:	b580      	push	{r7, lr}
 8041522:	b082      	sub	sp, #8
 8041524:	af00      	add	r7, sp, #0
 8041526:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8041528:	f04f 31ff 	mov.w	r1, #4294967295
 804152c:	6878      	ldr	r0, [r7, #4]
 804152e:	f7ff ffe7 	bl	8041500 <_kill>
	while (1) {}		/* Make sure we hang here */
 8041532:	e7fe      	b.n	8041532 <_exit+0x12>

08041534 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8041534:	b580      	push	{r7, lr}
 8041536:	b086      	sub	sp, #24
 8041538:	af00      	add	r7, sp, #0
 804153a:	60f8      	str	r0, [r7, #12]
 804153c:	60b9      	str	r1, [r7, #8]
 804153e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8041540:	2300      	movs	r3, #0
 8041542:	617b      	str	r3, [r7, #20]
 8041544:	e00a      	b.n	804155c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8041546:	e000      	b.n	804154a <_read+0x16>
 8041548:	bf00      	nop
 804154a:	4601      	mov	r1, r0
 804154c:	68bb      	ldr	r3, [r7, #8]
 804154e:	1c5a      	adds	r2, r3, #1
 8041550:	60ba      	str	r2, [r7, #8]
 8041552:	b2ca      	uxtb	r2, r1
 8041554:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8041556:	697b      	ldr	r3, [r7, #20]
 8041558:	3301      	adds	r3, #1
 804155a:	617b      	str	r3, [r7, #20]
 804155c:	697a      	ldr	r2, [r7, #20]
 804155e:	687b      	ldr	r3, [r7, #4]
 8041560:	429a      	cmp	r2, r3
 8041562:	dbf0      	blt.n	8041546 <_read+0x12>
	}

return len;
 8041564:	687b      	ldr	r3, [r7, #4]
}
 8041566:	4618      	mov	r0, r3
 8041568:	3718      	adds	r7, #24
 804156a:	46bd      	mov	sp, r7
 804156c:	bd80      	pop	{r7, pc}

0804156e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 804156e:	b580      	push	{r7, lr}
 8041570:	b086      	sub	sp, #24
 8041572:	af00      	add	r7, sp, #0
 8041574:	60f8      	str	r0, [r7, #12]
 8041576:	60b9      	str	r1, [r7, #8]
 8041578:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 804157a:	2300      	movs	r3, #0
 804157c:	617b      	str	r3, [r7, #20]
 804157e:	e009      	b.n	8041594 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8041580:	68bb      	ldr	r3, [r7, #8]
 8041582:	1c5a      	adds	r2, r3, #1
 8041584:	60ba      	str	r2, [r7, #8]
 8041586:	781b      	ldrb	r3, [r3, #0]
 8041588:	4618      	mov	r0, r3
 804158a:	e000      	b.n	804158e <_write+0x20>
 804158c:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 804158e:	697b      	ldr	r3, [r7, #20]
 8041590:	3301      	adds	r3, #1
 8041592:	617b      	str	r3, [r7, #20]
 8041594:	697a      	ldr	r2, [r7, #20]
 8041596:	687b      	ldr	r3, [r7, #4]
 8041598:	429a      	cmp	r2, r3
 804159a:	dbf1      	blt.n	8041580 <_write+0x12>
	}
	return len;
 804159c:	687b      	ldr	r3, [r7, #4]
}
 804159e:	4618      	mov	r0, r3
 80415a0:	3718      	adds	r7, #24
 80415a2:	46bd      	mov	sp, r7
 80415a4:	bd80      	pop	{r7, pc}

080415a6 <_close>:

int _close(int file)
{
 80415a6:	b480      	push	{r7}
 80415a8:	b083      	sub	sp, #12
 80415aa:	af00      	add	r7, sp, #0
 80415ac:	6078      	str	r0, [r7, #4]
	return -1;
 80415ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80415b2:	4618      	mov	r0, r3
 80415b4:	370c      	adds	r7, #12
 80415b6:	46bd      	mov	sp, r7
 80415b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80415bc:	4770      	bx	lr

080415be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80415be:	b480      	push	{r7}
 80415c0:	b083      	sub	sp, #12
 80415c2:	af00      	add	r7, sp, #0
 80415c4:	6078      	str	r0, [r7, #4]
 80415c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80415c8:	683b      	ldr	r3, [r7, #0]
 80415ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80415ce:	605a      	str	r2, [r3, #4]
	return 0;
 80415d0:	2300      	movs	r3, #0
}
 80415d2:	4618      	mov	r0, r3
 80415d4:	370c      	adds	r7, #12
 80415d6:	46bd      	mov	sp, r7
 80415d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80415dc:	4770      	bx	lr

080415de <_isatty>:

int _isatty(int file)
{
 80415de:	b480      	push	{r7}
 80415e0:	b083      	sub	sp, #12
 80415e2:	af00      	add	r7, sp, #0
 80415e4:	6078      	str	r0, [r7, #4]
	return 1;
 80415e6:	2301      	movs	r3, #1
}
 80415e8:	4618      	mov	r0, r3
 80415ea:	370c      	adds	r7, #12
 80415ec:	46bd      	mov	sp, r7
 80415ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80415f2:	4770      	bx	lr

080415f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80415f4:	b480      	push	{r7}
 80415f6:	b085      	sub	sp, #20
 80415f8:	af00      	add	r7, sp, #0
 80415fa:	60f8      	str	r0, [r7, #12]
 80415fc:	60b9      	str	r1, [r7, #8]
 80415fe:	607a      	str	r2, [r7, #4]
	return 0;
 8041600:	2300      	movs	r3, #0
}
 8041602:	4618      	mov	r0, r3
 8041604:	3714      	adds	r7, #20
 8041606:	46bd      	mov	sp, r7
 8041608:	f85d 7b04 	ldr.w	r7, [sp], #4
 804160c:	4770      	bx	lr
	...

08041610 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8041610:	b580      	push	{r7, lr}
 8041612:	b086      	sub	sp, #24
 8041614:	af00      	add	r7, sp, #0
 8041616:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8041618:	4a14      	ldr	r2, [pc, #80]	; (804166c <_sbrk+0x5c>)
 804161a:	4b15      	ldr	r3, [pc, #84]	; (8041670 <_sbrk+0x60>)
 804161c:	1ad3      	subs	r3, r2, r3
 804161e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8041620:	697b      	ldr	r3, [r7, #20]
 8041622:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8041624:	4b13      	ldr	r3, [pc, #76]	; (8041674 <_sbrk+0x64>)
 8041626:	681b      	ldr	r3, [r3, #0]
 8041628:	2b00      	cmp	r3, #0
 804162a:	d102      	bne.n	8041632 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 804162c:	4b11      	ldr	r3, [pc, #68]	; (8041674 <_sbrk+0x64>)
 804162e:	4a12      	ldr	r2, [pc, #72]	; (8041678 <_sbrk+0x68>)
 8041630:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8041632:	4b10      	ldr	r3, [pc, #64]	; (8041674 <_sbrk+0x64>)
 8041634:	681a      	ldr	r2, [r3, #0]
 8041636:	687b      	ldr	r3, [r7, #4]
 8041638:	4413      	add	r3, r2
 804163a:	693a      	ldr	r2, [r7, #16]
 804163c:	429a      	cmp	r2, r3
 804163e:	d207      	bcs.n	8041650 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8041640:	f002 fcc2 	bl	8043fc8 <__errno>
 8041644:	4603      	mov	r3, r0
 8041646:	220c      	movs	r2, #12
 8041648:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 804164a:	f04f 33ff 	mov.w	r3, #4294967295
 804164e:	e009      	b.n	8041664 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8041650:	4b08      	ldr	r3, [pc, #32]	; (8041674 <_sbrk+0x64>)
 8041652:	681b      	ldr	r3, [r3, #0]
 8041654:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8041656:	4b07      	ldr	r3, [pc, #28]	; (8041674 <_sbrk+0x64>)
 8041658:	681a      	ldr	r2, [r3, #0]
 804165a:	687b      	ldr	r3, [r7, #4]
 804165c:	4413      	add	r3, r2
 804165e:	4a05      	ldr	r2, [pc, #20]	; (8041674 <_sbrk+0x64>)
 8041660:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8041662:	68fb      	ldr	r3, [r7, #12]
}
 8041664:	4618      	mov	r0, r3
 8041666:	3718      	adds	r7, #24
 8041668:	46bd      	mov	sp, r7
 804166a:	bd80      	pop	{r7, pc}
 804166c:	20030000 	.word	0x20030000
 8041670:	00000400 	.word	0x00000400
 8041674:	20018214 	.word	0x20018214
 8041678:	20018310 	.word	0x20018310

0804167c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 804167c:	b480      	push	{r7}
 804167e:	af00      	add	r7, sp, #0
#endif

  /* Non-secure main application shall call SystemCoreClockUpdate() to update */
  /* the SystemCoreClock variable to insure non-secure application relies on  */
  /* the initial clock reference set by secure application.                   */
}
 8041680:	bf00      	nop
 8041682:	46bd      	mov	sp, r7
 8041684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041688:	4770      	bx	lr
	...

0804168c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 804168c:	b580      	push	{r7, lr}
 804168e:	af00      	add	r7, sp, #0
  /* Get the SystemCoreClock value from the secure domain */
  SystemCoreClock = SECURE_SystemCoreClockUpdate();
 8041690:	f005 fd2a 	bl	80470e8 <__SECURE_SystemCoreClockUpdate_veneer>
 8041694:	4603      	mov	r3, r0
 8041696:	4a02      	ldr	r2, [pc, #8]	; (80416a0 <SystemCoreClockUpdate+0x14>)
 8041698:	6013      	str	r3, [r2, #0]
}
 804169a:	bf00      	nop
 804169c:	bd80      	pop	{r7, pc}
 804169e:	bf00      	nop
 80416a0:	20018004 	.word	0x20018004

080416a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80416a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80416dc <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80416a8:	f7ff ffe8 	bl	804167c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80416ac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80416ae:	e003      	b.n	80416b8 <LoopCopyDataInit>

080416b0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80416b0:	4b0b      	ldr	r3, [pc, #44]	; (80416e0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80416b2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80416b4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80416b6:	3104      	adds	r1, #4

080416b8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80416b8:	480a      	ldr	r0, [pc, #40]	; (80416e4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80416ba:	4b0b      	ldr	r3, [pc, #44]	; (80416e8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80416bc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80416be:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80416c0:	d3f6      	bcc.n	80416b0 <CopyDataInit>
	ldr	r2, =_sbss
 80416c2:	4a0a      	ldr	r2, [pc, #40]	; (80416ec <LoopForever+0x12>)
	b	LoopFillZerobss
 80416c4:	e002      	b.n	80416cc <LoopFillZerobss>

080416c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80416c6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80416c8:	f842 3b04 	str.w	r3, [r2], #4

080416cc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80416cc:	4b08      	ldr	r3, [pc, #32]	; (80416f0 <LoopForever+0x16>)
	cmp	r2, r3
 80416ce:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80416d0:	d3f9      	bcc.n	80416c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80416d2:	f002 fc7f 	bl	8043fd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80416d6:	f7ff fd4d 	bl	8041174 <main>

080416da <LoopForever>:

LoopForever:
    b LoopForever
 80416da:	e7fe      	b.n	80416da <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80416dc:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 80416e0:	08047674 	.word	0x08047674
	ldr	r0, =_sdata
 80416e4:	20018000 	.word	0x20018000
	ldr	r3, =_edata
 80416e8:	200181f0 	.word	0x200181f0
	ldr	r2, =_sbss
 80416ec:	200181f0 	.word	0x200181f0
	ldr	r3, = _ebss
 80416f0:	2001830c 	.word	0x2001830c

080416f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80416f4:	e7fe      	b.n	80416f4 <ADC1_2_IRQHandler>
	...

080416f8 <BSP_LED_Init>:
  *     @arg  LED9
  *     @arg  LED10
  * @retval BSP error code
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80416f8:	b580      	push	{r7, lr}
 80416fa:	b08c      	sub	sp, #48	; 0x30
 80416fc:	af00      	add	r7, sp, #0
 80416fe:	4603      	mov	r3, r0
 8041700:	71fb      	strb	r3, [r7, #7]
  int32_t          status = BSP_ERROR_NONE;
 8041702:	2300      	movs	r3, #0
 8041704:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitTypeDef GPIO_Init;

  /* Enable the GPIO_LED Clock */
  if (Led == LED9)
 8041706:	79fb      	ldrb	r3, [r7, #7]
 8041708:	2b00      	cmp	r3, #0
 804170a:	d10c      	bne.n	8041726 <BSP_LED_Init+0x2e>
  {
    LED9_GPIO_CLK_ENABLE();
 804170c:	4b26      	ldr	r3, [pc, #152]	; (80417a8 <BSP_LED_Init+0xb0>)
 804170e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8041710:	4a25      	ldr	r2, [pc, #148]	; (80417a8 <BSP_LED_Init+0xb0>)
 8041712:	f043 0308 	orr.w	r3, r3, #8
 8041716:	64d3      	str	r3, [r2, #76]	; 0x4c
 8041718:	4b23      	ldr	r3, [pc, #140]	; (80417a8 <BSP_LED_Init+0xb0>)
 804171a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804171c:	f003 0308 	and.w	r3, r3, #8
 8041720:	617b      	str	r3, [r7, #20]
 8041722:	697b      	ldr	r3, [r7, #20]
 8041724:	e019      	b.n	804175a <BSP_LED_Init+0x62>
  }
  else /* Led = LED10 */
  {
    /* Enable VddIO2 for GPIOG */
    __HAL_RCC_PWR_CLK_ENABLE();
 8041726:	4b20      	ldr	r3, [pc, #128]	; (80417a8 <BSP_LED_Init+0xb0>)
 8041728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804172a:	4a1f      	ldr	r2, [pc, #124]	; (80417a8 <BSP_LED_Init+0xb0>)
 804172c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8041730:	6593      	str	r3, [r2, #88]	; 0x58
 8041732:	4b1d      	ldr	r3, [pc, #116]	; (80417a8 <BSP_LED_Init+0xb0>)
 8041734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804173a:	613b      	str	r3, [r7, #16]
 804173c:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 804173e:	f000 fc35 	bl	8041fac <HAL_PWREx_EnableVddIO2>
    LED10_GPIO_CLK_ENABLE();
 8041742:	4b19      	ldr	r3, [pc, #100]	; (80417a8 <BSP_LED_Init+0xb0>)
 8041744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8041746:	4a18      	ldr	r2, [pc, #96]	; (80417a8 <BSP_LED_Init+0xb0>)
 8041748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804174c:	64d3      	str	r3, [r2, #76]	; 0x4c
 804174e:	4b16      	ldr	r3, [pc, #88]	; (80417a8 <BSP_LED_Init+0xb0>)
 8041750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8041752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8041756:	60fb      	str	r3, [r7, #12]
 8041758:	68fb      	ldr	r3, [r7, #12]
  }

  /* configure the GPIO_LED pin */
  GPIO_Init.Pin   = LED_PIN[Led];
 804175a:	79fb      	ldrb	r3, [r7, #7]
 804175c:	4a13      	ldr	r2, [pc, #76]	; (80417ac <BSP_LED_Init+0xb4>)
 804175e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8041762:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Mode  = GPIO_MODE_OUTPUT_PP;
 8041764:	2301      	movs	r3, #1
 8041766:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Pull  = GPIO_PULLUP;
 8041768:	2301      	movs	r3, #1
 804176a:	623b      	str	r3, [r7, #32]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804176c:	2303      	movs	r3, #3
 804176e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
 8041770:	79fb      	ldrb	r3, [r7, #7]
 8041772:	4a0f      	ldr	r2, [pc, #60]	; (80417b0 <BSP_LED_Init+0xb8>)
 8041774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8041778:	f107 0218 	add.w	r2, r7, #24
 804177c:	4611      	mov	r1, r2
 804177e:	4618      	mov	r0, r3
 8041780:	f000 fa7c 	bl	8041c7c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8041784:	79fb      	ldrb	r3, [r7, #7]
 8041786:	4a0a      	ldr	r2, [pc, #40]	; (80417b0 <BSP_LED_Init+0xb8>)
 8041788:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 804178c:	79fb      	ldrb	r3, [r7, #7]
 804178e:	4a07      	ldr	r2, [pc, #28]	; (80417ac <BSP_LED_Init+0xb4>)
 8041790:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8041794:	2201      	movs	r2, #1
 8041796:	4619      	mov	r1, r3
 8041798:	f000 fbf0 	bl	8041f7c <HAL_GPIO_WritePin>

  return status;
 804179c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 804179e:	4618      	mov	r0, r3
 80417a0:	3730      	adds	r7, #48	; 0x30
 80417a2:	46bd      	mov	sp, r7
 80417a4:	bd80      	pop	{r7, pc}
 80417a6:	bf00      	nop
 80417a8:	40021000 	.word	0x40021000
 80417ac:	20018008 	.word	0x20018008
 80417b0:	2001800c 	.word	0x2001800c

080417b4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80417b4:	b580      	push	{r7, lr}
 80417b6:	b082      	sub	sp, #8
 80417b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80417ba:	2300      	movs	r3, #0
 80417bc:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80417be:	2004      	movs	r0, #4
 80417c0:	f000 f962 	bl	8041a88 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 80417c4:	f7ff ff62 	bl	804168c <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80417c8:	2000      	movs	r0, #0
 80417ca:	f000 f80d 	bl	80417e8 <HAL_InitTick>
 80417ce:	4603      	mov	r3, r0
 80417d0:	2b00      	cmp	r3, #0
 80417d2:	d002      	beq.n	80417da <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 80417d4:	2301      	movs	r3, #1
 80417d6:	71fb      	strb	r3, [r7, #7]
 80417d8:	e001      	b.n	80417de <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80417da:	f7ff fddb 	bl	8041394 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80417de:	79fb      	ldrb	r3, [r7, #7]
}
 80417e0:	4618      	mov	r0, r3
 80417e2:	3708      	adds	r7, #8
 80417e4:	46bd      	mov	sp, r7
 80417e6:	bd80      	pop	{r7, pc}

080417e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80417e8:	b580      	push	{r7, lr}
 80417ea:	b084      	sub	sp, #16
 80417ec:	af00      	add	r7, sp, #0
 80417ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80417f0:	2300      	movs	r3, #0
 80417f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80417f4:	4b17      	ldr	r3, [pc, #92]	; (8041854 <HAL_InitTick+0x6c>)
 80417f6:	781b      	ldrb	r3, [r3, #0]
 80417f8:	2b00      	cmp	r3, #0
 80417fa:	d023      	beq.n	8041844 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80417fc:	4b16      	ldr	r3, [pc, #88]	; (8041858 <HAL_InitTick+0x70>)
 80417fe:	681a      	ldr	r2, [r3, #0]
 8041800:	4b14      	ldr	r3, [pc, #80]	; (8041854 <HAL_InitTick+0x6c>)
 8041802:	781b      	ldrb	r3, [r3, #0]
 8041804:	4619      	mov	r1, r3
 8041806:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 804180a:	fbb3 f3f1 	udiv	r3, r3, r1
 804180e:	fbb2 f3f3 	udiv	r3, r2, r3
 8041812:	4618      	mov	r0, r3
 8041814:	f000 f96b 	bl	8041aee <HAL_SYSTICK_Config>
 8041818:	4603      	mov	r3, r0
 804181a:	2b00      	cmp	r3, #0
 804181c:	d10f      	bne.n	804183e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 804181e:	687b      	ldr	r3, [r7, #4]
 8041820:	2b07      	cmp	r3, #7
 8041822:	d809      	bhi.n	8041838 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8041824:	2200      	movs	r2, #0
 8041826:	6879      	ldr	r1, [r7, #4]
 8041828:	f04f 30ff 	mov.w	r0, #4294967295
 804182c:	f000 f937 	bl	8041a9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8041830:	4a0a      	ldr	r2, [pc, #40]	; (804185c <HAL_InitTick+0x74>)
 8041832:	687b      	ldr	r3, [r7, #4]
 8041834:	6013      	str	r3, [r2, #0]
 8041836:	e007      	b.n	8041848 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8041838:	2301      	movs	r3, #1
 804183a:	73fb      	strb	r3, [r7, #15]
 804183c:	e004      	b.n	8041848 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 804183e:	2301      	movs	r3, #1
 8041840:	73fb      	strb	r3, [r7, #15]
 8041842:	e001      	b.n	8041848 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8041844:	2301      	movs	r3, #1
 8041846:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8041848:	7bfb      	ldrb	r3, [r7, #15]
}
 804184a:	4618      	mov	r0, r3
 804184c:	3710      	adds	r7, #16
 804184e:	46bd      	mov	sp, r7
 8041850:	bd80      	pop	{r7, pc}
 8041852:	bf00      	nop
 8041854:	20018018 	.word	0x20018018
 8041858:	20018004 	.word	0x20018004
 804185c:	20018014 	.word	0x20018014

08041860 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8041860:	b480      	push	{r7}
 8041862:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8041864:	4b06      	ldr	r3, [pc, #24]	; (8041880 <HAL_IncTick+0x20>)
 8041866:	781b      	ldrb	r3, [r3, #0]
 8041868:	461a      	mov	r2, r3
 804186a:	4b06      	ldr	r3, [pc, #24]	; (8041884 <HAL_IncTick+0x24>)
 804186c:	681b      	ldr	r3, [r3, #0]
 804186e:	4413      	add	r3, r2
 8041870:	4a04      	ldr	r2, [pc, #16]	; (8041884 <HAL_IncTick+0x24>)
 8041872:	6013      	str	r3, [r2, #0]
}
 8041874:	bf00      	nop
 8041876:	46bd      	mov	sp, r7
 8041878:	f85d 7b04 	ldr.w	r7, [sp], #4
 804187c:	4770      	bx	lr
 804187e:	bf00      	nop
 8041880:	20018018 	.word	0x20018018
 8041884:	200182f8 	.word	0x200182f8

08041888 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8041888:	b480      	push	{r7}
 804188a:	af00      	add	r7, sp, #0
  return uwTick;
 804188c:	4b03      	ldr	r3, [pc, #12]	; (804189c <HAL_GetTick+0x14>)
 804188e:	681b      	ldr	r3, [r3, #0]
}
 8041890:	4618      	mov	r0, r3
 8041892:	46bd      	mov	sp, r7
 8041894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041898:	4770      	bx	lr
 804189a:	bf00      	nop
 804189c:	200182f8 	.word	0x200182f8

080418a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80418a0:	b580      	push	{r7, lr}
 80418a2:	b084      	sub	sp, #16
 80418a4:	af00      	add	r7, sp, #0
 80418a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80418a8:	f7ff ffee 	bl	8041888 <HAL_GetTick>
 80418ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80418ae:	687b      	ldr	r3, [r7, #4]
 80418b0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80418b2:	68fb      	ldr	r3, [r7, #12]
 80418b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80418b8:	d005      	beq.n	80418c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80418ba:	4b0a      	ldr	r3, [pc, #40]	; (80418e4 <HAL_Delay+0x44>)
 80418bc:	781b      	ldrb	r3, [r3, #0]
 80418be:	461a      	mov	r2, r3
 80418c0:	68fb      	ldr	r3, [r7, #12]
 80418c2:	4413      	add	r3, r2
 80418c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80418c6:	bf00      	nop
 80418c8:	f7ff ffde 	bl	8041888 <HAL_GetTick>
 80418cc:	4602      	mov	r2, r0
 80418ce:	68bb      	ldr	r3, [r7, #8]
 80418d0:	1ad3      	subs	r3, r2, r3
 80418d2:	68fa      	ldr	r2, [r7, #12]
 80418d4:	429a      	cmp	r2, r3
 80418d6:	d8f7      	bhi.n	80418c8 <HAL_Delay+0x28>
  {
  }
}
 80418d8:	bf00      	nop
 80418da:	bf00      	nop
 80418dc:	3710      	adds	r7, #16
 80418de:	46bd      	mov	sp, r7
 80418e0:	bd80      	pop	{r7, pc}
 80418e2:	bf00      	nop
 80418e4:	20018018 	.word	0x20018018

080418e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80418e8:	b480      	push	{r7}
 80418ea:	b085      	sub	sp, #20
 80418ec:	af00      	add	r7, sp, #0
 80418ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80418f0:	687b      	ldr	r3, [r7, #4]
 80418f2:	f003 0307 	and.w	r3, r3, #7
 80418f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80418f8:	4b0c      	ldr	r3, [pc, #48]	; (804192c <__NVIC_SetPriorityGrouping+0x44>)
 80418fa:	68db      	ldr	r3, [r3, #12]
 80418fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80418fe:	68ba      	ldr	r2, [r7, #8]
 8041900:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8041904:	4013      	ands	r3, r2
 8041906:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8041908:	68fb      	ldr	r3, [r7, #12]
 804190a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 804190c:	68bb      	ldr	r3, [r7, #8]
 804190e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8041910:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8041914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8041918:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 804191a:	4a04      	ldr	r2, [pc, #16]	; (804192c <__NVIC_SetPriorityGrouping+0x44>)
 804191c:	68bb      	ldr	r3, [r7, #8]
 804191e:	60d3      	str	r3, [r2, #12]
}
 8041920:	bf00      	nop
 8041922:	3714      	adds	r7, #20
 8041924:	46bd      	mov	sp, r7
 8041926:	f85d 7b04 	ldr.w	r7, [sp], #4
 804192a:	4770      	bx	lr
 804192c:	e000ed00 	.word	0xe000ed00

08041930 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8041930:	b480      	push	{r7}
 8041932:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8041934:	4b04      	ldr	r3, [pc, #16]	; (8041948 <__NVIC_GetPriorityGrouping+0x18>)
 8041936:	68db      	ldr	r3, [r3, #12]
 8041938:	0a1b      	lsrs	r3, r3, #8
 804193a:	f003 0307 	and.w	r3, r3, #7
}
 804193e:	4618      	mov	r0, r3
 8041940:	46bd      	mov	sp, r7
 8041942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041946:	4770      	bx	lr
 8041948:	e000ed00 	.word	0xe000ed00

0804194c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 804194c:	b480      	push	{r7}
 804194e:	b083      	sub	sp, #12
 8041950:	af00      	add	r7, sp, #0
 8041952:	4603      	mov	r3, r0
 8041954:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8041956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 804195a:	2b00      	cmp	r3, #0
 804195c:	db0b      	blt.n	8041976 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 804195e:	79fb      	ldrb	r3, [r7, #7]
 8041960:	f003 021f 	and.w	r2, r3, #31
 8041964:	4907      	ldr	r1, [pc, #28]	; (8041984 <__NVIC_EnableIRQ+0x38>)
 8041966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 804196a:	095b      	lsrs	r3, r3, #5
 804196c:	2001      	movs	r0, #1
 804196e:	fa00 f202 	lsl.w	r2, r0, r2
 8041972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8041976:	bf00      	nop
 8041978:	370c      	adds	r7, #12
 804197a:	46bd      	mov	sp, r7
 804197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041980:	4770      	bx	lr
 8041982:	bf00      	nop
 8041984:	e000e100 	.word	0xe000e100

08041988 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8041988:	b480      	push	{r7}
 804198a:	b083      	sub	sp, #12
 804198c:	af00      	add	r7, sp, #0
 804198e:	4603      	mov	r3, r0
 8041990:	6039      	str	r1, [r7, #0]
 8041992:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8041994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8041998:	2b00      	cmp	r3, #0
 804199a:	db0a      	blt.n	80419b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 804199c:	683b      	ldr	r3, [r7, #0]
 804199e:	b2da      	uxtb	r2, r3
 80419a0:	490c      	ldr	r1, [pc, #48]	; (80419d4 <__NVIC_SetPriority+0x4c>)
 80419a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80419a6:	0152      	lsls	r2, r2, #5
 80419a8:	b2d2      	uxtb	r2, r2
 80419aa:	440b      	add	r3, r1
 80419ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80419b0:	e00a      	b.n	80419c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80419b2:	683b      	ldr	r3, [r7, #0]
 80419b4:	b2da      	uxtb	r2, r3
 80419b6:	4908      	ldr	r1, [pc, #32]	; (80419d8 <__NVIC_SetPriority+0x50>)
 80419b8:	79fb      	ldrb	r3, [r7, #7]
 80419ba:	f003 030f 	and.w	r3, r3, #15
 80419be:	3b04      	subs	r3, #4
 80419c0:	0152      	lsls	r2, r2, #5
 80419c2:	b2d2      	uxtb	r2, r2
 80419c4:	440b      	add	r3, r1
 80419c6:	761a      	strb	r2, [r3, #24]
}
 80419c8:	bf00      	nop
 80419ca:	370c      	adds	r7, #12
 80419cc:	46bd      	mov	sp, r7
 80419ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80419d2:	4770      	bx	lr
 80419d4:	e000e100 	.word	0xe000e100
 80419d8:	e000ed00 	.word	0xe000ed00

080419dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80419dc:	b480      	push	{r7}
 80419de:	b089      	sub	sp, #36	; 0x24
 80419e0:	af00      	add	r7, sp, #0
 80419e2:	60f8      	str	r0, [r7, #12]
 80419e4:	60b9      	str	r1, [r7, #8]
 80419e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80419e8:	68fb      	ldr	r3, [r7, #12]
 80419ea:	f003 0307 	and.w	r3, r3, #7
 80419ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80419f0:	69fb      	ldr	r3, [r7, #28]
 80419f2:	f1c3 0307 	rsb	r3, r3, #7
 80419f6:	2b03      	cmp	r3, #3
 80419f8:	bf28      	it	cs
 80419fa:	2303      	movcs	r3, #3
 80419fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80419fe:	69fb      	ldr	r3, [r7, #28]
 8041a00:	3303      	adds	r3, #3
 8041a02:	2b06      	cmp	r3, #6
 8041a04:	d902      	bls.n	8041a0c <NVIC_EncodePriority+0x30>
 8041a06:	69fb      	ldr	r3, [r7, #28]
 8041a08:	3b04      	subs	r3, #4
 8041a0a:	e000      	b.n	8041a0e <NVIC_EncodePriority+0x32>
 8041a0c:	2300      	movs	r3, #0
 8041a0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8041a10:	f04f 32ff 	mov.w	r2, #4294967295
 8041a14:	69bb      	ldr	r3, [r7, #24]
 8041a16:	fa02 f303 	lsl.w	r3, r2, r3
 8041a1a:	43da      	mvns	r2, r3
 8041a1c:	68bb      	ldr	r3, [r7, #8]
 8041a1e:	401a      	ands	r2, r3
 8041a20:	697b      	ldr	r3, [r7, #20]
 8041a22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8041a24:	f04f 31ff 	mov.w	r1, #4294967295
 8041a28:	697b      	ldr	r3, [r7, #20]
 8041a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8041a2e:	43d9      	mvns	r1, r3
 8041a30:	687b      	ldr	r3, [r7, #4]
 8041a32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8041a34:	4313      	orrs	r3, r2
         );
}
 8041a36:	4618      	mov	r0, r3
 8041a38:	3724      	adds	r7, #36	; 0x24
 8041a3a:	46bd      	mov	sp, r7
 8041a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041a40:	4770      	bx	lr
	...

08041a44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8041a44:	b580      	push	{r7, lr}
 8041a46:	b082      	sub	sp, #8
 8041a48:	af00      	add	r7, sp, #0
 8041a4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8041a4c:	687b      	ldr	r3, [r7, #4]
 8041a4e:	3b01      	subs	r3, #1
 8041a50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8041a54:	d301      	bcc.n	8041a5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8041a56:	2301      	movs	r3, #1
 8041a58:	e00f      	b.n	8041a7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8041a5a:	4a0a      	ldr	r2, [pc, #40]	; (8041a84 <SysTick_Config+0x40>)
 8041a5c:	687b      	ldr	r3, [r7, #4]
 8041a5e:	3b01      	subs	r3, #1
 8041a60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8041a62:	2107      	movs	r1, #7
 8041a64:	f04f 30ff 	mov.w	r0, #4294967295
 8041a68:	f7ff ff8e 	bl	8041988 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8041a6c:	4b05      	ldr	r3, [pc, #20]	; (8041a84 <SysTick_Config+0x40>)
 8041a6e:	2200      	movs	r2, #0
 8041a70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8041a72:	4b04      	ldr	r3, [pc, #16]	; (8041a84 <SysTick_Config+0x40>)
 8041a74:	2207      	movs	r2, #7
 8041a76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8041a78:	2300      	movs	r3, #0
}
 8041a7a:	4618      	mov	r0, r3
 8041a7c:	3708      	adds	r7, #8
 8041a7e:	46bd      	mov	sp, r7
 8041a80:	bd80      	pop	{r7, pc}
 8041a82:	bf00      	nop
 8041a84:	e000e010 	.word	0xe000e010

08041a88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8041a88:	b580      	push	{r7, lr}
 8041a8a:	b082      	sub	sp, #8
 8041a8c:	af00      	add	r7, sp, #0
 8041a8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8041a90:	6878      	ldr	r0, [r7, #4]
 8041a92:	f7ff ff29 	bl	80418e8 <__NVIC_SetPriorityGrouping>
}
 8041a96:	bf00      	nop
 8041a98:	3708      	adds	r7, #8
 8041a9a:	46bd      	mov	sp, r7
 8041a9c:	bd80      	pop	{r7, pc}

08041a9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8041a9e:	b580      	push	{r7, lr}
 8041aa0:	b086      	sub	sp, #24
 8041aa2:	af00      	add	r7, sp, #0
 8041aa4:	4603      	mov	r3, r0
 8041aa6:	60b9      	str	r1, [r7, #8]
 8041aa8:	607a      	str	r2, [r7, #4]
 8041aaa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8041aac:	f7ff ff40 	bl	8041930 <__NVIC_GetPriorityGrouping>
 8041ab0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8041ab2:	687a      	ldr	r2, [r7, #4]
 8041ab4:	68b9      	ldr	r1, [r7, #8]
 8041ab6:	6978      	ldr	r0, [r7, #20]
 8041ab8:	f7ff ff90 	bl	80419dc <NVIC_EncodePriority>
 8041abc:	4602      	mov	r2, r0
 8041abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8041ac2:	4611      	mov	r1, r2
 8041ac4:	4618      	mov	r0, r3
 8041ac6:	f7ff ff5f 	bl	8041988 <__NVIC_SetPriority>
}
 8041aca:	bf00      	nop
 8041acc:	3718      	adds	r7, #24
 8041ace:	46bd      	mov	sp, r7
 8041ad0:	bd80      	pop	{r7, pc}

08041ad2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8041ad2:	b580      	push	{r7, lr}
 8041ad4:	b082      	sub	sp, #8
 8041ad6:	af00      	add	r7, sp, #0
 8041ad8:	4603      	mov	r3, r0
 8041ada:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8041adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8041ae0:	4618      	mov	r0, r3
 8041ae2:	f7ff ff33 	bl	804194c <__NVIC_EnableIRQ>
}
 8041ae6:	bf00      	nop
 8041ae8:	3708      	adds	r7, #8
 8041aea:	46bd      	mov	sp, r7
 8041aec:	bd80      	pop	{r7, pc}

08041aee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8041aee:	b580      	push	{r7, lr}
 8041af0:	b082      	sub	sp, #8
 8041af2:	af00      	add	r7, sp, #0
 8041af4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8041af6:	6878      	ldr	r0, [r7, #4]
 8041af8:	f7ff ffa4 	bl	8041a44 <SysTick_Config>
 8041afc:	4603      	mov	r3, r0
}
 8041afe:	4618      	mov	r0, r3
 8041b00:	3708      	adds	r7, #8
 8041b02:	46bd      	mov	sp, r7
 8041b04:	bd80      	pop	{r7, pc}

08041b06 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8041b06:	b480      	push	{r7}
 8041b08:	b085      	sub	sp, #20
 8041b0a:	af00      	add	r7, sp, #0
 8041b0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8041b0e:	2300      	movs	r3, #0
 8041b10:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8041b12:	687b      	ldr	r3, [r7, #4]
 8041b14:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8041b18:	b2db      	uxtb	r3, r3
 8041b1a:	2b02      	cmp	r3, #2
 8041b1c:	d008      	beq.n	8041b30 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8041b1e:	687b      	ldr	r3, [r7, #4]
 8041b20:	2204      	movs	r2, #4
 8041b22:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8041b24:	687b      	ldr	r3, [r7, #4]
 8041b26:	2200      	movs	r2, #0
 8041b28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8041b2c:	2301      	movs	r3, #1
 8041b2e:	e040      	b.n	8041bb2 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8041b30:	687b      	ldr	r3, [r7, #4]
 8041b32:	681b      	ldr	r3, [r3, #0]
 8041b34:	681a      	ldr	r2, [r3, #0]
 8041b36:	687b      	ldr	r3, [r7, #4]
 8041b38:	681b      	ldr	r3, [r3, #0]
 8041b3a:	f022 020e 	bic.w	r2, r2, #14
 8041b3e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8041b40:	687b      	ldr	r3, [r7, #4]
 8041b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8041b44:	681a      	ldr	r2, [r3, #0]
 8041b46:	687b      	ldr	r3, [r7, #4]
 8041b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8041b4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8041b4e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8041b50:	687b      	ldr	r3, [r7, #4]
 8041b52:	681b      	ldr	r3, [r3, #0]
 8041b54:	681a      	ldr	r2, [r3, #0]
 8041b56:	687b      	ldr	r3, [r7, #4]
 8041b58:	681b      	ldr	r3, [r3, #0]
 8041b5a:	f022 0201 	bic.w	r2, r2, #1
 8041b5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8041b60:	687b      	ldr	r3, [r7, #4]
 8041b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8041b64:	f003 021c 	and.w	r2, r3, #28
 8041b68:	687b      	ldr	r3, [r7, #4]
 8041b6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8041b6c:	2101      	movs	r1, #1
 8041b6e:	fa01 f202 	lsl.w	r2, r1, r2
 8041b72:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8041b74:	687b      	ldr	r3, [r7, #4]
 8041b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8041b78:	687a      	ldr	r2, [r7, #4]
 8041b7a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8041b7c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8041b7e:	687b      	ldr	r3, [r7, #4]
 8041b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8041b82:	2b00      	cmp	r3, #0
 8041b84:	d00c      	beq.n	8041ba0 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8041b86:	687b      	ldr	r3, [r7, #4]
 8041b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8041b8a:	681a      	ldr	r2, [r3, #0]
 8041b8c:	687b      	ldr	r3, [r7, #4]
 8041b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8041b90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8041b94:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8041b96:	687b      	ldr	r3, [r7, #4]
 8041b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8041b9a:	687a      	ldr	r2, [r7, #4]
 8041b9c:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8041b9e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8041ba0:	687b      	ldr	r3, [r7, #4]
 8041ba2:	2201      	movs	r2, #1
 8041ba4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8041ba8:	687b      	ldr	r3, [r7, #4]
 8041baa:	2200      	movs	r2, #0
 8041bac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8041bb0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8041bb2:	4618      	mov	r0, r3
 8041bb4:	3714      	adds	r7, #20
 8041bb6:	46bd      	mov	sp, r7
 8041bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041bbc:	4770      	bx	lr

08041bbe <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8041bbe:	b580      	push	{r7, lr}
 8041bc0:	b084      	sub	sp, #16
 8041bc2:	af00      	add	r7, sp, #0
 8041bc4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8041bc6:	2300      	movs	r3, #0
 8041bc8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8041bca:	687b      	ldr	r3, [r7, #4]
 8041bcc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8041bd0:	b2db      	uxtb	r3, r3
 8041bd2:	2b02      	cmp	r3, #2
 8041bd4:	d005      	beq.n	8041be2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8041bd6:	687b      	ldr	r3, [r7, #4]
 8041bd8:	2204      	movs	r2, #4
 8041bda:	645a      	str	r2, [r3, #68]	; 0x44

    status = HAL_ERROR;
 8041bdc:	2301      	movs	r3, #1
 8041bde:	73fb      	strb	r3, [r7, #15]
 8041be0:	e047      	b.n	8041c72 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8041be2:	687b      	ldr	r3, [r7, #4]
 8041be4:	681b      	ldr	r3, [r3, #0]
 8041be6:	681a      	ldr	r2, [r3, #0]
 8041be8:	687b      	ldr	r3, [r7, #4]
 8041bea:	681b      	ldr	r3, [r3, #0]
 8041bec:	f022 020e 	bic.w	r2, r2, #14
 8041bf0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8041bf2:	687b      	ldr	r3, [r7, #4]
 8041bf4:	681b      	ldr	r3, [r3, #0]
 8041bf6:	681a      	ldr	r2, [r3, #0]
 8041bf8:	687b      	ldr	r3, [r7, #4]
 8041bfa:	681b      	ldr	r3, [r3, #0]
 8041bfc:	f022 0201 	bic.w	r2, r2, #1
 8041c00:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8041c02:	687b      	ldr	r3, [r7, #4]
 8041c04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8041c06:	681a      	ldr	r2, [r3, #0]
 8041c08:	687b      	ldr	r3, [r7, #4]
 8041c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8041c0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8041c10:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8041c12:	687b      	ldr	r3, [r7, #4]
 8041c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8041c16:	f003 021c 	and.w	r2, r3, #28
 8041c1a:	687b      	ldr	r3, [r7, #4]
 8041c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8041c1e:	2101      	movs	r1, #1
 8041c20:	fa01 f202 	lsl.w	r2, r1, r2
 8041c24:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8041c26:	687b      	ldr	r3, [r7, #4]
 8041c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8041c2a:	687a      	ldr	r2, [r7, #4]
 8041c2c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8041c2e:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8041c30:	687b      	ldr	r3, [r7, #4]
 8041c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8041c34:	2b00      	cmp	r3, #0
 8041c36:	d00c      	beq.n	8041c52 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8041c38:	687b      	ldr	r3, [r7, #4]
 8041c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8041c3c:	681a      	ldr	r2, [r3, #0]
 8041c3e:	687b      	ldr	r3, [r7, #4]
 8041c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8041c42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8041c46:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8041c48:	687b      	ldr	r3, [r7, #4]
 8041c4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8041c4c:	687a      	ldr	r2, [r7, #4]
 8041c4e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8041c50:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8041c52:	687b      	ldr	r3, [r7, #4]
 8041c54:	2201      	movs	r2, #1
 8041c56:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8041c5a:	687b      	ldr	r3, [r7, #4]
 8041c5c:	2200      	movs	r2, #0
 8041c5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8041c62:	687b      	ldr	r3, [r7, #4]
 8041c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041c66:	2b00      	cmp	r3, #0
 8041c68:	d003      	beq.n	8041c72 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8041c6a:	687b      	ldr	r3, [r7, #4]
 8041c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041c6e:	6878      	ldr	r0, [r7, #4]
 8041c70:	4798      	blx	r3
    }
  }
  return status;
 8041c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8041c74:	4618      	mov	r0, r3
 8041c76:	3710      	adds	r7, #16
 8041c78:	46bd      	mov	sp, r7
 8041c7a:	bd80      	pop	{r7, pc}

08041c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8041c7c:	b480      	push	{r7}
 8041c7e:	b087      	sub	sp, #28
 8041c80:	af00      	add	r7, sp, #0
 8041c82:	6078      	str	r0, [r7, #4]
 8041c84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8041c86:	2300      	movs	r3, #0
 8041c88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8041c8a:	e158      	b.n	8041f3e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8041c8c:	683b      	ldr	r3, [r7, #0]
 8041c8e:	681a      	ldr	r2, [r3, #0]
 8041c90:	2101      	movs	r1, #1
 8041c92:	697b      	ldr	r3, [r7, #20]
 8041c94:	fa01 f303 	lsl.w	r3, r1, r3
 8041c98:	4013      	ands	r3, r2
 8041c9a:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 8041c9c:	68fb      	ldr	r3, [r7, #12]
 8041c9e:	2b00      	cmp	r3, #0
 8041ca0:	f000 814a 	beq.w	8041f38 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8041ca4:	683b      	ldr	r3, [r7, #0]
 8041ca6:	685b      	ldr	r3, [r3, #4]
 8041ca8:	2b01      	cmp	r3, #1
 8041caa:	d00b      	beq.n	8041cc4 <HAL_GPIO_Init+0x48>
 8041cac:	683b      	ldr	r3, [r7, #0]
 8041cae:	685b      	ldr	r3, [r3, #4]
 8041cb0:	2b02      	cmp	r3, #2
 8041cb2:	d007      	beq.n	8041cc4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8041cb4:	683b      	ldr	r3, [r7, #0]
 8041cb6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8041cb8:	2b11      	cmp	r3, #17
 8041cba:	d003      	beq.n	8041cc4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8041cbc:	683b      	ldr	r3, [r7, #0]
 8041cbe:	685b      	ldr	r3, [r3, #4]
 8041cc0:	2b12      	cmp	r3, #18
 8041cc2:	d130      	bne.n	8041d26 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8041cc4:	687b      	ldr	r3, [r7, #4]
 8041cc6:	689b      	ldr	r3, [r3, #8]
 8041cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8041cca:	697b      	ldr	r3, [r7, #20]
 8041ccc:	005b      	lsls	r3, r3, #1
 8041cce:	2203      	movs	r2, #3
 8041cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8041cd4:	43db      	mvns	r3, r3
 8041cd6:	693a      	ldr	r2, [r7, #16]
 8041cd8:	4013      	ands	r3, r2
 8041cda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8041cdc:	683b      	ldr	r3, [r7, #0]
 8041cde:	68da      	ldr	r2, [r3, #12]
 8041ce0:	697b      	ldr	r3, [r7, #20]
 8041ce2:	005b      	lsls	r3, r3, #1
 8041ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8041ce8:	693a      	ldr	r2, [r7, #16]
 8041cea:	4313      	orrs	r3, r2
 8041cec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8041cee:	687b      	ldr	r3, [r7, #4]
 8041cf0:	693a      	ldr	r2, [r7, #16]
 8041cf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8041cf4:	687b      	ldr	r3, [r7, #4]
 8041cf6:	685b      	ldr	r3, [r3, #4]
 8041cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8041cfa:	2201      	movs	r2, #1
 8041cfc:	697b      	ldr	r3, [r7, #20]
 8041cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8041d02:	43db      	mvns	r3, r3
 8041d04:	693a      	ldr	r2, [r7, #16]
 8041d06:	4013      	ands	r3, r2
 8041d08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8041d0a:	683b      	ldr	r3, [r7, #0]
 8041d0c:	685b      	ldr	r3, [r3, #4]
 8041d0e:	091b      	lsrs	r3, r3, #4
 8041d10:	f003 0201 	and.w	r2, r3, #1
 8041d14:	697b      	ldr	r3, [r7, #20]
 8041d16:	fa02 f303 	lsl.w	r3, r2, r3
 8041d1a:	693a      	ldr	r2, [r7, #16]
 8041d1c:	4313      	orrs	r3, r2
 8041d1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8041d20:	687b      	ldr	r3, [r7, #4]
 8041d22:	693a      	ldr	r2, [r7, #16]
 8041d24:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8041d26:	687b      	ldr	r3, [r7, #4]
 8041d28:	68db      	ldr	r3, [r3, #12]
 8041d2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8041d2c:	697b      	ldr	r3, [r7, #20]
 8041d2e:	005b      	lsls	r3, r3, #1
 8041d30:	2203      	movs	r2, #3
 8041d32:	fa02 f303 	lsl.w	r3, r2, r3
 8041d36:	43db      	mvns	r3, r3
 8041d38:	693a      	ldr	r2, [r7, #16]
 8041d3a:	4013      	ands	r3, r2
 8041d3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8041d3e:	683b      	ldr	r3, [r7, #0]
 8041d40:	689a      	ldr	r2, [r3, #8]
 8041d42:	697b      	ldr	r3, [r7, #20]
 8041d44:	005b      	lsls	r3, r3, #1
 8041d46:	fa02 f303 	lsl.w	r3, r2, r3
 8041d4a:	693a      	ldr	r2, [r7, #16]
 8041d4c:	4313      	orrs	r3, r2
 8041d4e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8041d50:	687b      	ldr	r3, [r7, #4]
 8041d52:	693a      	ldr	r2, [r7, #16]
 8041d54:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8041d56:	683b      	ldr	r3, [r7, #0]
 8041d58:	685b      	ldr	r3, [r3, #4]
 8041d5a:	2b02      	cmp	r3, #2
 8041d5c:	d003      	beq.n	8041d66 <HAL_GPIO_Init+0xea>
 8041d5e:	683b      	ldr	r3, [r7, #0]
 8041d60:	685b      	ldr	r3, [r3, #4]
 8041d62:	2b12      	cmp	r3, #18
 8041d64:	d123      	bne.n	8041dae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8041d66:	697b      	ldr	r3, [r7, #20]
 8041d68:	08da      	lsrs	r2, r3, #3
 8041d6a:	687b      	ldr	r3, [r7, #4]
 8041d6c:	3208      	adds	r2, #8
 8041d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8041d72:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8041d74:	697b      	ldr	r3, [r7, #20]
 8041d76:	f003 0307 	and.w	r3, r3, #7
 8041d7a:	009b      	lsls	r3, r3, #2
 8041d7c:	220f      	movs	r2, #15
 8041d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8041d82:	43db      	mvns	r3, r3
 8041d84:	693a      	ldr	r2, [r7, #16]
 8041d86:	4013      	ands	r3, r2
 8041d88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8041d8a:	683b      	ldr	r3, [r7, #0]
 8041d8c:	691a      	ldr	r2, [r3, #16]
 8041d8e:	697b      	ldr	r3, [r7, #20]
 8041d90:	f003 0307 	and.w	r3, r3, #7
 8041d94:	009b      	lsls	r3, r3, #2
 8041d96:	fa02 f303 	lsl.w	r3, r2, r3
 8041d9a:	693a      	ldr	r2, [r7, #16]
 8041d9c:	4313      	orrs	r3, r2
 8041d9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8041da0:	697b      	ldr	r3, [r7, #20]
 8041da2:	08da      	lsrs	r2, r3, #3
 8041da4:	687b      	ldr	r3, [r7, #4]
 8041da6:	3208      	adds	r2, #8
 8041da8:	6939      	ldr	r1, [r7, #16]
 8041daa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8041dae:	687b      	ldr	r3, [r7, #4]
 8041db0:	681b      	ldr	r3, [r3, #0]
 8041db2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8041db4:	697b      	ldr	r3, [r7, #20]
 8041db6:	005b      	lsls	r3, r3, #1
 8041db8:	2203      	movs	r2, #3
 8041dba:	fa02 f303 	lsl.w	r3, r2, r3
 8041dbe:	43db      	mvns	r3, r3
 8041dc0:	693a      	ldr	r2, [r7, #16]
 8041dc2:	4013      	ands	r3, r2
 8041dc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8041dc6:	683b      	ldr	r3, [r7, #0]
 8041dc8:	685b      	ldr	r3, [r3, #4]
 8041dca:	f003 0203 	and.w	r2, r3, #3
 8041dce:	697b      	ldr	r3, [r7, #20]
 8041dd0:	005b      	lsls	r3, r3, #1
 8041dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8041dd6:	693a      	ldr	r2, [r7, #16]
 8041dd8:	4313      	orrs	r3, r2
 8041dda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8041ddc:	687b      	ldr	r3, [r7, #4]
 8041dde:	693a      	ldr	r2, [r7, #16]
 8041de0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8041de2:	683b      	ldr	r3, [r7, #0]
 8041de4:	685b      	ldr	r3, [r3, #4]
 8041de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041dea:	2b00      	cmp	r3, #0
 8041dec:	f000 80a4 	beq.w	8041f38 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8041df0:	4a5a      	ldr	r2, [pc, #360]	; (8041f5c <HAL_GPIO_Init+0x2e0>)
 8041df2:	697b      	ldr	r3, [r7, #20]
 8041df4:	089b      	lsrs	r3, r3, #2
 8041df6:	3318      	adds	r3, #24
 8041df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8041dfc:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8041dfe:	697b      	ldr	r3, [r7, #20]
 8041e00:	f003 0303 	and.w	r3, r3, #3
 8041e04:	00db      	lsls	r3, r3, #3
 8041e06:	220f      	movs	r2, #15
 8041e08:	fa02 f303 	lsl.w	r3, r2, r3
 8041e0c:	43db      	mvns	r3, r3
 8041e0e:	693a      	ldr	r2, [r7, #16]
 8041e10:	4013      	ands	r3, r2
 8041e12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8041e14:	687b      	ldr	r3, [r7, #4]
 8041e16:	4a52      	ldr	r2, [pc, #328]	; (8041f60 <HAL_GPIO_Init+0x2e4>)
 8041e18:	4293      	cmp	r3, r2
 8041e1a:	d025      	beq.n	8041e68 <HAL_GPIO_Init+0x1ec>
 8041e1c:	687b      	ldr	r3, [r7, #4]
 8041e1e:	4a51      	ldr	r2, [pc, #324]	; (8041f64 <HAL_GPIO_Init+0x2e8>)
 8041e20:	4293      	cmp	r3, r2
 8041e22:	d01f      	beq.n	8041e64 <HAL_GPIO_Init+0x1e8>
 8041e24:	687b      	ldr	r3, [r7, #4]
 8041e26:	4a50      	ldr	r2, [pc, #320]	; (8041f68 <HAL_GPIO_Init+0x2ec>)
 8041e28:	4293      	cmp	r3, r2
 8041e2a:	d019      	beq.n	8041e60 <HAL_GPIO_Init+0x1e4>
 8041e2c:	687b      	ldr	r3, [r7, #4]
 8041e2e:	4a4f      	ldr	r2, [pc, #316]	; (8041f6c <HAL_GPIO_Init+0x2f0>)
 8041e30:	4293      	cmp	r3, r2
 8041e32:	d013      	beq.n	8041e5c <HAL_GPIO_Init+0x1e0>
 8041e34:	687b      	ldr	r3, [r7, #4]
 8041e36:	4a4e      	ldr	r2, [pc, #312]	; (8041f70 <HAL_GPIO_Init+0x2f4>)
 8041e38:	4293      	cmp	r3, r2
 8041e3a:	d00d      	beq.n	8041e58 <HAL_GPIO_Init+0x1dc>
 8041e3c:	687b      	ldr	r3, [r7, #4]
 8041e3e:	4a4d      	ldr	r2, [pc, #308]	; (8041f74 <HAL_GPIO_Init+0x2f8>)
 8041e40:	4293      	cmp	r3, r2
 8041e42:	d007      	beq.n	8041e54 <HAL_GPIO_Init+0x1d8>
 8041e44:	687b      	ldr	r3, [r7, #4]
 8041e46:	4a4c      	ldr	r2, [pc, #304]	; (8041f78 <HAL_GPIO_Init+0x2fc>)
 8041e48:	4293      	cmp	r3, r2
 8041e4a:	d101      	bne.n	8041e50 <HAL_GPIO_Init+0x1d4>
 8041e4c:	2306      	movs	r3, #6
 8041e4e:	e00c      	b.n	8041e6a <HAL_GPIO_Init+0x1ee>
 8041e50:	2307      	movs	r3, #7
 8041e52:	e00a      	b.n	8041e6a <HAL_GPIO_Init+0x1ee>
 8041e54:	2305      	movs	r3, #5
 8041e56:	e008      	b.n	8041e6a <HAL_GPIO_Init+0x1ee>
 8041e58:	2304      	movs	r3, #4
 8041e5a:	e006      	b.n	8041e6a <HAL_GPIO_Init+0x1ee>
 8041e5c:	2303      	movs	r3, #3
 8041e5e:	e004      	b.n	8041e6a <HAL_GPIO_Init+0x1ee>
 8041e60:	2302      	movs	r3, #2
 8041e62:	e002      	b.n	8041e6a <HAL_GPIO_Init+0x1ee>
 8041e64:	2301      	movs	r3, #1
 8041e66:	e000      	b.n	8041e6a <HAL_GPIO_Init+0x1ee>
 8041e68:	2300      	movs	r3, #0
 8041e6a:	697a      	ldr	r2, [r7, #20]
 8041e6c:	f002 0203 	and.w	r2, r2, #3
 8041e70:	00d2      	lsls	r2, r2, #3
 8041e72:	4093      	lsls	r3, r2
 8041e74:	693a      	ldr	r2, [r7, #16]
 8041e76:	4313      	orrs	r3, r2
 8041e78:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8041e7a:	4938      	ldr	r1, [pc, #224]	; (8041f5c <HAL_GPIO_Init+0x2e0>)
 8041e7c:	697b      	ldr	r3, [r7, #20]
 8041e7e:	089b      	lsrs	r3, r3, #2
 8041e80:	3318      	adds	r3, #24
 8041e82:	693a      	ldr	r2, [r7, #16]
 8041e84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8041e88:	4b34      	ldr	r3, [pc, #208]	; (8041f5c <HAL_GPIO_Init+0x2e0>)
 8041e8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8041e8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8041e90:	68fb      	ldr	r3, [r7, #12]
 8041e92:	43db      	mvns	r3, r3
 8041e94:	693a      	ldr	r2, [r7, #16]
 8041e96:	4013      	ands	r3, r2
 8041e98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8041e9a:	683b      	ldr	r3, [r7, #0]
 8041e9c:	685b      	ldr	r3, [r3, #4]
 8041e9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8041ea2:	2b00      	cmp	r3, #0
 8041ea4:	d003      	beq.n	8041eae <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8041ea6:	693a      	ldr	r2, [r7, #16]
 8041ea8:	68fb      	ldr	r3, [r7, #12]
 8041eaa:	4313      	orrs	r3, r2
 8041eac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8041eae:	4a2b      	ldr	r2, [pc, #172]	; (8041f5c <HAL_GPIO_Init+0x2e0>)
 8041eb0:	693b      	ldr	r3, [r7, #16]
 8041eb2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8041eb6:	4b29      	ldr	r3, [pc, #164]	; (8041f5c <HAL_GPIO_Init+0x2e0>)
 8041eb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8041ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8041ebe:	68fb      	ldr	r3, [r7, #12]
 8041ec0:	43db      	mvns	r3, r3
 8041ec2:	693a      	ldr	r2, [r7, #16]
 8041ec4:	4013      	ands	r3, r2
 8041ec6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8041ec8:	683b      	ldr	r3, [r7, #0]
 8041eca:	685b      	ldr	r3, [r3, #4]
 8041ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041ed0:	2b00      	cmp	r3, #0
 8041ed2:	d003      	beq.n	8041edc <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 8041ed4:	693a      	ldr	r2, [r7, #16]
 8041ed6:	68fb      	ldr	r3, [r7, #12]
 8041ed8:	4313      	orrs	r3, r2
 8041eda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8041edc:	4a1f      	ldr	r2, [pc, #124]	; (8041f5c <HAL_GPIO_Init+0x2e0>)
 8041ede:	693b      	ldr	r3, [r7, #16]
 8041ee0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8041ee4:	4b1d      	ldr	r3, [pc, #116]	; (8041f5c <HAL_GPIO_Init+0x2e0>)
 8041ee6:	681b      	ldr	r3, [r3, #0]
 8041ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8041eea:	68fb      	ldr	r3, [r7, #12]
 8041eec:	43db      	mvns	r3, r3
 8041eee:	693a      	ldr	r2, [r7, #16]
 8041ef0:	4013      	ands	r3, r2
 8041ef2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8041ef4:	683b      	ldr	r3, [r7, #0]
 8041ef6:	685b      	ldr	r3, [r3, #4]
 8041ef8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8041efc:	2b00      	cmp	r3, #0
 8041efe:	d003      	beq.n	8041f08 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8041f00:	693a      	ldr	r2, [r7, #16]
 8041f02:	68fb      	ldr	r3, [r7, #12]
 8041f04:	4313      	orrs	r3, r2
 8041f06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8041f08:	4a14      	ldr	r2, [pc, #80]	; (8041f5c <HAL_GPIO_Init+0x2e0>)
 8041f0a:	693b      	ldr	r3, [r7, #16]
 8041f0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8041f0e:	4b13      	ldr	r3, [pc, #76]	; (8041f5c <HAL_GPIO_Init+0x2e0>)
 8041f10:	685b      	ldr	r3, [r3, #4]
 8041f12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8041f14:	68fb      	ldr	r3, [r7, #12]
 8041f16:	43db      	mvns	r3, r3
 8041f18:	693a      	ldr	r2, [r7, #16]
 8041f1a:	4013      	ands	r3, r2
 8041f1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8041f1e:	683b      	ldr	r3, [r7, #0]
 8041f20:	685b      	ldr	r3, [r3, #4]
 8041f22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8041f26:	2b00      	cmp	r3, #0
 8041f28:	d003      	beq.n	8041f32 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 8041f2a:	693a      	ldr	r2, [r7, #16]
 8041f2c:	68fb      	ldr	r3, [r7, #12]
 8041f2e:	4313      	orrs	r3, r2
 8041f30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8041f32:	4a0a      	ldr	r2, [pc, #40]	; (8041f5c <HAL_GPIO_Init+0x2e0>)
 8041f34:	693b      	ldr	r3, [r7, #16]
 8041f36:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8041f38:	697b      	ldr	r3, [r7, #20]
 8041f3a:	3301      	adds	r3, #1
 8041f3c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8041f3e:	683b      	ldr	r3, [r7, #0]
 8041f40:	681a      	ldr	r2, [r3, #0]
 8041f42:	697b      	ldr	r3, [r7, #20]
 8041f44:	fa22 f303 	lsr.w	r3, r2, r3
 8041f48:	2b00      	cmp	r3, #0
 8041f4a:	f47f ae9f 	bne.w	8041c8c <HAL_GPIO_Init+0x10>
  }
}
 8041f4e:	bf00      	nop
 8041f50:	bf00      	nop
 8041f52:	371c      	adds	r7, #28
 8041f54:	46bd      	mov	sp, r7
 8041f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041f5a:	4770      	bx	lr
 8041f5c:	4002f400 	.word	0x4002f400
 8041f60:	42020000 	.word	0x42020000
 8041f64:	42020400 	.word	0x42020400
 8041f68:	42020800 	.word	0x42020800
 8041f6c:	42020c00 	.word	0x42020c00
 8041f70:	42021000 	.word	0x42021000
 8041f74:	42021400 	.word	0x42021400
 8041f78:	42021800 	.word	0x42021800

08041f7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8041f7c:	b480      	push	{r7}
 8041f7e:	b083      	sub	sp, #12
 8041f80:	af00      	add	r7, sp, #0
 8041f82:	6078      	str	r0, [r7, #4]
 8041f84:	460b      	mov	r3, r1
 8041f86:	807b      	strh	r3, [r7, #2]
 8041f88:	4613      	mov	r3, r2
 8041f8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8041f8c:	787b      	ldrb	r3, [r7, #1]
 8041f8e:	2b00      	cmp	r3, #0
 8041f90:	d003      	beq.n	8041f9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8041f92:	887a      	ldrh	r2, [r7, #2]
 8041f94:	687b      	ldr	r3, [r7, #4]
 8041f96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8041f98:	e002      	b.n	8041fa0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8041f9a:	887a      	ldrh	r2, [r7, #2]
 8041f9c:	687b      	ldr	r3, [r7, #4]
 8041f9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8041fa0:	bf00      	nop
 8041fa2:	370c      	adds	r7, #12
 8041fa4:	46bd      	mov	sp, r7
 8041fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041faa:	4770      	bx	lr

08041fac <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8041fac:	b480      	push	{r7}
 8041fae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8041fb0:	4b05      	ldr	r3, [pc, #20]	; (8041fc8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8041fb2:	685b      	ldr	r3, [r3, #4]
 8041fb4:	4a04      	ldr	r2, [pc, #16]	; (8041fc8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8041fb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8041fba:	6053      	str	r3, [r2, #4]
}
 8041fbc:	bf00      	nop
 8041fbe:	46bd      	mov	sp, r7
 8041fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041fc4:	4770      	bx	lr
 8041fc6:	bf00      	nop
 8041fc8:	40007000 	.word	0x40007000

08041fcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8041fcc:	b480      	push	{r7}
 8041fce:	b089      	sub	sp, #36	; 0x24
 8041fd0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8041fd2:	2300      	movs	r3, #0
 8041fd4:	61fb      	str	r3, [r7, #28]
 8041fd6:	2300      	movs	r3, #0
 8041fd8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8041fda:	4b47      	ldr	r3, [pc, #284]	; (80420f8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8041fdc:	689b      	ldr	r3, [r3, #8]
 8041fde:	f003 030c 	and.w	r3, r3, #12
 8041fe2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8041fe4:	4b44      	ldr	r3, [pc, #272]	; (80420f8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8041fe6:	68db      	ldr	r3, [r3, #12]
 8041fe8:	f003 0303 	and.w	r3, r3, #3
 8041fec:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8041fee:	693b      	ldr	r3, [r7, #16]
 8041ff0:	2b00      	cmp	r3, #0
 8041ff2:	d005      	beq.n	8042000 <HAL_RCC_GetSysClockFreq+0x34>
 8041ff4:	693b      	ldr	r3, [r7, #16]
 8041ff6:	2b0c      	cmp	r3, #12
 8041ff8:	d121      	bne.n	804203e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8041ffa:	68fb      	ldr	r3, [r7, #12]
 8041ffc:	2b01      	cmp	r3, #1
 8041ffe:	d11e      	bne.n	804203e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8042000:	4b3d      	ldr	r3, [pc, #244]	; (80420f8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8042002:	681b      	ldr	r3, [r3, #0]
 8042004:	f003 0308 	and.w	r3, r3, #8
 8042008:	2b00      	cmp	r3, #0
 804200a:	d107      	bne.n	804201c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 804200c:	4b3a      	ldr	r3, [pc, #232]	; (80420f8 <HAL_RCC_GetSysClockFreq+0x12c>)
 804200e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8042012:	0a1b      	lsrs	r3, r3, #8
 8042014:	f003 030f 	and.w	r3, r3, #15
 8042018:	61fb      	str	r3, [r7, #28]
 804201a:	e005      	b.n	8042028 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 804201c:	4b36      	ldr	r3, [pc, #216]	; (80420f8 <HAL_RCC_GetSysClockFreq+0x12c>)
 804201e:	681b      	ldr	r3, [r3, #0]
 8042020:	091b      	lsrs	r3, r3, #4
 8042022:	f003 030f 	and.w	r3, r3, #15
 8042026:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8042028:	4a34      	ldr	r2, [pc, #208]	; (80420fc <HAL_RCC_GetSysClockFreq+0x130>)
 804202a:	69fb      	ldr	r3, [r7, #28]
 804202c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8042030:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8042032:	693b      	ldr	r3, [r7, #16]
 8042034:	2b00      	cmp	r3, #0
 8042036:	d10d      	bne.n	8042054 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8042038:	69fb      	ldr	r3, [r7, #28]
 804203a:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 804203c:	e00a      	b.n	8042054 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 804203e:	693b      	ldr	r3, [r7, #16]
 8042040:	2b04      	cmp	r3, #4
 8042042:	d102      	bne.n	804204a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8042044:	4b2e      	ldr	r3, [pc, #184]	; (8042100 <HAL_RCC_GetSysClockFreq+0x134>)
 8042046:	61bb      	str	r3, [r7, #24]
 8042048:	e004      	b.n	8042054 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 804204a:	693b      	ldr	r3, [r7, #16]
 804204c:	2b08      	cmp	r3, #8
 804204e:	d101      	bne.n	8042054 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8042050:	4b2c      	ldr	r3, [pc, #176]	; (8042104 <HAL_RCC_GetSysClockFreq+0x138>)
 8042052:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8042054:	693b      	ldr	r3, [r7, #16]
 8042056:	2b0c      	cmp	r3, #12
 8042058:	d146      	bne.n	80420e8 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 804205a:	4b27      	ldr	r3, [pc, #156]	; (80420f8 <HAL_RCC_GetSysClockFreq+0x12c>)
 804205c:	68db      	ldr	r3, [r3, #12]
 804205e:	f003 0303 	and.w	r3, r3, #3
 8042062:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8042064:	4b24      	ldr	r3, [pc, #144]	; (80420f8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8042066:	68db      	ldr	r3, [r3, #12]
 8042068:	091b      	lsrs	r3, r3, #4
 804206a:	f003 030f 	and.w	r3, r3, #15
 804206e:	3301      	adds	r3, #1
 8042070:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8042072:	68bb      	ldr	r3, [r7, #8]
 8042074:	2b02      	cmp	r3, #2
 8042076:	d003      	beq.n	8042080 <HAL_RCC_GetSysClockFreq+0xb4>
 8042078:	68bb      	ldr	r3, [r7, #8]
 804207a:	2b03      	cmp	r3, #3
 804207c:	d00d      	beq.n	804209a <HAL_RCC_GetSysClockFreq+0xce>
 804207e:	e019      	b.n	80420b4 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8042080:	4a1f      	ldr	r2, [pc, #124]	; (8042100 <HAL_RCC_GetSysClockFreq+0x134>)
 8042082:	687b      	ldr	r3, [r7, #4]
 8042084:	fbb2 f3f3 	udiv	r3, r2, r3
 8042088:	4a1b      	ldr	r2, [pc, #108]	; (80420f8 <HAL_RCC_GetSysClockFreq+0x12c>)
 804208a:	68d2      	ldr	r2, [r2, #12]
 804208c:	0a12      	lsrs	r2, r2, #8
 804208e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8042092:	fb02 f303 	mul.w	r3, r2, r3
 8042096:	617b      	str	r3, [r7, #20]
        break;
 8042098:	e019      	b.n	80420ce <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 804209a:	4a1a      	ldr	r2, [pc, #104]	; (8042104 <HAL_RCC_GetSysClockFreq+0x138>)
 804209c:	687b      	ldr	r3, [r7, #4]
 804209e:	fbb2 f3f3 	udiv	r3, r2, r3
 80420a2:	4a15      	ldr	r2, [pc, #84]	; (80420f8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80420a4:	68d2      	ldr	r2, [r2, #12]
 80420a6:	0a12      	lsrs	r2, r2, #8
 80420a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80420ac:	fb02 f303 	mul.w	r3, r2, r3
 80420b0:	617b      	str	r3, [r7, #20]
        break;
 80420b2:	e00c      	b.n	80420ce <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80420b4:	69fa      	ldr	r2, [r7, #28]
 80420b6:	687b      	ldr	r3, [r7, #4]
 80420b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80420bc:	4a0e      	ldr	r2, [pc, #56]	; (80420f8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80420be:	68d2      	ldr	r2, [r2, #12]
 80420c0:	0a12      	lsrs	r2, r2, #8
 80420c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80420c6:	fb02 f303 	mul.w	r3, r2, r3
 80420ca:	617b      	str	r3, [r7, #20]
        break;
 80420cc:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80420ce:	4b0a      	ldr	r3, [pc, #40]	; (80420f8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80420d0:	68db      	ldr	r3, [r3, #12]
 80420d2:	0e5b      	lsrs	r3, r3, #25
 80420d4:	f003 0303 	and.w	r3, r3, #3
 80420d8:	3301      	adds	r3, #1
 80420da:	005b      	lsls	r3, r3, #1
 80420dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80420de:	697a      	ldr	r2, [r7, #20]
 80420e0:	683b      	ldr	r3, [r7, #0]
 80420e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80420e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80420e8:	69bb      	ldr	r3, [r7, #24]
}
 80420ea:	4618      	mov	r0, r3
 80420ec:	3724      	adds	r7, #36	; 0x24
 80420ee:	46bd      	mov	sp, r7
 80420f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80420f4:	4770      	bx	lr
 80420f6:	bf00      	nop
 80420f8:	40021000 	.word	0x40021000
 80420fc:	080471d4 	.word	0x080471d4
 8042100:	00f42400 	.word	0x00f42400
 8042104:	007a1200 	.word	0x007a1200

08042108 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8042108:	b580      	push	{r7, lr}
 804210a:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 804210c:	f7ff ff5e 	bl	8041fcc <HAL_RCC_GetSysClockFreq>
 8042110:	4602      	mov	r2, r0
 8042112:	4b05      	ldr	r3, [pc, #20]	; (8042128 <HAL_RCC_GetHCLKFreq+0x20>)
 8042114:	689b      	ldr	r3, [r3, #8]
 8042116:	091b      	lsrs	r3, r3, #4
 8042118:	f003 030f 	and.w	r3, r3, #15
 804211c:	4903      	ldr	r1, [pc, #12]	; (804212c <HAL_RCC_GetHCLKFreq+0x24>)
 804211e:	5ccb      	ldrb	r3, [r1, r3]
 8042120:	fa22 f303 	lsr.w	r3, r2, r3
}
 8042124:	4618      	mov	r0, r3
 8042126:	bd80      	pop	{r7, pc}
 8042128:	40021000 	.word	0x40021000
 804212c:	080471bc 	.word	0x080471bc

08042130 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8042130:	b580      	push	{r7, lr}
 8042132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8042134:	f7ff ffe8 	bl	8042108 <HAL_RCC_GetHCLKFreq>
 8042138:	4602      	mov	r2, r0
 804213a:	4b05      	ldr	r3, [pc, #20]	; (8042150 <HAL_RCC_GetPCLK1Freq+0x20>)
 804213c:	689b      	ldr	r3, [r3, #8]
 804213e:	0a1b      	lsrs	r3, r3, #8
 8042140:	f003 0307 	and.w	r3, r3, #7
 8042144:	4903      	ldr	r1, [pc, #12]	; (8042154 <HAL_RCC_GetPCLK1Freq+0x24>)
 8042146:	5ccb      	ldrb	r3, [r1, r3]
 8042148:	fa22 f303 	lsr.w	r3, r2, r3
}
 804214c:	4618      	mov	r0, r3
 804214e:	bd80      	pop	{r7, pc}
 8042150:	40021000 	.word	0x40021000
 8042154:	080471cc 	.word	0x080471cc

08042158 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8042158:	b580      	push	{r7, lr}
 804215a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 804215c:	f7ff ffd4 	bl	8042108 <HAL_RCC_GetHCLKFreq>
 8042160:	4602      	mov	r2, r0
 8042162:	4b05      	ldr	r3, [pc, #20]	; (8042178 <HAL_RCC_GetPCLK2Freq+0x20>)
 8042164:	689b      	ldr	r3, [r3, #8]
 8042166:	0adb      	lsrs	r3, r3, #11
 8042168:	f003 0307 	and.w	r3, r3, #7
 804216c:	4903      	ldr	r1, [pc, #12]	; (804217c <HAL_RCC_GetPCLK2Freq+0x24>)
 804216e:	5ccb      	ldrb	r3, [r1, r3]
 8042170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8042174:	4618      	mov	r0, r3
 8042176:	bd80      	pop	{r7, pc}
 8042178:	40021000 	.word	0x40021000
 804217c:	080471cc 	.word	0x080471cc

08042180 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8042180:	b580      	push	{r7, lr}
 8042182:	b088      	sub	sp, #32
 8042184:	af00      	add	r7, sp, #0
 8042186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8042188:	2300      	movs	r3, #0
 804218a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 804218c:	2300      	movs	r3, #0
 804218e:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8042190:	687b      	ldr	r3, [r7, #4]
 8042192:	681b      	ldr	r3, [r3, #0]
 8042194:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8042198:	2b00      	cmp	r3, #0
 804219a:	d040      	beq.n	804221e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 804219c:	687b      	ldr	r3, [r7, #4]
 804219e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80421a0:	2b80      	cmp	r3, #128	; 0x80
 80421a2:	d02a      	beq.n	80421fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80421a4:	2b80      	cmp	r3, #128	; 0x80
 80421a6:	d825      	bhi.n	80421f4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80421a8:	2b60      	cmp	r3, #96	; 0x60
 80421aa:	d026      	beq.n	80421fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80421ac:	2b60      	cmp	r3, #96	; 0x60
 80421ae:	d821      	bhi.n	80421f4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80421b0:	2b40      	cmp	r3, #64	; 0x40
 80421b2:	d006      	beq.n	80421c2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80421b4:	2b40      	cmp	r3, #64	; 0x40
 80421b6:	d81d      	bhi.n	80421f4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80421b8:	2b00      	cmp	r3, #0
 80421ba:	d009      	beq.n	80421d0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80421bc:	2b20      	cmp	r3, #32
 80421be:	d010      	beq.n	80421e2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80421c0:	e018      	b.n	80421f4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80421c2:	4b87      	ldr	r3, [pc, #540]	; (80423e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80421c4:	68db      	ldr	r3, [r3, #12]
 80421c6:	4a86      	ldr	r2, [pc, #536]	; (80423e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80421c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80421cc:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80421ce:	e015      	b.n	80421fc <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80421d0:	687b      	ldr	r3, [r7, #4]
 80421d2:	3304      	adds	r3, #4
 80421d4:	2100      	movs	r1, #0
 80421d6:	4618      	mov	r0, r3
 80421d8:	f000 fb46 	bl	8042868 <RCCEx_PLLSAI1_Config>
 80421dc:	4603      	mov	r3, r0
 80421de:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80421e0:	e00c      	b.n	80421fc <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80421e2:	687b      	ldr	r3, [r7, #4]
 80421e4:	3320      	adds	r3, #32
 80421e6:	2100      	movs	r1, #0
 80421e8:	4618      	mov	r0, r3
 80421ea:	f000 fc13 	bl	8042a14 <RCCEx_PLLSAI2_Config>
 80421ee:	4603      	mov	r3, r0
 80421f0:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80421f2:	e003      	b.n	80421fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80421f4:	2301      	movs	r3, #1
 80421f6:	77fb      	strb	r3, [r7, #31]
        break;
 80421f8:	e000      	b.n	80421fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 80421fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80421fc:	7ffb      	ldrb	r3, [r7, #31]
 80421fe:	2b00      	cmp	r3, #0
 8042200:	d10b      	bne.n	804221a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8042202:	4b77      	ldr	r3, [pc, #476]	; (80423e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8042204:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8042208:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 804220c:	687b      	ldr	r3, [r7, #4]
 804220e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8042210:	4973      	ldr	r1, [pc, #460]	; (80423e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8042212:	4313      	orrs	r3, r2
 8042214:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8042218:	e001      	b.n	804221e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 804221a:	7ffb      	ldrb	r3, [r7, #31]
 804221c:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 804221e:	687b      	ldr	r3, [r7, #4]
 8042220:	681b      	ldr	r3, [r3, #0]
 8042222:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8042226:	2b00      	cmp	r3, #0
 8042228:	d047      	beq.n	80422ba <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 804222a:	687b      	ldr	r3, [r7, #4]
 804222c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804222e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8042232:	d030      	beq.n	8042296 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8042234:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8042238:	d82a      	bhi.n	8042290 <HAL_RCCEx_PeriphCLKConfig+0x110>
 804223a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 804223e:	d02a      	beq.n	8042296 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8042240:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8042244:	d824      	bhi.n	8042290 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8042246:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 804224a:	d008      	beq.n	804225e <HAL_RCCEx_PeriphCLKConfig+0xde>
 804224c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8042250:	d81e      	bhi.n	8042290 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8042252:	2b00      	cmp	r3, #0
 8042254:	d00a      	beq.n	804226c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8042256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 804225a:	d010      	beq.n	804227e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 804225c:	e018      	b.n	8042290 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 804225e:	4b60      	ldr	r3, [pc, #384]	; (80423e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8042260:	68db      	ldr	r3, [r3, #12]
 8042262:	4a5f      	ldr	r2, [pc, #380]	; (80423e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8042264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8042268:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 804226a:	e015      	b.n	8042298 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 804226c:	687b      	ldr	r3, [r7, #4]
 804226e:	3304      	adds	r3, #4
 8042270:	2100      	movs	r1, #0
 8042272:	4618      	mov	r0, r3
 8042274:	f000 faf8 	bl	8042868 <RCCEx_PLLSAI1_Config>
 8042278:	4603      	mov	r3, r0
 804227a:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 804227c:	e00c      	b.n	8042298 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 804227e:	687b      	ldr	r3, [r7, #4]
 8042280:	3320      	adds	r3, #32
 8042282:	2100      	movs	r1, #0
 8042284:	4618      	mov	r0, r3
 8042286:	f000 fbc5 	bl	8042a14 <RCCEx_PLLSAI2_Config>
 804228a:	4603      	mov	r3, r0
 804228c:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 804228e:	e003      	b.n	8042298 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8042290:	2301      	movs	r3, #1
 8042292:	77fb      	strb	r3, [r7, #31]
        break;
 8042294:	e000      	b.n	8042298 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8042296:	bf00      	nop
    }

    if (ret == HAL_OK)
 8042298:	7ffb      	ldrb	r3, [r7, #31]
 804229a:	2b00      	cmp	r3, #0
 804229c:	d10b      	bne.n	80422b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 804229e:	4b50      	ldr	r3, [pc, #320]	; (80423e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80422a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80422a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80422a8:	687b      	ldr	r3, [r7, #4]
 80422aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80422ac:	494c      	ldr	r1, [pc, #304]	; (80423e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80422ae:	4313      	orrs	r3, r2
 80422b0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80422b4:	e001      	b.n	80422ba <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80422b6:	7ffb      	ldrb	r3, [r7, #31]
 80422b8:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80422ba:	687b      	ldr	r3, [r7, #4]
 80422bc:	681b      	ldr	r3, [r3, #0]
 80422be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80422c2:	2b00      	cmp	r3, #0
 80422c4:	f000 809b 	beq.w	80423fe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80422c8:	2300      	movs	r3, #0
 80422ca:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80422cc:	4b44      	ldr	r3, [pc, #272]	; (80423e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80422ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80422d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80422d4:	2b00      	cmp	r3, #0
 80422d6:	d10d      	bne.n	80422f4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80422d8:	4b41      	ldr	r3, [pc, #260]	; (80423e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80422da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80422dc:	4a40      	ldr	r2, [pc, #256]	; (80423e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80422de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80422e2:	6593      	str	r3, [r2, #88]	; 0x58
 80422e4:	4b3e      	ldr	r3, [pc, #248]	; (80423e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80422e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80422e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80422ec:	60fb      	str	r3, [r7, #12]
 80422ee:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80422f0:	2301      	movs	r3, #1
 80422f2:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80422f4:	4b3b      	ldr	r3, [pc, #236]	; (80423e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80422f6:	681b      	ldr	r3, [r3, #0]
 80422f8:	4a3a      	ldr	r2, [pc, #232]	; (80423e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80422fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80422fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8042300:	f7ff fac2 	bl	8041888 <HAL_GetTick>
 8042304:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8042306:	e009      	b.n	804231c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8042308:	f7ff fabe 	bl	8041888 <HAL_GetTick>
 804230c:	4602      	mov	r2, r0
 804230e:	693b      	ldr	r3, [r7, #16]
 8042310:	1ad3      	subs	r3, r2, r3
 8042312:	2b02      	cmp	r3, #2
 8042314:	d902      	bls.n	804231c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8042316:	2303      	movs	r3, #3
 8042318:	77fb      	strb	r3, [r7, #31]
        break;
 804231a:	e005      	b.n	8042328 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 804231c:	4b31      	ldr	r3, [pc, #196]	; (80423e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 804231e:	681b      	ldr	r3, [r3, #0]
 8042320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8042324:	2b00      	cmp	r3, #0
 8042326:	d0ef      	beq.n	8042308 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if (ret == HAL_OK)
 8042328:	7ffb      	ldrb	r3, [r7, #31]
 804232a:	2b00      	cmp	r3, #0
 804232c:	d15c      	bne.n	80423e8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 804232e:	4b2c      	ldr	r3, [pc, #176]	; (80423e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8042330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042334:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8042338:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 804233a:	69bb      	ldr	r3, [r7, #24]
 804233c:	2b00      	cmp	r3, #0
 804233e:	d01f      	beq.n	8042380 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8042340:	687b      	ldr	r3, [r7, #4]
 8042342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042346:	69ba      	ldr	r2, [r7, #24]
 8042348:	429a      	cmp	r2, r3
 804234a:	d019      	beq.n	8042380 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 804234c:	4b24      	ldr	r3, [pc, #144]	; (80423e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804234e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042352:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8042356:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8042358:	4b21      	ldr	r3, [pc, #132]	; (80423e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804235a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804235e:	4a20      	ldr	r2, [pc, #128]	; (80423e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8042360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8042364:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8042368:	4b1d      	ldr	r3, [pc, #116]	; (80423e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804236a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804236e:	4a1c      	ldr	r2, [pc, #112]	; (80423e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8042370:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8042374:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8042378:	4a19      	ldr	r2, [pc, #100]	; (80423e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804237a:	69bb      	ldr	r3, [r7, #24]
 804237c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8042380:	69bb      	ldr	r3, [r7, #24]
 8042382:	f003 0301 	and.w	r3, r3, #1
 8042386:	2b00      	cmp	r3, #0
 8042388:	d016      	beq.n	80423b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804238a:	f7ff fa7d 	bl	8041888 <HAL_GetTick>
 804238e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8042390:	e00b      	b.n	80423aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8042392:	f7ff fa79 	bl	8041888 <HAL_GetTick>
 8042396:	4602      	mov	r2, r0
 8042398:	693b      	ldr	r3, [r7, #16]
 804239a:	1ad3      	subs	r3, r2, r3
 804239c:	f241 3288 	movw	r2, #5000	; 0x1388
 80423a0:	4293      	cmp	r3, r2
 80423a2:	d902      	bls.n	80423aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80423a4:	2303      	movs	r3, #3
 80423a6:	77fb      	strb	r3, [r7, #31]
            break;
 80423a8:	e006      	b.n	80423b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80423aa:	4b0d      	ldr	r3, [pc, #52]	; (80423e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80423ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80423b0:	f003 0302 	and.w	r3, r3, #2
 80423b4:	2b00      	cmp	r3, #0
 80423b6:	d0ec      	beq.n	8042392 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if (ret == HAL_OK)
 80423b8:	7ffb      	ldrb	r3, [r7, #31]
 80423ba:	2b00      	cmp	r3, #0
 80423bc:	d10c      	bne.n	80423d8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80423be:	4b08      	ldr	r3, [pc, #32]	; (80423e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80423c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80423c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80423c8:	687b      	ldr	r3, [r7, #4]
 80423ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80423ce:	4904      	ldr	r1, [pc, #16]	; (80423e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80423d0:	4313      	orrs	r3, r2
 80423d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80423d6:	e009      	b.n	80423ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80423d8:	7ffb      	ldrb	r3, [r7, #31]
 80423da:	77bb      	strb	r3, [r7, #30]
 80423dc:	e006      	b.n	80423ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80423de:	bf00      	nop
 80423e0:	40021000 	.word	0x40021000
 80423e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80423e8:	7ffb      	ldrb	r3, [r7, #31]
 80423ea:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80423ec:	7dfb      	ldrb	r3, [r7, #23]
 80423ee:	2b01      	cmp	r3, #1
 80423f0:	d105      	bne.n	80423fe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80423f2:	4baf      	ldr	r3, [pc, #700]	; (80426b0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 80423f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80423f6:	4aae      	ldr	r2, [pc, #696]	; (80426b0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 80423f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80423fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80423fe:	687b      	ldr	r3, [r7, #4]
 8042400:	681b      	ldr	r3, [r3, #0]
 8042402:	f003 0301 	and.w	r3, r3, #1
 8042406:	2b00      	cmp	r3, #0
 8042408:	d00a      	beq.n	8042420 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 804240a:	4ba9      	ldr	r3, [pc, #676]	; (80426b0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804240c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042410:	f023 0203 	bic.w	r2, r3, #3
 8042414:	687b      	ldr	r3, [r7, #4]
 8042416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8042418:	49a5      	ldr	r1, [pc, #660]	; (80426b0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804241a:	4313      	orrs	r3, r2
 804241c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8042420:	687b      	ldr	r3, [r7, #4]
 8042422:	681b      	ldr	r3, [r3, #0]
 8042424:	f003 0302 	and.w	r3, r3, #2
 8042428:	2b00      	cmp	r3, #0
 804242a:	d00a      	beq.n	8042442 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 804242c:	4ba0      	ldr	r3, [pc, #640]	; (80426b0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804242e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042432:	f023 020c 	bic.w	r2, r3, #12
 8042436:	687b      	ldr	r3, [r7, #4]
 8042438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804243a:	499d      	ldr	r1, [pc, #628]	; (80426b0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804243c:	4313      	orrs	r3, r2
 804243e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8042442:	687b      	ldr	r3, [r7, #4]
 8042444:	681b      	ldr	r3, [r3, #0]
 8042446:	f003 0304 	and.w	r3, r3, #4
 804244a:	2b00      	cmp	r3, #0
 804244c:	d00a      	beq.n	8042464 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 804244e:	4b98      	ldr	r3, [pc, #608]	; (80426b0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8042450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042454:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8042458:	687b      	ldr	r3, [r7, #4]
 804245a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804245c:	4994      	ldr	r1, [pc, #592]	; (80426b0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804245e:	4313      	orrs	r3, r2
 8042460:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8042464:	687b      	ldr	r3, [r7, #4]
 8042466:	681b      	ldr	r3, [r3, #0]
 8042468:	f003 0308 	and.w	r3, r3, #8
 804246c:	2b00      	cmp	r3, #0
 804246e:	d00a      	beq.n	8042486 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8042470:	4b8f      	ldr	r3, [pc, #572]	; (80426b0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8042472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042476:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 804247a:	687b      	ldr	r3, [r7, #4]
 804247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804247e:	498c      	ldr	r1, [pc, #560]	; (80426b0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8042480:	4313      	orrs	r3, r2
 8042482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8042486:	687b      	ldr	r3, [r7, #4]
 8042488:	681b      	ldr	r3, [r3, #0]
 804248a:	f003 0310 	and.w	r3, r3, #16
 804248e:	2b00      	cmp	r3, #0
 8042490:	d00a      	beq.n	80424a8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8042492:	4b87      	ldr	r3, [pc, #540]	; (80426b0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8042494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042498:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 804249c:	687b      	ldr	r3, [r7, #4]
 804249e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80424a0:	4983      	ldr	r1, [pc, #524]	; (80426b0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 80424a2:	4313      	orrs	r3, r2
 80424a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80424a8:	687b      	ldr	r3, [r7, #4]
 80424aa:	681b      	ldr	r3, [r3, #0]
 80424ac:	f003 0320 	and.w	r3, r3, #32
 80424b0:	2b00      	cmp	r3, #0
 80424b2:	d00a      	beq.n	80424ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80424b4:	4b7e      	ldr	r3, [pc, #504]	; (80426b0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 80424b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80424ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80424be:	687b      	ldr	r3, [r7, #4]
 80424c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80424c2:	497b      	ldr	r1, [pc, #492]	; (80426b0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 80424c4:	4313      	orrs	r3, r2
 80424c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80424ca:	687b      	ldr	r3, [r7, #4]
 80424cc:	681b      	ldr	r3, [r3, #0]
 80424ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80424d2:	2b00      	cmp	r3, #0
 80424d4:	d00a      	beq.n	80424ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80424d6:	4b76      	ldr	r3, [pc, #472]	; (80426b0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 80424d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80424dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80424e0:	687b      	ldr	r3, [r7, #4]
 80424e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80424e4:	4972      	ldr	r1, [pc, #456]	; (80426b0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 80424e6:	4313      	orrs	r3, r2
 80424e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80424ec:	687b      	ldr	r3, [r7, #4]
 80424ee:	681b      	ldr	r3, [r3, #0]
 80424f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80424f4:	2b00      	cmp	r3, #0
 80424f6:	d00a      	beq.n	804250e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80424f8:	4b6d      	ldr	r3, [pc, #436]	; (80426b0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 80424fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80424fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8042502:	687b      	ldr	r3, [r7, #4]
 8042504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8042506:	496a      	ldr	r1, [pc, #424]	; (80426b0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8042508:	4313      	orrs	r3, r2
 804250a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 804250e:	687b      	ldr	r3, [r7, #4]
 8042510:	681b      	ldr	r3, [r3, #0]
 8042512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8042516:	2b00      	cmp	r3, #0
 8042518:	d00a      	beq.n	8042530 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 804251a:	4b65      	ldr	r3, [pc, #404]	; (80426b0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804251c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042520:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8042524:	687b      	ldr	r3, [r7, #4]
 8042526:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8042528:	4961      	ldr	r1, [pc, #388]	; (80426b0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804252a:	4313      	orrs	r3, r2
 804252c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8042530:	687b      	ldr	r3, [r7, #4]
 8042532:	681b      	ldr	r3, [r3, #0]
 8042534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8042538:	2b00      	cmp	r3, #0
 804253a:	d031      	beq.n	80425a0 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 804253c:	687b      	ldr	r3, [r7, #4]
 804253e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8042540:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8042544:	d00e      	beq.n	8042564 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8042546:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 804254a:	d814      	bhi.n	8042576 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 804254c:	2b00      	cmp	r3, #0
 804254e:	d015      	beq.n	804257c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8042550:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8042554:	d10f      	bne.n	8042576 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8042556:	4b56      	ldr	r3, [pc, #344]	; (80426b0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8042558:	68db      	ldr	r3, [r3, #12]
 804255a:	4a55      	ldr	r2, [pc, #340]	; (80426b0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804255c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8042560:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8042562:	e00c      	b.n	804257e <HAL_RCCEx_PeriphCLKConfig+0x3fe>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8042564:	687b      	ldr	r3, [r7, #4]
 8042566:	3304      	adds	r3, #4
 8042568:	2100      	movs	r1, #0
 804256a:	4618      	mov	r0, r3
 804256c:	f000 f97c 	bl	8042868 <RCCEx_PLLSAI1_Config>
 8042570:	4603      	mov	r3, r0
 8042572:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8042574:	e003      	b.n	804257e <HAL_RCCEx_PeriphCLKConfig+0x3fe>

      default:
        ret = HAL_ERROR;
 8042576:	2301      	movs	r3, #1
 8042578:	77fb      	strb	r3, [r7, #31]
        break;
 804257a:	e000      	b.n	804257e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
        break;
 804257c:	bf00      	nop
    }

    if (ret == HAL_OK)
 804257e:	7ffb      	ldrb	r3, [r7, #31]
 8042580:	2b00      	cmp	r3, #0
 8042582:	d10b      	bne.n	804259c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8042584:	4b4a      	ldr	r3, [pc, #296]	; (80426b0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8042586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804258a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 804258e:	687b      	ldr	r3, [r7, #4]
 8042590:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8042592:	4947      	ldr	r1, [pc, #284]	; (80426b0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8042594:	4313      	orrs	r3, r2
 8042596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 804259a:	e001      	b.n	80425a0 <HAL_RCCEx_PeriphCLKConfig+0x420>
    }
    else
    {
      /* set overall return value */
      status = ret;
 804259c:	7ffb      	ldrb	r3, [r7, #31]
 804259e:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80425a0:	687b      	ldr	r3, [r7, #4]
 80425a2:	681b      	ldr	r3, [r3, #0]
 80425a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80425a8:	2b00      	cmp	r3, #0
 80425aa:	d00a      	beq.n	80425c2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80425ac:	4b40      	ldr	r3, [pc, #256]	; (80426b0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 80425ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80425b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80425b6:	687b      	ldr	r3, [r7, #4]
 80425b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80425ba:	493d      	ldr	r1, [pc, #244]	; (80426b0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 80425bc:	4313      	orrs	r3, r2
 80425be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80425c2:	687b      	ldr	r3, [r7, #4]
 80425c4:	681b      	ldr	r3, [r3, #0]
 80425c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80425ca:	2b00      	cmp	r3, #0
 80425cc:	d00a      	beq.n	80425e4 <HAL_RCCEx_PeriphCLKConfig+0x464>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80425ce:	4b38      	ldr	r3, [pc, #224]	; (80426b0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 80425d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80425d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80425d8:	687b      	ldr	r3, [r7, #4]
 80425da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80425dc:	4934      	ldr	r1, [pc, #208]	; (80426b0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 80425de:	4313      	orrs	r3, r2
 80425e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80425e4:	687b      	ldr	r3, [r7, #4]
 80425e6:	681b      	ldr	r3, [r3, #0]
 80425e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80425ec:	2b00      	cmp	r3, #0
 80425ee:	d00a      	beq.n	8042606 <HAL_RCCEx_PeriphCLKConfig+0x486>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80425f0:	4b2f      	ldr	r3, [pc, #188]	; (80426b0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 80425f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80425f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80425fa:	687b      	ldr	r3, [r7, #4]
 80425fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80425fe:	492c      	ldr	r1, [pc, #176]	; (80426b0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8042600:	4313      	orrs	r3, r2
 8042602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8042606:	687b      	ldr	r3, [r7, #4]
 8042608:	681b      	ldr	r3, [r3, #0]
 804260a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 804260e:	2b00      	cmp	r3, #0
 8042610:	d00a      	beq.n	8042628 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8042612:	4b27      	ldr	r3, [pc, #156]	; (80426b0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8042614:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8042618:	f023 0203 	bic.w	r2, r3, #3
 804261c:	687b      	ldr	r3, [r7, #4]
 804261e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8042620:	4923      	ldr	r1, [pc, #140]	; (80426b0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8042622:	4313      	orrs	r3, r2
 8042624:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8042628:	687b      	ldr	r3, [r7, #4]
 804262a:	681b      	ldr	r3, [r3, #0]
 804262c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8042630:	2b00      	cmp	r3, #0
 8042632:	d028      	beq.n	8042686 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8042634:	4b1e      	ldr	r3, [pc, #120]	; (80426b0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8042636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804263a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 804263e:	687b      	ldr	r3, [r7, #4]
 8042640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8042642:	491b      	ldr	r1, [pc, #108]	; (80426b0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8042644:	4313      	orrs	r3, r2
 8042646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 804264a:	687b      	ldr	r3, [r7, #4]
 804264c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804264e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8042652:	d106      	bne.n	8042662 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8042654:	4b16      	ldr	r3, [pc, #88]	; (80426b0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8042656:	68db      	ldr	r3, [r3, #12]
 8042658:	4a15      	ldr	r2, [pc, #84]	; (80426b0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804265a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 804265e:	60d3      	str	r3, [r2, #12]
 8042660:	e011      	b.n	8042686 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8042662:	687b      	ldr	r3, [r7, #4]
 8042664:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8042666:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 804266a:	d10c      	bne.n	8042686 <HAL_RCCEx_PeriphCLKConfig+0x506>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 804266c:	687b      	ldr	r3, [r7, #4]
 804266e:	3304      	adds	r3, #4
 8042670:	2101      	movs	r1, #1
 8042672:	4618      	mov	r0, r3
 8042674:	f000 f8f8 	bl	8042868 <RCCEx_PLLSAI1_Config>
 8042678:	4603      	mov	r3, r0
 804267a:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 804267c:	7ffb      	ldrb	r3, [r7, #31]
 804267e:	2b00      	cmp	r3, #0
 8042680:	d001      	beq.n	8042686 <HAL_RCCEx_PeriphCLKConfig+0x506>
        {
          /* set overall return value */
          status = ret;
 8042682:	7ffb      	ldrb	r3, [r7, #31]
 8042684:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8042686:	687b      	ldr	r3, [r7, #4]
 8042688:	681b      	ldr	r3, [r3, #0]
 804268a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 804268e:	2b00      	cmp	r3, #0
 8042690:	d04d      	beq.n	804272e <HAL_RCCEx_PeriphCLKConfig+0x5ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8042692:	687b      	ldr	r3, [r7, #4]
 8042694:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8042696:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 804269a:	d10b      	bne.n	80426b4 <HAL_RCCEx_PeriphCLKConfig+0x534>
 804269c:	4b04      	ldr	r3, [pc, #16]	; (80426b0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804269e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80426a2:	4a03      	ldr	r2, [pc, #12]	; (80426b0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 80426a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80426a8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80426ac:	e015      	b.n	80426da <HAL_RCCEx_PeriphCLKConfig+0x55a>
 80426ae:	bf00      	nop
 80426b0:	40021000 	.word	0x40021000
 80426b4:	4b6b      	ldr	r3, [pc, #428]	; (8042864 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 80426b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80426ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80426be:	687b      	ldr	r3, [r7, #4]
 80426c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80426c2:	4968      	ldr	r1, [pc, #416]	; (8042864 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 80426c4:	4313      	orrs	r3, r2
 80426c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80426ca:	4b66      	ldr	r3, [pc, #408]	; (8042864 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 80426cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80426d0:	4a64      	ldr	r2, [pc, #400]	; (8042864 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 80426d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80426d6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80426da:	687b      	ldr	r3, [r7, #4]
 80426dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80426de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80426e2:	d10d      	bne.n	8042700 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80426e4:	687b      	ldr	r3, [r7, #4]
 80426e6:	3304      	adds	r3, #4
 80426e8:	2101      	movs	r1, #1
 80426ea:	4618      	mov	r0, r3
 80426ec:	f000 f8bc 	bl	8042868 <RCCEx_PLLSAI1_Config>
 80426f0:	4603      	mov	r3, r0
 80426f2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80426f4:	7ffb      	ldrb	r3, [r7, #31]
 80426f6:	2b00      	cmp	r3, #0
 80426f8:	d019      	beq.n	804272e <HAL_RCCEx_PeriphCLKConfig+0x5ae>
      {
        /* set overall return value */
        status = ret;
 80426fa:	7ffb      	ldrb	r3, [r7, #31]
 80426fc:	77bb      	strb	r3, [r7, #30]
 80426fe:	e016      	b.n	804272e <HAL_RCCEx_PeriphCLKConfig+0x5ae>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8042700:	687b      	ldr	r3, [r7, #4]
 8042702:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8042704:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8042708:	d106      	bne.n	8042718 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 804270a:	4b56      	ldr	r3, [pc, #344]	; (8042864 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804270c:	68db      	ldr	r3, [r3, #12]
 804270e:	4a55      	ldr	r2, [pc, #340]	; (8042864 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8042710:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8042714:	60d3      	str	r3, [r2, #12]
 8042716:	e00a      	b.n	804272e <HAL_RCCEx_PeriphCLKConfig+0x5ae>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8042718:	687b      	ldr	r3, [r7, #4]
 804271a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 804271c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8042720:	d105      	bne.n	804272e <HAL_RCCEx_PeriphCLKConfig+0x5ae>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8042722:	4b50      	ldr	r3, [pc, #320]	; (8042864 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8042724:	68db      	ldr	r3, [r3, #12]
 8042726:	4a4f      	ldr	r2, [pc, #316]	; (8042864 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8042728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 804272c:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 804272e:	687b      	ldr	r3, [r7, #4]
 8042730:	681b      	ldr	r3, [r3, #0]
 8042732:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8042736:	2b00      	cmp	r3, #0
 8042738:	d028      	beq.n	804278c <HAL_RCCEx_PeriphCLKConfig+0x60c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 804273a:	4b4a      	ldr	r3, [pc, #296]	; (8042864 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804273c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042740:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8042744:	687b      	ldr	r3, [r7, #4]
 8042746:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8042748:	4946      	ldr	r1, [pc, #280]	; (8042864 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804274a:	4313      	orrs	r3, r2
 804274c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8042750:	687b      	ldr	r3, [r7, #4]
 8042752:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8042754:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8042758:	d106      	bne.n	8042768 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 804275a:	4b42      	ldr	r3, [pc, #264]	; (8042864 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804275c:	68db      	ldr	r3, [r3, #12]
 804275e:	4a41      	ldr	r2, [pc, #260]	; (8042864 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8042760:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8042764:	60d3      	str	r3, [r2, #12]
 8042766:	e011      	b.n	804278c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8042768:	687b      	ldr	r3, [r7, #4]
 804276a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804276c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8042770:	d10c      	bne.n	804278c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8042772:	687b      	ldr	r3, [r7, #4]
 8042774:	3304      	adds	r3, #4
 8042776:	2101      	movs	r1, #1
 8042778:	4618      	mov	r0, r3
 804277a:	f000 f875 	bl	8042868 <RCCEx_PLLSAI1_Config>
 804277e:	4603      	mov	r3, r0
 8042780:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8042782:	7ffb      	ldrb	r3, [r7, #31]
 8042784:	2b00      	cmp	r3, #0
 8042786:	d001      	beq.n	804278c <HAL_RCCEx_PeriphCLKConfig+0x60c>
      {
        /* set overall return value */
        status = ret;
 8042788:	7ffb      	ldrb	r3, [r7, #31]
 804278a:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 804278c:	687b      	ldr	r3, [r7, #4]
 804278e:	681b      	ldr	r3, [r3, #0]
 8042790:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8042794:	2b00      	cmp	r3, #0
 8042796:	d01e      	beq.n	80427d6 <HAL_RCCEx_PeriphCLKConfig+0x656>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8042798:	4b32      	ldr	r3, [pc, #200]	; (8042864 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804279a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804279e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80427a2:	687b      	ldr	r3, [r7, #4]
 80427a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80427a8:	492e      	ldr	r1, [pc, #184]	; (8042864 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 80427aa:	4313      	orrs	r3, r2
 80427ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80427b0:	687b      	ldr	r3, [r7, #4]
 80427b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80427b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80427ba:	d10c      	bne.n	80427d6 <HAL_RCCEx_PeriphCLKConfig+0x656>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80427bc:	687b      	ldr	r3, [r7, #4]
 80427be:	3304      	adds	r3, #4
 80427c0:	2102      	movs	r1, #2
 80427c2:	4618      	mov	r0, r3
 80427c4:	f000 f850 	bl	8042868 <RCCEx_PLLSAI1_Config>
 80427c8:	4603      	mov	r3, r0
 80427ca:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80427cc:	7ffb      	ldrb	r3, [r7, #31]
 80427ce:	2b00      	cmp	r3, #0
 80427d0:	d001      	beq.n	80427d6 <HAL_RCCEx_PeriphCLKConfig+0x656>
      {
        /* set overall return value */
        status = ret;
 80427d2:	7ffb      	ldrb	r3, [r7, #31]
 80427d4:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80427d6:	687b      	ldr	r3, [r7, #4]
 80427d8:	681b      	ldr	r3, [r3, #0]
 80427da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80427de:	2b00      	cmp	r3, #0
 80427e0:	d00b      	beq.n	80427fa <HAL_RCCEx_PeriphCLKConfig+0x67a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80427e2:	4b20      	ldr	r3, [pc, #128]	; (8042864 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 80427e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80427e8:	f023 0204 	bic.w	r2, r3, #4
 80427ec:	687b      	ldr	r3, [r7, #4]
 80427ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80427f2:	491c      	ldr	r1, [pc, #112]	; (8042864 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 80427f4:	4313      	orrs	r3, r2
 80427f6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80427fa:	687b      	ldr	r3, [r7, #4]
 80427fc:	681b      	ldr	r3, [r3, #0]
 80427fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8042802:	2b00      	cmp	r3, #0
 8042804:	d00b      	beq.n	804281e <HAL_RCCEx_PeriphCLKConfig+0x69e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8042806:	4b17      	ldr	r3, [pc, #92]	; (8042864 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8042808:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 804280c:	f023 0218 	bic.w	r2, r3, #24
 8042810:	687b      	ldr	r3, [r7, #4]
 8042812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042816:	4913      	ldr	r1, [pc, #76]	; (8042864 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8042818:	4313      	orrs	r3, r2
 804281a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 804281e:	687b      	ldr	r3, [r7, #4]
 8042820:	681b      	ldr	r3, [r3, #0]
 8042822:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8042826:	2b00      	cmp	r3, #0
 8042828:	d017      	beq.n	804285a <HAL_RCCEx_PeriphCLKConfig+0x6da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 804282a:	4b0e      	ldr	r3, [pc, #56]	; (8042864 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804282c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8042830:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8042834:	687b      	ldr	r3, [r7, #4]
 8042836:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804283a:	490a      	ldr	r1, [pc, #40]	; (8042864 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804283c:	4313      	orrs	r3, r2
 804283e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
    
    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8042842:	687b      	ldr	r3, [r7, #4]
 8042844:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8042848:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 804284c:	d105      	bne.n	804285a <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 804284e:	4b05      	ldr	r3, [pc, #20]	; (8042864 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8042850:	68db      	ldr	r3, [r3, #12]
 8042852:	4a04      	ldr	r2, [pc, #16]	; (8042864 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8042854:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8042858:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 804285a:	7fbb      	ldrb	r3, [r7, #30]
}
 804285c:	4618      	mov	r0, r3
 804285e:	3720      	adds	r7, #32
 8042860:	46bd      	mov	sp, r7
 8042862:	bd80      	pop	{r7, pc}
 8042864:	40021000 	.word	0x40021000

08042868 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8042868:	b580      	push	{r7, lr}
 804286a:	b084      	sub	sp, #16
 804286c:	af00      	add	r7, sp, #0
 804286e:	6078      	str	r0, [r7, #4]
 8042870:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8042872:	2300      	movs	r3, #0
 8042874:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8042876:	687b      	ldr	r3, [r7, #4]
 8042878:	681b      	ldr	r3, [r3, #0]
 804287a:	2b03      	cmp	r3, #3
 804287c:	d018      	beq.n	80428b0 <RCCEx_PLLSAI1_Config+0x48>
 804287e:	2b03      	cmp	r3, #3
 8042880:	d81f      	bhi.n	80428c2 <RCCEx_PLLSAI1_Config+0x5a>
 8042882:	2b01      	cmp	r3, #1
 8042884:	d002      	beq.n	804288c <RCCEx_PLLSAI1_Config+0x24>
 8042886:	2b02      	cmp	r3, #2
 8042888:	d009      	beq.n	804289e <RCCEx_PLLSAI1_Config+0x36>
 804288a:	e01a      	b.n	80428c2 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 804288c:	4b5d      	ldr	r3, [pc, #372]	; (8042a04 <RCCEx_PLLSAI1_Config+0x19c>)
 804288e:	681b      	ldr	r3, [r3, #0]
 8042890:	f003 0302 	and.w	r3, r3, #2
 8042894:	2b00      	cmp	r3, #0
 8042896:	d117      	bne.n	80428c8 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8042898:	2301      	movs	r3, #1
 804289a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 804289c:	e014      	b.n	80428c8 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 804289e:	4b59      	ldr	r3, [pc, #356]	; (8042a04 <RCCEx_PLLSAI1_Config+0x19c>)
 80428a0:	681b      	ldr	r3, [r3, #0]
 80428a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80428a6:	2b00      	cmp	r3, #0
 80428a8:	d110      	bne.n	80428cc <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 80428aa:	2301      	movs	r3, #1
 80428ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80428ae:	e00d      	b.n	80428cc <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80428b0:	4b54      	ldr	r3, [pc, #336]	; (8042a04 <RCCEx_PLLSAI1_Config+0x19c>)
 80428b2:	681b      	ldr	r3, [r3, #0]
 80428b4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80428b8:	2b00      	cmp	r3, #0
 80428ba:	d109      	bne.n	80428d0 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 80428bc:	2301      	movs	r3, #1
 80428be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80428c0:	e006      	b.n	80428d0 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 80428c2:	2301      	movs	r3, #1
 80428c4:	73fb      	strb	r3, [r7, #15]
      break;
 80428c6:	e004      	b.n	80428d2 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80428c8:	bf00      	nop
 80428ca:	e002      	b.n	80428d2 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80428cc:	bf00      	nop
 80428ce:	e000      	b.n	80428d2 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80428d0:	bf00      	nop
  }

  if (status == HAL_OK)
 80428d2:	7bfb      	ldrb	r3, [r7, #15]
 80428d4:	2b00      	cmp	r3, #0
 80428d6:	f040 808f 	bne.w	80429f8 <RCCEx_PLLSAI1_Config+0x190>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80428da:	4b4a      	ldr	r3, [pc, #296]	; (8042a04 <RCCEx_PLLSAI1_Config+0x19c>)
 80428dc:	681b      	ldr	r3, [r3, #0]
 80428de:	4a49      	ldr	r2, [pc, #292]	; (8042a04 <RCCEx_PLLSAI1_Config+0x19c>)
 80428e0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80428e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80428e6:	f7fe ffcf 	bl	8041888 <HAL_GetTick>
 80428ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80428ec:	e009      	b.n	8042902 <RCCEx_PLLSAI1_Config+0x9a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80428ee:	f7fe ffcb 	bl	8041888 <HAL_GetTick>
 80428f2:	4602      	mov	r2, r0
 80428f4:	68bb      	ldr	r3, [r7, #8]
 80428f6:	1ad3      	subs	r3, r2, r3
 80428f8:	2b02      	cmp	r3, #2
 80428fa:	d902      	bls.n	8042902 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_TIMEOUT;
 80428fc:	2303      	movs	r3, #3
 80428fe:	73fb      	strb	r3, [r7, #15]
        break;
 8042900:	e005      	b.n	804290e <RCCEx_PLLSAI1_Config+0xa6>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8042902:	4b40      	ldr	r3, [pc, #256]	; (8042a04 <RCCEx_PLLSAI1_Config+0x19c>)
 8042904:	681b      	ldr	r3, [r3, #0]
 8042906:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 804290a:	2b00      	cmp	r3, #0
 804290c:	d1ef      	bne.n	80428ee <RCCEx_PLLSAI1_Config+0x86>
      }
    }

    if (status == HAL_OK)
 804290e:	7bfb      	ldrb	r3, [r7, #15]
 8042910:	2b00      	cmp	r3, #0
 8042912:	d171      	bne.n	80429f8 <RCCEx_PLLSAI1_Config+0x190>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8042914:	683b      	ldr	r3, [r7, #0]
 8042916:	2b00      	cmp	r3, #0
 8042918:	d116      	bne.n	8042948 <RCCEx_PLLSAI1_Config+0xe0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 804291a:	4b3a      	ldr	r3, [pc, #232]	; (8042a04 <RCCEx_PLLSAI1_Config+0x19c>)
 804291c:	691a      	ldr	r2, [r3, #16]
 804291e:	4b3a      	ldr	r3, [pc, #232]	; (8042a08 <RCCEx_PLLSAI1_Config+0x1a0>)
 8042920:	4013      	ands	r3, r2
 8042922:	687a      	ldr	r2, [r7, #4]
 8042924:	6892      	ldr	r2, [r2, #8]
 8042926:	0211      	lsls	r1, r2, #8
 8042928:	687a      	ldr	r2, [r7, #4]
 804292a:	68d2      	ldr	r2, [r2, #12]
 804292c:	06d2      	lsls	r2, r2, #27
 804292e:	4311      	orrs	r1, r2
 8042930:	687a      	ldr	r2, [r7, #4]
 8042932:	6852      	ldr	r2, [r2, #4]
 8042934:	3a01      	subs	r2, #1
 8042936:	0112      	lsls	r2, r2, #4
 8042938:	4311      	orrs	r1, r2
 804293a:	687a      	ldr	r2, [r7, #4]
 804293c:	6812      	ldr	r2, [r2, #0]
 804293e:	430a      	orrs	r2, r1
 8042940:	4930      	ldr	r1, [pc, #192]	; (8042a04 <RCCEx_PLLSAI1_Config+0x19c>)
 8042942:	4313      	orrs	r3, r2
 8042944:	610b      	str	r3, [r1, #16]
 8042946:	e033      	b.n	80429b0 <RCCEx_PLLSAI1_Config+0x148>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8042948:	683b      	ldr	r3, [r7, #0]
 804294a:	2b01      	cmp	r3, #1
 804294c:	d118      	bne.n	8042980 <RCCEx_PLLSAI1_Config+0x118>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 804294e:	4b2d      	ldr	r3, [pc, #180]	; (8042a04 <RCCEx_PLLSAI1_Config+0x19c>)
 8042950:	691a      	ldr	r2, [r3, #16]
 8042952:	4b2e      	ldr	r3, [pc, #184]	; (8042a0c <RCCEx_PLLSAI1_Config+0x1a4>)
 8042954:	4013      	ands	r3, r2
 8042956:	687a      	ldr	r2, [r7, #4]
 8042958:	6892      	ldr	r2, [r2, #8]
 804295a:	0211      	lsls	r1, r2, #8
 804295c:	687a      	ldr	r2, [r7, #4]
 804295e:	6912      	ldr	r2, [r2, #16]
 8042960:	0852      	lsrs	r2, r2, #1
 8042962:	3a01      	subs	r2, #1
 8042964:	0552      	lsls	r2, r2, #21
 8042966:	4311      	orrs	r1, r2
 8042968:	687a      	ldr	r2, [r7, #4]
 804296a:	6852      	ldr	r2, [r2, #4]
 804296c:	3a01      	subs	r2, #1
 804296e:	0112      	lsls	r2, r2, #4
 8042970:	4311      	orrs	r1, r2
 8042972:	687a      	ldr	r2, [r7, #4]
 8042974:	6812      	ldr	r2, [r2, #0]
 8042976:	430a      	orrs	r2, r1
 8042978:	4922      	ldr	r1, [pc, #136]	; (8042a04 <RCCEx_PLLSAI1_Config+0x19c>)
 804297a:	4313      	orrs	r3, r2
 804297c:	610b      	str	r3, [r1, #16]
 804297e:	e017      	b.n	80429b0 <RCCEx_PLLSAI1_Config+0x148>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8042980:	4b20      	ldr	r3, [pc, #128]	; (8042a04 <RCCEx_PLLSAI1_Config+0x19c>)
 8042982:	691a      	ldr	r2, [r3, #16]
 8042984:	4b22      	ldr	r3, [pc, #136]	; (8042a10 <RCCEx_PLLSAI1_Config+0x1a8>)
 8042986:	4013      	ands	r3, r2
 8042988:	687a      	ldr	r2, [r7, #4]
 804298a:	6892      	ldr	r2, [r2, #8]
 804298c:	0211      	lsls	r1, r2, #8
 804298e:	687a      	ldr	r2, [r7, #4]
 8042990:	6952      	ldr	r2, [r2, #20]
 8042992:	0852      	lsrs	r2, r2, #1
 8042994:	3a01      	subs	r2, #1
 8042996:	0652      	lsls	r2, r2, #25
 8042998:	4311      	orrs	r1, r2
 804299a:	687a      	ldr	r2, [r7, #4]
 804299c:	6852      	ldr	r2, [r2, #4]
 804299e:	3a01      	subs	r2, #1
 80429a0:	0112      	lsls	r2, r2, #4
 80429a2:	4311      	orrs	r1, r2
 80429a4:	687a      	ldr	r2, [r7, #4]
 80429a6:	6812      	ldr	r2, [r2, #0]
 80429a8:	430a      	orrs	r2, r1
 80429aa:	4916      	ldr	r1, [pc, #88]	; (8042a04 <RCCEx_PLLSAI1_Config+0x19c>)
 80429ac:	4313      	orrs	r3, r2
 80429ae:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80429b0:	4b14      	ldr	r3, [pc, #80]	; (8042a04 <RCCEx_PLLSAI1_Config+0x19c>)
 80429b2:	681b      	ldr	r3, [r3, #0]
 80429b4:	4a13      	ldr	r2, [pc, #76]	; (8042a04 <RCCEx_PLLSAI1_Config+0x19c>)
 80429b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80429ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80429bc:	f7fe ff64 	bl	8041888 <HAL_GetTick>
 80429c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80429c2:	e009      	b.n	80429d8 <RCCEx_PLLSAI1_Config+0x170>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80429c4:	f7fe ff60 	bl	8041888 <HAL_GetTick>
 80429c8:	4602      	mov	r2, r0
 80429ca:	68bb      	ldr	r3, [r7, #8]
 80429cc:	1ad3      	subs	r3, r2, r3
 80429ce:	2b02      	cmp	r3, #2
 80429d0:	d902      	bls.n	80429d8 <RCCEx_PLLSAI1_Config+0x170>
        {
          status = HAL_TIMEOUT;
 80429d2:	2303      	movs	r3, #3
 80429d4:	73fb      	strb	r3, [r7, #15]
          break;
 80429d6:	e005      	b.n	80429e4 <RCCEx_PLLSAI1_Config+0x17c>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80429d8:	4b0a      	ldr	r3, [pc, #40]	; (8042a04 <RCCEx_PLLSAI1_Config+0x19c>)
 80429da:	681b      	ldr	r3, [r3, #0]
 80429dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80429e0:	2b00      	cmp	r3, #0
 80429e2:	d0ef      	beq.n	80429c4 <RCCEx_PLLSAI1_Config+0x15c>
        }
      }

      if (status == HAL_OK)
 80429e4:	7bfb      	ldrb	r3, [r7, #15]
 80429e6:	2b00      	cmp	r3, #0
 80429e8:	d106      	bne.n	80429f8 <RCCEx_PLLSAI1_Config+0x190>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 80429ea:	4b06      	ldr	r3, [pc, #24]	; (8042a04 <RCCEx_PLLSAI1_Config+0x19c>)
 80429ec:	691a      	ldr	r2, [r3, #16]
 80429ee:	687b      	ldr	r3, [r7, #4]
 80429f0:	699b      	ldr	r3, [r3, #24]
 80429f2:	4904      	ldr	r1, [pc, #16]	; (8042a04 <RCCEx_PLLSAI1_Config+0x19c>)
 80429f4:	4313      	orrs	r3, r2
 80429f6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80429f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80429fa:	4618      	mov	r0, r3
 80429fc:	3710      	adds	r7, #16
 80429fe:	46bd      	mov	sp, r7
 8042a00:	bd80      	pop	{r7, pc}
 8042a02:	bf00      	nop
 8042a04:	40021000 	.word	0x40021000
 8042a08:	07ff800c 	.word	0x07ff800c
 8042a0c:	ff9f800c 	.word	0xff9f800c
 8042a10:	f9ff800c 	.word	0xf9ff800c

08042a14 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8042a14:	b580      	push	{r7, lr}
 8042a16:	b084      	sub	sp, #16
 8042a18:	af00      	add	r7, sp, #0
 8042a1a:	6078      	str	r0, [r7, #4]
 8042a1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8042a1e:	2300      	movs	r3, #0
 8042a20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8042a22:	687b      	ldr	r3, [r7, #4]
 8042a24:	681b      	ldr	r3, [r3, #0]
 8042a26:	2b03      	cmp	r3, #3
 8042a28:	d018      	beq.n	8042a5c <RCCEx_PLLSAI2_Config+0x48>
 8042a2a:	2b03      	cmp	r3, #3
 8042a2c:	d81f      	bhi.n	8042a6e <RCCEx_PLLSAI2_Config+0x5a>
 8042a2e:	2b01      	cmp	r3, #1
 8042a30:	d002      	beq.n	8042a38 <RCCEx_PLLSAI2_Config+0x24>
 8042a32:	2b02      	cmp	r3, #2
 8042a34:	d009      	beq.n	8042a4a <RCCEx_PLLSAI2_Config+0x36>
 8042a36:	e01a      	b.n	8042a6e <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8042a38:	4b42      	ldr	r3, [pc, #264]	; (8042b44 <RCCEx_PLLSAI2_Config+0x130>)
 8042a3a:	681b      	ldr	r3, [r3, #0]
 8042a3c:	f003 0302 	and.w	r3, r3, #2
 8042a40:	2b00      	cmp	r3, #0
 8042a42:	d117      	bne.n	8042a74 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8042a44:	2301      	movs	r3, #1
 8042a46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8042a48:	e014      	b.n	8042a74 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8042a4a:	4b3e      	ldr	r3, [pc, #248]	; (8042b44 <RCCEx_PLLSAI2_Config+0x130>)
 8042a4c:	681b      	ldr	r3, [r3, #0]
 8042a4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8042a52:	2b00      	cmp	r3, #0
 8042a54:	d110      	bne.n	8042a78 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8042a56:	2301      	movs	r3, #1
 8042a58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8042a5a:	e00d      	b.n	8042a78 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8042a5c:	4b39      	ldr	r3, [pc, #228]	; (8042b44 <RCCEx_PLLSAI2_Config+0x130>)
 8042a5e:	681b      	ldr	r3, [r3, #0]
 8042a60:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8042a64:	2b00      	cmp	r3, #0
 8042a66:	d109      	bne.n	8042a7c <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8042a68:	2301      	movs	r3, #1
 8042a6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8042a6c:	e006      	b.n	8042a7c <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8042a6e:	2301      	movs	r3, #1
 8042a70:	73fb      	strb	r3, [r7, #15]
      break;
 8042a72:	e004      	b.n	8042a7e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8042a74:	bf00      	nop
 8042a76:	e002      	b.n	8042a7e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8042a78:	bf00      	nop
 8042a7a:	e000      	b.n	8042a7e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8042a7c:	bf00      	nop
  }

  if (status == HAL_OK)
 8042a7e:	7bfb      	ldrb	r3, [r7, #15]
 8042a80:	2b00      	cmp	r3, #0
 8042a82:	d159      	bne.n	8042b38 <RCCEx_PLLSAI2_Config+0x124>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8042a84:	4b2f      	ldr	r3, [pc, #188]	; (8042b44 <RCCEx_PLLSAI2_Config+0x130>)
 8042a86:	681b      	ldr	r3, [r3, #0]
 8042a88:	4a2e      	ldr	r2, [pc, #184]	; (8042b44 <RCCEx_PLLSAI2_Config+0x130>)
 8042a8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8042a8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8042a90:	f7fe fefa 	bl	8041888 <HAL_GetTick>
 8042a94:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8042a96:	e009      	b.n	8042aac <RCCEx_PLLSAI2_Config+0x98>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8042a98:	f7fe fef6 	bl	8041888 <HAL_GetTick>
 8042a9c:	4602      	mov	r2, r0
 8042a9e:	68bb      	ldr	r3, [r7, #8]
 8042aa0:	1ad3      	subs	r3, r2, r3
 8042aa2:	2b02      	cmp	r3, #2
 8042aa4:	d902      	bls.n	8042aac <RCCEx_PLLSAI2_Config+0x98>
      {
        status = HAL_TIMEOUT;
 8042aa6:	2303      	movs	r3, #3
 8042aa8:	73fb      	strb	r3, [r7, #15]
        break;
 8042aaa:	e005      	b.n	8042ab8 <RCCEx_PLLSAI2_Config+0xa4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8042aac:	4b25      	ldr	r3, [pc, #148]	; (8042b44 <RCCEx_PLLSAI2_Config+0x130>)
 8042aae:	681b      	ldr	r3, [r3, #0]
 8042ab0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8042ab4:	2b00      	cmp	r3, #0
 8042ab6:	d1ef      	bne.n	8042a98 <RCCEx_PLLSAI2_Config+0x84>
      }
    }

    if (status == HAL_OK)
 8042ab8:	7bfb      	ldrb	r3, [r7, #15]
 8042aba:	2b00      	cmp	r3, #0
 8042abc:	d13c      	bne.n	8042b38 <RCCEx_PLLSAI2_Config+0x124>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8042abe:	683b      	ldr	r3, [r7, #0]
 8042ac0:	2b00      	cmp	r3, #0
 8042ac2:	d115      	bne.n	8042af0 <RCCEx_PLLSAI2_Config+0xdc>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8042ac4:	4b1f      	ldr	r3, [pc, #124]	; (8042b44 <RCCEx_PLLSAI2_Config+0x130>)
 8042ac6:	695a      	ldr	r2, [r3, #20]
 8042ac8:	4b1f      	ldr	r3, [pc, #124]	; (8042b48 <RCCEx_PLLSAI2_Config+0x134>)
 8042aca:	4013      	ands	r3, r2
 8042acc:	687a      	ldr	r2, [r7, #4]
 8042ace:	6892      	ldr	r2, [r2, #8]
 8042ad0:	0211      	lsls	r1, r2, #8
 8042ad2:	687a      	ldr	r2, [r7, #4]
 8042ad4:	68d2      	ldr	r2, [r2, #12]
 8042ad6:	06d2      	lsls	r2, r2, #27
 8042ad8:	4311      	orrs	r1, r2
 8042ada:	687a      	ldr	r2, [r7, #4]
 8042adc:	6852      	ldr	r2, [r2, #4]
 8042ade:	3a01      	subs	r2, #1
 8042ae0:	0112      	lsls	r2, r2, #4
 8042ae2:	4311      	orrs	r1, r2
 8042ae4:	687a      	ldr	r2, [r7, #4]
 8042ae6:	6812      	ldr	r2, [r2, #0]
 8042ae8:	430a      	orrs	r2, r1
 8042aea:	4916      	ldr	r1, [pc, #88]	; (8042b44 <RCCEx_PLLSAI2_Config+0x130>)
 8042aec:	4313      	orrs	r3, r2
 8042aee:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8042af0:	4b14      	ldr	r3, [pc, #80]	; (8042b44 <RCCEx_PLLSAI2_Config+0x130>)
 8042af2:	681b      	ldr	r3, [r3, #0]
 8042af4:	4a13      	ldr	r2, [pc, #76]	; (8042b44 <RCCEx_PLLSAI2_Config+0x130>)
 8042af6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8042afa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8042afc:	f7fe fec4 	bl	8041888 <HAL_GetTick>
 8042b00:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8042b02:	e009      	b.n	8042b18 <RCCEx_PLLSAI2_Config+0x104>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8042b04:	f7fe fec0 	bl	8041888 <HAL_GetTick>
 8042b08:	4602      	mov	r2, r0
 8042b0a:	68bb      	ldr	r3, [r7, #8]
 8042b0c:	1ad3      	subs	r3, r2, r3
 8042b0e:	2b02      	cmp	r3, #2
 8042b10:	d902      	bls.n	8042b18 <RCCEx_PLLSAI2_Config+0x104>
        {
          status = HAL_TIMEOUT;
 8042b12:	2303      	movs	r3, #3
 8042b14:	73fb      	strb	r3, [r7, #15]
          break;
 8042b16:	e005      	b.n	8042b24 <RCCEx_PLLSAI2_Config+0x110>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8042b18:	4b0a      	ldr	r3, [pc, #40]	; (8042b44 <RCCEx_PLLSAI2_Config+0x130>)
 8042b1a:	681b      	ldr	r3, [r3, #0]
 8042b1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8042b20:	2b00      	cmp	r3, #0
 8042b22:	d0ef      	beq.n	8042b04 <RCCEx_PLLSAI2_Config+0xf0>
        }
      }

      if (status == HAL_OK)
 8042b24:	7bfb      	ldrb	r3, [r7, #15]
 8042b26:	2b00      	cmp	r3, #0
 8042b28:	d106      	bne.n	8042b38 <RCCEx_PLLSAI2_Config+0x124>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8042b2a:	4b06      	ldr	r3, [pc, #24]	; (8042b44 <RCCEx_PLLSAI2_Config+0x130>)
 8042b2c:	695a      	ldr	r2, [r3, #20]
 8042b2e:	687b      	ldr	r3, [r7, #4]
 8042b30:	691b      	ldr	r3, [r3, #16]
 8042b32:	4904      	ldr	r1, [pc, #16]	; (8042b44 <RCCEx_PLLSAI2_Config+0x130>)
 8042b34:	4313      	orrs	r3, r2
 8042b36:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8042b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8042b3a:	4618      	mov	r0, r3
 8042b3c:	3710      	adds	r7, #16
 8042b3e:	46bd      	mov	sp, r7
 8042b40:	bd80      	pop	{r7, pc}
 8042b42:	bf00      	nop
 8042b44:	40021000 	.word	0x40021000
 8042b48:	07ff800c 	.word	0x07ff800c

08042b4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8042b4c:	b580      	push	{r7, lr}
 8042b4e:	b082      	sub	sp, #8
 8042b50:	af00      	add	r7, sp, #0
 8042b52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8042b54:	687b      	ldr	r3, [r7, #4]
 8042b56:	2b00      	cmp	r3, #0
 8042b58:	d101      	bne.n	8042b5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8042b5a:	2301      	movs	r3, #1
 8042b5c:	e042      	b.n	8042be4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8042b5e:	687b      	ldr	r3, [r7, #4]
 8042b60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8042b64:	2b00      	cmp	r3, #0
 8042b66:	d106      	bne.n	8042b76 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8042b68:	687b      	ldr	r3, [r7, #4]
 8042b6a:	2200      	movs	r2, #0
 8042b6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8042b70:	6878      	ldr	r0, [r7, #4]
 8042b72:	f7fe fc33 	bl	80413dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8042b76:	687b      	ldr	r3, [r7, #4]
 8042b78:	2224      	movs	r2, #36	; 0x24
 8042b7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8042b7e:	687b      	ldr	r3, [r7, #4]
 8042b80:	681b      	ldr	r3, [r3, #0]
 8042b82:	681a      	ldr	r2, [r3, #0]
 8042b84:	687b      	ldr	r3, [r7, #4]
 8042b86:	681b      	ldr	r3, [r3, #0]
 8042b88:	f022 0201 	bic.w	r2, r2, #1
 8042b8c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8042b8e:	6878      	ldr	r0, [r7, #4]
 8042b90:	f000 fb1a 	bl	80431c8 <UART_SetConfig>
 8042b94:	4603      	mov	r3, r0
 8042b96:	2b01      	cmp	r3, #1
 8042b98:	d101      	bne.n	8042b9e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8042b9a:	2301      	movs	r3, #1
 8042b9c:	e022      	b.n	8042be4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8042b9e:	687b      	ldr	r3, [r7, #4]
 8042ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042ba2:	2b00      	cmp	r3, #0
 8042ba4:	d002      	beq.n	8042bac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8042ba6:	6878      	ldr	r0, [r7, #4]
 8042ba8:	f000 fde2 	bl	8043770 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8042bac:	687b      	ldr	r3, [r7, #4]
 8042bae:	681b      	ldr	r3, [r3, #0]
 8042bb0:	685a      	ldr	r2, [r3, #4]
 8042bb2:	687b      	ldr	r3, [r7, #4]
 8042bb4:	681b      	ldr	r3, [r3, #0]
 8042bb6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8042bba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8042bbc:	687b      	ldr	r3, [r7, #4]
 8042bbe:	681b      	ldr	r3, [r3, #0]
 8042bc0:	689a      	ldr	r2, [r3, #8]
 8042bc2:	687b      	ldr	r3, [r7, #4]
 8042bc4:	681b      	ldr	r3, [r3, #0]
 8042bc6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8042bca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8042bcc:	687b      	ldr	r3, [r7, #4]
 8042bce:	681b      	ldr	r3, [r3, #0]
 8042bd0:	681a      	ldr	r2, [r3, #0]
 8042bd2:	687b      	ldr	r3, [r7, #4]
 8042bd4:	681b      	ldr	r3, [r3, #0]
 8042bd6:	f042 0201 	orr.w	r2, r2, #1
 8042bda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8042bdc:	6878      	ldr	r0, [r7, #4]
 8042bde:	f000 fe69 	bl	80438b4 <UART_CheckIdleState>
 8042be2:	4603      	mov	r3, r0
}
 8042be4:	4618      	mov	r0, r3
 8042be6:	3708      	adds	r7, #8
 8042be8:	46bd      	mov	sp, r7
 8042bea:	bd80      	pop	{r7, pc}

08042bec <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8042bec:	b480      	push	{r7}
 8042bee:	b085      	sub	sp, #20
 8042bf0:	af00      	add	r7, sp, #0
 8042bf2:	60f8      	str	r0, [r7, #12]
 8042bf4:	60b9      	str	r1, [r7, #8]
 8042bf6:	4613      	mov	r3, r2
 8042bf8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8042bfa:	68fb      	ldr	r3, [r7, #12]
 8042bfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8042c00:	2b20      	cmp	r3, #32
 8042c02:	d168      	bne.n	8042cd6 <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8042c04:	68bb      	ldr	r3, [r7, #8]
 8042c06:	2b00      	cmp	r3, #0
 8042c08:	d002      	beq.n	8042c10 <HAL_UART_Transmit_IT+0x24>
 8042c0a:	88fb      	ldrh	r3, [r7, #6]
 8042c0c:	2b00      	cmp	r3, #0
 8042c0e:	d101      	bne.n	8042c14 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8042c10:	2301      	movs	r3, #1
 8042c12:	e061      	b.n	8042cd8 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 8042c14:	68fb      	ldr	r3, [r7, #12]
 8042c16:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8042c1a:	2b01      	cmp	r3, #1
 8042c1c:	d101      	bne.n	8042c22 <HAL_UART_Transmit_IT+0x36>
 8042c1e:	2302      	movs	r3, #2
 8042c20:	e05a      	b.n	8042cd8 <HAL_UART_Transmit_IT+0xec>
 8042c22:	68fb      	ldr	r3, [r7, #12]
 8042c24:	2201      	movs	r2, #1
 8042c26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8042c2a:	68fb      	ldr	r3, [r7, #12]
 8042c2c:	68ba      	ldr	r2, [r7, #8]
 8042c2e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8042c30:	68fb      	ldr	r3, [r7, #12]
 8042c32:	88fa      	ldrh	r2, [r7, #6]
 8042c34:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8042c38:	68fb      	ldr	r3, [r7, #12]
 8042c3a:	88fa      	ldrh	r2, [r7, #6]
 8042c3c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8042c40:	68fb      	ldr	r3, [r7, #12]
 8042c42:	2200      	movs	r2, #0
 8042c44:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8042c46:	68fb      	ldr	r3, [r7, #12]
 8042c48:	2200      	movs	r2, #0
 8042c4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8042c4e:	68fb      	ldr	r3, [r7, #12]
 8042c50:	2221      	movs	r2, #33	; 0x21
 8042c52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8042c56:	68fb      	ldr	r3, [r7, #12]
 8042c58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8042c5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8042c5e:	d11c      	bne.n	8042c9a <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8042c60:	68fb      	ldr	r3, [r7, #12]
 8042c62:	689b      	ldr	r3, [r3, #8]
 8042c64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8042c68:	d107      	bne.n	8042c7a <HAL_UART_Transmit_IT+0x8e>
 8042c6a:	68fb      	ldr	r3, [r7, #12]
 8042c6c:	691b      	ldr	r3, [r3, #16]
 8042c6e:	2b00      	cmp	r3, #0
 8042c70:	d103      	bne.n	8042c7a <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8042c72:	68fb      	ldr	r3, [r7, #12]
 8042c74:	4a1b      	ldr	r2, [pc, #108]	; (8042ce4 <HAL_UART_Transmit_IT+0xf8>)
 8042c76:	675a      	str	r2, [r3, #116]	; 0x74
 8042c78:	e002      	b.n	8042c80 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8042c7a:	68fb      	ldr	r3, [r7, #12]
 8042c7c:	4a1a      	ldr	r2, [pc, #104]	; (8042ce8 <HAL_UART_Transmit_IT+0xfc>)
 8042c7e:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8042c80:	68fb      	ldr	r3, [r7, #12]
 8042c82:	2200      	movs	r2, #0
 8042c84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8042c88:	68fb      	ldr	r3, [r7, #12]
 8042c8a:	681b      	ldr	r3, [r3, #0]
 8042c8c:	689a      	ldr	r2, [r3, #8]
 8042c8e:	68fb      	ldr	r3, [r7, #12]
 8042c90:	681b      	ldr	r3, [r3, #0]
 8042c92:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8042c96:	609a      	str	r2, [r3, #8]
 8042c98:	e01b      	b.n	8042cd2 <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8042c9a:	68fb      	ldr	r3, [r7, #12]
 8042c9c:	689b      	ldr	r3, [r3, #8]
 8042c9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8042ca2:	d107      	bne.n	8042cb4 <HAL_UART_Transmit_IT+0xc8>
 8042ca4:	68fb      	ldr	r3, [r7, #12]
 8042ca6:	691b      	ldr	r3, [r3, #16]
 8042ca8:	2b00      	cmp	r3, #0
 8042caa:	d103      	bne.n	8042cb4 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8042cac:	68fb      	ldr	r3, [r7, #12]
 8042cae:	4a0f      	ldr	r2, [pc, #60]	; (8042cec <HAL_UART_Transmit_IT+0x100>)
 8042cb0:	675a      	str	r2, [r3, #116]	; 0x74
 8042cb2:	e002      	b.n	8042cba <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8042cb4:	68fb      	ldr	r3, [r7, #12]
 8042cb6:	4a0e      	ldr	r2, [pc, #56]	; (8042cf0 <HAL_UART_Transmit_IT+0x104>)
 8042cb8:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8042cba:	68fb      	ldr	r3, [r7, #12]
 8042cbc:	2200      	movs	r2, #0
 8042cbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8042cc2:	68fb      	ldr	r3, [r7, #12]
 8042cc4:	681b      	ldr	r3, [r3, #0]
 8042cc6:	681a      	ldr	r2, [r3, #0]
 8042cc8:	68fb      	ldr	r3, [r7, #12]
 8042cca:	681b      	ldr	r3, [r3, #0]
 8042ccc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8042cd0:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8042cd2:	2300      	movs	r3, #0
 8042cd4:	e000      	b.n	8042cd8 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 8042cd6:	2302      	movs	r3, #2
  }
}
 8042cd8:	4618      	mov	r0, r3
 8042cda:	3714      	adds	r7, #20
 8042cdc:	46bd      	mov	sp, r7
 8042cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042ce2:	4770      	bx	lr
 8042ce4:	08043c67 	.word	0x08043c67
 8042ce8:	08043bcd 	.word	0x08043bcd
 8042cec:	08043b4f 	.word	0x08043b4f
 8042cf0:	08043adb 	.word	0x08043adb

08042cf4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8042cf4:	b580      	push	{r7, lr}
 8042cf6:	b088      	sub	sp, #32
 8042cf8:	af00      	add	r7, sp, #0
 8042cfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8042cfc:	687b      	ldr	r3, [r7, #4]
 8042cfe:	681b      	ldr	r3, [r3, #0]
 8042d00:	69db      	ldr	r3, [r3, #28]
 8042d02:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8042d04:	687b      	ldr	r3, [r7, #4]
 8042d06:	681b      	ldr	r3, [r3, #0]
 8042d08:	681b      	ldr	r3, [r3, #0]
 8042d0a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8042d0c:	687b      	ldr	r3, [r7, #4]
 8042d0e:	681b      	ldr	r3, [r3, #0]
 8042d10:	689b      	ldr	r3, [r3, #8]
 8042d12:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8042d14:	69fa      	ldr	r2, [r7, #28]
 8042d16:	f640 030f 	movw	r3, #2063	; 0x80f
 8042d1a:	4013      	ands	r3, r2
 8042d1c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8042d1e:	693b      	ldr	r3, [r7, #16]
 8042d20:	2b00      	cmp	r3, #0
 8042d22:	d118      	bne.n	8042d56 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8042d24:	69fb      	ldr	r3, [r7, #28]
 8042d26:	f003 0320 	and.w	r3, r3, #32
 8042d2a:	2b00      	cmp	r3, #0
 8042d2c:	d013      	beq.n	8042d56 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8042d2e:	69bb      	ldr	r3, [r7, #24]
 8042d30:	f003 0320 	and.w	r3, r3, #32
 8042d34:	2b00      	cmp	r3, #0
 8042d36:	d104      	bne.n	8042d42 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8042d38:	697b      	ldr	r3, [r7, #20]
 8042d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8042d3e:	2b00      	cmp	r3, #0
 8042d40:	d009      	beq.n	8042d56 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8042d42:	687b      	ldr	r3, [r7, #4]
 8042d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042d46:	2b00      	cmp	r3, #0
 8042d48:	f000 81fb 	beq.w	8043142 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8042d4c:	687b      	ldr	r3, [r7, #4]
 8042d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042d50:	6878      	ldr	r0, [r7, #4]
 8042d52:	4798      	blx	r3
      }
      return;
 8042d54:	e1f5      	b.n	8043142 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8042d56:	693b      	ldr	r3, [r7, #16]
 8042d58:	2b00      	cmp	r3, #0
 8042d5a:	f000 80ef 	beq.w	8042f3c <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8042d5e:	697a      	ldr	r2, [r7, #20]
 8042d60:	4b73      	ldr	r3, [pc, #460]	; (8042f30 <HAL_UART_IRQHandler+0x23c>)
 8042d62:	4013      	ands	r3, r2
 8042d64:	2b00      	cmp	r3, #0
 8042d66:	d105      	bne.n	8042d74 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8042d68:	69ba      	ldr	r2, [r7, #24]
 8042d6a:	4b72      	ldr	r3, [pc, #456]	; (8042f34 <HAL_UART_IRQHandler+0x240>)
 8042d6c:	4013      	ands	r3, r2
 8042d6e:	2b00      	cmp	r3, #0
 8042d70:	f000 80e4 	beq.w	8042f3c <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8042d74:	69fb      	ldr	r3, [r7, #28]
 8042d76:	f003 0301 	and.w	r3, r3, #1
 8042d7a:	2b00      	cmp	r3, #0
 8042d7c:	d010      	beq.n	8042da0 <HAL_UART_IRQHandler+0xac>
 8042d7e:	69bb      	ldr	r3, [r7, #24]
 8042d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8042d84:	2b00      	cmp	r3, #0
 8042d86:	d00b      	beq.n	8042da0 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8042d88:	687b      	ldr	r3, [r7, #4]
 8042d8a:	681b      	ldr	r3, [r3, #0]
 8042d8c:	2201      	movs	r2, #1
 8042d8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8042d90:	687b      	ldr	r3, [r7, #4]
 8042d92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8042d96:	f043 0201 	orr.w	r2, r3, #1
 8042d9a:	687b      	ldr	r3, [r7, #4]
 8042d9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8042da0:	69fb      	ldr	r3, [r7, #28]
 8042da2:	f003 0302 	and.w	r3, r3, #2
 8042da6:	2b00      	cmp	r3, #0
 8042da8:	d010      	beq.n	8042dcc <HAL_UART_IRQHandler+0xd8>
 8042daa:	697b      	ldr	r3, [r7, #20]
 8042dac:	f003 0301 	and.w	r3, r3, #1
 8042db0:	2b00      	cmp	r3, #0
 8042db2:	d00b      	beq.n	8042dcc <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8042db4:	687b      	ldr	r3, [r7, #4]
 8042db6:	681b      	ldr	r3, [r3, #0]
 8042db8:	2202      	movs	r2, #2
 8042dba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8042dbc:	687b      	ldr	r3, [r7, #4]
 8042dbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8042dc2:	f043 0204 	orr.w	r2, r3, #4
 8042dc6:	687b      	ldr	r3, [r7, #4]
 8042dc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8042dcc:	69fb      	ldr	r3, [r7, #28]
 8042dce:	f003 0304 	and.w	r3, r3, #4
 8042dd2:	2b00      	cmp	r3, #0
 8042dd4:	d010      	beq.n	8042df8 <HAL_UART_IRQHandler+0x104>
 8042dd6:	697b      	ldr	r3, [r7, #20]
 8042dd8:	f003 0301 	and.w	r3, r3, #1
 8042ddc:	2b00      	cmp	r3, #0
 8042dde:	d00b      	beq.n	8042df8 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8042de0:	687b      	ldr	r3, [r7, #4]
 8042de2:	681b      	ldr	r3, [r3, #0]
 8042de4:	2204      	movs	r2, #4
 8042de6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8042de8:	687b      	ldr	r3, [r7, #4]
 8042dea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8042dee:	f043 0202 	orr.w	r2, r3, #2
 8042df2:	687b      	ldr	r3, [r7, #4]
 8042df4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8042df8:	69fb      	ldr	r3, [r7, #28]
 8042dfa:	f003 0308 	and.w	r3, r3, #8
 8042dfe:	2b00      	cmp	r3, #0
 8042e00:	d015      	beq.n	8042e2e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8042e02:	69bb      	ldr	r3, [r7, #24]
 8042e04:	f003 0320 	and.w	r3, r3, #32
 8042e08:	2b00      	cmp	r3, #0
 8042e0a:	d104      	bne.n	8042e16 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8042e0c:	697a      	ldr	r2, [r7, #20]
 8042e0e:	4b48      	ldr	r3, [pc, #288]	; (8042f30 <HAL_UART_IRQHandler+0x23c>)
 8042e10:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8042e12:	2b00      	cmp	r3, #0
 8042e14:	d00b      	beq.n	8042e2e <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8042e16:	687b      	ldr	r3, [r7, #4]
 8042e18:	681b      	ldr	r3, [r3, #0]
 8042e1a:	2208      	movs	r2, #8
 8042e1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8042e1e:	687b      	ldr	r3, [r7, #4]
 8042e20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8042e24:	f043 0208 	orr.w	r2, r3, #8
 8042e28:	687b      	ldr	r3, [r7, #4]
 8042e2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8042e2e:	69fb      	ldr	r3, [r7, #28]
 8042e30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8042e34:	2b00      	cmp	r3, #0
 8042e36:	d011      	beq.n	8042e5c <HAL_UART_IRQHandler+0x168>
 8042e38:	69bb      	ldr	r3, [r7, #24]
 8042e3a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8042e3e:	2b00      	cmp	r3, #0
 8042e40:	d00c      	beq.n	8042e5c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8042e42:	687b      	ldr	r3, [r7, #4]
 8042e44:	681b      	ldr	r3, [r3, #0]
 8042e46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8042e4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8042e4c:	687b      	ldr	r3, [r7, #4]
 8042e4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8042e52:	f043 0220 	orr.w	r2, r3, #32
 8042e56:	687b      	ldr	r3, [r7, #4]
 8042e58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8042e5c:	687b      	ldr	r3, [r7, #4]
 8042e5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8042e62:	2b00      	cmp	r3, #0
 8042e64:	f000 816f 	beq.w	8043146 <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8042e68:	69fb      	ldr	r3, [r7, #28]
 8042e6a:	f003 0320 	and.w	r3, r3, #32
 8042e6e:	2b00      	cmp	r3, #0
 8042e70:	d011      	beq.n	8042e96 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8042e72:	69bb      	ldr	r3, [r7, #24]
 8042e74:	f003 0320 	and.w	r3, r3, #32
 8042e78:	2b00      	cmp	r3, #0
 8042e7a:	d104      	bne.n	8042e86 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8042e7c:	697b      	ldr	r3, [r7, #20]
 8042e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8042e82:	2b00      	cmp	r3, #0
 8042e84:	d007      	beq.n	8042e96 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8042e86:	687b      	ldr	r3, [r7, #4]
 8042e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042e8a:	2b00      	cmp	r3, #0
 8042e8c:	d003      	beq.n	8042e96 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8042e8e:	687b      	ldr	r3, [r7, #4]
 8042e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042e92:	6878      	ldr	r0, [r7, #4]
 8042e94:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8042e96:	687b      	ldr	r3, [r7, #4]
 8042e98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8042e9c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8042e9e:	687b      	ldr	r3, [r7, #4]
 8042ea0:	681b      	ldr	r3, [r3, #0]
 8042ea2:	689b      	ldr	r3, [r3, #8]
 8042ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8042ea8:	2b40      	cmp	r3, #64	; 0x40
 8042eaa:	d004      	beq.n	8042eb6 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8042eac:	68fb      	ldr	r3, [r7, #12]
 8042eae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8042eb2:	2b00      	cmp	r3, #0
 8042eb4:	d031      	beq.n	8042f1a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8042eb6:	6878      	ldr	r0, [r7, #4]
 8042eb8:	f000 fdc7 	bl	8043a4a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8042ebc:	687b      	ldr	r3, [r7, #4]
 8042ebe:	681b      	ldr	r3, [r3, #0]
 8042ec0:	689b      	ldr	r3, [r3, #8]
 8042ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8042ec6:	2b40      	cmp	r3, #64	; 0x40
 8042ec8:	d123      	bne.n	8042f12 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8042eca:	687b      	ldr	r3, [r7, #4]
 8042ecc:	681b      	ldr	r3, [r3, #0]
 8042ece:	689a      	ldr	r2, [r3, #8]
 8042ed0:	687b      	ldr	r3, [r7, #4]
 8042ed2:	681b      	ldr	r3, [r3, #0]
 8042ed4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8042ed8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8042eda:	687b      	ldr	r3, [r7, #4]
 8042edc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8042ede:	2b00      	cmp	r3, #0
 8042ee0:	d013      	beq.n	8042f0a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8042ee2:	687b      	ldr	r3, [r7, #4]
 8042ee4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8042ee6:	4a14      	ldr	r2, [pc, #80]	; (8042f38 <HAL_UART_IRQHandler+0x244>)
 8042ee8:	641a      	str	r2, [r3, #64]	; 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8042eea:	687b      	ldr	r3, [r7, #4]
 8042eec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8042eee:	4618      	mov	r0, r3
 8042ef0:	f7fe fe65 	bl	8041bbe <HAL_DMA_Abort_IT>
 8042ef4:	4603      	mov	r3, r0
 8042ef6:	2b00      	cmp	r3, #0
 8042ef8:	d017      	beq.n	8042f2a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8042efa:	687b      	ldr	r3, [r7, #4]
 8042efc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8042efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8042f00:	687a      	ldr	r2, [r7, #4]
 8042f02:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8042f04:	4610      	mov	r0, r2
 8042f06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8042f08:	e00f      	b.n	8042f2a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8042f0a:	6878      	ldr	r0, [r7, #4]
 8042f0c:	f000 f930 	bl	8043170 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8042f10:	e00b      	b.n	8042f2a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8042f12:	6878      	ldr	r0, [r7, #4]
 8042f14:	f000 f92c 	bl	8043170 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8042f18:	e007      	b.n	8042f2a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8042f1a:	6878      	ldr	r0, [r7, #4]
 8042f1c:	f000 f928 	bl	8043170 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8042f20:	687b      	ldr	r3, [r7, #4]
 8042f22:	2200      	movs	r2, #0
 8042f24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8042f28:	e10d      	b.n	8043146 <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8042f2a:	bf00      	nop
    return;
 8042f2c:	e10b      	b.n	8043146 <HAL_UART_IRQHandler+0x452>
 8042f2e:	bf00      	nop
 8042f30:	10000001 	.word	0x10000001
 8042f34:	04000120 	.word	0x04000120
 8042f38:	08043aaf 	.word	0x08043aaf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8042f3c:	687b      	ldr	r3, [r7, #4]
 8042f3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8042f40:	2b01      	cmp	r3, #1
 8042f42:	f040 80ab 	bne.w	804309c <HAL_UART_IRQHandler+0x3a8>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8042f46:	69fb      	ldr	r3, [r7, #28]
 8042f48:	f003 0310 	and.w	r3, r3, #16
 8042f4c:	2b00      	cmp	r3, #0
 8042f4e:	f000 80a5 	beq.w	804309c <HAL_UART_IRQHandler+0x3a8>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8042f52:	69bb      	ldr	r3, [r7, #24]
 8042f54:	f003 0310 	and.w	r3, r3, #16
 8042f58:	2b00      	cmp	r3, #0
 8042f5a:	f000 809f 	beq.w	804309c <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8042f5e:	687b      	ldr	r3, [r7, #4]
 8042f60:	681b      	ldr	r3, [r3, #0]
 8042f62:	2210      	movs	r2, #16
 8042f64:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8042f66:	687b      	ldr	r3, [r7, #4]
 8042f68:	681b      	ldr	r3, [r3, #0]
 8042f6a:	689b      	ldr	r3, [r3, #8]
 8042f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8042f70:	2b40      	cmp	r3, #64	; 0x40
 8042f72:	d155      	bne.n	8043020 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8042f74:	687b      	ldr	r3, [r7, #4]
 8042f76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8042f78:	681b      	ldr	r3, [r3, #0]
 8042f7a:	685b      	ldr	r3, [r3, #4]
 8042f7c:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8042f7e:	893b      	ldrh	r3, [r7, #8]
 8042f80:	2b00      	cmp	r3, #0
 8042f82:	f000 80e2 	beq.w	804314a <HAL_UART_IRQHandler+0x456>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8042f86:	687b      	ldr	r3, [r7, #4]
 8042f88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8042f8c:	893a      	ldrh	r2, [r7, #8]
 8042f8e:	429a      	cmp	r2, r3
 8042f90:	f080 80db 	bcs.w	804314a <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8042f94:	687b      	ldr	r3, [r7, #4]
 8042f96:	893a      	ldrh	r2, [r7, #8]
 8042f98:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8042f9c:	687b      	ldr	r3, [r7, #4]
 8042f9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8042fa0:	681b      	ldr	r3, [r3, #0]
 8042fa2:	681b      	ldr	r3, [r3, #0]
 8042fa4:	f003 0320 	and.w	r3, r3, #32
 8042fa8:	2b00      	cmp	r3, #0
 8042faa:	d12b      	bne.n	8043004 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8042fac:	687b      	ldr	r3, [r7, #4]
 8042fae:	681b      	ldr	r3, [r3, #0]
 8042fb0:	681a      	ldr	r2, [r3, #0]
 8042fb2:	687b      	ldr	r3, [r7, #4]
 8042fb4:	681b      	ldr	r3, [r3, #0]
 8042fb6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8042fba:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8042fbc:	687b      	ldr	r3, [r7, #4]
 8042fbe:	681b      	ldr	r3, [r3, #0]
 8042fc0:	689a      	ldr	r2, [r3, #8]
 8042fc2:	687b      	ldr	r3, [r7, #4]
 8042fc4:	681b      	ldr	r3, [r3, #0]
 8042fc6:	f022 0201 	bic.w	r2, r2, #1
 8042fca:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8042fcc:	687b      	ldr	r3, [r7, #4]
 8042fce:	681b      	ldr	r3, [r3, #0]
 8042fd0:	689a      	ldr	r2, [r3, #8]
 8042fd2:	687b      	ldr	r3, [r7, #4]
 8042fd4:	681b      	ldr	r3, [r3, #0]
 8042fd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8042fda:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8042fdc:	687b      	ldr	r3, [r7, #4]
 8042fde:	2220      	movs	r2, #32
 8042fe0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8042fe4:	687b      	ldr	r3, [r7, #4]
 8042fe6:	2200      	movs	r2, #0
 8042fe8:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8042fea:	687b      	ldr	r3, [r7, #4]
 8042fec:	681b      	ldr	r3, [r3, #0]
 8042fee:	681a      	ldr	r2, [r3, #0]
 8042ff0:	687b      	ldr	r3, [r7, #4]
 8042ff2:	681b      	ldr	r3, [r3, #0]
 8042ff4:	f022 0210 	bic.w	r2, r2, #16
 8042ff8:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8042ffa:	687b      	ldr	r3, [r7, #4]
 8042ffc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8042ffe:	4618      	mov	r0, r3
 8043000:	f7fe fd81 	bl	8041b06 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8043004:	687b      	ldr	r3, [r7, #4]
 8043006:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 804300a:	687b      	ldr	r3, [r7, #4]
 804300c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8043010:	b29b      	uxth	r3, r3
 8043012:	1ad3      	subs	r3, r2, r3
 8043014:	b29b      	uxth	r3, r3
 8043016:	4619      	mov	r1, r3
 8043018:	6878      	ldr	r0, [r7, #4]
 804301a:	f000 f8b3 	bl	8043184 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 804301e:	e094      	b.n	804314a <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8043020:	687b      	ldr	r3, [r7, #4]
 8043022:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8043026:	687b      	ldr	r3, [r7, #4]
 8043028:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 804302c:	b29b      	uxth	r3, r3
 804302e:	1ad3      	subs	r3, r2, r3
 8043030:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8043032:	687b      	ldr	r3, [r7, #4]
 8043034:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8043038:	b29b      	uxth	r3, r3
 804303a:	2b00      	cmp	r3, #0
 804303c:	f000 8087 	beq.w	804314e <HAL_UART_IRQHandler+0x45a>
          &&(nb_rx_data > 0U) )
 8043040:	897b      	ldrh	r3, [r7, #10]
 8043042:	2b00      	cmp	r3, #0
 8043044:	f000 8083 	beq.w	804314e <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8043048:	687b      	ldr	r3, [r7, #4]
 804304a:	681b      	ldr	r3, [r3, #0]
 804304c:	681a      	ldr	r2, [r3, #0]
 804304e:	687b      	ldr	r3, [r7, #4]
 8043050:	681b      	ldr	r3, [r3, #0]
 8043052:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8043056:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8043058:	687b      	ldr	r3, [r7, #4]
 804305a:	681b      	ldr	r3, [r3, #0]
 804305c:	689b      	ldr	r3, [r3, #8]
 804305e:	687a      	ldr	r2, [r7, #4]
 8043060:	6812      	ldr	r2, [r2, #0]
 8043062:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8043066:	f023 0301 	bic.w	r3, r3, #1
 804306a:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 804306c:	687b      	ldr	r3, [r7, #4]
 804306e:	2220      	movs	r2, #32
 8043070:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8043074:	687b      	ldr	r3, [r7, #4]
 8043076:	2200      	movs	r2, #0
 8043078:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 804307a:	687b      	ldr	r3, [r7, #4]
 804307c:	2200      	movs	r2, #0
 804307e:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8043080:	687b      	ldr	r3, [r7, #4]
 8043082:	681b      	ldr	r3, [r3, #0]
 8043084:	681a      	ldr	r2, [r3, #0]
 8043086:	687b      	ldr	r3, [r7, #4]
 8043088:	681b      	ldr	r3, [r3, #0]
 804308a:	f022 0210 	bic.w	r2, r2, #16
 804308e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8043090:	897b      	ldrh	r3, [r7, #10]
 8043092:	4619      	mov	r1, r3
 8043094:	6878      	ldr	r0, [r7, #4]
 8043096:	f000 f875 	bl	8043184 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 804309a:	e058      	b.n	804314e <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 804309c:	69fb      	ldr	r3, [r7, #28]
 804309e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80430a2:	2b00      	cmp	r3, #0
 80430a4:	d00d      	beq.n	80430c2 <HAL_UART_IRQHandler+0x3ce>
 80430a6:	697b      	ldr	r3, [r7, #20]
 80430a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80430ac:	2b00      	cmp	r3, #0
 80430ae:	d008      	beq.n	80430c2 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80430b0:	687b      	ldr	r3, [r7, #4]
 80430b2:	681b      	ldr	r3, [r3, #0]
 80430b4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80430b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80430ba:	6878      	ldr	r0, [r7, #4]
 80430bc:	f000 fe3f 	bl	8043d3e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80430c0:	e048      	b.n	8043154 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80430c2:	69fb      	ldr	r3, [r7, #28]
 80430c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80430c8:	2b00      	cmp	r3, #0
 80430ca:	d012      	beq.n	80430f2 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80430cc:	69bb      	ldr	r3, [r7, #24]
 80430ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80430d2:	2b00      	cmp	r3, #0
 80430d4:	d104      	bne.n	80430e0 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80430d6:	697b      	ldr	r3, [r7, #20]
 80430d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80430dc:	2b00      	cmp	r3, #0
 80430de:	d008      	beq.n	80430f2 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 80430e0:	687b      	ldr	r3, [r7, #4]
 80430e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80430e4:	2b00      	cmp	r3, #0
 80430e6:	d034      	beq.n	8043152 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 80430e8:	687b      	ldr	r3, [r7, #4]
 80430ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80430ec:	6878      	ldr	r0, [r7, #4]
 80430ee:	4798      	blx	r3
    }
    return;
 80430f0:	e02f      	b.n	8043152 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80430f2:	69fb      	ldr	r3, [r7, #28]
 80430f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80430f8:	2b00      	cmp	r3, #0
 80430fa:	d008      	beq.n	804310e <HAL_UART_IRQHandler+0x41a>
 80430fc:	69bb      	ldr	r3, [r7, #24]
 80430fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8043102:	2b00      	cmp	r3, #0
 8043104:	d003      	beq.n	804310e <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8043106:	6878      	ldr	r0, [r7, #4]
 8043108:	f000 fdff 	bl	8043d0a <UART_EndTransmit_IT>
    return;
 804310c:	e022      	b.n	8043154 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 804310e:	69fb      	ldr	r3, [r7, #28]
 8043110:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8043114:	2b00      	cmp	r3, #0
 8043116:	d008      	beq.n	804312a <HAL_UART_IRQHandler+0x436>
 8043118:	69bb      	ldr	r3, [r7, #24]
 804311a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 804311e:	2b00      	cmp	r3, #0
 8043120:	d003      	beq.n	804312a <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8043122:	6878      	ldr	r0, [r7, #4]
 8043124:	f000 fe1f 	bl	8043d66 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8043128:	e014      	b.n	8043154 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 804312a:	69fb      	ldr	r3, [r7, #28]
 804312c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8043130:	2b00      	cmp	r3, #0
 8043132:	d00f      	beq.n	8043154 <HAL_UART_IRQHandler+0x460>
 8043134:	69bb      	ldr	r3, [r7, #24]
 8043136:	2b00      	cmp	r3, #0
 8043138:	da0c      	bge.n	8043154 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 804313a:	6878      	ldr	r0, [r7, #4]
 804313c:	f000 fe09 	bl	8043d52 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8043140:	e008      	b.n	8043154 <HAL_UART_IRQHandler+0x460>
      return;
 8043142:	bf00      	nop
 8043144:	e006      	b.n	8043154 <HAL_UART_IRQHandler+0x460>
    return;
 8043146:	bf00      	nop
 8043148:	e004      	b.n	8043154 <HAL_UART_IRQHandler+0x460>
      return;
 804314a:	bf00      	nop
 804314c:	e002      	b.n	8043154 <HAL_UART_IRQHandler+0x460>
      return;
 804314e:	bf00      	nop
 8043150:	e000      	b.n	8043154 <HAL_UART_IRQHandler+0x460>
    return;
 8043152:	bf00      	nop
  }
}
 8043154:	3720      	adds	r7, #32
 8043156:	46bd      	mov	sp, r7
 8043158:	bd80      	pop	{r7, pc}
 804315a:	bf00      	nop

0804315c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 804315c:	b480      	push	{r7}
 804315e:	b083      	sub	sp, #12
 8043160:	af00      	add	r7, sp, #0
 8043162:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8043164:	bf00      	nop
 8043166:	370c      	adds	r7, #12
 8043168:	46bd      	mov	sp, r7
 804316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804316e:	4770      	bx	lr

08043170 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8043170:	b480      	push	{r7}
 8043172:	b083      	sub	sp, #12
 8043174:	af00      	add	r7, sp, #0
 8043176:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8043178:	bf00      	nop
 804317a:	370c      	adds	r7, #12
 804317c:	46bd      	mov	sp, r7
 804317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043182:	4770      	bx	lr

08043184 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8043184:	b480      	push	{r7}
 8043186:	b083      	sub	sp, #12
 8043188:	af00      	add	r7, sp, #0
 804318a:	6078      	str	r0, [r7, #4]
 804318c:	460b      	mov	r3, r1
 804318e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8043190:	bf00      	nop
 8043192:	370c      	adds	r7, #12
 8043194:	46bd      	mov	sp, r7
 8043196:	f85d 7b04 	ldr.w	r7, [sp], #4
 804319a:	4770      	bx	lr

0804319c <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 804319c:	b480      	push	{r7}
 804319e:	b085      	sub	sp, #20
 80431a0:	af00      	add	r7, sp, #0
 80431a2:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 80431a4:	687b      	ldr	r3, [r7, #4]
 80431a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80431aa:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80431ac:	687b      	ldr	r3, [r7, #4]
 80431ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80431b2:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80431b4:	68fa      	ldr	r2, [r7, #12]
 80431b6:	68bb      	ldr	r3, [r7, #8]
 80431b8:	4313      	orrs	r3, r2
}
 80431ba:	4618      	mov	r0, r3
 80431bc:	3714      	adds	r7, #20
 80431be:	46bd      	mov	sp, r7
 80431c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80431c4:	4770      	bx	lr
	...

080431c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80431c8:	b5b0      	push	{r4, r5, r7, lr}
 80431ca:	b088      	sub	sp, #32
 80431cc:	af00      	add	r7, sp, #0
 80431ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80431d0:	2300      	movs	r3, #0
 80431d2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80431d4:	687b      	ldr	r3, [r7, #4]
 80431d6:	689a      	ldr	r2, [r3, #8]
 80431d8:	687b      	ldr	r3, [r7, #4]
 80431da:	691b      	ldr	r3, [r3, #16]
 80431dc:	431a      	orrs	r2, r3
 80431de:	687b      	ldr	r3, [r7, #4]
 80431e0:	695b      	ldr	r3, [r3, #20]
 80431e2:	431a      	orrs	r2, r3
 80431e4:	687b      	ldr	r3, [r7, #4]
 80431e6:	69db      	ldr	r3, [r3, #28]
 80431e8:	4313      	orrs	r3, r2
 80431ea:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 80431ec:	687b      	ldr	r3, [r7, #4]
 80431ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80431f0:	69fa      	ldr	r2, [r7, #28]
 80431f2:	4313      	orrs	r3, r2
 80431f4:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80431f6:	687b      	ldr	r3, [r7, #4]
 80431f8:	681b      	ldr	r3, [r3, #0]
 80431fa:	681a      	ldr	r2, [r3, #0]
 80431fc:	4bb1      	ldr	r3, [pc, #708]	; (80434c4 <UART_SetConfig+0x2fc>)
 80431fe:	4013      	ands	r3, r2
 8043200:	687a      	ldr	r2, [r7, #4]
 8043202:	6812      	ldr	r2, [r2, #0]
 8043204:	69f9      	ldr	r1, [r7, #28]
 8043206:	430b      	orrs	r3, r1
 8043208:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 804320a:	687b      	ldr	r3, [r7, #4]
 804320c:	681b      	ldr	r3, [r3, #0]
 804320e:	685b      	ldr	r3, [r3, #4]
 8043210:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8043214:	687b      	ldr	r3, [r7, #4]
 8043216:	68da      	ldr	r2, [r3, #12]
 8043218:	687b      	ldr	r3, [r7, #4]
 804321a:	681b      	ldr	r3, [r3, #0]
 804321c:	430a      	orrs	r2, r1
 804321e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8043220:	687b      	ldr	r3, [r7, #4]
 8043222:	699b      	ldr	r3, [r3, #24]
 8043224:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8043226:	687b      	ldr	r3, [r7, #4]
 8043228:	681b      	ldr	r3, [r3, #0]
 804322a:	4aa7      	ldr	r2, [pc, #668]	; (80434c8 <UART_SetConfig+0x300>)
 804322c:	4293      	cmp	r3, r2
 804322e:	d004      	beq.n	804323a <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8043230:	687b      	ldr	r3, [r7, #4]
 8043232:	6a1b      	ldr	r3, [r3, #32]
 8043234:	69fa      	ldr	r2, [r7, #28]
 8043236:	4313      	orrs	r3, r2
 8043238:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 804323a:	687b      	ldr	r3, [r7, #4]
 804323c:	681b      	ldr	r3, [r3, #0]
 804323e:	689b      	ldr	r3, [r3, #8]
 8043240:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8043244:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8043248:	687a      	ldr	r2, [r7, #4]
 804324a:	6812      	ldr	r2, [r2, #0]
 804324c:	69f9      	ldr	r1, [r7, #28]
 804324e:	430b      	orrs	r3, r1
 8043250:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8043252:	687b      	ldr	r3, [r7, #4]
 8043254:	681b      	ldr	r3, [r3, #0]
 8043256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043258:	f023 010f 	bic.w	r1, r3, #15
 804325c:	687b      	ldr	r3, [r7, #4]
 804325e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8043260:	687b      	ldr	r3, [r7, #4]
 8043262:	681b      	ldr	r3, [r3, #0]
 8043264:	430a      	orrs	r2, r1
 8043266:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8043268:	687b      	ldr	r3, [r7, #4]
 804326a:	681b      	ldr	r3, [r3, #0]
 804326c:	4a97      	ldr	r2, [pc, #604]	; (80434cc <UART_SetConfig+0x304>)
 804326e:	4293      	cmp	r3, r2
 8043270:	d121      	bne.n	80432b6 <UART_SetConfig+0xee>
 8043272:	4b97      	ldr	r3, [pc, #604]	; (80434d0 <UART_SetConfig+0x308>)
 8043274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8043278:	f003 0303 	and.w	r3, r3, #3
 804327c:	2b03      	cmp	r3, #3
 804327e:	d817      	bhi.n	80432b0 <UART_SetConfig+0xe8>
 8043280:	a201      	add	r2, pc, #4	; (adr r2, 8043288 <UART_SetConfig+0xc0>)
 8043282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8043286:	bf00      	nop
 8043288:	08043299 	.word	0x08043299
 804328c:	080432a5 	.word	0x080432a5
 8043290:	0804329f 	.word	0x0804329f
 8043294:	080432ab 	.word	0x080432ab
 8043298:	2301      	movs	r3, #1
 804329a:	76fb      	strb	r3, [r7, #27]
 804329c:	e0e7      	b.n	804346e <UART_SetConfig+0x2a6>
 804329e:	2302      	movs	r3, #2
 80432a0:	76fb      	strb	r3, [r7, #27]
 80432a2:	e0e4      	b.n	804346e <UART_SetConfig+0x2a6>
 80432a4:	2304      	movs	r3, #4
 80432a6:	76fb      	strb	r3, [r7, #27]
 80432a8:	e0e1      	b.n	804346e <UART_SetConfig+0x2a6>
 80432aa:	2308      	movs	r3, #8
 80432ac:	76fb      	strb	r3, [r7, #27]
 80432ae:	e0de      	b.n	804346e <UART_SetConfig+0x2a6>
 80432b0:	2310      	movs	r3, #16
 80432b2:	76fb      	strb	r3, [r7, #27]
 80432b4:	e0db      	b.n	804346e <UART_SetConfig+0x2a6>
 80432b6:	687b      	ldr	r3, [r7, #4]
 80432b8:	681b      	ldr	r3, [r3, #0]
 80432ba:	4a86      	ldr	r2, [pc, #536]	; (80434d4 <UART_SetConfig+0x30c>)
 80432bc:	4293      	cmp	r3, r2
 80432be:	d132      	bne.n	8043326 <UART_SetConfig+0x15e>
 80432c0:	4b83      	ldr	r3, [pc, #524]	; (80434d0 <UART_SetConfig+0x308>)
 80432c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80432c6:	f003 030c 	and.w	r3, r3, #12
 80432ca:	2b0c      	cmp	r3, #12
 80432cc:	d828      	bhi.n	8043320 <UART_SetConfig+0x158>
 80432ce:	a201      	add	r2, pc, #4	; (adr r2, 80432d4 <UART_SetConfig+0x10c>)
 80432d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80432d4:	08043309 	.word	0x08043309
 80432d8:	08043321 	.word	0x08043321
 80432dc:	08043321 	.word	0x08043321
 80432e0:	08043321 	.word	0x08043321
 80432e4:	08043315 	.word	0x08043315
 80432e8:	08043321 	.word	0x08043321
 80432ec:	08043321 	.word	0x08043321
 80432f0:	08043321 	.word	0x08043321
 80432f4:	0804330f 	.word	0x0804330f
 80432f8:	08043321 	.word	0x08043321
 80432fc:	08043321 	.word	0x08043321
 8043300:	08043321 	.word	0x08043321
 8043304:	0804331b 	.word	0x0804331b
 8043308:	2300      	movs	r3, #0
 804330a:	76fb      	strb	r3, [r7, #27]
 804330c:	e0af      	b.n	804346e <UART_SetConfig+0x2a6>
 804330e:	2302      	movs	r3, #2
 8043310:	76fb      	strb	r3, [r7, #27]
 8043312:	e0ac      	b.n	804346e <UART_SetConfig+0x2a6>
 8043314:	2304      	movs	r3, #4
 8043316:	76fb      	strb	r3, [r7, #27]
 8043318:	e0a9      	b.n	804346e <UART_SetConfig+0x2a6>
 804331a:	2308      	movs	r3, #8
 804331c:	76fb      	strb	r3, [r7, #27]
 804331e:	e0a6      	b.n	804346e <UART_SetConfig+0x2a6>
 8043320:	2310      	movs	r3, #16
 8043322:	76fb      	strb	r3, [r7, #27]
 8043324:	e0a3      	b.n	804346e <UART_SetConfig+0x2a6>
 8043326:	687b      	ldr	r3, [r7, #4]
 8043328:	681b      	ldr	r3, [r3, #0]
 804332a:	4a6b      	ldr	r2, [pc, #428]	; (80434d8 <UART_SetConfig+0x310>)
 804332c:	4293      	cmp	r3, r2
 804332e:	d120      	bne.n	8043372 <UART_SetConfig+0x1aa>
 8043330:	4b67      	ldr	r3, [pc, #412]	; (80434d0 <UART_SetConfig+0x308>)
 8043332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8043336:	f003 0330 	and.w	r3, r3, #48	; 0x30
 804333a:	2b30      	cmp	r3, #48	; 0x30
 804333c:	d013      	beq.n	8043366 <UART_SetConfig+0x19e>
 804333e:	2b30      	cmp	r3, #48	; 0x30
 8043340:	d814      	bhi.n	804336c <UART_SetConfig+0x1a4>
 8043342:	2b20      	cmp	r3, #32
 8043344:	d009      	beq.n	804335a <UART_SetConfig+0x192>
 8043346:	2b20      	cmp	r3, #32
 8043348:	d810      	bhi.n	804336c <UART_SetConfig+0x1a4>
 804334a:	2b00      	cmp	r3, #0
 804334c:	d002      	beq.n	8043354 <UART_SetConfig+0x18c>
 804334e:	2b10      	cmp	r3, #16
 8043350:	d006      	beq.n	8043360 <UART_SetConfig+0x198>
 8043352:	e00b      	b.n	804336c <UART_SetConfig+0x1a4>
 8043354:	2300      	movs	r3, #0
 8043356:	76fb      	strb	r3, [r7, #27]
 8043358:	e089      	b.n	804346e <UART_SetConfig+0x2a6>
 804335a:	2302      	movs	r3, #2
 804335c:	76fb      	strb	r3, [r7, #27]
 804335e:	e086      	b.n	804346e <UART_SetConfig+0x2a6>
 8043360:	2304      	movs	r3, #4
 8043362:	76fb      	strb	r3, [r7, #27]
 8043364:	e083      	b.n	804346e <UART_SetConfig+0x2a6>
 8043366:	2308      	movs	r3, #8
 8043368:	76fb      	strb	r3, [r7, #27]
 804336a:	e080      	b.n	804346e <UART_SetConfig+0x2a6>
 804336c:	2310      	movs	r3, #16
 804336e:	76fb      	strb	r3, [r7, #27]
 8043370:	e07d      	b.n	804346e <UART_SetConfig+0x2a6>
 8043372:	687b      	ldr	r3, [r7, #4]
 8043374:	681b      	ldr	r3, [r3, #0]
 8043376:	4a59      	ldr	r2, [pc, #356]	; (80434dc <UART_SetConfig+0x314>)
 8043378:	4293      	cmp	r3, r2
 804337a:	d120      	bne.n	80433be <UART_SetConfig+0x1f6>
 804337c:	4b54      	ldr	r3, [pc, #336]	; (80434d0 <UART_SetConfig+0x308>)
 804337e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8043382:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8043386:	2bc0      	cmp	r3, #192	; 0xc0
 8043388:	d013      	beq.n	80433b2 <UART_SetConfig+0x1ea>
 804338a:	2bc0      	cmp	r3, #192	; 0xc0
 804338c:	d814      	bhi.n	80433b8 <UART_SetConfig+0x1f0>
 804338e:	2b80      	cmp	r3, #128	; 0x80
 8043390:	d009      	beq.n	80433a6 <UART_SetConfig+0x1de>
 8043392:	2b80      	cmp	r3, #128	; 0x80
 8043394:	d810      	bhi.n	80433b8 <UART_SetConfig+0x1f0>
 8043396:	2b00      	cmp	r3, #0
 8043398:	d002      	beq.n	80433a0 <UART_SetConfig+0x1d8>
 804339a:	2b40      	cmp	r3, #64	; 0x40
 804339c:	d006      	beq.n	80433ac <UART_SetConfig+0x1e4>
 804339e:	e00b      	b.n	80433b8 <UART_SetConfig+0x1f0>
 80433a0:	2300      	movs	r3, #0
 80433a2:	76fb      	strb	r3, [r7, #27]
 80433a4:	e063      	b.n	804346e <UART_SetConfig+0x2a6>
 80433a6:	2302      	movs	r3, #2
 80433a8:	76fb      	strb	r3, [r7, #27]
 80433aa:	e060      	b.n	804346e <UART_SetConfig+0x2a6>
 80433ac:	2304      	movs	r3, #4
 80433ae:	76fb      	strb	r3, [r7, #27]
 80433b0:	e05d      	b.n	804346e <UART_SetConfig+0x2a6>
 80433b2:	2308      	movs	r3, #8
 80433b4:	76fb      	strb	r3, [r7, #27]
 80433b6:	e05a      	b.n	804346e <UART_SetConfig+0x2a6>
 80433b8:	2310      	movs	r3, #16
 80433ba:	76fb      	strb	r3, [r7, #27]
 80433bc:	e057      	b.n	804346e <UART_SetConfig+0x2a6>
 80433be:	687b      	ldr	r3, [r7, #4]
 80433c0:	681b      	ldr	r3, [r3, #0]
 80433c2:	4a47      	ldr	r2, [pc, #284]	; (80434e0 <UART_SetConfig+0x318>)
 80433c4:	4293      	cmp	r3, r2
 80433c6:	d125      	bne.n	8043414 <UART_SetConfig+0x24c>
 80433c8:	4b41      	ldr	r3, [pc, #260]	; (80434d0 <UART_SetConfig+0x308>)
 80433ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80433ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80433d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80433d6:	d017      	beq.n	8043408 <UART_SetConfig+0x240>
 80433d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80433dc:	d817      	bhi.n	804340e <UART_SetConfig+0x246>
 80433de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80433e2:	d00b      	beq.n	80433fc <UART_SetConfig+0x234>
 80433e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80433e8:	d811      	bhi.n	804340e <UART_SetConfig+0x246>
 80433ea:	2b00      	cmp	r3, #0
 80433ec:	d003      	beq.n	80433f6 <UART_SetConfig+0x22e>
 80433ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80433f2:	d006      	beq.n	8043402 <UART_SetConfig+0x23a>
 80433f4:	e00b      	b.n	804340e <UART_SetConfig+0x246>
 80433f6:	2300      	movs	r3, #0
 80433f8:	76fb      	strb	r3, [r7, #27]
 80433fa:	e038      	b.n	804346e <UART_SetConfig+0x2a6>
 80433fc:	2302      	movs	r3, #2
 80433fe:	76fb      	strb	r3, [r7, #27]
 8043400:	e035      	b.n	804346e <UART_SetConfig+0x2a6>
 8043402:	2304      	movs	r3, #4
 8043404:	76fb      	strb	r3, [r7, #27]
 8043406:	e032      	b.n	804346e <UART_SetConfig+0x2a6>
 8043408:	2308      	movs	r3, #8
 804340a:	76fb      	strb	r3, [r7, #27]
 804340c:	e02f      	b.n	804346e <UART_SetConfig+0x2a6>
 804340e:	2310      	movs	r3, #16
 8043410:	76fb      	strb	r3, [r7, #27]
 8043412:	e02c      	b.n	804346e <UART_SetConfig+0x2a6>
 8043414:	687b      	ldr	r3, [r7, #4]
 8043416:	681b      	ldr	r3, [r3, #0]
 8043418:	4a2b      	ldr	r2, [pc, #172]	; (80434c8 <UART_SetConfig+0x300>)
 804341a:	4293      	cmp	r3, r2
 804341c:	d125      	bne.n	804346a <UART_SetConfig+0x2a2>
 804341e:	4b2c      	ldr	r3, [pc, #176]	; (80434d0 <UART_SetConfig+0x308>)
 8043420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8043424:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8043428:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 804342c:	d017      	beq.n	804345e <UART_SetConfig+0x296>
 804342e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8043432:	d817      	bhi.n	8043464 <UART_SetConfig+0x29c>
 8043434:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8043438:	d00b      	beq.n	8043452 <UART_SetConfig+0x28a>
 804343a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 804343e:	d811      	bhi.n	8043464 <UART_SetConfig+0x29c>
 8043440:	2b00      	cmp	r3, #0
 8043442:	d003      	beq.n	804344c <UART_SetConfig+0x284>
 8043444:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8043448:	d006      	beq.n	8043458 <UART_SetConfig+0x290>
 804344a:	e00b      	b.n	8043464 <UART_SetConfig+0x29c>
 804344c:	2300      	movs	r3, #0
 804344e:	76fb      	strb	r3, [r7, #27]
 8043450:	e00d      	b.n	804346e <UART_SetConfig+0x2a6>
 8043452:	2302      	movs	r3, #2
 8043454:	76fb      	strb	r3, [r7, #27]
 8043456:	e00a      	b.n	804346e <UART_SetConfig+0x2a6>
 8043458:	2304      	movs	r3, #4
 804345a:	76fb      	strb	r3, [r7, #27]
 804345c:	e007      	b.n	804346e <UART_SetConfig+0x2a6>
 804345e:	2308      	movs	r3, #8
 8043460:	76fb      	strb	r3, [r7, #27]
 8043462:	e004      	b.n	804346e <UART_SetConfig+0x2a6>
 8043464:	2310      	movs	r3, #16
 8043466:	76fb      	strb	r3, [r7, #27]
 8043468:	e001      	b.n	804346e <UART_SetConfig+0x2a6>
 804346a:	2310      	movs	r3, #16
 804346c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 804346e:	687b      	ldr	r3, [r7, #4]
 8043470:	681b      	ldr	r3, [r3, #0]
 8043472:	4a15      	ldr	r2, [pc, #84]	; (80434c8 <UART_SetConfig+0x300>)
 8043474:	4293      	cmp	r3, r2
 8043476:	f040 80a3 	bne.w	80435c0 <UART_SetConfig+0x3f8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 804347a:	7efb      	ldrb	r3, [r7, #27]
 804347c:	2b08      	cmp	r3, #8
 804347e:	d83b      	bhi.n	80434f8 <UART_SetConfig+0x330>
 8043480:	a201      	add	r2, pc, #4	; (adr r2, 8043488 <UART_SetConfig+0x2c0>)
 8043482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8043486:	bf00      	nop
 8043488:	080434ad 	.word	0x080434ad
 804348c:	080434b5 	.word	0x080434b5
 8043490:	080434bd 	.word	0x080434bd
 8043494:	080434f9 	.word	0x080434f9
 8043498:	080434e9 	.word	0x080434e9
 804349c:	080434f9 	.word	0x080434f9
 80434a0:	080434f9 	.word	0x080434f9
 80434a4:	080434f9 	.word	0x080434f9
 80434a8:	080434f1 	.word	0x080434f1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80434ac:	f7fe fe40 	bl	8042130 <HAL_RCC_GetPCLK1Freq>
 80434b0:	6178      	str	r0, [r7, #20]
        break;
 80434b2:	e026      	b.n	8043502 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80434b4:	f7fe fe50 	bl	8042158 <HAL_RCC_GetPCLK2Freq>
 80434b8:	6178      	str	r0, [r7, #20]
        break;
 80434ba:	e022      	b.n	8043502 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80434bc:	4b09      	ldr	r3, [pc, #36]	; (80434e4 <UART_SetConfig+0x31c>)
 80434be:	617b      	str	r3, [r7, #20]
        break;
 80434c0:	e01f      	b.n	8043502 <UART_SetConfig+0x33a>
 80434c2:	bf00      	nop
 80434c4:	cfff69f3 	.word	0xcfff69f3
 80434c8:	40008000 	.word	0x40008000
 80434cc:	40013800 	.word	0x40013800
 80434d0:	40021000 	.word	0x40021000
 80434d4:	40004400 	.word	0x40004400
 80434d8:	40004800 	.word	0x40004800
 80434dc:	40004c00 	.word	0x40004c00
 80434e0:	40005000 	.word	0x40005000
 80434e4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80434e8:	f7fe fd70 	bl	8041fcc <HAL_RCC_GetSysClockFreq>
 80434ec:	6178      	str	r0, [r7, #20]
        break;
 80434ee:	e008      	b.n	8043502 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80434f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80434f4:	617b      	str	r3, [r7, #20]
        break;
 80434f6:	e004      	b.n	8043502 <UART_SetConfig+0x33a>
      default:
        pclk = 0U;
 80434f8:	2300      	movs	r3, #0
 80434fa:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80434fc:	2301      	movs	r3, #1
 80434fe:	76bb      	strb	r3, [r7, #26]
        break;
 8043500:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8043502:	697b      	ldr	r3, [r7, #20]
 8043504:	2b00      	cmp	r3, #0
 8043506:	f000 811b 	beq.w	8043740 <UART_SetConfig+0x578>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 804350a:	687b      	ldr	r3, [r7, #4]
 804350c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804350e:	4a96      	ldr	r2, [pc, #600]	; (8043768 <UART_SetConfig+0x5a0>)
 8043510:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8043514:	461a      	mov	r2, r3
 8043516:	697b      	ldr	r3, [r7, #20]
 8043518:	fbb3 f3f2 	udiv	r3, r3, r2
 804351c:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 804351e:	687b      	ldr	r3, [r7, #4]
 8043520:	685a      	ldr	r2, [r3, #4]
 8043522:	4613      	mov	r3, r2
 8043524:	005b      	lsls	r3, r3, #1
 8043526:	4413      	add	r3, r2
 8043528:	68ba      	ldr	r2, [r7, #8]
 804352a:	429a      	cmp	r2, r3
 804352c:	d305      	bcc.n	804353a <UART_SetConfig+0x372>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 804352e:	687b      	ldr	r3, [r7, #4]
 8043530:	685b      	ldr	r3, [r3, #4]
 8043532:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8043534:	68ba      	ldr	r2, [r7, #8]
 8043536:	429a      	cmp	r2, r3
 8043538:	d902      	bls.n	8043540 <UART_SetConfig+0x378>
      {
        ret = HAL_ERROR;
 804353a:	2301      	movs	r3, #1
 804353c:	76bb      	strb	r3, [r7, #26]
 804353e:	e0ff      	b.n	8043740 <UART_SetConfig+0x578>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8043540:	697b      	ldr	r3, [r7, #20]
 8043542:	4618      	mov	r0, r3
 8043544:	f04f 0100 	mov.w	r1, #0
 8043548:	687b      	ldr	r3, [r7, #4]
 804354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804354c:	4a86      	ldr	r2, [pc, #536]	; (8043768 <UART_SetConfig+0x5a0>)
 804354e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8043552:	b29a      	uxth	r2, r3
 8043554:	f04f 0300 	mov.w	r3, #0
 8043558:	f7fd faec 	bl	8040b34 <__aeabi_uldivmod>
 804355c:	4602      	mov	r2, r0
 804355e:	460b      	mov	r3, r1
 8043560:	4610      	mov	r0, r2
 8043562:	4619      	mov	r1, r3
 8043564:	f04f 0200 	mov.w	r2, #0
 8043568:	f04f 0300 	mov.w	r3, #0
 804356c:	020b      	lsls	r3, r1, #8
 804356e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8043572:	0202      	lsls	r2, r0, #8
 8043574:	6879      	ldr	r1, [r7, #4]
 8043576:	6849      	ldr	r1, [r1, #4]
 8043578:	0849      	lsrs	r1, r1, #1
 804357a:	4608      	mov	r0, r1
 804357c:	f04f 0100 	mov.w	r1, #0
 8043580:	1814      	adds	r4, r2, r0
 8043582:	eb43 0501 	adc.w	r5, r3, r1
 8043586:	687b      	ldr	r3, [r7, #4]
 8043588:	685b      	ldr	r3, [r3, #4]
 804358a:	461a      	mov	r2, r3
 804358c:	f04f 0300 	mov.w	r3, #0
 8043590:	4620      	mov	r0, r4
 8043592:	4629      	mov	r1, r5
 8043594:	f7fd face 	bl	8040b34 <__aeabi_uldivmod>
 8043598:	4602      	mov	r2, r0
 804359a:	460b      	mov	r3, r1
 804359c:	4613      	mov	r3, r2
 804359e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80435a0:	693b      	ldr	r3, [r7, #16]
 80435a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80435a6:	d308      	bcc.n	80435ba <UART_SetConfig+0x3f2>
 80435a8:	693b      	ldr	r3, [r7, #16]
 80435aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80435ae:	d204      	bcs.n	80435ba <UART_SetConfig+0x3f2>
        {
          huart->Instance->BRR = usartdiv;
 80435b0:	687b      	ldr	r3, [r7, #4]
 80435b2:	681b      	ldr	r3, [r3, #0]
 80435b4:	693a      	ldr	r2, [r7, #16]
 80435b6:	60da      	str	r2, [r3, #12]
 80435b8:	e0c2      	b.n	8043740 <UART_SetConfig+0x578>
        }
        else
        {
          ret = HAL_ERROR;
 80435ba:	2301      	movs	r3, #1
 80435bc:	76bb      	strb	r3, [r7, #26]
 80435be:	e0bf      	b.n	8043740 <UART_SetConfig+0x578>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80435c0:	687b      	ldr	r3, [r7, #4]
 80435c2:	69db      	ldr	r3, [r3, #28]
 80435c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80435c8:	d165      	bne.n	8043696 <UART_SetConfig+0x4ce>
  {
    switch (clocksource)
 80435ca:	7efb      	ldrb	r3, [r7, #27]
 80435cc:	2b08      	cmp	r3, #8
 80435ce:	d828      	bhi.n	8043622 <UART_SetConfig+0x45a>
 80435d0:	a201      	add	r2, pc, #4	; (adr r2, 80435d8 <UART_SetConfig+0x410>)
 80435d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80435d6:	bf00      	nop
 80435d8:	080435fd 	.word	0x080435fd
 80435dc:	08043605 	.word	0x08043605
 80435e0:	0804360d 	.word	0x0804360d
 80435e4:	08043623 	.word	0x08043623
 80435e8:	08043613 	.word	0x08043613
 80435ec:	08043623 	.word	0x08043623
 80435f0:	08043623 	.word	0x08043623
 80435f4:	08043623 	.word	0x08043623
 80435f8:	0804361b 	.word	0x0804361b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80435fc:	f7fe fd98 	bl	8042130 <HAL_RCC_GetPCLK1Freq>
 8043600:	6178      	str	r0, [r7, #20]
        break;
 8043602:	e013      	b.n	804362c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8043604:	f7fe fda8 	bl	8042158 <HAL_RCC_GetPCLK2Freq>
 8043608:	6178      	str	r0, [r7, #20]
        break;
 804360a:	e00f      	b.n	804362c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 804360c:	4b57      	ldr	r3, [pc, #348]	; (804376c <UART_SetConfig+0x5a4>)
 804360e:	617b      	str	r3, [r7, #20]
        break;
 8043610:	e00c      	b.n	804362c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8043612:	f7fe fcdb 	bl	8041fcc <HAL_RCC_GetSysClockFreq>
 8043616:	6178      	str	r0, [r7, #20]
        break;
 8043618:	e008      	b.n	804362c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 804361a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 804361e:	617b      	str	r3, [r7, #20]
        break;
 8043620:	e004      	b.n	804362c <UART_SetConfig+0x464>
      default:
        pclk = 0U;
 8043622:	2300      	movs	r3, #0
 8043624:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8043626:	2301      	movs	r3, #1
 8043628:	76bb      	strb	r3, [r7, #26]
        break;
 804362a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 804362c:	697b      	ldr	r3, [r7, #20]
 804362e:	2b00      	cmp	r3, #0
 8043630:	f000 8086 	beq.w	8043740 <UART_SetConfig+0x578>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8043634:	687b      	ldr	r3, [r7, #4]
 8043636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043638:	4a4b      	ldr	r2, [pc, #300]	; (8043768 <UART_SetConfig+0x5a0>)
 804363a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 804363e:	461a      	mov	r2, r3
 8043640:	697b      	ldr	r3, [r7, #20]
 8043642:	fbb3 f3f2 	udiv	r3, r3, r2
 8043646:	005a      	lsls	r2, r3, #1
 8043648:	687b      	ldr	r3, [r7, #4]
 804364a:	685b      	ldr	r3, [r3, #4]
 804364c:	085b      	lsrs	r3, r3, #1
 804364e:	441a      	add	r2, r3
 8043650:	687b      	ldr	r3, [r7, #4]
 8043652:	685b      	ldr	r3, [r3, #4]
 8043654:	fbb2 f3f3 	udiv	r3, r2, r3
 8043658:	b29b      	uxth	r3, r3
 804365a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 804365c:	693b      	ldr	r3, [r7, #16]
 804365e:	2b0f      	cmp	r3, #15
 8043660:	d916      	bls.n	8043690 <UART_SetConfig+0x4c8>
 8043662:	693b      	ldr	r3, [r7, #16]
 8043664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8043668:	d212      	bcs.n	8043690 <UART_SetConfig+0x4c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 804366a:	693b      	ldr	r3, [r7, #16]
 804366c:	b29b      	uxth	r3, r3
 804366e:	f023 030f 	bic.w	r3, r3, #15
 8043672:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8043674:	693b      	ldr	r3, [r7, #16]
 8043676:	085b      	lsrs	r3, r3, #1
 8043678:	b29b      	uxth	r3, r3
 804367a:	f003 0307 	and.w	r3, r3, #7
 804367e:	b29a      	uxth	r2, r3
 8043680:	89fb      	ldrh	r3, [r7, #14]
 8043682:	4313      	orrs	r3, r2
 8043684:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8043686:	687b      	ldr	r3, [r7, #4]
 8043688:	681b      	ldr	r3, [r3, #0]
 804368a:	89fa      	ldrh	r2, [r7, #14]
 804368c:	60da      	str	r2, [r3, #12]
 804368e:	e057      	b.n	8043740 <UART_SetConfig+0x578>
      }
      else
      {
        ret = HAL_ERROR;
 8043690:	2301      	movs	r3, #1
 8043692:	76bb      	strb	r3, [r7, #26]
 8043694:	e054      	b.n	8043740 <UART_SetConfig+0x578>
      }
    }
  }
  else
  {
    switch (clocksource)
 8043696:	7efb      	ldrb	r3, [r7, #27]
 8043698:	2b08      	cmp	r3, #8
 804369a:	d828      	bhi.n	80436ee <UART_SetConfig+0x526>
 804369c:	a201      	add	r2, pc, #4	; (adr r2, 80436a4 <UART_SetConfig+0x4dc>)
 804369e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80436a2:	bf00      	nop
 80436a4:	080436c9 	.word	0x080436c9
 80436a8:	080436d1 	.word	0x080436d1
 80436ac:	080436d9 	.word	0x080436d9
 80436b0:	080436ef 	.word	0x080436ef
 80436b4:	080436df 	.word	0x080436df
 80436b8:	080436ef 	.word	0x080436ef
 80436bc:	080436ef 	.word	0x080436ef
 80436c0:	080436ef 	.word	0x080436ef
 80436c4:	080436e7 	.word	0x080436e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80436c8:	f7fe fd32 	bl	8042130 <HAL_RCC_GetPCLK1Freq>
 80436cc:	6178      	str	r0, [r7, #20]
        break;
 80436ce:	e013      	b.n	80436f8 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80436d0:	f7fe fd42 	bl	8042158 <HAL_RCC_GetPCLK2Freq>
 80436d4:	6178      	str	r0, [r7, #20]
        break;
 80436d6:	e00f      	b.n	80436f8 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80436d8:	4b24      	ldr	r3, [pc, #144]	; (804376c <UART_SetConfig+0x5a4>)
 80436da:	617b      	str	r3, [r7, #20]
        break;
 80436dc:	e00c      	b.n	80436f8 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80436de:	f7fe fc75 	bl	8041fcc <HAL_RCC_GetSysClockFreq>
 80436e2:	6178      	str	r0, [r7, #20]
        break;
 80436e4:	e008      	b.n	80436f8 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80436e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80436ea:	617b      	str	r3, [r7, #20]
        break;
 80436ec:	e004      	b.n	80436f8 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 80436ee:	2300      	movs	r3, #0
 80436f0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80436f2:	2301      	movs	r3, #1
 80436f4:	76bb      	strb	r3, [r7, #26]
        break;
 80436f6:	bf00      	nop
    }

    if (pclk != 0U)
 80436f8:	697b      	ldr	r3, [r7, #20]
 80436fa:	2b00      	cmp	r3, #0
 80436fc:	d020      	beq.n	8043740 <UART_SetConfig+0x578>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80436fe:	687b      	ldr	r3, [r7, #4]
 8043700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043702:	4a19      	ldr	r2, [pc, #100]	; (8043768 <UART_SetConfig+0x5a0>)
 8043704:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8043708:	461a      	mov	r2, r3
 804370a:	697b      	ldr	r3, [r7, #20]
 804370c:	fbb3 f2f2 	udiv	r2, r3, r2
 8043710:	687b      	ldr	r3, [r7, #4]
 8043712:	685b      	ldr	r3, [r3, #4]
 8043714:	085b      	lsrs	r3, r3, #1
 8043716:	441a      	add	r2, r3
 8043718:	687b      	ldr	r3, [r7, #4]
 804371a:	685b      	ldr	r3, [r3, #4]
 804371c:	fbb2 f3f3 	udiv	r3, r2, r3
 8043720:	b29b      	uxth	r3, r3
 8043722:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8043724:	693b      	ldr	r3, [r7, #16]
 8043726:	2b0f      	cmp	r3, #15
 8043728:	d908      	bls.n	804373c <UART_SetConfig+0x574>
 804372a:	693b      	ldr	r3, [r7, #16]
 804372c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8043730:	d204      	bcs.n	804373c <UART_SetConfig+0x574>
      {
        huart->Instance->BRR = usartdiv;
 8043732:	687b      	ldr	r3, [r7, #4]
 8043734:	681b      	ldr	r3, [r3, #0]
 8043736:	693a      	ldr	r2, [r7, #16]
 8043738:	60da      	str	r2, [r3, #12]
 804373a:	e001      	b.n	8043740 <UART_SetConfig+0x578>
      }
      else
      {
        ret = HAL_ERROR;
 804373c:	2301      	movs	r3, #1
 804373e:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8043740:	687b      	ldr	r3, [r7, #4]
 8043742:	2201      	movs	r2, #1
 8043744:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8043748:	687b      	ldr	r3, [r7, #4]
 804374a:	2201      	movs	r2, #1
 804374c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8043750:	687b      	ldr	r3, [r7, #4]
 8043752:	2200      	movs	r2, #0
 8043754:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8043756:	687b      	ldr	r3, [r7, #4]
 8043758:	2200      	movs	r2, #0
 804375a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 804375c:	7ebb      	ldrb	r3, [r7, #26]
}
 804375e:	4618      	mov	r0, r3
 8043760:	3720      	adds	r7, #32
 8043762:	46bd      	mov	sp, r7
 8043764:	bdb0      	pop	{r4, r5, r7, pc}
 8043766:	bf00      	nop
 8043768:	08047214 	.word	0x08047214
 804376c:	00f42400 	.word	0x00f42400

08043770 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8043770:	b480      	push	{r7}
 8043772:	b083      	sub	sp, #12
 8043774:	af00      	add	r7, sp, #0
 8043776:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8043778:	687b      	ldr	r3, [r7, #4]
 804377a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804377c:	f003 0301 	and.w	r3, r3, #1
 8043780:	2b00      	cmp	r3, #0
 8043782:	d00a      	beq.n	804379a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8043784:	687b      	ldr	r3, [r7, #4]
 8043786:	681b      	ldr	r3, [r3, #0]
 8043788:	685b      	ldr	r3, [r3, #4]
 804378a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 804378e:	687b      	ldr	r3, [r7, #4]
 8043790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8043792:	687b      	ldr	r3, [r7, #4]
 8043794:	681b      	ldr	r3, [r3, #0]
 8043796:	430a      	orrs	r2, r1
 8043798:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 804379a:	687b      	ldr	r3, [r7, #4]
 804379c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804379e:	f003 0302 	and.w	r3, r3, #2
 80437a2:	2b00      	cmp	r3, #0
 80437a4:	d00a      	beq.n	80437bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80437a6:	687b      	ldr	r3, [r7, #4]
 80437a8:	681b      	ldr	r3, [r3, #0]
 80437aa:	685b      	ldr	r3, [r3, #4]
 80437ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80437b0:	687b      	ldr	r3, [r7, #4]
 80437b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80437b4:	687b      	ldr	r3, [r7, #4]
 80437b6:	681b      	ldr	r3, [r3, #0]
 80437b8:	430a      	orrs	r2, r1
 80437ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80437bc:	687b      	ldr	r3, [r7, #4]
 80437be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80437c0:	f003 0304 	and.w	r3, r3, #4
 80437c4:	2b00      	cmp	r3, #0
 80437c6:	d00a      	beq.n	80437de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80437c8:	687b      	ldr	r3, [r7, #4]
 80437ca:	681b      	ldr	r3, [r3, #0]
 80437cc:	685b      	ldr	r3, [r3, #4]
 80437ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80437d2:	687b      	ldr	r3, [r7, #4]
 80437d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80437d6:	687b      	ldr	r3, [r7, #4]
 80437d8:	681b      	ldr	r3, [r3, #0]
 80437da:	430a      	orrs	r2, r1
 80437dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80437de:	687b      	ldr	r3, [r7, #4]
 80437e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80437e2:	f003 0308 	and.w	r3, r3, #8
 80437e6:	2b00      	cmp	r3, #0
 80437e8:	d00a      	beq.n	8043800 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80437ea:	687b      	ldr	r3, [r7, #4]
 80437ec:	681b      	ldr	r3, [r3, #0]
 80437ee:	685b      	ldr	r3, [r3, #4]
 80437f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80437f4:	687b      	ldr	r3, [r7, #4]
 80437f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80437f8:	687b      	ldr	r3, [r7, #4]
 80437fa:	681b      	ldr	r3, [r3, #0]
 80437fc:	430a      	orrs	r2, r1
 80437fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8043800:	687b      	ldr	r3, [r7, #4]
 8043802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043804:	f003 0310 	and.w	r3, r3, #16
 8043808:	2b00      	cmp	r3, #0
 804380a:	d00a      	beq.n	8043822 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 804380c:	687b      	ldr	r3, [r7, #4]
 804380e:	681b      	ldr	r3, [r3, #0]
 8043810:	689b      	ldr	r3, [r3, #8]
 8043812:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8043816:	687b      	ldr	r3, [r7, #4]
 8043818:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 804381a:	687b      	ldr	r3, [r7, #4]
 804381c:	681b      	ldr	r3, [r3, #0]
 804381e:	430a      	orrs	r2, r1
 8043820:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8043822:	687b      	ldr	r3, [r7, #4]
 8043824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043826:	f003 0320 	and.w	r3, r3, #32
 804382a:	2b00      	cmp	r3, #0
 804382c:	d00a      	beq.n	8043844 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 804382e:	687b      	ldr	r3, [r7, #4]
 8043830:	681b      	ldr	r3, [r3, #0]
 8043832:	689b      	ldr	r3, [r3, #8]
 8043834:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8043838:	687b      	ldr	r3, [r7, #4]
 804383a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 804383c:	687b      	ldr	r3, [r7, #4]
 804383e:	681b      	ldr	r3, [r3, #0]
 8043840:	430a      	orrs	r2, r1
 8043842:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8043844:	687b      	ldr	r3, [r7, #4]
 8043846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804384c:	2b00      	cmp	r3, #0
 804384e:	d01a      	beq.n	8043886 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8043850:	687b      	ldr	r3, [r7, #4]
 8043852:	681b      	ldr	r3, [r3, #0]
 8043854:	685b      	ldr	r3, [r3, #4]
 8043856:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 804385a:	687b      	ldr	r3, [r7, #4]
 804385c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 804385e:	687b      	ldr	r3, [r7, #4]
 8043860:	681b      	ldr	r3, [r3, #0]
 8043862:	430a      	orrs	r2, r1
 8043864:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8043866:	687b      	ldr	r3, [r7, #4]
 8043868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804386a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 804386e:	d10a      	bne.n	8043886 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8043870:	687b      	ldr	r3, [r7, #4]
 8043872:	681b      	ldr	r3, [r3, #0]
 8043874:	685b      	ldr	r3, [r3, #4]
 8043876:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 804387a:	687b      	ldr	r3, [r7, #4]
 804387c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 804387e:	687b      	ldr	r3, [r7, #4]
 8043880:	681b      	ldr	r3, [r3, #0]
 8043882:	430a      	orrs	r2, r1
 8043884:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8043886:	687b      	ldr	r3, [r7, #4]
 8043888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804388a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804388e:	2b00      	cmp	r3, #0
 8043890:	d00a      	beq.n	80438a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8043892:	687b      	ldr	r3, [r7, #4]
 8043894:	681b      	ldr	r3, [r3, #0]
 8043896:	685b      	ldr	r3, [r3, #4]
 8043898:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 804389c:	687b      	ldr	r3, [r7, #4]
 804389e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80438a0:	687b      	ldr	r3, [r7, #4]
 80438a2:	681b      	ldr	r3, [r3, #0]
 80438a4:	430a      	orrs	r2, r1
 80438a6:	605a      	str	r2, [r3, #4]
  }
}
 80438a8:	bf00      	nop
 80438aa:	370c      	adds	r7, #12
 80438ac:	46bd      	mov	sp, r7
 80438ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80438b2:	4770      	bx	lr

080438b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80438b4:	b580      	push	{r7, lr}
 80438b6:	b086      	sub	sp, #24
 80438b8:	af02      	add	r7, sp, #8
 80438ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80438bc:	687b      	ldr	r3, [r7, #4]
 80438be:	2200      	movs	r2, #0
 80438c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80438c4:	f7fd ffe0 	bl	8041888 <HAL_GetTick>
 80438c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80438ca:	687b      	ldr	r3, [r7, #4]
 80438cc:	681b      	ldr	r3, [r3, #0]
 80438ce:	681b      	ldr	r3, [r3, #0]
 80438d0:	f003 0308 	and.w	r3, r3, #8
 80438d4:	2b08      	cmp	r3, #8
 80438d6:	d10e      	bne.n	80438f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80438d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80438dc:	9300      	str	r3, [sp, #0]
 80438de:	68fb      	ldr	r3, [r7, #12]
 80438e0:	2200      	movs	r2, #0
 80438e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80438e6:	6878      	ldr	r0, [r7, #4]
 80438e8:	f000 f82f 	bl	804394a <UART_WaitOnFlagUntilTimeout>
 80438ec:	4603      	mov	r3, r0
 80438ee:	2b00      	cmp	r3, #0
 80438f0:	d001      	beq.n	80438f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80438f2:	2303      	movs	r3, #3
 80438f4:	e025      	b.n	8043942 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80438f6:	687b      	ldr	r3, [r7, #4]
 80438f8:	681b      	ldr	r3, [r3, #0]
 80438fa:	681b      	ldr	r3, [r3, #0]
 80438fc:	f003 0304 	and.w	r3, r3, #4
 8043900:	2b04      	cmp	r3, #4
 8043902:	d10e      	bne.n	8043922 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8043904:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8043908:	9300      	str	r3, [sp, #0]
 804390a:	68fb      	ldr	r3, [r7, #12]
 804390c:	2200      	movs	r2, #0
 804390e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8043912:	6878      	ldr	r0, [r7, #4]
 8043914:	f000 f819 	bl	804394a <UART_WaitOnFlagUntilTimeout>
 8043918:	4603      	mov	r3, r0
 804391a:	2b00      	cmp	r3, #0
 804391c:	d001      	beq.n	8043922 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 804391e:	2303      	movs	r3, #3
 8043920:	e00f      	b.n	8043942 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8043922:	687b      	ldr	r3, [r7, #4]
 8043924:	2220      	movs	r2, #32
 8043926:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 804392a:	687b      	ldr	r3, [r7, #4]
 804392c:	2220      	movs	r2, #32
 804392e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8043932:	687b      	ldr	r3, [r7, #4]
 8043934:	2200      	movs	r2, #0
 8043936:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8043938:	687b      	ldr	r3, [r7, #4]
 804393a:	2200      	movs	r2, #0
 804393c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8043940:	2300      	movs	r3, #0
}
 8043942:	4618      	mov	r0, r3
 8043944:	3710      	adds	r7, #16
 8043946:	46bd      	mov	sp, r7
 8043948:	bd80      	pop	{r7, pc}

0804394a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 804394a:	b580      	push	{r7, lr}
 804394c:	b084      	sub	sp, #16
 804394e:	af00      	add	r7, sp, #0
 8043950:	60f8      	str	r0, [r7, #12]
 8043952:	60b9      	str	r1, [r7, #8]
 8043954:	603b      	str	r3, [r7, #0]
 8043956:	4613      	mov	r3, r2
 8043958:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 804395a:	e062      	b.n	8043a22 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 804395c:	69bb      	ldr	r3, [r7, #24]
 804395e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8043962:	d05e      	beq.n	8043a22 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8043964:	f7fd ff90 	bl	8041888 <HAL_GetTick>
 8043968:	4602      	mov	r2, r0
 804396a:	683b      	ldr	r3, [r7, #0]
 804396c:	1ad3      	subs	r3, r2, r3
 804396e:	69ba      	ldr	r2, [r7, #24]
 8043970:	429a      	cmp	r2, r3
 8043972:	d302      	bcc.n	804397a <UART_WaitOnFlagUntilTimeout+0x30>
 8043974:	69bb      	ldr	r3, [r7, #24]
 8043976:	2b00      	cmp	r3, #0
 8043978:	d11d      	bne.n	80439b6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 804397a:	68fb      	ldr	r3, [r7, #12]
 804397c:	681b      	ldr	r3, [r3, #0]
 804397e:	681a      	ldr	r2, [r3, #0]
 8043980:	68fb      	ldr	r3, [r7, #12]
 8043982:	681b      	ldr	r3, [r3, #0]
 8043984:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8043988:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 804398a:	68fb      	ldr	r3, [r7, #12]
 804398c:	681b      	ldr	r3, [r3, #0]
 804398e:	689a      	ldr	r2, [r3, #8]
 8043990:	68fb      	ldr	r3, [r7, #12]
 8043992:	681b      	ldr	r3, [r3, #0]
 8043994:	f022 0201 	bic.w	r2, r2, #1
 8043998:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 804399a:	68fb      	ldr	r3, [r7, #12]
 804399c:	2220      	movs	r2, #32
 804399e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80439a2:	68fb      	ldr	r3, [r7, #12]
 80439a4:	2220      	movs	r2, #32
 80439a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80439aa:	68fb      	ldr	r3, [r7, #12]
 80439ac:	2200      	movs	r2, #0
 80439ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80439b2:	2303      	movs	r3, #3
 80439b4:	e045      	b.n	8043a42 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80439b6:	68fb      	ldr	r3, [r7, #12]
 80439b8:	681b      	ldr	r3, [r3, #0]
 80439ba:	681b      	ldr	r3, [r3, #0]
 80439bc:	f003 0304 	and.w	r3, r3, #4
 80439c0:	2b00      	cmp	r3, #0
 80439c2:	d02e      	beq.n	8043a22 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80439c4:	68fb      	ldr	r3, [r7, #12]
 80439c6:	681b      	ldr	r3, [r3, #0]
 80439c8:	69db      	ldr	r3, [r3, #28]
 80439ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80439ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80439d2:	d126      	bne.n	8043a22 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80439d4:	68fb      	ldr	r3, [r7, #12]
 80439d6:	681b      	ldr	r3, [r3, #0]
 80439d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80439dc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80439de:	68fb      	ldr	r3, [r7, #12]
 80439e0:	681b      	ldr	r3, [r3, #0]
 80439e2:	681a      	ldr	r2, [r3, #0]
 80439e4:	68fb      	ldr	r3, [r7, #12]
 80439e6:	681b      	ldr	r3, [r3, #0]
 80439e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80439ec:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80439ee:	68fb      	ldr	r3, [r7, #12]
 80439f0:	681b      	ldr	r3, [r3, #0]
 80439f2:	689a      	ldr	r2, [r3, #8]
 80439f4:	68fb      	ldr	r3, [r7, #12]
 80439f6:	681b      	ldr	r3, [r3, #0]
 80439f8:	f022 0201 	bic.w	r2, r2, #1
 80439fc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80439fe:	68fb      	ldr	r3, [r7, #12]
 8043a00:	2220      	movs	r2, #32
 8043a02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8043a06:	68fb      	ldr	r3, [r7, #12]
 8043a08:	2220      	movs	r2, #32
 8043a0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8043a0e:	68fb      	ldr	r3, [r7, #12]
 8043a10:	2220      	movs	r2, #32
 8043a12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8043a16:	68fb      	ldr	r3, [r7, #12]
 8043a18:	2200      	movs	r2, #0
 8043a1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8043a1e:	2303      	movs	r3, #3
 8043a20:	e00f      	b.n	8043a42 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8043a22:	68fb      	ldr	r3, [r7, #12]
 8043a24:	681b      	ldr	r3, [r3, #0]
 8043a26:	69da      	ldr	r2, [r3, #28]
 8043a28:	68bb      	ldr	r3, [r7, #8]
 8043a2a:	4013      	ands	r3, r2
 8043a2c:	68ba      	ldr	r2, [r7, #8]
 8043a2e:	429a      	cmp	r2, r3
 8043a30:	bf0c      	ite	eq
 8043a32:	2301      	moveq	r3, #1
 8043a34:	2300      	movne	r3, #0
 8043a36:	b2db      	uxtb	r3, r3
 8043a38:	461a      	mov	r2, r3
 8043a3a:	79fb      	ldrb	r3, [r7, #7]
 8043a3c:	429a      	cmp	r2, r3
 8043a3e:	d08d      	beq.n	804395c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8043a40:	2300      	movs	r3, #0
}
 8043a42:	4618      	mov	r0, r3
 8043a44:	3710      	adds	r7, #16
 8043a46:	46bd      	mov	sp, r7
 8043a48:	bd80      	pop	{r7, pc}

08043a4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8043a4a:	b480      	push	{r7}
 8043a4c:	b083      	sub	sp, #12
 8043a4e:	af00      	add	r7, sp, #0
 8043a50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8043a52:	687b      	ldr	r3, [r7, #4]
 8043a54:	681b      	ldr	r3, [r3, #0]
 8043a56:	681a      	ldr	r2, [r3, #0]
 8043a58:	687b      	ldr	r3, [r7, #4]
 8043a5a:	681b      	ldr	r3, [r3, #0]
 8043a5c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8043a60:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8043a62:	687b      	ldr	r3, [r7, #4]
 8043a64:	681b      	ldr	r3, [r3, #0]
 8043a66:	689b      	ldr	r3, [r3, #8]
 8043a68:	687a      	ldr	r2, [r7, #4]
 8043a6a:	6812      	ldr	r2, [r2, #0]
 8043a6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8043a70:	f023 0301 	bic.w	r3, r3, #1
 8043a74:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8043a76:	687b      	ldr	r3, [r7, #4]
 8043a78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8043a7a:	2b01      	cmp	r3, #1
 8043a7c:	d107      	bne.n	8043a8e <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8043a7e:	687b      	ldr	r3, [r7, #4]
 8043a80:	681b      	ldr	r3, [r3, #0]
 8043a82:	681a      	ldr	r2, [r3, #0]
 8043a84:	687b      	ldr	r3, [r7, #4]
 8043a86:	681b      	ldr	r3, [r3, #0]
 8043a88:	f022 0210 	bic.w	r2, r2, #16
 8043a8c:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8043a8e:	687b      	ldr	r3, [r7, #4]
 8043a90:	2220      	movs	r2, #32
 8043a92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8043a96:	687b      	ldr	r3, [r7, #4]
 8043a98:	2200      	movs	r2, #0
 8043a9a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8043a9c:	687b      	ldr	r3, [r7, #4]
 8043a9e:	2200      	movs	r2, #0
 8043aa0:	671a      	str	r2, [r3, #112]	; 0x70
}
 8043aa2:	bf00      	nop
 8043aa4:	370c      	adds	r7, #12
 8043aa6:	46bd      	mov	sp, r7
 8043aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043aac:	4770      	bx	lr

08043aae <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8043aae:	b580      	push	{r7, lr}
 8043ab0:	b084      	sub	sp, #16
 8043ab2:	af00      	add	r7, sp, #0
 8043ab4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8043ab6:	687b      	ldr	r3, [r7, #4]
 8043ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043aba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8043abc:	68fb      	ldr	r3, [r7, #12]
 8043abe:	2200      	movs	r2, #0
 8043ac0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8043ac4:	68fb      	ldr	r3, [r7, #12]
 8043ac6:	2200      	movs	r2, #0
 8043ac8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8043acc:	68f8      	ldr	r0, [r7, #12]
 8043ace:	f7ff fb4f 	bl	8043170 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8043ad2:	bf00      	nop
 8043ad4:	3710      	adds	r7, #16
 8043ad6:	46bd      	mov	sp, r7
 8043ad8:	bd80      	pop	{r7, pc}

08043ada <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8043ada:	b480      	push	{r7}
 8043adc:	b083      	sub	sp, #12
 8043ade:	af00      	add	r7, sp, #0
 8043ae0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8043ae2:	687b      	ldr	r3, [r7, #4]
 8043ae4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8043ae8:	2b21      	cmp	r3, #33	; 0x21
 8043aea:	d12a      	bne.n	8043b42 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8043aec:	687b      	ldr	r3, [r7, #4]
 8043aee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8043af2:	b29b      	uxth	r3, r3
 8043af4:	2b00      	cmp	r3, #0
 8043af6:	d110      	bne.n	8043b1a <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8043af8:	687b      	ldr	r3, [r7, #4]
 8043afa:	681b      	ldr	r3, [r3, #0]
 8043afc:	681a      	ldr	r2, [r3, #0]
 8043afe:	687b      	ldr	r3, [r7, #4]
 8043b00:	681b      	ldr	r3, [r3, #0]
 8043b02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8043b06:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8043b08:	687b      	ldr	r3, [r7, #4]
 8043b0a:	681b      	ldr	r3, [r3, #0]
 8043b0c:	681a      	ldr	r2, [r3, #0]
 8043b0e:	687b      	ldr	r3, [r7, #4]
 8043b10:	681b      	ldr	r3, [r3, #0]
 8043b12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8043b16:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8043b18:	e013      	b.n	8043b42 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8043b1a:	687b      	ldr	r3, [r7, #4]
 8043b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8043b1e:	781a      	ldrb	r2, [r3, #0]
 8043b20:	687b      	ldr	r3, [r7, #4]
 8043b22:	681b      	ldr	r3, [r3, #0]
 8043b24:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8043b26:	687b      	ldr	r3, [r7, #4]
 8043b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8043b2a:	1c5a      	adds	r2, r3, #1
 8043b2c:	687b      	ldr	r3, [r7, #4]
 8043b2e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8043b30:	687b      	ldr	r3, [r7, #4]
 8043b32:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8043b36:	b29b      	uxth	r3, r3
 8043b38:	3b01      	subs	r3, #1
 8043b3a:	b29a      	uxth	r2, r3
 8043b3c:	687b      	ldr	r3, [r7, #4]
 8043b3e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8043b42:	bf00      	nop
 8043b44:	370c      	adds	r7, #12
 8043b46:	46bd      	mov	sp, r7
 8043b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043b4c:	4770      	bx	lr

08043b4e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8043b4e:	b480      	push	{r7}
 8043b50:	b085      	sub	sp, #20
 8043b52:	af00      	add	r7, sp, #0
 8043b54:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8043b56:	687b      	ldr	r3, [r7, #4]
 8043b58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8043b5c:	2b21      	cmp	r3, #33	; 0x21
 8043b5e:	d12f      	bne.n	8043bc0 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 8043b60:	687b      	ldr	r3, [r7, #4]
 8043b62:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8043b66:	b29b      	uxth	r3, r3
 8043b68:	2b00      	cmp	r3, #0
 8043b6a:	d110      	bne.n	8043b8e <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8043b6c:	687b      	ldr	r3, [r7, #4]
 8043b6e:	681b      	ldr	r3, [r3, #0]
 8043b70:	681a      	ldr	r2, [r3, #0]
 8043b72:	687b      	ldr	r3, [r7, #4]
 8043b74:	681b      	ldr	r3, [r3, #0]
 8043b76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8043b7a:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8043b7c:	687b      	ldr	r3, [r7, #4]
 8043b7e:	681b      	ldr	r3, [r3, #0]
 8043b80:	681a      	ldr	r2, [r3, #0]
 8043b82:	687b      	ldr	r3, [r7, #4]
 8043b84:	681b      	ldr	r3, [r3, #0]
 8043b86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8043b8a:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8043b8c:	e018      	b.n	8043bc0 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8043b8e:	687b      	ldr	r3, [r7, #4]
 8043b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8043b92:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8043b94:	68fb      	ldr	r3, [r7, #12]
 8043b96:	881b      	ldrh	r3, [r3, #0]
 8043b98:	461a      	mov	r2, r3
 8043b9a:	687b      	ldr	r3, [r7, #4]
 8043b9c:	681b      	ldr	r3, [r3, #0]
 8043b9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8043ba2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8043ba4:	687b      	ldr	r3, [r7, #4]
 8043ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8043ba8:	1c9a      	adds	r2, r3, #2
 8043baa:	687b      	ldr	r3, [r7, #4]
 8043bac:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8043bae:	687b      	ldr	r3, [r7, #4]
 8043bb0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8043bb4:	b29b      	uxth	r3, r3
 8043bb6:	3b01      	subs	r3, #1
 8043bb8:	b29a      	uxth	r2, r3
 8043bba:	687b      	ldr	r3, [r7, #4]
 8043bbc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8043bc0:	bf00      	nop
 8043bc2:	3714      	adds	r7, #20
 8043bc4:	46bd      	mov	sp, r7
 8043bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043bca:	4770      	bx	lr

08043bcc <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8043bcc:	b480      	push	{r7}
 8043bce:	b085      	sub	sp, #20
 8043bd0:	af00      	add	r7, sp, #0
 8043bd2:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8043bd4:	687b      	ldr	r3, [r7, #4]
 8043bd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8043bda:	2b21      	cmp	r3, #33	; 0x21
 8043bdc:	d13d      	bne.n	8043c5a <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8043bde:	687b      	ldr	r3, [r7, #4]
 8043be0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8043be4:	81fb      	strh	r3, [r7, #14]
 8043be6:	e035      	b.n	8043c54 <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 8043be8:	687b      	ldr	r3, [r7, #4]
 8043bea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8043bee:	b29b      	uxth	r3, r3
 8043bf0:	2b00      	cmp	r3, #0
 8043bf2:	d111      	bne.n	8043c18 <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8043bf4:	687b      	ldr	r3, [r7, #4]
 8043bf6:	681b      	ldr	r3, [r3, #0]
 8043bf8:	689a      	ldr	r2, [r3, #8]
 8043bfa:	687b      	ldr	r3, [r7, #4]
 8043bfc:	681b      	ldr	r3, [r3, #0]
 8043bfe:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8043c02:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8043c04:	687b      	ldr	r3, [r7, #4]
 8043c06:	681b      	ldr	r3, [r3, #0]
 8043c08:	681a      	ldr	r2, [r3, #0]
 8043c0a:	687b      	ldr	r3, [r7, #4]
 8043c0c:	681b      	ldr	r3, [r3, #0]
 8043c0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8043c12:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8043c14:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8043c16:	e020      	b.n	8043c5a <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8043c18:	687b      	ldr	r3, [r7, #4]
 8043c1a:	681b      	ldr	r3, [r3, #0]
 8043c1c:	69db      	ldr	r3, [r3, #28]
 8043c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8043c22:	2b00      	cmp	r3, #0
 8043c24:	d013      	beq.n	8043c4e <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8043c26:	687b      	ldr	r3, [r7, #4]
 8043c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8043c2a:	781a      	ldrb	r2, [r3, #0]
 8043c2c:	687b      	ldr	r3, [r7, #4]
 8043c2e:	681b      	ldr	r3, [r3, #0]
 8043c30:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8043c32:	687b      	ldr	r3, [r7, #4]
 8043c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8043c36:	1c5a      	adds	r2, r3, #1
 8043c38:	687b      	ldr	r3, [r7, #4]
 8043c3a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8043c3c:	687b      	ldr	r3, [r7, #4]
 8043c3e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8043c42:	b29b      	uxth	r3, r3
 8043c44:	3b01      	subs	r3, #1
 8043c46:	b29a      	uxth	r2, r3
 8043c48:	687b      	ldr	r3, [r7, #4]
 8043c4a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8043c4e:	89fb      	ldrh	r3, [r7, #14]
 8043c50:	3b01      	subs	r3, #1
 8043c52:	81fb      	strh	r3, [r7, #14]
 8043c54:	89fb      	ldrh	r3, [r7, #14]
 8043c56:	2b00      	cmp	r3, #0
 8043c58:	d1c6      	bne.n	8043be8 <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 8043c5a:	bf00      	nop
 8043c5c:	3714      	adds	r7, #20
 8043c5e:	46bd      	mov	sp, r7
 8043c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043c64:	4770      	bx	lr

08043c66 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8043c66:	b480      	push	{r7}
 8043c68:	b085      	sub	sp, #20
 8043c6a:	af00      	add	r7, sp, #0
 8043c6c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8043c6e:	687b      	ldr	r3, [r7, #4]
 8043c70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8043c74:	2b21      	cmp	r3, #33	; 0x21
 8043c76:	d142      	bne.n	8043cfe <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8043c78:	687b      	ldr	r3, [r7, #4]
 8043c7a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8043c7e:	81fb      	strh	r3, [r7, #14]
 8043c80:	e03a      	b.n	8043cf8 <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 8043c82:	687b      	ldr	r3, [r7, #4]
 8043c84:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8043c88:	b29b      	uxth	r3, r3
 8043c8a:	2b00      	cmp	r3, #0
 8043c8c:	d111      	bne.n	8043cb2 <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8043c8e:	687b      	ldr	r3, [r7, #4]
 8043c90:	681b      	ldr	r3, [r3, #0]
 8043c92:	689a      	ldr	r2, [r3, #8]
 8043c94:	687b      	ldr	r3, [r7, #4]
 8043c96:	681b      	ldr	r3, [r3, #0]
 8043c98:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8043c9c:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8043c9e:	687b      	ldr	r3, [r7, #4]
 8043ca0:	681b      	ldr	r3, [r3, #0]
 8043ca2:	681a      	ldr	r2, [r3, #0]
 8043ca4:	687b      	ldr	r3, [r7, #4]
 8043ca6:	681b      	ldr	r3, [r3, #0]
 8043ca8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8043cac:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8043cae:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8043cb0:	e025      	b.n	8043cfe <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8043cb2:	687b      	ldr	r3, [r7, #4]
 8043cb4:	681b      	ldr	r3, [r3, #0]
 8043cb6:	69db      	ldr	r3, [r3, #28]
 8043cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8043cbc:	2b00      	cmp	r3, #0
 8043cbe:	d018      	beq.n	8043cf2 <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8043cc0:	687b      	ldr	r3, [r7, #4]
 8043cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8043cc4:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8043cc6:	68bb      	ldr	r3, [r7, #8]
 8043cc8:	881b      	ldrh	r3, [r3, #0]
 8043cca:	461a      	mov	r2, r3
 8043ccc:	687b      	ldr	r3, [r7, #4]
 8043cce:	681b      	ldr	r3, [r3, #0]
 8043cd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8043cd4:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8043cd6:	687b      	ldr	r3, [r7, #4]
 8043cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8043cda:	1c9a      	adds	r2, r3, #2
 8043cdc:	687b      	ldr	r3, [r7, #4]
 8043cde:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8043ce0:	687b      	ldr	r3, [r7, #4]
 8043ce2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8043ce6:	b29b      	uxth	r3, r3
 8043ce8:	3b01      	subs	r3, #1
 8043cea:	b29a      	uxth	r2, r3
 8043cec:	687b      	ldr	r3, [r7, #4]
 8043cee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8043cf2:	89fb      	ldrh	r3, [r7, #14]
 8043cf4:	3b01      	subs	r3, #1
 8043cf6:	81fb      	strh	r3, [r7, #14]
 8043cf8:	89fb      	ldrh	r3, [r7, #14]
 8043cfa:	2b00      	cmp	r3, #0
 8043cfc:	d1c1      	bne.n	8043c82 <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 8043cfe:	bf00      	nop
 8043d00:	3714      	adds	r7, #20
 8043d02:	46bd      	mov	sp, r7
 8043d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043d08:	4770      	bx	lr

08043d0a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8043d0a:	b580      	push	{r7, lr}
 8043d0c:	b082      	sub	sp, #8
 8043d0e:	af00      	add	r7, sp, #0
 8043d10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8043d12:	687b      	ldr	r3, [r7, #4]
 8043d14:	681b      	ldr	r3, [r3, #0]
 8043d16:	681a      	ldr	r2, [r3, #0]
 8043d18:	687b      	ldr	r3, [r7, #4]
 8043d1a:	681b      	ldr	r3, [r3, #0]
 8043d1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8043d20:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8043d22:	687b      	ldr	r3, [r7, #4]
 8043d24:	2220      	movs	r2, #32
 8043d26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8043d2a:	687b      	ldr	r3, [r7, #4]
 8043d2c:	2200      	movs	r2, #0
 8043d2e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8043d30:	6878      	ldr	r0, [r7, #4]
 8043d32:	f7ff fa13 	bl	804315c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8043d36:	bf00      	nop
 8043d38:	3708      	adds	r7, #8
 8043d3a:	46bd      	mov	sp, r7
 8043d3c:	bd80      	pop	{r7, pc}

08043d3e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8043d3e:	b480      	push	{r7}
 8043d40:	b083      	sub	sp, #12
 8043d42:	af00      	add	r7, sp, #0
 8043d44:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8043d46:	bf00      	nop
 8043d48:	370c      	adds	r7, #12
 8043d4a:	46bd      	mov	sp, r7
 8043d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043d50:	4770      	bx	lr

08043d52 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8043d52:	b480      	push	{r7}
 8043d54:	b083      	sub	sp, #12
 8043d56:	af00      	add	r7, sp, #0
 8043d58:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8043d5a:	bf00      	nop
 8043d5c:	370c      	adds	r7, #12
 8043d5e:	46bd      	mov	sp, r7
 8043d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043d64:	4770      	bx	lr

08043d66 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8043d66:	b480      	push	{r7}
 8043d68:	b083      	sub	sp, #12
 8043d6a:	af00      	add	r7, sp, #0
 8043d6c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8043d6e:	bf00      	nop
 8043d70:	370c      	adds	r7, #12
 8043d72:	46bd      	mov	sp, r7
 8043d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043d78:	4770      	bx	lr

08043d7a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8043d7a:	b480      	push	{r7}
 8043d7c:	b085      	sub	sp, #20
 8043d7e:	af00      	add	r7, sp, #0
 8043d80:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8043d82:	687b      	ldr	r3, [r7, #4]
 8043d84:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8043d88:	2b01      	cmp	r3, #1
 8043d8a:	d101      	bne.n	8043d90 <HAL_UARTEx_DisableFifoMode+0x16>
 8043d8c:	2302      	movs	r3, #2
 8043d8e:	e027      	b.n	8043de0 <HAL_UARTEx_DisableFifoMode+0x66>
 8043d90:	687b      	ldr	r3, [r7, #4]
 8043d92:	2201      	movs	r2, #1
 8043d94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8043d98:	687b      	ldr	r3, [r7, #4]
 8043d9a:	2224      	movs	r2, #36	; 0x24
 8043d9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8043da0:	687b      	ldr	r3, [r7, #4]
 8043da2:	681b      	ldr	r3, [r3, #0]
 8043da4:	681b      	ldr	r3, [r3, #0]
 8043da6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8043da8:	687b      	ldr	r3, [r7, #4]
 8043daa:	681b      	ldr	r3, [r3, #0]
 8043dac:	681a      	ldr	r2, [r3, #0]
 8043dae:	687b      	ldr	r3, [r7, #4]
 8043db0:	681b      	ldr	r3, [r3, #0]
 8043db2:	f022 0201 	bic.w	r2, r2, #1
 8043db6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8043db8:	68fb      	ldr	r3, [r7, #12]
 8043dba:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8043dbe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8043dc0:	687b      	ldr	r3, [r7, #4]
 8043dc2:	2200      	movs	r2, #0
 8043dc4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8043dc6:	687b      	ldr	r3, [r7, #4]
 8043dc8:	681b      	ldr	r3, [r3, #0]
 8043dca:	68fa      	ldr	r2, [r7, #12]
 8043dcc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8043dce:	687b      	ldr	r3, [r7, #4]
 8043dd0:	2220      	movs	r2, #32
 8043dd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8043dd6:	687b      	ldr	r3, [r7, #4]
 8043dd8:	2200      	movs	r2, #0
 8043dda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8043dde:	2300      	movs	r3, #0
}
 8043de0:	4618      	mov	r0, r3
 8043de2:	3714      	adds	r7, #20
 8043de4:	46bd      	mov	sp, r7
 8043de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043dea:	4770      	bx	lr

08043dec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8043dec:	b580      	push	{r7, lr}
 8043dee:	b084      	sub	sp, #16
 8043df0:	af00      	add	r7, sp, #0
 8043df2:	6078      	str	r0, [r7, #4]
 8043df4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8043df6:	687b      	ldr	r3, [r7, #4]
 8043df8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8043dfc:	2b01      	cmp	r3, #1
 8043dfe:	d101      	bne.n	8043e04 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8043e00:	2302      	movs	r3, #2
 8043e02:	e02d      	b.n	8043e60 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8043e04:	687b      	ldr	r3, [r7, #4]
 8043e06:	2201      	movs	r2, #1
 8043e08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8043e0c:	687b      	ldr	r3, [r7, #4]
 8043e0e:	2224      	movs	r2, #36	; 0x24
 8043e10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8043e14:	687b      	ldr	r3, [r7, #4]
 8043e16:	681b      	ldr	r3, [r3, #0]
 8043e18:	681b      	ldr	r3, [r3, #0]
 8043e1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8043e1c:	687b      	ldr	r3, [r7, #4]
 8043e1e:	681b      	ldr	r3, [r3, #0]
 8043e20:	681a      	ldr	r2, [r3, #0]
 8043e22:	687b      	ldr	r3, [r7, #4]
 8043e24:	681b      	ldr	r3, [r3, #0]
 8043e26:	f022 0201 	bic.w	r2, r2, #1
 8043e2a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8043e2c:	687b      	ldr	r3, [r7, #4]
 8043e2e:	681b      	ldr	r3, [r3, #0]
 8043e30:	689b      	ldr	r3, [r3, #8]
 8043e32:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8043e36:	687b      	ldr	r3, [r7, #4]
 8043e38:	681b      	ldr	r3, [r3, #0]
 8043e3a:	683a      	ldr	r2, [r7, #0]
 8043e3c:	430a      	orrs	r2, r1
 8043e3e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8043e40:	6878      	ldr	r0, [r7, #4]
 8043e42:	f000 f84f 	bl	8043ee4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8043e46:	687b      	ldr	r3, [r7, #4]
 8043e48:	681b      	ldr	r3, [r3, #0]
 8043e4a:	68fa      	ldr	r2, [r7, #12]
 8043e4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8043e4e:	687b      	ldr	r3, [r7, #4]
 8043e50:	2220      	movs	r2, #32
 8043e52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8043e56:	687b      	ldr	r3, [r7, #4]
 8043e58:	2200      	movs	r2, #0
 8043e5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8043e5e:	2300      	movs	r3, #0
}
 8043e60:	4618      	mov	r0, r3
 8043e62:	3710      	adds	r7, #16
 8043e64:	46bd      	mov	sp, r7
 8043e66:	bd80      	pop	{r7, pc}

08043e68 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8043e68:	b580      	push	{r7, lr}
 8043e6a:	b084      	sub	sp, #16
 8043e6c:	af00      	add	r7, sp, #0
 8043e6e:	6078      	str	r0, [r7, #4]
 8043e70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8043e72:	687b      	ldr	r3, [r7, #4]
 8043e74:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8043e78:	2b01      	cmp	r3, #1
 8043e7a:	d101      	bne.n	8043e80 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8043e7c:	2302      	movs	r3, #2
 8043e7e:	e02d      	b.n	8043edc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8043e80:	687b      	ldr	r3, [r7, #4]
 8043e82:	2201      	movs	r2, #1
 8043e84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8043e88:	687b      	ldr	r3, [r7, #4]
 8043e8a:	2224      	movs	r2, #36	; 0x24
 8043e8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8043e90:	687b      	ldr	r3, [r7, #4]
 8043e92:	681b      	ldr	r3, [r3, #0]
 8043e94:	681b      	ldr	r3, [r3, #0]
 8043e96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8043e98:	687b      	ldr	r3, [r7, #4]
 8043e9a:	681b      	ldr	r3, [r3, #0]
 8043e9c:	681a      	ldr	r2, [r3, #0]
 8043e9e:	687b      	ldr	r3, [r7, #4]
 8043ea0:	681b      	ldr	r3, [r3, #0]
 8043ea2:	f022 0201 	bic.w	r2, r2, #1
 8043ea6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8043ea8:	687b      	ldr	r3, [r7, #4]
 8043eaa:	681b      	ldr	r3, [r3, #0]
 8043eac:	689b      	ldr	r3, [r3, #8]
 8043eae:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8043eb2:	687b      	ldr	r3, [r7, #4]
 8043eb4:	681b      	ldr	r3, [r3, #0]
 8043eb6:	683a      	ldr	r2, [r7, #0]
 8043eb8:	430a      	orrs	r2, r1
 8043eba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8043ebc:	6878      	ldr	r0, [r7, #4]
 8043ebe:	f000 f811 	bl	8043ee4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8043ec2:	687b      	ldr	r3, [r7, #4]
 8043ec4:	681b      	ldr	r3, [r3, #0]
 8043ec6:	68fa      	ldr	r2, [r7, #12]
 8043ec8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8043eca:	687b      	ldr	r3, [r7, #4]
 8043ecc:	2220      	movs	r2, #32
 8043ece:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8043ed2:	687b      	ldr	r3, [r7, #4]
 8043ed4:	2200      	movs	r2, #0
 8043ed6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8043eda:	2300      	movs	r3, #0
}
 8043edc:	4618      	mov	r0, r3
 8043ede:	3710      	adds	r7, #16
 8043ee0:	46bd      	mov	sp, r7
 8043ee2:	bd80      	pop	{r7, pc}

08043ee4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8043ee4:	b480      	push	{r7}
 8043ee6:	b089      	sub	sp, #36	; 0x24
 8043ee8:	af00      	add	r7, sp, #0
 8043eea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8043eec:	4a2f      	ldr	r2, [pc, #188]	; (8043fac <UARTEx_SetNbDataToProcess+0xc8>)
 8043eee:	f107 0314 	add.w	r3, r7, #20
 8043ef2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8043ef6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8043efa:	4a2d      	ldr	r2, [pc, #180]	; (8043fb0 <UARTEx_SetNbDataToProcess+0xcc>)
 8043efc:	f107 030c 	add.w	r3, r7, #12
 8043f00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8043f04:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8043f08:	687b      	ldr	r3, [r7, #4]
 8043f0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8043f0c:	2b00      	cmp	r3, #0
 8043f0e:	d108      	bne.n	8043f22 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8043f10:	687b      	ldr	r3, [r7, #4]
 8043f12:	2201      	movs	r2, #1
 8043f14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8043f18:	687b      	ldr	r3, [r7, #4]
 8043f1a:	2201      	movs	r2, #1
 8043f1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8043f20:	e03d      	b.n	8043f9e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8043f22:	2308      	movs	r3, #8
 8043f24:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8043f26:	2308      	movs	r3, #8
 8043f28:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8043f2a:	687b      	ldr	r3, [r7, #4]
 8043f2c:	681b      	ldr	r3, [r3, #0]
 8043f2e:	689b      	ldr	r3, [r3, #8]
 8043f30:	0e5b      	lsrs	r3, r3, #25
 8043f32:	b2db      	uxtb	r3, r3
 8043f34:	f003 0307 	and.w	r3, r3, #7
 8043f38:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8043f3a:	687b      	ldr	r3, [r7, #4]
 8043f3c:	681b      	ldr	r3, [r3, #0]
 8043f3e:	689b      	ldr	r3, [r3, #8]
 8043f40:	0f5b      	lsrs	r3, r3, #29
 8043f42:	b2db      	uxtb	r3, r3
 8043f44:	f003 0307 	and.w	r3, r3, #7
 8043f48:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8043f4a:	7fbb      	ldrb	r3, [r7, #30]
 8043f4c:	7f3a      	ldrb	r2, [r7, #28]
 8043f4e:	f107 0120 	add.w	r1, r7, #32
 8043f52:	440a      	add	r2, r1
 8043f54:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8043f58:	fb02 f303 	mul.w	r3, r2, r3
 8043f5c:	7f3a      	ldrb	r2, [r7, #28]
 8043f5e:	f107 0120 	add.w	r1, r7, #32
 8043f62:	440a      	add	r2, r1
 8043f64:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8043f68:	fb93 f3f2 	sdiv	r3, r3, r2
 8043f6c:	b29a      	uxth	r2, r3
 8043f6e:	687b      	ldr	r3, [r7, #4]
 8043f70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8043f74:	7ffb      	ldrb	r3, [r7, #31]
 8043f76:	7f7a      	ldrb	r2, [r7, #29]
 8043f78:	f107 0120 	add.w	r1, r7, #32
 8043f7c:	440a      	add	r2, r1
 8043f7e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8043f82:	fb02 f303 	mul.w	r3, r2, r3
 8043f86:	7f7a      	ldrb	r2, [r7, #29]
 8043f88:	f107 0120 	add.w	r1, r7, #32
 8043f8c:	440a      	add	r2, r1
 8043f8e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8043f92:	fb93 f3f2 	sdiv	r3, r3, r2
 8043f96:	b29a      	uxth	r2, r3
 8043f98:	687b      	ldr	r3, [r7, #4]
 8043f9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8043f9e:	bf00      	nop
 8043fa0:	3724      	adds	r7, #36	; 0x24
 8043fa2:	46bd      	mov	sp, r7
 8043fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043fa8:	4770      	bx	lr
 8043faa:	bf00      	nop
 8043fac:	080471ac 	.word	0x080471ac
 8043fb0:	080471b4 	.word	0x080471b4

08043fb4 <MX_MBEDTLS_Init>:

/* USER CODE END 2 */

/* MBEDTLS init function */
void MX_MBEDTLS_Init(void)
{
 8043fb4:	b480      	push	{r7}
 8043fb6:	af00      	add	r7, sp, #0
  */
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */

}
 8043fb8:	bf00      	nop
 8043fba:	46bd      	mov	sp, r7
 8043fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043fc0:	4770      	bx	lr

08043fc2 <atof>:
 8043fc2:	2100      	movs	r1, #0
 8043fc4:	f000 bf76 	b.w	8044eb4 <strtod>

08043fc8 <__errno>:
 8043fc8:	4b01      	ldr	r3, [pc, #4]	; (8043fd0 <__errno+0x8>)
 8043fca:	6818      	ldr	r0, [r3, #0]
 8043fcc:	4770      	bx	lr
 8043fce:	bf00      	nop
 8043fd0:	2001801c 	.word	0x2001801c

08043fd4 <__libc_init_array>:
 8043fd4:	b570      	push	{r4, r5, r6, lr}
 8043fd6:	4d0d      	ldr	r5, [pc, #52]	; (804400c <__libc_init_array+0x38>)
 8043fd8:	2600      	movs	r6, #0
 8043fda:	4c0d      	ldr	r4, [pc, #52]	; (8044010 <__libc_init_array+0x3c>)
 8043fdc:	1b64      	subs	r4, r4, r5
 8043fde:	10a4      	asrs	r4, r4, #2
 8043fe0:	42a6      	cmp	r6, r4
 8043fe2:	d109      	bne.n	8043ff8 <__libc_init_array+0x24>
 8043fe4:	4d0b      	ldr	r5, [pc, #44]	; (8044014 <__libc_init_array+0x40>)
 8043fe6:	2600      	movs	r6, #0
 8043fe8:	4c0b      	ldr	r4, [pc, #44]	; (8044018 <__libc_init_array+0x44>)
 8043fea:	f003 f86f 	bl	80470cc <_init>
 8043fee:	1b64      	subs	r4, r4, r5
 8043ff0:	10a4      	asrs	r4, r4, #2
 8043ff2:	42a6      	cmp	r6, r4
 8043ff4:	d105      	bne.n	8044002 <__libc_init_array+0x2e>
 8043ff6:	bd70      	pop	{r4, r5, r6, pc}
 8043ff8:	f855 3b04 	ldr.w	r3, [r5], #4
 8043ffc:	3601      	adds	r6, #1
 8043ffe:	4798      	blx	r3
 8044000:	e7ee      	b.n	8043fe0 <__libc_init_array+0xc>
 8044002:	f855 3b04 	ldr.w	r3, [r5], #4
 8044006:	3601      	adds	r6, #1
 8044008:	4798      	blx	r3
 804400a:	e7f2      	b.n	8043ff2 <__libc_init_array+0x1e>
 804400c:	0804766c 	.word	0x0804766c
 8044010:	0804766c 	.word	0x0804766c
 8044014:	0804766c 	.word	0x0804766c
 8044018:	08047670 	.word	0x08047670

0804401c <malloc>:
 804401c:	4b02      	ldr	r3, [pc, #8]	; (8044028 <malloc+0xc>)
 804401e:	4601      	mov	r1, r0
 8044020:	6818      	ldr	r0, [r3, #0]
 8044022:	f000 b891 	b.w	8044148 <_malloc_r>
 8044026:	bf00      	nop
 8044028:	2001801c 	.word	0x2001801c

0804402c <memcpy>:
 804402c:	440a      	add	r2, r1
 804402e:	1e43      	subs	r3, r0, #1
 8044030:	4291      	cmp	r1, r2
 8044032:	d100      	bne.n	8044036 <memcpy+0xa>
 8044034:	4770      	bx	lr
 8044036:	b510      	push	{r4, lr}
 8044038:	f811 4b01 	ldrb.w	r4, [r1], #1
 804403c:	4291      	cmp	r1, r2
 804403e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8044042:	d1f9      	bne.n	8044038 <memcpy+0xc>
 8044044:	bd10      	pop	{r4, pc}

08044046 <memmove>:
 8044046:	4288      	cmp	r0, r1
 8044048:	b510      	push	{r4, lr}
 804404a:	eb01 0402 	add.w	r4, r1, r2
 804404e:	d902      	bls.n	8044056 <memmove+0x10>
 8044050:	4284      	cmp	r4, r0
 8044052:	4623      	mov	r3, r4
 8044054:	d807      	bhi.n	8044066 <memmove+0x20>
 8044056:	1e43      	subs	r3, r0, #1
 8044058:	42a1      	cmp	r1, r4
 804405a:	d008      	beq.n	804406e <memmove+0x28>
 804405c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8044060:	f803 2f01 	strb.w	r2, [r3, #1]!
 8044064:	e7f8      	b.n	8044058 <memmove+0x12>
 8044066:	4402      	add	r2, r0
 8044068:	4601      	mov	r1, r0
 804406a:	428a      	cmp	r2, r1
 804406c:	d100      	bne.n	8044070 <memmove+0x2a>
 804406e:	bd10      	pop	{r4, pc}
 8044070:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8044074:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8044078:	e7f7      	b.n	804406a <memmove+0x24>

0804407a <memset>:
 804407a:	4402      	add	r2, r0
 804407c:	4603      	mov	r3, r0
 804407e:	4293      	cmp	r3, r2
 8044080:	d100      	bne.n	8044084 <memset+0xa>
 8044082:	4770      	bx	lr
 8044084:	f803 1b01 	strb.w	r1, [r3], #1
 8044088:	e7f9      	b.n	804407e <memset+0x4>

0804408a <_calloc_r>:
 804408a:	434a      	muls	r2, r1
 804408c:	b513      	push	{r0, r1, r4, lr}
 804408e:	4611      	mov	r1, r2
 8044090:	9201      	str	r2, [sp, #4]
 8044092:	f000 f859 	bl	8044148 <_malloc_r>
 8044096:	4604      	mov	r4, r0
 8044098:	b118      	cbz	r0, 80440a2 <_calloc_r+0x18>
 804409a:	9a01      	ldr	r2, [sp, #4]
 804409c:	2100      	movs	r1, #0
 804409e:	f7ff ffec 	bl	804407a <memset>
 80440a2:	4620      	mov	r0, r4
 80440a4:	b002      	add	sp, #8
 80440a6:	bd10      	pop	{r4, pc}

080440a8 <_free_r>:
 80440a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80440aa:	2900      	cmp	r1, #0
 80440ac:	d047      	beq.n	804413e <_free_r+0x96>
 80440ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80440b2:	1f0c      	subs	r4, r1, #4
 80440b4:	9001      	str	r0, [sp, #4]
 80440b6:	2b00      	cmp	r3, #0
 80440b8:	bfb8      	it	lt
 80440ba:	18e4      	addlt	r4, r4, r3
 80440bc:	f001 fa86 	bl	80455cc <__malloc_lock>
 80440c0:	4a20      	ldr	r2, [pc, #128]	; (8044144 <_free_r+0x9c>)
 80440c2:	9801      	ldr	r0, [sp, #4]
 80440c4:	6813      	ldr	r3, [r2, #0]
 80440c6:	4615      	mov	r5, r2
 80440c8:	b933      	cbnz	r3, 80440d8 <_free_r+0x30>
 80440ca:	6063      	str	r3, [r4, #4]
 80440cc:	6014      	str	r4, [r2, #0]
 80440ce:	b003      	add	sp, #12
 80440d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80440d4:	f001 ba80 	b.w	80455d8 <__malloc_unlock>
 80440d8:	42a3      	cmp	r3, r4
 80440da:	d90b      	bls.n	80440f4 <_free_r+0x4c>
 80440dc:	6821      	ldr	r1, [r4, #0]
 80440de:	1862      	adds	r2, r4, r1
 80440e0:	4293      	cmp	r3, r2
 80440e2:	bf02      	ittt	eq
 80440e4:	681a      	ldreq	r2, [r3, #0]
 80440e6:	685b      	ldreq	r3, [r3, #4]
 80440e8:	1852      	addeq	r2, r2, r1
 80440ea:	6063      	str	r3, [r4, #4]
 80440ec:	bf08      	it	eq
 80440ee:	6022      	streq	r2, [r4, #0]
 80440f0:	602c      	str	r4, [r5, #0]
 80440f2:	e7ec      	b.n	80440ce <_free_r+0x26>
 80440f4:	461a      	mov	r2, r3
 80440f6:	685b      	ldr	r3, [r3, #4]
 80440f8:	b10b      	cbz	r3, 80440fe <_free_r+0x56>
 80440fa:	42a3      	cmp	r3, r4
 80440fc:	d9fa      	bls.n	80440f4 <_free_r+0x4c>
 80440fe:	6811      	ldr	r1, [r2, #0]
 8044100:	1855      	adds	r5, r2, r1
 8044102:	42a5      	cmp	r5, r4
 8044104:	d10b      	bne.n	804411e <_free_r+0x76>
 8044106:	6824      	ldr	r4, [r4, #0]
 8044108:	4421      	add	r1, r4
 804410a:	1854      	adds	r4, r2, r1
 804410c:	6011      	str	r1, [r2, #0]
 804410e:	42a3      	cmp	r3, r4
 8044110:	d1dd      	bne.n	80440ce <_free_r+0x26>
 8044112:	681c      	ldr	r4, [r3, #0]
 8044114:	685b      	ldr	r3, [r3, #4]
 8044116:	4421      	add	r1, r4
 8044118:	6053      	str	r3, [r2, #4]
 804411a:	6011      	str	r1, [r2, #0]
 804411c:	e7d7      	b.n	80440ce <_free_r+0x26>
 804411e:	d902      	bls.n	8044126 <_free_r+0x7e>
 8044120:	230c      	movs	r3, #12
 8044122:	6003      	str	r3, [r0, #0]
 8044124:	e7d3      	b.n	80440ce <_free_r+0x26>
 8044126:	6825      	ldr	r5, [r4, #0]
 8044128:	1961      	adds	r1, r4, r5
 804412a:	428b      	cmp	r3, r1
 804412c:	bf02      	ittt	eq
 804412e:	6819      	ldreq	r1, [r3, #0]
 8044130:	685b      	ldreq	r3, [r3, #4]
 8044132:	1949      	addeq	r1, r1, r5
 8044134:	6063      	str	r3, [r4, #4]
 8044136:	bf08      	it	eq
 8044138:	6021      	streq	r1, [r4, #0]
 804413a:	6054      	str	r4, [r2, #4]
 804413c:	e7c7      	b.n	80440ce <_free_r+0x26>
 804413e:	b003      	add	sp, #12
 8044140:	bd30      	pop	{r4, r5, pc}
 8044142:	bf00      	nop
 8044144:	20018218 	.word	0x20018218

08044148 <_malloc_r>:
 8044148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804414a:	1ccd      	adds	r5, r1, #3
 804414c:	4606      	mov	r6, r0
 804414e:	f025 0503 	bic.w	r5, r5, #3
 8044152:	3508      	adds	r5, #8
 8044154:	2d0c      	cmp	r5, #12
 8044156:	bf38      	it	cc
 8044158:	250c      	movcc	r5, #12
 804415a:	2d00      	cmp	r5, #0
 804415c:	db01      	blt.n	8044162 <_malloc_r+0x1a>
 804415e:	42a9      	cmp	r1, r5
 8044160:	d903      	bls.n	804416a <_malloc_r+0x22>
 8044162:	230c      	movs	r3, #12
 8044164:	6033      	str	r3, [r6, #0]
 8044166:	2000      	movs	r0, #0
 8044168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804416a:	f001 fa2f 	bl	80455cc <__malloc_lock>
 804416e:	4921      	ldr	r1, [pc, #132]	; (80441f4 <_malloc_r+0xac>)
 8044170:	680a      	ldr	r2, [r1, #0]
 8044172:	4614      	mov	r4, r2
 8044174:	b99c      	cbnz	r4, 804419e <_malloc_r+0x56>
 8044176:	4f20      	ldr	r7, [pc, #128]	; (80441f8 <_malloc_r+0xb0>)
 8044178:	683b      	ldr	r3, [r7, #0]
 804417a:	b923      	cbnz	r3, 8044186 <_malloc_r+0x3e>
 804417c:	4621      	mov	r1, r4
 804417e:	4630      	mov	r0, r6
 8044180:	f000 f83c 	bl	80441fc <_sbrk_r>
 8044184:	6038      	str	r0, [r7, #0]
 8044186:	4629      	mov	r1, r5
 8044188:	4630      	mov	r0, r6
 804418a:	f000 f837 	bl	80441fc <_sbrk_r>
 804418e:	1c43      	adds	r3, r0, #1
 8044190:	d123      	bne.n	80441da <_malloc_r+0x92>
 8044192:	230c      	movs	r3, #12
 8044194:	4630      	mov	r0, r6
 8044196:	6033      	str	r3, [r6, #0]
 8044198:	f001 fa1e 	bl	80455d8 <__malloc_unlock>
 804419c:	e7e3      	b.n	8044166 <_malloc_r+0x1e>
 804419e:	6823      	ldr	r3, [r4, #0]
 80441a0:	1b5b      	subs	r3, r3, r5
 80441a2:	d417      	bmi.n	80441d4 <_malloc_r+0x8c>
 80441a4:	2b0b      	cmp	r3, #11
 80441a6:	d903      	bls.n	80441b0 <_malloc_r+0x68>
 80441a8:	6023      	str	r3, [r4, #0]
 80441aa:	441c      	add	r4, r3
 80441ac:	6025      	str	r5, [r4, #0]
 80441ae:	e004      	b.n	80441ba <_malloc_r+0x72>
 80441b0:	6863      	ldr	r3, [r4, #4]
 80441b2:	42a2      	cmp	r2, r4
 80441b4:	bf0c      	ite	eq
 80441b6:	600b      	streq	r3, [r1, #0]
 80441b8:	6053      	strne	r3, [r2, #4]
 80441ba:	4630      	mov	r0, r6
 80441bc:	f001 fa0c 	bl	80455d8 <__malloc_unlock>
 80441c0:	f104 000b 	add.w	r0, r4, #11
 80441c4:	1d23      	adds	r3, r4, #4
 80441c6:	f020 0007 	bic.w	r0, r0, #7
 80441ca:	1ac2      	subs	r2, r0, r3
 80441cc:	d0cc      	beq.n	8044168 <_malloc_r+0x20>
 80441ce:	1a1b      	subs	r3, r3, r0
 80441d0:	50a3      	str	r3, [r4, r2]
 80441d2:	e7c9      	b.n	8044168 <_malloc_r+0x20>
 80441d4:	4622      	mov	r2, r4
 80441d6:	6864      	ldr	r4, [r4, #4]
 80441d8:	e7cc      	b.n	8044174 <_malloc_r+0x2c>
 80441da:	1cc4      	adds	r4, r0, #3
 80441dc:	f024 0403 	bic.w	r4, r4, #3
 80441e0:	42a0      	cmp	r0, r4
 80441e2:	d0e3      	beq.n	80441ac <_malloc_r+0x64>
 80441e4:	1a21      	subs	r1, r4, r0
 80441e6:	4630      	mov	r0, r6
 80441e8:	f000 f808 	bl	80441fc <_sbrk_r>
 80441ec:	3001      	adds	r0, #1
 80441ee:	d1dd      	bne.n	80441ac <_malloc_r+0x64>
 80441f0:	e7cf      	b.n	8044192 <_malloc_r+0x4a>
 80441f2:	bf00      	nop
 80441f4:	20018218 	.word	0x20018218
 80441f8:	2001821c 	.word	0x2001821c

080441fc <_sbrk_r>:
 80441fc:	b538      	push	{r3, r4, r5, lr}
 80441fe:	2300      	movs	r3, #0
 8044200:	4d05      	ldr	r5, [pc, #20]	; (8044218 <_sbrk_r+0x1c>)
 8044202:	4604      	mov	r4, r0
 8044204:	4608      	mov	r0, r1
 8044206:	602b      	str	r3, [r5, #0]
 8044208:	f7fd fa02 	bl	8041610 <_sbrk>
 804420c:	1c43      	adds	r3, r0, #1
 804420e:	d102      	bne.n	8044216 <_sbrk_r+0x1a>
 8044210:	682b      	ldr	r3, [r5, #0]
 8044212:	b103      	cbz	r3, 8044216 <_sbrk_r+0x1a>
 8044214:	6023      	str	r3, [r4, #0]
 8044216:	bd38      	pop	{r3, r4, r5, pc}
 8044218:	200182fc 	.word	0x200182fc

0804421c <siprintf>:
 804421c:	b40e      	push	{r1, r2, r3}
 804421e:	b500      	push	{lr}
 8044220:	b09c      	sub	sp, #112	; 0x70
 8044222:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8044226:	ab1d      	add	r3, sp, #116	; 0x74
 8044228:	9002      	str	r0, [sp, #8]
 804422a:	9006      	str	r0, [sp, #24]
 804422c:	9107      	str	r1, [sp, #28]
 804422e:	9104      	str	r1, [sp, #16]
 8044230:	4808      	ldr	r0, [pc, #32]	; (8044254 <siprintf+0x38>)
 8044232:	4909      	ldr	r1, [pc, #36]	; (8044258 <siprintf+0x3c>)
 8044234:	f853 2b04 	ldr.w	r2, [r3], #4
 8044238:	9105      	str	r1, [sp, #20]
 804423a:	a902      	add	r1, sp, #8
 804423c:	6800      	ldr	r0, [r0, #0]
 804423e:	9301      	str	r3, [sp, #4]
 8044240:	f001 feec 	bl	804601c <_svfiprintf_r>
 8044244:	9b02      	ldr	r3, [sp, #8]
 8044246:	2200      	movs	r2, #0
 8044248:	701a      	strb	r2, [r3, #0]
 804424a:	b01c      	add	sp, #112	; 0x70
 804424c:	f85d eb04 	ldr.w	lr, [sp], #4
 8044250:	b003      	add	sp, #12
 8044252:	4770      	bx	lr
 8044254:	2001801c 	.word	0x2001801c
 8044258:	ffff0208 	.word	0xffff0208

0804425c <sulp>:
 804425c:	b570      	push	{r4, r5, r6, lr}
 804425e:	4604      	mov	r4, r0
 8044260:	460d      	mov	r5, r1
 8044262:	4616      	mov	r6, r2
 8044264:	ec45 4b10 	vmov	d0, r4, r5
 8044268:	f001 fd30 	bl	8045ccc <__ulp>
 804426c:	ec51 0b10 	vmov	r0, r1, d0
 8044270:	b17e      	cbz	r6, 8044292 <sulp+0x36>
 8044272:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8044276:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 804427a:	2b00      	cmp	r3, #0
 804427c:	dd09      	ble.n	8044292 <sulp+0x36>
 804427e:	051b      	lsls	r3, r3, #20
 8044280:	2400      	movs	r4, #0
 8044282:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8044286:	4622      	mov	r2, r4
 8044288:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 804428c:	462b      	mov	r3, r5
 804428e:	f7fc f997 	bl	80405c0 <__aeabi_dmul>
 8044292:	bd70      	pop	{r4, r5, r6, pc}
 8044294:	0000      	movs	r0, r0
	...

08044298 <_strtod_l>:
 8044298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804429c:	461f      	mov	r7, r3
 804429e:	b0a3      	sub	sp, #140	; 0x8c
 80442a0:	2300      	movs	r3, #0
 80442a2:	4604      	mov	r4, r0
 80442a4:	4688      	mov	r8, r1
 80442a6:	9219      	str	r2, [sp, #100]	; 0x64
 80442a8:	931e      	str	r3, [sp, #120]	; 0x78
 80442aa:	f04f 0a00 	mov.w	sl, #0
 80442ae:	4ba3      	ldr	r3, [pc, #652]	; (804453c <_strtod_l+0x2a4>)
 80442b0:	f04f 0b00 	mov.w	fp, #0
 80442b4:	681b      	ldr	r3, [r3, #0]
 80442b6:	4618      	mov	r0, r3
 80442b8:	9307      	str	r3, [sp, #28]
 80442ba:	f7fb ffbd 	bl	8040238 <strlen>
 80442be:	4605      	mov	r5, r0
 80442c0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80442c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80442c6:	781a      	ldrb	r2, [r3, #0]
 80442c8:	2a2b      	cmp	r2, #43	; 0x2b
 80442ca:	d04c      	beq.n	8044366 <_strtod_l+0xce>
 80442cc:	d839      	bhi.n	8044342 <_strtod_l+0xaa>
 80442ce:	2a0d      	cmp	r2, #13
 80442d0:	d832      	bhi.n	8044338 <_strtod_l+0xa0>
 80442d2:	2a08      	cmp	r2, #8
 80442d4:	d832      	bhi.n	804433c <_strtod_l+0xa4>
 80442d6:	2a00      	cmp	r2, #0
 80442d8:	d03c      	beq.n	8044354 <_strtod_l+0xbc>
 80442da:	2300      	movs	r3, #0
 80442dc:	930e      	str	r3, [sp, #56]	; 0x38
 80442de:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80442e0:	7833      	ldrb	r3, [r6, #0]
 80442e2:	2b30      	cmp	r3, #48	; 0x30
 80442e4:	f040 80b5 	bne.w	8044452 <_strtod_l+0x1ba>
 80442e8:	7873      	ldrb	r3, [r6, #1]
 80442ea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80442ee:	2b58      	cmp	r3, #88	; 0x58
 80442f0:	d16c      	bne.n	80443cc <_strtod_l+0x134>
 80442f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80442f4:	a91d      	add	r1, sp, #116	; 0x74
 80442f6:	9702      	str	r7, [sp, #8]
 80442f8:	4620      	mov	r0, r4
 80442fa:	9301      	str	r3, [sp, #4]
 80442fc:	ab1e      	add	r3, sp, #120	; 0x78
 80442fe:	4a90      	ldr	r2, [pc, #576]	; (8044540 <_strtod_l+0x2a8>)
 8044300:	9300      	str	r3, [sp, #0]
 8044302:	ab1f      	add	r3, sp, #124	; 0x7c
 8044304:	f000 fe48 	bl	8044f98 <__gethex>
 8044308:	f010 0707 	ands.w	r7, r0, #7
 804430c:	4605      	mov	r5, r0
 804430e:	d005      	beq.n	804431c <_strtod_l+0x84>
 8044310:	2f06      	cmp	r7, #6
 8044312:	d12a      	bne.n	804436a <_strtod_l+0xd2>
 8044314:	3601      	adds	r6, #1
 8044316:	2300      	movs	r3, #0
 8044318:	961d      	str	r6, [sp, #116]	; 0x74
 804431a:	930e      	str	r3, [sp, #56]	; 0x38
 804431c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 804431e:	2b00      	cmp	r3, #0
 8044320:	f040 859a 	bne.w	8044e58 <_strtod_l+0xbc0>
 8044324:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8044326:	b1db      	cbz	r3, 8044360 <_strtod_l+0xc8>
 8044328:	4652      	mov	r2, sl
 804432a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 804432e:	ec43 2b10 	vmov	d0, r2, r3
 8044332:	b023      	add	sp, #140	; 0x8c
 8044334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8044338:	2a20      	cmp	r2, #32
 804433a:	d1ce      	bne.n	80442da <_strtod_l+0x42>
 804433c:	3301      	adds	r3, #1
 804433e:	931d      	str	r3, [sp, #116]	; 0x74
 8044340:	e7c0      	b.n	80442c4 <_strtod_l+0x2c>
 8044342:	2a2d      	cmp	r2, #45	; 0x2d
 8044344:	d1c9      	bne.n	80442da <_strtod_l+0x42>
 8044346:	2201      	movs	r2, #1
 8044348:	920e      	str	r2, [sp, #56]	; 0x38
 804434a:	1c5a      	adds	r2, r3, #1
 804434c:	921d      	str	r2, [sp, #116]	; 0x74
 804434e:	785b      	ldrb	r3, [r3, #1]
 8044350:	2b00      	cmp	r3, #0
 8044352:	d1c4      	bne.n	80442de <_strtod_l+0x46>
 8044354:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8044356:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 804435a:	2b00      	cmp	r3, #0
 804435c:	f040 857a 	bne.w	8044e54 <_strtod_l+0xbbc>
 8044360:	4652      	mov	r2, sl
 8044362:	465b      	mov	r3, fp
 8044364:	e7e3      	b.n	804432e <_strtod_l+0x96>
 8044366:	2200      	movs	r2, #0
 8044368:	e7ee      	b.n	8044348 <_strtod_l+0xb0>
 804436a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 804436c:	b13a      	cbz	r2, 804437e <_strtod_l+0xe6>
 804436e:	2135      	movs	r1, #53	; 0x35
 8044370:	a820      	add	r0, sp, #128	; 0x80
 8044372:	f001 fdb4 	bl	8045ede <__copybits>
 8044376:	991e      	ldr	r1, [sp, #120]	; 0x78
 8044378:	4620      	mov	r0, r4
 804437a:	f001 f973 	bl	8045664 <_Bfree>
 804437e:	3f01      	subs	r7, #1
 8044380:	2f05      	cmp	r7, #5
 8044382:	d807      	bhi.n	8044394 <_strtod_l+0xfc>
 8044384:	e8df f007 	tbb	[pc, r7]
 8044388:	1d180b0e 	.word	0x1d180b0e
 804438c:	030e      	.short	0x030e
 804438e:	f04f 0b00 	mov.w	fp, #0
 8044392:	46da      	mov	sl, fp
 8044394:	0728      	lsls	r0, r5, #28
 8044396:	d5c1      	bpl.n	804431c <_strtod_l+0x84>
 8044398:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 804439c:	e7be      	b.n	804431c <_strtod_l+0x84>
 804439e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80443a2:	e7f7      	b.n	8044394 <_strtod_l+0xfc>
 80443a4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80443a8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80443aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80443ae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80443b2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80443b6:	e7ed      	b.n	8044394 <_strtod_l+0xfc>
 80443b8:	f8df b188 	ldr.w	fp, [pc, #392]	; 8044544 <_strtod_l+0x2ac>
 80443bc:	f04f 0a00 	mov.w	sl, #0
 80443c0:	e7e8      	b.n	8044394 <_strtod_l+0xfc>
 80443c2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80443c6:	f04f 3aff 	mov.w	sl, #4294967295
 80443ca:	e7e3      	b.n	8044394 <_strtod_l+0xfc>
 80443cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80443ce:	1c5a      	adds	r2, r3, #1
 80443d0:	921d      	str	r2, [sp, #116]	; 0x74
 80443d2:	785b      	ldrb	r3, [r3, #1]
 80443d4:	2b30      	cmp	r3, #48	; 0x30
 80443d6:	d0f9      	beq.n	80443cc <_strtod_l+0x134>
 80443d8:	2b00      	cmp	r3, #0
 80443da:	d09f      	beq.n	804431c <_strtod_l+0x84>
 80443dc:	2301      	movs	r3, #1
 80443de:	f04f 0900 	mov.w	r9, #0
 80443e2:	9304      	str	r3, [sp, #16]
 80443e4:	220a      	movs	r2, #10
 80443e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80443e8:	464f      	mov	r7, r9
 80443ea:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80443ee:	930a      	str	r3, [sp, #40]	; 0x28
 80443f0:	981d      	ldr	r0, [sp, #116]	; 0x74
 80443f2:	7806      	ldrb	r6, [r0, #0]
 80443f4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80443f8:	b2d9      	uxtb	r1, r3
 80443fa:	2909      	cmp	r1, #9
 80443fc:	d92b      	bls.n	8044456 <_strtod_l+0x1be>
 80443fe:	462a      	mov	r2, r5
 8044400:	9907      	ldr	r1, [sp, #28]
 8044402:	f002 f8a9 	bl	8046558 <strncmp>
 8044406:	2800      	cmp	r0, #0
 8044408:	d034      	beq.n	8044474 <_strtod_l+0x1dc>
 804440a:	2000      	movs	r0, #0
 804440c:	4633      	mov	r3, r6
 804440e:	463d      	mov	r5, r7
 8044410:	4602      	mov	r2, r0
 8044412:	9007      	str	r0, [sp, #28]
 8044414:	2b65      	cmp	r3, #101	; 0x65
 8044416:	d001      	beq.n	804441c <_strtod_l+0x184>
 8044418:	2b45      	cmp	r3, #69	; 0x45
 804441a:	d118      	bne.n	804444e <_strtod_l+0x1b6>
 804441c:	b91d      	cbnz	r5, 8044426 <_strtod_l+0x18e>
 804441e:	9b04      	ldr	r3, [sp, #16]
 8044420:	4303      	orrs	r3, r0
 8044422:	d097      	beq.n	8044354 <_strtod_l+0xbc>
 8044424:	2500      	movs	r5, #0
 8044426:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 804442a:	f108 0301 	add.w	r3, r8, #1
 804442e:	931d      	str	r3, [sp, #116]	; 0x74
 8044430:	f898 3001 	ldrb.w	r3, [r8, #1]
 8044434:	2b2b      	cmp	r3, #43	; 0x2b
 8044436:	d075      	beq.n	8044524 <_strtod_l+0x28c>
 8044438:	2b2d      	cmp	r3, #45	; 0x2d
 804443a:	d07b      	beq.n	8044534 <_strtod_l+0x29c>
 804443c:	f04f 0c00 	mov.w	ip, #0
 8044440:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8044444:	2909      	cmp	r1, #9
 8044446:	f240 8083 	bls.w	8044550 <_strtod_l+0x2b8>
 804444a:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 804444e:	2600      	movs	r6, #0
 8044450:	e09e      	b.n	8044590 <_strtod_l+0x2f8>
 8044452:	2300      	movs	r3, #0
 8044454:	e7c3      	b.n	80443de <_strtod_l+0x146>
 8044456:	2f08      	cmp	r7, #8
 8044458:	f100 0001 	add.w	r0, r0, #1
 804445c:	f107 0701 	add.w	r7, r7, #1
 8044460:	bfd4      	ite	le
 8044462:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8044464:	fb02 3909 	mlagt	r9, r2, r9, r3
 8044468:	901d      	str	r0, [sp, #116]	; 0x74
 804446a:	bfdc      	itt	le
 804446c:	fb02 3301 	mlale	r3, r2, r1, r3
 8044470:	9309      	strle	r3, [sp, #36]	; 0x24
 8044472:	e7bd      	b.n	80443f0 <_strtod_l+0x158>
 8044474:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8044476:	195a      	adds	r2, r3, r5
 8044478:	921d      	str	r2, [sp, #116]	; 0x74
 804447a:	5d5b      	ldrb	r3, [r3, r5]
 804447c:	2f00      	cmp	r7, #0
 804447e:	d036      	beq.n	80444ee <_strtod_l+0x256>
 8044480:	463d      	mov	r5, r7
 8044482:	9007      	str	r0, [sp, #28]
 8044484:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8044488:	2a09      	cmp	r2, #9
 804448a:	d912      	bls.n	80444b2 <_strtod_l+0x21a>
 804448c:	2201      	movs	r2, #1
 804448e:	e7c1      	b.n	8044414 <_strtod_l+0x17c>
 8044490:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8044492:	3001      	adds	r0, #1
 8044494:	1c5a      	adds	r2, r3, #1
 8044496:	921d      	str	r2, [sp, #116]	; 0x74
 8044498:	785b      	ldrb	r3, [r3, #1]
 804449a:	2b30      	cmp	r3, #48	; 0x30
 804449c:	d0f8      	beq.n	8044490 <_strtod_l+0x1f8>
 804449e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80444a2:	2a08      	cmp	r2, #8
 80444a4:	f200 84dd 	bhi.w	8044e62 <_strtod_l+0xbca>
 80444a8:	9007      	str	r0, [sp, #28]
 80444aa:	2000      	movs	r0, #0
 80444ac:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80444ae:	4605      	mov	r5, r0
 80444b0:	920a      	str	r2, [sp, #40]	; 0x28
 80444b2:	3b30      	subs	r3, #48	; 0x30
 80444b4:	f100 0201 	add.w	r2, r0, #1
 80444b8:	d013      	beq.n	80444e2 <_strtod_l+0x24a>
 80444ba:	9907      	ldr	r1, [sp, #28]
 80444bc:	eb00 0e05 	add.w	lr, r0, r5
 80444c0:	4411      	add	r1, r2
 80444c2:	462a      	mov	r2, r5
 80444c4:	9107      	str	r1, [sp, #28]
 80444c6:	210a      	movs	r1, #10
 80444c8:	4572      	cmp	r2, lr
 80444ca:	d112      	bne.n	80444f2 <_strtod_l+0x25a>
 80444cc:	182a      	adds	r2, r5, r0
 80444ce:	3501      	adds	r5, #1
 80444d0:	2a08      	cmp	r2, #8
 80444d2:	4405      	add	r5, r0
 80444d4:	dc1c      	bgt.n	8044510 <_strtod_l+0x278>
 80444d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80444d8:	220a      	movs	r2, #10
 80444da:	fb02 3301 	mla	r3, r2, r1, r3
 80444de:	9309      	str	r3, [sp, #36]	; 0x24
 80444e0:	2200      	movs	r2, #0
 80444e2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80444e4:	4610      	mov	r0, r2
 80444e6:	1c59      	adds	r1, r3, #1
 80444e8:	911d      	str	r1, [sp, #116]	; 0x74
 80444ea:	785b      	ldrb	r3, [r3, #1]
 80444ec:	e7ca      	b.n	8044484 <_strtod_l+0x1ec>
 80444ee:	4638      	mov	r0, r7
 80444f0:	e7d3      	b.n	804449a <_strtod_l+0x202>
 80444f2:	2a08      	cmp	r2, #8
 80444f4:	dc04      	bgt.n	8044500 <_strtod_l+0x268>
 80444f6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80444f8:	434e      	muls	r6, r1
 80444fa:	9609      	str	r6, [sp, #36]	; 0x24
 80444fc:	3201      	adds	r2, #1
 80444fe:	e7e3      	b.n	80444c8 <_strtod_l+0x230>
 8044500:	f102 0c01 	add.w	ip, r2, #1
 8044504:	f1bc 0f10 	cmp.w	ip, #16
 8044508:	bfd8      	it	le
 804450a:	fb01 f909 	mulle.w	r9, r1, r9
 804450e:	e7f5      	b.n	80444fc <_strtod_l+0x264>
 8044510:	2d10      	cmp	r5, #16
 8044512:	bfdc      	itt	le
 8044514:	220a      	movle	r2, #10
 8044516:	fb02 3909 	mlale	r9, r2, r9, r3
 804451a:	e7e1      	b.n	80444e0 <_strtod_l+0x248>
 804451c:	2300      	movs	r3, #0
 804451e:	2201      	movs	r2, #1
 8044520:	9307      	str	r3, [sp, #28]
 8044522:	e77c      	b.n	804441e <_strtod_l+0x186>
 8044524:	f04f 0c00 	mov.w	ip, #0
 8044528:	f108 0302 	add.w	r3, r8, #2
 804452c:	931d      	str	r3, [sp, #116]	; 0x74
 804452e:	f898 3002 	ldrb.w	r3, [r8, #2]
 8044532:	e785      	b.n	8044440 <_strtod_l+0x1a8>
 8044534:	f04f 0c01 	mov.w	ip, #1
 8044538:	e7f6      	b.n	8044528 <_strtod_l+0x290>
 804453a:	bf00      	nop
 804453c:	0804730c 	.word	0x0804730c
 8044540:	0804723c 	.word	0x0804723c
 8044544:	7ff00000 	.word	0x7ff00000
 8044548:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 804454a:	1c59      	adds	r1, r3, #1
 804454c:	911d      	str	r1, [sp, #116]	; 0x74
 804454e:	785b      	ldrb	r3, [r3, #1]
 8044550:	2b30      	cmp	r3, #48	; 0x30
 8044552:	d0f9      	beq.n	8044548 <_strtod_l+0x2b0>
 8044554:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8044558:	2908      	cmp	r1, #8
 804455a:	f63f af78 	bhi.w	804444e <_strtod_l+0x1b6>
 804455e:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8044562:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8044564:	9308      	str	r3, [sp, #32]
 8044566:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8044568:	1c59      	adds	r1, r3, #1
 804456a:	911d      	str	r1, [sp, #116]	; 0x74
 804456c:	785b      	ldrb	r3, [r3, #1]
 804456e:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8044572:	2e09      	cmp	r6, #9
 8044574:	d937      	bls.n	80445e6 <_strtod_l+0x34e>
 8044576:	9e08      	ldr	r6, [sp, #32]
 8044578:	1b89      	subs	r1, r1, r6
 804457a:	f644 661f 	movw	r6, #19999	; 0x4e1f
 804457e:	2908      	cmp	r1, #8
 8044580:	dc02      	bgt.n	8044588 <_strtod_l+0x2f0>
 8044582:	4576      	cmp	r6, lr
 8044584:	bfa8      	it	ge
 8044586:	4676      	movge	r6, lr
 8044588:	f1bc 0f00 	cmp.w	ip, #0
 804458c:	d000      	beq.n	8044590 <_strtod_l+0x2f8>
 804458e:	4276      	negs	r6, r6
 8044590:	2d00      	cmp	r5, #0
 8044592:	d14f      	bne.n	8044634 <_strtod_l+0x39c>
 8044594:	9904      	ldr	r1, [sp, #16]
 8044596:	4301      	orrs	r1, r0
 8044598:	f47f aec0 	bne.w	804431c <_strtod_l+0x84>
 804459c:	2a00      	cmp	r2, #0
 804459e:	f47f aed9 	bne.w	8044354 <_strtod_l+0xbc>
 80445a2:	2b69      	cmp	r3, #105	; 0x69
 80445a4:	d027      	beq.n	80445f6 <_strtod_l+0x35e>
 80445a6:	dc24      	bgt.n	80445f2 <_strtod_l+0x35a>
 80445a8:	2b49      	cmp	r3, #73	; 0x49
 80445aa:	d024      	beq.n	80445f6 <_strtod_l+0x35e>
 80445ac:	2b4e      	cmp	r3, #78	; 0x4e
 80445ae:	f47f aed1 	bne.w	8044354 <_strtod_l+0xbc>
 80445b2:	499f      	ldr	r1, [pc, #636]	; (8044830 <_strtod_l+0x598>)
 80445b4:	a81d      	add	r0, sp, #116	; 0x74
 80445b6:	f000 ff47 	bl	8045448 <__match>
 80445ba:	2800      	cmp	r0, #0
 80445bc:	f43f aeca 	beq.w	8044354 <_strtod_l+0xbc>
 80445c0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80445c2:	781b      	ldrb	r3, [r3, #0]
 80445c4:	2b28      	cmp	r3, #40	; 0x28
 80445c6:	d12d      	bne.n	8044624 <_strtod_l+0x38c>
 80445c8:	aa20      	add	r2, sp, #128	; 0x80
 80445ca:	499a      	ldr	r1, [pc, #616]	; (8044834 <_strtod_l+0x59c>)
 80445cc:	a81d      	add	r0, sp, #116	; 0x74
 80445ce:	f000 ff4f 	bl	8045470 <__hexnan>
 80445d2:	2805      	cmp	r0, #5
 80445d4:	d126      	bne.n	8044624 <_strtod_l+0x38c>
 80445d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80445d8:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80445dc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80445e0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80445e4:	e69a      	b.n	804431c <_strtod_l+0x84>
 80445e6:	210a      	movs	r1, #10
 80445e8:	fb01 3e0e 	mla	lr, r1, lr, r3
 80445ec:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80445f0:	e7b9      	b.n	8044566 <_strtod_l+0x2ce>
 80445f2:	2b6e      	cmp	r3, #110	; 0x6e
 80445f4:	e7db      	b.n	80445ae <_strtod_l+0x316>
 80445f6:	4990      	ldr	r1, [pc, #576]	; (8044838 <_strtod_l+0x5a0>)
 80445f8:	a81d      	add	r0, sp, #116	; 0x74
 80445fa:	f000 ff25 	bl	8045448 <__match>
 80445fe:	2800      	cmp	r0, #0
 8044600:	f43f aea8 	beq.w	8044354 <_strtod_l+0xbc>
 8044604:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8044606:	a81d      	add	r0, sp, #116	; 0x74
 8044608:	498c      	ldr	r1, [pc, #560]	; (804483c <_strtod_l+0x5a4>)
 804460a:	3b01      	subs	r3, #1
 804460c:	931d      	str	r3, [sp, #116]	; 0x74
 804460e:	f000 ff1b 	bl	8045448 <__match>
 8044612:	b910      	cbnz	r0, 804461a <_strtod_l+0x382>
 8044614:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8044616:	3301      	adds	r3, #1
 8044618:	931d      	str	r3, [sp, #116]	; 0x74
 804461a:	f8df b230 	ldr.w	fp, [pc, #560]	; 804484c <_strtod_l+0x5b4>
 804461e:	f04f 0a00 	mov.w	sl, #0
 8044622:	e67b      	b.n	804431c <_strtod_l+0x84>
 8044624:	4886      	ldr	r0, [pc, #536]	; (8044840 <_strtod_l+0x5a8>)
 8044626:	f001 ff8f 	bl	8046548 <nan>
 804462a:	ed8d 0b04 	vstr	d0, [sp, #16]
 804462e:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8044632:	e673      	b.n	804431c <_strtod_l+0x84>
 8044634:	9b07      	ldr	r3, [sp, #28]
 8044636:	2f00      	cmp	r7, #0
 8044638:	bf08      	it	eq
 804463a:	462f      	moveq	r7, r5
 804463c:	2d10      	cmp	r5, #16
 804463e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8044640:	eba6 0303 	sub.w	r3, r6, r3
 8044644:	46a8      	mov	r8, r5
 8044646:	bfa8      	it	ge
 8044648:	f04f 0810 	movge.w	r8, #16
 804464c:	9308      	str	r3, [sp, #32]
 804464e:	f7fb ff3d 	bl	80404cc <__aeabi_ui2d>
 8044652:	2d09      	cmp	r5, #9
 8044654:	4682      	mov	sl, r0
 8044656:	468b      	mov	fp, r1
 8044658:	dd13      	ble.n	8044682 <_strtod_l+0x3ea>
 804465a:	4b7a      	ldr	r3, [pc, #488]	; (8044844 <_strtod_l+0x5ac>)
 804465c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8044660:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8044664:	f7fb ffac 	bl	80405c0 <__aeabi_dmul>
 8044668:	4682      	mov	sl, r0
 804466a:	468b      	mov	fp, r1
 804466c:	4648      	mov	r0, r9
 804466e:	f7fb ff2d 	bl	80404cc <__aeabi_ui2d>
 8044672:	4602      	mov	r2, r0
 8044674:	460b      	mov	r3, r1
 8044676:	4650      	mov	r0, sl
 8044678:	4659      	mov	r1, fp
 804467a:	f7fb fdeb 	bl	8040254 <__adddf3>
 804467e:	4682      	mov	sl, r0
 8044680:	468b      	mov	fp, r1
 8044682:	2d0f      	cmp	r5, #15
 8044684:	dc38      	bgt.n	80446f8 <_strtod_l+0x460>
 8044686:	9b08      	ldr	r3, [sp, #32]
 8044688:	2b00      	cmp	r3, #0
 804468a:	f43f ae47 	beq.w	804431c <_strtod_l+0x84>
 804468e:	dd24      	ble.n	80446da <_strtod_l+0x442>
 8044690:	2b16      	cmp	r3, #22
 8044692:	dc0b      	bgt.n	80446ac <_strtod_l+0x414>
 8044694:	4d6b      	ldr	r5, [pc, #428]	; (8044844 <_strtod_l+0x5ac>)
 8044696:	4652      	mov	r2, sl
 8044698:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 804469c:	465b      	mov	r3, fp
 804469e:	e9d5 0100 	ldrd	r0, r1, [r5]
 80446a2:	f7fb ff8d 	bl	80405c0 <__aeabi_dmul>
 80446a6:	4682      	mov	sl, r0
 80446a8:	468b      	mov	fp, r1
 80446aa:	e637      	b.n	804431c <_strtod_l+0x84>
 80446ac:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80446b0:	9a08      	ldr	r2, [sp, #32]
 80446b2:	4293      	cmp	r3, r2
 80446b4:	db20      	blt.n	80446f8 <_strtod_l+0x460>
 80446b6:	f1c5 050f 	rsb	r5, r5, #15
 80446ba:	4c62      	ldr	r4, [pc, #392]	; (8044844 <_strtod_l+0x5ac>)
 80446bc:	4652      	mov	r2, sl
 80446be:	465b      	mov	r3, fp
 80446c0:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80446c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80446c8:	f7fb ff7a 	bl	80405c0 <__aeabi_dmul>
 80446cc:	9b08      	ldr	r3, [sp, #32]
 80446ce:	1b5d      	subs	r5, r3, r5
 80446d0:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80446d4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80446d8:	e7e3      	b.n	80446a2 <_strtod_l+0x40a>
 80446da:	9b08      	ldr	r3, [sp, #32]
 80446dc:	3316      	adds	r3, #22
 80446de:	db0b      	blt.n	80446f8 <_strtod_l+0x460>
 80446e0:	9b07      	ldr	r3, [sp, #28]
 80446e2:	4650      	mov	r0, sl
 80446e4:	4a57      	ldr	r2, [pc, #348]	; (8044844 <_strtod_l+0x5ac>)
 80446e6:	4659      	mov	r1, fp
 80446e8:	1b9e      	subs	r6, r3, r6
 80446ea:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80446ee:	e9d6 2300 	ldrd	r2, r3, [r6]
 80446f2:	f7fc f88f 	bl	8040814 <__aeabi_ddiv>
 80446f6:	e7d6      	b.n	80446a6 <_strtod_l+0x40e>
 80446f8:	eba5 0808 	sub.w	r8, r5, r8
 80446fc:	9b08      	ldr	r3, [sp, #32]
 80446fe:	4498      	add	r8, r3
 8044700:	f1b8 0f00 	cmp.w	r8, #0
 8044704:	dd71      	ble.n	80447ea <_strtod_l+0x552>
 8044706:	f018 030f 	ands.w	r3, r8, #15
 804470a:	d00a      	beq.n	8044722 <_strtod_l+0x48a>
 804470c:	494d      	ldr	r1, [pc, #308]	; (8044844 <_strtod_l+0x5ac>)
 804470e:	4652      	mov	r2, sl
 8044710:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8044714:	465b      	mov	r3, fp
 8044716:	e9d1 0100 	ldrd	r0, r1, [r1]
 804471a:	f7fb ff51 	bl	80405c0 <__aeabi_dmul>
 804471e:	4682      	mov	sl, r0
 8044720:	468b      	mov	fp, r1
 8044722:	f038 080f 	bics.w	r8, r8, #15
 8044726:	d04d      	beq.n	80447c4 <_strtod_l+0x52c>
 8044728:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 804472c:	dd22      	ble.n	8044774 <_strtod_l+0x4dc>
 804472e:	2500      	movs	r5, #0
 8044730:	462e      	mov	r6, r5
 8044732:	9509      	str	r5, [sp, #36]	; 0x24
 8044734:	9507      	str	r5, [sp, #28]
 8044736:	2322      	movs	r3, #34	; 0x22
 8044738:	f8df b110 	ldr.w	fp, [pc, #272]	; 804484c <_strtod_l+0x5b4>
 804473c:	f04f 0a00 	mov.w	sl, #0
 8044740:	6023      	str	r3, [r4, #0]
 8044742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8044744:	2b00      	cmp	r3, #0
 8044746:	f43f ade9 	beq.w	804431c <_strtod_l+0x84>
 804474a:	991e      	ldr	r1, [sp, #120]	; 0x78
 804474c:	4620      	mov	r0, r4
 804474e:	f000 ff89 	bl	8045664 <_Bfree>
 8044752:	9907      	ldr	r1, [sp, #28]
 8044754:	4620      	mov	r0, r4
 8044756:	f000 ff85 	bl	8045664 <_Bfree>
 804475a:	4631      	mov	r1, r6
 804475c:	4620      	mov	r0, r4
 804475e:	f000 ff81 	bl	8045664 <_Bfree>
 8044762:	9909      	ldr	r1, [sp, #36]	; 0x24
 8044764:	4620      	mov	r0, r4
 8044766:	f000 ff7d 	bl	8045664 <_Bfree>
 804476a:	4629      	mov	r1, r5
 804476c:	4620      	mov	r0, r4
 804476e:	f000 ff79 	bl	8045664 <_Bfree>
 8044772:	e5d3      	b.n	804431c <_strtod_l+0x84>
 8044774:	2300      	movs	r3, #0
 8044776:	ea4f 1828 	mov.w	r8, r8, asr #4
 804477a:	4650      	mov	r0, sl
 804477c:	4659      	mov	r1, fp
 804477e:	4699      	mov	r9, r3
 8044780:	f1b8 0f01 	cmp.w	r8, #1
 8044784:	dc21      	bgt.n	80447ca <_strtod_l+0x532>
 8044786:	b10b      	cbz	r3, 804478c <_strtod_l+0x4f4>
 8044788:	4682      	mov	sl, r0
 804478a:	468b      	mov	fp, r1
 804478c:	4b2e      	ldr	r3, [pc, #184]	; (8044848 <_strtod_l+0x5b0>)
 804478e:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8044792:	4652      	mov	r2, sl
 8044794:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8044798:	465b      	mov	r3, fp
 804479a:	e9d9 0100 	ldrd	r0, r1, [r9]
 804479e:	f7fb ff0f 	bl	80405c0 <__aeabi_dmul>
 80447a2:	4b2a      	ldr	r3, [pc, #168]	; (804484c <_strtod_l+0x5b4>)
 80447a4:	460a      	mov	r2, r1
 80447a6:	4682      	mov	sl, r0
 80447a8:	400b      	ands	r3, r1
 80447aa:	4929      	ldr	r1, [pc, #164]	; (8044850 <_strtod_l+0x5b8>)
 80447ac:	428b      	cmp	r3, r1
 80447ae:	d8be      	bhi.n	804472e <_strtod_l+0x496>
 80447b0:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80447b4:	428b      	cmp	r3, r1
 80447b6:	bf86      	itte	hi
 80447b8:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8044854 <_strtod_l+0x5bc>
 80447bc:	f04f 3aff 	movhi.w	sl, #4294967295
 80447c0:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80447c4:	2300      	movs	r3, #0
 80447c6:	9304      	str	r3, [sp, #16]
 80447c8:	e082      	b.n	80448d0 <_strtod_l+0x638>
 80447ca:	f018 0f01 	tst.w	r8, #1
 80447ce:	d007      	beq.n	80447e0 <_strtod_l+0x548>
 80447d0:	4b1d      	ldr	r3, [pc, #116]	; (8044848 <_strtod_l+0x5b0>)
 80447d2:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80447d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80447da:	f7fb fef1 	bl	80405c0 <__aeabi_dmul>
 80447de:	2301      	movs	r3, #1
 80447e0:	f109 0901 	add.w	r9, r9, #1
 80447e4:	ea4f 0868 	mov.w	r8, r8, asr #1
 80447e8:	e7ca      	b.n	8044780 <_strtod_l+0x4e8>
 80447ea:	d0eb      	beq.n	80447c4 <_strtod_l+0x52c>
 80447ec:	f1c8 0800 	rsb	r8, r8, #0
 80447f0:	f018 020f 	ands.w	r2, r8, #15
 80447f4:	d00a      	beq.n	804480c <_strtod_l+0x574>
 80447f6:	4b13      	ldr	r3, [pc, #76]	; (8044844 <_strtod_l+0x5ac>)
 80447f8:	4650      	mov	r0, sl
 80447fa:	4659      	mov	r1, fp
 80447fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8044800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044804:	f7fc f806 	bl	8040814 <__aeabi_ddiv>
 8044808:	4682      	mov	sl, r0
 804480a:	468b      	mov	fp, r1
 804480c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8044810:	d0d8      	beq.n	80447c4 <_strtod_l+0x52c>
 8044812:	f1b8 0f1f 	cmp.w	r8, #31
 8044816:	dd1f      	ble.n	8044858 <_strtod_l+0x5c0>
 8044818:	2500      	movs	r5, #0
 804481a:	462e      	mov	r6, r5
 804481c:	9509      	str	r5, [sp, #36]	; 0x24
 804481e:	9507      	str	r5, [sp, #28]
 8044820:	2322      	movs	r3, #34	; 0x22
 8044822:	f04f 0a00 	mov.w	sl, #0
 8044826:	f04f 0b00 	mov.w	fp, #0
 804482a:	6023      	str	r3, [r4, #0]
 804482c:	e789      	b.n	8044742 <_strtod_l+0x4aa>
 804482e:	bf00      	nop
 8044830:	08047239 	.word	0x08047239
 8044834:	08047250 	.word	0x08047250
 8044838:	08047230 	.word	0x08047230
 804483c:	08047233 	.word	0x08047233
 8044840:	08047502 	.word	0x08047502
 8044844:	080473c0 	.word	0x080473c0
 8044848:	08047398 	.word	0x08047398
 804484c:	7ff00000 	.word	0x7ff00000
 8044850:	7ca00000 	.word	0x7ca00000
 8044854:	7fefffff 	.word	0x7fefffff
 8044858:	f018 0310 	ands.w	r3, r8, #16
 804485c:	4650      	mov	r0, sl
 804485e:	4659      	mov	r1, fp
 8044860:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8044c18 <_strtod_l+0x980>
 8044864:	bf18      	it	ne
 8044866:	236a      	movne	r3, #106	; 0x6a
 8044868:	9304      	str	r3, [sp, #16]
 804486a:	2300      	movs	r3, #0
 804486c:	f018 0f01 	tst.w	r8, #1
 8044870:	d004      	beq.n	804487c <_strtod_l+0x5e4>
 8044872:	e9d9 2300 	ldrd	r2, r3, [r9]
 8044876:	f7fb fea3 	bl	80405c0 <__aeabi_dmul>
 804487a:	2301      	movs	r3, #1
 804487c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8044880:	f109 0908 	add.w	r9, r9, #8
 8044884:	d1f2      	bne.n	804486c <_strtod_l+0x5d4>
 8044886:	b10b      	cbz	r3, 804488c <_strtod_l+0x5f4>
 8044888:	4682      	mov	sl, r0
 804488a:	468b      	mov	fp, r1
 804488c:	9b04      	ldr	r3, [sp, #16]
 804488e:	b1bb      	cbz	r3, 80448c0 <_strtod_l+0x628>
 8044890:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8044894:	4659      	mov	r1, fp
 8044896:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 804489a:	2b00      	cmp	r3, #0
 804489c:	dd10      	ble.n	80448c0 <_strtod_l+0x628>
 804489e:	2b1f      	cmp	r3, #31
 80448a0:	f340 8127 	ble.w	8044af2 <_strtod_l+0x85a>
 80448a4:	2b34      	cmp	r3, #52	; 0x34
 80448a6:	f04f 0a00 	mov.w	sl, #0
 80448aa:	bfdb      	ittet	le
 80448ac:	3b20      	suble	r3, #32
 80448ae:	f04f 32ff 	movle.w	r2, #4294967295
 80448b2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80448b6:	fa02 f303 	lslle.w	r3, r2, r3
 80448ba:	bfd8      	it	le
 80448bc:	ea03 0b01 	andle.w	fp, r3, r1
 80448c0:	2200      	movs	r2, #0
 80448c2:	2300      	movs	r3, #0
 80448c4:	4650      	mov	r0, sl
 80448c6:	4659      	mov	r1, fp
 80448c8:	f7fc f8e2 	bl	8040a90 <__aeabi_dcmpeq>
 80448cc:	2800      	cmp	r0, #0
 80448ce:	d1a3      	bne.n	8044818 <_strtod_l+0x580>
 80448d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80448d2:	463a      	mov	r2, r7
 80448d4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80448d6:	4620      	mov	r0, r4
 80448d8:	9300      	str	r3, [sp, #0]
 80448da:	462b      	mov	r3, r5
 80448dc:	f000 ff2e 	bl	804573c <__s2b>
 80448e0:	9009      	str	r0, [sp, #36]	; 0x24
 80448e2:	2800      	cmp	r0, #0
 80448e4:	f43f af23 	beq.w	804472e <_strtod_l+0x496>
 80448e8:	9b07      	ldr	r3, [sp, #28]
 80448ea:	2500      	movs	r5, #0
 80448ec:	1b9e      	subs	r6, r3, r6
 80448ee:	9b08      	ldr	r3, [sp, #32]
 80448f0:	2b00      	cmp	r3, #0
 80448f2:	bfb4      	ite	lt
 80448f4:	4633      	movlt	r3, r6
 80448f6:	2300      	movge	r3, #0
 80448f8:	462e      	mov	r6, r5
 80448fa:	9310      	str	r3, [sp, #64]	; 0x40
 80448fc:	9b08      	ldr	r3, [sp, #32]
 80448fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8044902:	9318      	str	r3, [sp, #96]	; 0x60
 8044904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8044906:	4620      	mov	r0, r4
 8044908:	6859      	ldr	r1, [r3, #4]
 804490a:	f000 fe6b 	bl	80455e4 <_Balloc>
 804490e:	9007      	str	r0, [sp, #28]
 8044910:	2800      	cmp	r0, #0
 8044912:	f43f af10 	beq.w	8044736 <_strtod_l+0x49e>
 8044916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8044918:	300c      	adds	r0, #12
 804491a:	691a      	ldr	r2, [r3, #16]
 804491c:	f103 010c 	add.w	r1, r3, #12
 8044920:	3202      	adds	r2, #2
 8044922:	0092      	lsls	r2, r2, #2
 8044924:	f7ff fb82 	bl	804402c <memcpy>
 8044928:	aa20      	add	r2, sp, #128	; 0x80
 804492a:	a91f      	add	r1, sp, #124	; 0x7c
 804492c:	4620      	mov	r0, r4
 804492e:	ec4b ab10 	vmov	d0, sl, fp
 8044932:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8044936:	f001 fa43 	bl	8045dc0 <__d2b>
 804493a:	901e      	str	r0, [sp, #120]	; 0x78
 804493c:	2800      	cmp	r0, #0
 804493e:	f43f aefa 	beq.w	8044736 <_strtod_l+0x49e>
 8044942:	2101      	movs	r1, #1
 8044944:	4620      	mov	r0, r4
 8044946:	f000 ff93 	bl	8045870 <__i2b>
 804494a:	4606      	mov	r6, r0
 804494c:	2800      	cmp	r0, #0
 804494e:	f43f aef2 	beq.w	8044736 <_strtod_l+0x49e>
 8044952:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8044954:	9904      	ldr	r1, [sp, #16]
 8044956:	2b00      	cmp	r3, #0
 8044958:	eba3 0801 	sub.w	r8, r3, r1
 804495c:	bfa9      	itett	ge
 804495e:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8044960:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8044962:	eb03 0902 	addge.w	r9, r3, r2
 8044966:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8044968:	bfb8      	it	lt
 804496a:	1ad7      	sublt	r7, r2, r3
 804496c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 804496e:	4ba5      	ldr	r3, [pc, #660]	; (8044c04 <_strtod_l+0x96c>)
 8044970:	4490      	add	r8, r2
 8044972:	bfb8      	it	lt
 8044974:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8044978:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 804497c:	f108 38ff 	add.w	r8, r8, #4294967295
 8044980:	4598      	cmp	r8, r3
 8044982:	f280 80ca 	bge.w	8044b1a <_strtod_l+0x882>
 8044986:	eba3 0308 	sub.w	r3, r3, r8
 804498a:	2101      	movs	r1, #1
 804498c:	2b1f      	cmp	r3, #31
 804498e:	eba2 0203 	sub.w	r2, r2, r3
 8044992:	f300 80b5 	bgt.w	8044b00 <_strtod_l+0x868>
 8044996:	fa01 f303 	lsl.w	r3, r1, r3
 804499a:	9311      	str	r3, [sp, #68]	; 0x44
 804499c:	2300      	movs	r3, #0
 804499e:	930c      	str	r3, [sp, #48]	; 0x30
 80449a0:	eb09 0802 	add.w	r8, r9, r2
 80449a4:	9b04      	ldr	r3, [sp, #16]
 80449a6:	4417      	add	r7, r2
 80449a8:	45c1      	cmp	r9, r8
 80449aa:	441f      	add	r7, r3
 80449ac:	464b      	mov	r3, r9
 80449ae:	bfa8      	it	ge
 80449b0:	4643      	movge	r3, r8
 80449b2:	42bb      	cmp	r3, r7
 80449b4:	bfa8      	it	ge
 80449b6:	463b      	movge	r3, r7
 80449b8:	2b00      	cmp	r3, #0
 80449ba:	bfc2      	ittt	gt
 80449bc:	eba8 0803 	subgt.w	r8, r8, r3
 80449c0:	1aff      	subgt	r7, r7, r3
 80449c2:	eba9 0903 	subgt.w	r9, r9, r3
 80449c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80449c8:	2b00      	cmp	r3, #0
 80449ca:	dd17      	ble.n	80449fc <_strtod_l+0x764>
 80449cc:	4631      	mov	r1, r6
 80449ce:	461a      	mov	r2, r3
 80449d0:	4620      	mov	r0, r4
 80449d2:	f001 f809 	bl	80459e8 <__pow5mult>
 80449d6:	4606      	mov	r6, r0
 80449d8:	2800      	cmp	r0, #0
 80449da:	f43f aeac 	beq.w	8044736 <_strtod_l+0x49e>
 80449de:	4601      	mov	r1, r0
 80449e0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80449e2:	4620      	mov	r0, r4
 80449e4:	f000 ff5a 	bl	804589c <__multiply>
 80449e8:	900f      	str	r0, [sp, #60]	; 0x3c
 80449ea:	2800      	cmp	r0, #0
 80449ec:	f43f aea3 	beq.w	8044736 <_strtod_l+0x49e>
 80449f0:	991e      	ldr	r1, [sp, #120]	; 0x78
 80449f2:	4620      	mov	r0, r4
 80449f4:	f000 fe36 	bl	8045664 <_Bfree>
 80449f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80449fa:	931e      	str	r3, [sp, #120]	; 0x78
 80449fc:	f1b8 0f00 	cmp.w	r8, #0
 8044a00:	f300 8090 	bgt.w	8044b24 <_strtod_l+0x88c>
 8044a04:	9b08      	ldr	r3, [sp, #32]
 8044a06:	2b00      	cmp	r3, #0
 8044a08:	dd08      	ble.n	8044a1c <_strtod_l+0x784>
 8044a0a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8044a0c:	4620      	mov	r0, r4
 8044a0e:	9907      	ldr	r1, [sp, #28]
 8044a10:	f000 ffea 	bl	80459e8 <__pow5mult>
 8044a14:	9007      	str	r0, [sp, #28]
 8044a16:	2800      	cmp	r0, #0
 8044a18:	f43f ae8d 	beq.w	8044736 <_strtod_l+0x49e>
 8044a1c:	2f00      	cmp	r7, #0
 8044a1e:	dd08      	ble.n	8044a32 <_strtod_l+0x79a>
 8044a20:	463a      	mov	r2, r7
 8044a22:	9907      	ldr	r1, [sp, #28]
 8044a24:	4620      	mov	r0, r4
 8044a26:	f001 f839 	bl	8045a9c <__lshift>
 8044a2a:	9007      	str	r0, [sp, #28]
 8044a2c:	2800      	cmp	r0, #0
 8044a2e:	f43f ae82 	beq.w	8044736 <_strtod_l+0x49e>
 8044a32:	f1b9 0f00 	cmp.w	r9, #0
 8044a36:	dd08      	ble.n	8044a4a <_strtod_l+0x7b2>
 8044a38:	4631      	mov	r1, r6
 8044a3a:	464a      	mov	r2, r9
 8044a3c:	4620      	mov	r0, r4
 8044a3e:	f001 f82d 	bl	8045a9c <__lshift>
 8044a42:	4606      	mov	r6, r0
 8044a44:	2800      	cmp	r0, #0
 8044a46:	f43f ae76 	beq.w	8044736 <_strtod_l+0x49e>
 8044a4a:	9a07      	ldr	r2, [sp, #28]
 8044a4c:	4620      	mov	r0, r4
 8044a4e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8044a50:	f001 f8ac 	bl	8045bac <__mdiff>
 8044a54:	4605      	mov	r5, r0
 8044a56:	2800      	cmp	r0, #0
 8044a58:	f43f ae6d 	beq.w	8044736 <_strtod_l+0x49e>
 8044a5c:	68c3      	ldr	r3, [r0, #12]
 8044a5e:	4631      	mov	r1, r6
 8044a60:	930f      	str	r3, [sp, #60]	; 0x3c
 8044a62:	2300      	movs	r3, #0
 8044a64:	60c3      	str	r3, [r0, #12]
 8044a66:	f001 f885 	bl	8045b74 <__mcmp>
 8044a6a:	2800      	cmp	r0, #0
 8044a6c:	da64      	bge.n	8044b38 <_strtod_l+0x8a0>
 8044a6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8044a70:	ea53 030a 	orrs.w	r3, r3, sl
 8044a74:	f040 8086 	bne.w	8044b84 <_strtod_l+0x8ec>
 8044a78:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8044a7c:	2b00      	cmp	r3, #0
 8044a7e:	f040 8081 	bne.w	8044b84 <_strtod_l+0x8ec>
 8044a82:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8044a86:	0d1b      	lsrs	r3, r3, #20
 8044a88:	051b      	lsls	r3, r3, #20
 8044a8a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8044a8e:	d979      	bls.n	8044b84 <_strtod_l+0x8ec>
 8044a90:	696b      	ldr	r3, [r5, #20]
 8044a92:	b913      	cbnz	r3, 8044a9a <_strtod_l+0x802>
 8044a94:	692b      	ldr	r3, [r5, #16]
 8044a96:	2b01      	cmp	r3, #1
 8044a98:	dd74      	ble.n	8044b84 <_strtod_l+0x8ec>
 8044a9a:	4629      	mov	r1, r5
 8044a9c:	2201      	movs	r2, #1
 8044a9e:	4620      	mov	r0, r4
 8044aa0:	f000 fffc 	bl	8045a9c <__lshift>
 8044aa4:	4631      	mov	r1, r6
 8044aa6:	4605      	mov	r5, r0
 8044aa8:	f001 f864 	bl	8045b74 <__mcmp>
 8044aac:	2800      	cmp	r0, #0
 8044aae:	dd69      	ble.n	8044b84 <_strtod_l+0x8ec>
 8044ab0:	9904      	ldr	r1, [sp, #16]
 8044ab2:	465b      	mov	r3, fp
 8044ab4:	4a54      	ldr	r2, [pc, #336]	; (8044c08 <_strtod_l+0x970>)
 8044ab6:	2900      	cmp	r1, #0
 8044ab8:	f000 8084 	beq.w	8044bc4 <_strtod_l+0x92c>
 8044abc:	ea02 010b 	and.w	r1, r2, fp
 8044ac0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8044ac4:	dc7e      	bgt.n	8044bc4 <_strtod_l+0x92c>
 8044ac6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8044aca:	f77f aea9 	ble.w	8044820 <_strtod_l+0x588>
 8044ace:	2300      	movs	r3, #0
 8044ad0:	4a4e      	ldr	r2, [pc, #312]	; (8044c0c <_strtod_l+0x974>)
 8044ad2:	4650      	mov	r0, sl
 8044ad4:	4659      	mov	r1, fp
 8044ad6:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8044ada:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8044ade:	f7fb fd6f 	bl	80405c0 <__aeabi_dmul>
 8044ae2:	460b      	mov	r3, r1
 8044ae4:	4682      	mov	sl, r0
 8044ae6:	468b      	mov	fp, r1
 8044ae8:	4303      	orrs	r3, r0
 8044aea:	bf04      	itt	eq
 8044aec:	2322      	moveq	r3, #34	; 0x22
 8044aee:	6023      	streq	r3, [r4, #0]
 8044af0:	e62b      	b.n	804474a <_strtod_l+0x4b2>
 8044af2:	f04f 32ff 	mov.w	r2, #4294967295
 8044af6:	fa02 f303 	lsl.w	r3, r2, r3
 8044afa:	ea03 0a0a 	and.w	sl, r3, sl
 8044afe:	e6df      	b.n	80448c0 <_strtod_l+0x628>
 8044b00:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8044b04:	9111      	str	r1, [sp, #68]	; 0x44
 8044b06:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8044b0a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8044b0e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8044b12:	fa01 f308 	lsl.w	r3, r1, r8
 8044b16:	930c      	str	r3, [sp, #48]	; 0x30
 8044b18:	e742      	b.n	80449a0 <_strtod_l+0x708>
 8044b1a:	2300      	movs	r3, #0
 8044b1c:	930c      	str	r3, [sp, #48]	; 0x30
 8044b1e:	2301      	movs	r3, #1
 8044b20:	9311      	str	r3, [sp, #68]	; 0x44
 8044b22:	e73d      	b.n	80449a0 <_strtod_l+0x708>
 8044b24:	4642      	mov	r2, r8
 8044b26:	991e      	ldr	r1, [sp, #120]	; 0x78
 8044b28:	4620      	mov	r0, r4
 8044b2a:	f000 ffb7 	bl	8045a9c <__lshift>
 8044b2e:	901e      	str	r0, [sp, #120]	; 0x78
 8044b30:	2800      	cmp	r0, #0
 8044b32:	f47f af67 	bne.w	8044a04 <_strtod_l+0x76c>
 8044b36:	e5fe      	b.n	8044736 <_strtod_l+0x49e>
 8044b38:	465f      	mov	r7, fp
 8044b3a:	d16f      	bne.n	8044c1c <_strtod_l+0x984>
 8044b3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8044b3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8044b42:	b342      	cbz	r2, 8044b96 <_strtod_l+0x8fe>
 8044b44:	4a32      	ldr	r2, [pc, #200]	; (8044c10 <_strtod_l+0x978>)
 8044b46:	4293      	cmp	r3, r2
 8044b48:	d128      	bne.n	8044b9c <_strtod_l+0x904>
 8044b4a:	9b04      	ldr	r3, [sp, #16]
 8044b4c:	4650      	mov	r0, sl
 8044b4e:	b1eb      	cbz	r3, 8044b8c <_strtod_l+0x8f4>
 8044b50:	4a2d      	ldr	r2, [pc, #180]	; (8044c08 <_strtod_l+0x970>)
 8044b52:	f04f 31ff 	mov.w	r1, #4294967295
 8044b56:	403a      	ands	r2, r7
 8044b58:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8044b5c:	d819      	bhi.n	8044b92 <_strtod_l+0x8fa>
 8044b5e:	0d12      	lsrs	r2, r2, #20
 8044b60:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8044b64:	fa01 f303 	lsl.w	r3, r1, r3
 8044b68:	4298      	cmp	r0, r3
 8044b6a:	d117      	bne.n	8044b9c <_strtod_l+0x904>
 8044b6c:	4b29      	ldr	r3, [pc, #164]	; (8044c14 <_strtod_l+0x97c>)
 8044b6e:	429f      	cmp	r7, r3
 8044b70:	d102      	bne.n	8044b78 <_strtod_l+0x8e0>
 8044b72:	3001      	adds	r0, #1
 8044b74:	f43f addf 	beq.w	8044736 <_strtod_l+0x49e>
 8044b78:	4b23      	ldr	r3, [pc, #140]	; (8044c08 <_strtod_l+0x970>)
 8044b7a:	f04f 0a00 	mov.w	sl, #0
 8044b7e:	403b      	ands	r3, r7
 8044b80:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8044b84:	9b04      	ldr	r3, [sp, #16]
 8044b86:	2b00      	cmp	r3, #0
 8044b88:	d1a1      	bne.n	8044ace <_strtod_l+0x836>
 8044b8a:	e5de      	b.n	804474a <_strtod_l+0x4b2>
 8044b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8044b90:	e7ea      	b.n	8044b68 <_strtod_l+0x8d0>
 8044b92:	460b      	mov	r3, r1
 8044b94:	e7e8      	b.n	8044b68 <_strtod_l+0x8d0>
 8044b96:	ea53 030a 	orrs.w	r3, r3, sl
 8044b9a:	d089      	beq.n	8044ab0 <_strtod_l+0x818>
 8044b9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8044b9e:	b1db      	cbz	r3, 8044bd8 <_strtod_l+0x940>
 8044ba0:	423b      	tst	r3, r7
 8044ba2:	d0ef      	beq.n	8044b84 <_strtod_l+0x8ec>
 8044ba4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8044ba6:	4650      	mov	r0, sl
 8044ba8:	9a04      	ldr	r2, [sp, #16]
 8044baa:	4659      	mov	r1, fp
 8044bac:	b1c3      	cbz	r3, 8044be0 <_strtod_l+0x948>
 8044bae:	f7ff fb55 	bl	804425c <sulp>
 8044bb2:	4602      	mov	r2, r0
 8044bb4:	460b      	mov	r3, r1
 8044bb6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8044bba:	f7fb fb4b 	bl	8040254 <__adddf3>
 8044bbe:	4682      	mov	sl, r0
 8044bc0:	468b      	mov	fp, r1
 8044bc2:	e7df      	b.n	8044b84 <_strtod_l+0x8ec>
 8044bc4:	4013      	ands	r3, r2
 8044bc6:	f04f 3aff 	mov.w	sl, #4294967295
 8044bca:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8044bce:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8044bd2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8044bd6:	e7d5      	b.n	8044b84 <_strtod_l+0x8ec>
 8044bd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8044bda:	ea13 0f0a 	tst.w	r3, sl
 8044bde:	e7e0      	b.n	8044ba2 <_strtod_l+0x90a>
 8044be0:	f7ff fb3c 	bl	804425c <sulp>
 8044be4:	4602      	mov	r2, r0
 8044be6:	460b      	mov	r3, r1
 8044be8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8044bec:	f7fb fb30 	bl	8040250 <__aeabi_dsub>
 8044bf0:	2200      	movs	r2, #0
 8044bf2:	2300      	movs	r3, #0
 8044bf4:	4682      	mov	sl, r0
 8044bf6:	468b      	mov	fp, r1
 8044bf8:	f7fb ff4a 	bl	8040a90 <__aeabi_dcmpeq>
 8044bfc:	2800      	cmp	r0, #0
 8044bfe:	d0c1      	beq.n	8044b84 <_strtod_l+0x8ec>
 8044c00:	e60e      	b.n	8044820 <_strtod_l+0x588>
 8044c02:	bf00      	nop
 8044c04:	fffffc02 	.word	0xfffffc02
 8044c08:	7ff00000 	.word	0x7ff00000
 8044c0c:	39500000 	.word	0x39500000
 8044c10:	000fffff 	.word	0x000fffff
 8044c14:	7fefffff 	.word	0x7fefffff
 8044c18:	08047268 	.word	0x08047268
 8044c1c:	4631      	mov	r1, r6
 8044c1e:	4628      	mov	r0, r5
 8044c20:	f001 f92a 	bl	8045e78 <__ratio>
 8044c24:	2200      	movs	r2, #0
 8044c26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8044c2a:	ee10 0a10 	vmov	r0, s0
 8044c2e:	ec59 8b10 	vmov	r8, r9, d0
 8044c32:	4649      	mov	r1, r9
 8044c34:	f7fb ff40 	bl	8040ab8 <__aeabi_dcmple>
 8044c38:	2800      	cmp	r0, #0
 8044c3a:	d07c      	beq.n	8044d36 <_strtod_l+0xa9e>
 8044c3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8044c3e:	2b00      	cmp	r3, #0
 8044c40:	d04c      	beq.n	8044cdc <_strtod_l+0xa44>
 8044c42:	2200      	movs	r2, #0
 8044c44:	4b94      	ldr	r3, [pc, #592]	; (8044e98 <_strtod_l+0xc00>)
 8044c46:	f04f 0800 	mov.w	r8, #0
 8044c4a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8044e98 <_strtod_l+0xc00>
 8044c4e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8044c52:	4b92      	ldr	r3, [pc, #584]	; (8044e9c <_strtod_l+0xc04>)
 8044c54:	403b      	ands	r3, r7
 8044c56:	9311      	str	r3, [sp, #68]	; 0x44
 8044c58:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8044c5a:	4b91      	ldr	r3, [pc, #580]	; (8044ea0 <_strtod_l+0xc08>)
 8044c5c:	429a      	cmp	r2, r3
 8044c5e:	f040 80b2 	bne.w	8044dc6 <_strtod_l+0xb2e>
 8044c62:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8044c66:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8044c6a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8044c6e:	ec4b ab10 	vmov	d0, sl, fp
 8044c72:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8044c76:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8044c7a:	f001 f827 	bl	8045ccc <__ulp>
 8044c7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8044c82:	ec53 2b10 	vmov	r2, r3, d0
 8044c86:	f7fb fc9b 	bl	80405c0 <__aeabi_dmul>
 8044c8a:	4652      	mov	r2, sl
 8044c8c:	465b      	mov	r3, fp
 8044c8e:	f7fb fae1 	bl	8040254 <__adddf3>
 8044c92:	460b      	mov	r3, r1
 8044c94:	4981      	ldr	r1, [pc, #516]	; (8044e9c <_strtod_l+0xc04>)
 8044c96:	4682      	mov	sl, r0
 8044c98:	4a82      	ldr	r2, [pc, #520]	; (8044ea4 <_strtod_l+0xc0c>)
 8044c9a:	4019      	ands	r1, r3
 8044c9c:	4291      	cmp	r1, r2
 8044c9e:	d95e      	bls.n	8044d5e <_strtod_l+0xac6>
 8044ca0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8044ca2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8044ca6:	4293      	cmp	r3, r2
 8044ca8:	d103      	bne.n	8044cb2 <_strtod_l+0xa1a>
 8044caa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8044cac:	3301      	adds	r3, #1
 8044cae:	f43f ad42 	beq.w	8044736 <_strtod_l+0x49e>
 8044cb2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8044eb0 <_strtod_l+0xc18>
 8044cb6:	f04f 3aff 	mov.w	sl, #4294967295
 8044cba:	991e      	ldr	r1, [sp, #120]	; 0x78
 8044cbc:	4620      	mov	r0, r4
 8044cbe:	f000 fcd1 	bl	8045664 <_Bfree>
 8044cc2:	9907      	ldr	r1, [sp, #28]
 8044cc4:	4620      	mov	r0, r4
 8044cc6:	f000 fccd 	bl	8045664 <_Bfree>
 8044cca:	4631      	mov	r1, r6
 8044ccc:	4620      	mov	r0, r4
 8044cce:	f000 fcc9 	bl	8045664 <_Bfree>
 8044cd2:	4629      	mov	r1, r5
 8044cd4:	4620      	mov	r0, r4
 8044cd6:	f000 fcc5 	bl	8045664 <_Bfree>
 8044cda:	e613      	b.n	8044904 <_strtod_l+0x66c>
 8044cdc:	f1ba 0f00 	cmp.w	sl, #0
 8044ce0:	d11b      	bne.n	8044d1a <_strtod_l+0xa82>
 8044ce2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8044ce6:	b9f3      	cbnz	r3, 8044d26 <_strtod_l+0xa8e>
 8044ce8:	2200      	movs	r2, #0
 8044cea:	4b6b      	ldr	r3, [pc, #428]	; (8044e98 <_strtod_l+0xc00>)
 8044cec:	4640      	mov	r0, r8
 8044cee:	4649      	mov	r1, r9
 8044cf0:	f7fb fed8 	bl	8040aa4 <__aeabi_dcmplt>
 8044cf4:	b9d0      	cbnz	r0, 8044d2c <_strtod_l+0xa94>
 8044cf6:	4640      	mov	r0, r8
 8044cf8:	4649      	mov	r1, r9
 8044cfa:	2200      	movs	r2, #0
 8044cfc:	4b6a      	ldr	r3, [pc, #424]	; (8044ea8 <_strtod_l+0xc10>)
 8044cfe:	f7fb fc5f 	bl	80405c0 <__aeabi_dmul>
 8044d02:	4680      	mov	r8, r0
 8044d04:	4689      	mov	r9, r1
 8044d06:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8044d0a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8044d0e:	931b      	str	r3, [sp, #108]	; 0x6c
 8044d10:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8044d14:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8044d18:	e79b      	b.n	8044c52 <_strtod_l+0x9ba>
 8044d1a:	f1ba 0f01 	cmp.w	sl, #1
 8044d1e:	d102      	bne.n	8044d26 <_strtod_l+0xa8e>
 8044d20:	2f00      	cmp	r7, #0
 8044d22:	f43f ad7d 	beq.w	8044820 <_strtod_l+0x588>
 8044d26:	2200      	movs	r2, #0
 8044d28:	4b60      	ldr	r3, [pc, #384]	; (8044eac <_strtod_l+0xc14>)
 8044d2a:	e78c      	b.n	8044c46 <_strtod_l+0x9ae>
 8044d2c:	f04f 0800 	mov.w	r8, #0
 8044d30:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8044ea8 <_strtod_l+0xc10>
 8044d34:	e7e7      	b.n	8044d06 <_strtod_l+0xa6e>
 8044d36:	4b5c      	ldr	r3, [pc, #368]	; (8044ea8 <_strtod_l+0xc10>)
 8044d38:	4640      	mov	r0, r8
 8044d3a:	4649      	mov	r1, r9
 8044d3c:	2200      	movs	r2, #0
 8044d3e:	f7fb fc3f 	bl	80405c0 <__aeabi_dmul>
 8044d42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8044d44:	4680      	mov	r8, r0
 8044d46:	4689      	mov	r9, r1
 8044d48:	b933      	cbnz	r3, 8044d58 <_strtod_l+0xac0>
 8044d4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8044d4e:	9012      	str	r0, [sp, #72]	; 0x48
 8044d50:	9313      	str	r3, [sp, #76]	; 0x4c
 8044d52:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8044d56:	e7dd      	b.n	8044d14 <_strtod_l+0xa7c>
 8044d58:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8044d5c:	e7f9      	b.n	8044d52 <_strtod_l+0xaba>
 8044d5e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8044d62:	9b04      	ldr	r3, [sp, #16]
 8044d64:	2b00      	cmp	r3, #0
 8044d66:	d1a8      	bne.n	8044cba <_strtod_l+0xa22>
 8044d68:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8044d6c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8044d6e:	0d1b      	lsrs	r3, r3, #20
 8044d70:	051b      	lsls	r3, r3, #20
 8044d72:	429a      	cmp	r2, r3
 8044d74:	d1a1      	bne.n	8044cba <_strtod_l+0xa22>
 8044d76:	4640      	mov	r0, r8
 8044d78:	4649      	mov	r1, r9
 8044d7a:	f7fb fef3 	bl	8040b64 <__aeabi_d2lz>
 8044d7e:	f7fb fbf1 	bl	8040564 <__aeabi_l2d>
 8044d82:	4602      	mov	r2, r0
 8044d84:	460b      	mov	r3, r1
 8044d86:	4640      	mov	r0, r8
 8044d88:	4649      	mov	r1, r9
 8044d8a:	f7fb fa61 	bl	8040250 <__aeabi_dsub>
 8044d8e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8044d92:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8044d94:	4680      	mov	r8, r0
 8044d96:	ea43 030a 	orr.w	r3, r3, sl
 8044d9a:	4689      	mov	r9, r1
 8044d9c:	4313      	orrs	r3, r2
 8044d9e:	d053      	beq.n	8044e48 <_strtod_l+0xbb0>
 8044da0:	a335      	add	r3, pc, #212	; (adr r3, 8044e78 <_strtod_l+0xbe0>)
 8044da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044da6:	f7fb fe7d 	bl	8040aa4 <__aeabi_dcmplt>
 8044daa:	2800      	cmp	r0, #0
 8044dac:	f47f accd 	bne.w	804474a <_strtod_l+0x4b2>
 8044db0:	4640      	mov	r0, r8
 8044db2:	4649      	mov	r1, r9
 8044db4:	a332      	add	r3, pc, #200	; (adr r3, 8044e80 <_strtod_l+0xbe8>)
 8044db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044dba:	f7fb fe91 	bl	8040ae0 <__aeabi_dcmpgt>
 8044dbe:	2800      	cmp	r0, #0
 8044dc0:	f43f af7b 	beq.w	8044cba <_strtod_l+0xa22>
 8044dc4:	e4c1      	b.n	804474a <_strtod_l+0x4b2>
 8044dc6:	9b04      	ldr	r3, [sp, #16]
 8044dc8:	b333      	cbz	r3, 8044e18 <_strtod_l+0xb80>
 8044dca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8044dcc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8044dd0:	d822      	bhi.n	8044e18 <_strtod_l+0xb80>
 8044dd2:	4640      	mov	r0, r8
 8044dd4:	4649      	mov	r1, r9
 8044dd6:	a32c      	add	r3, pc, #176	; (adr r3, 8044e88 <_strtod_l+0xbf0>)
 8044dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044ddc:	f7fb fe6c 	bl	8040ab8 <__aeabi_dcmple>
 8044de0:	b1a0      	cbz	r0, 8044e0c <_strtod_l+0xb74>
 8044de2:	4649      	mov	r1, r9
 8044de4:	4640      	mov	r0, r8
 8044de6:	f7fb fe85 	bl	8040af4 <__aeabi_d2uiz>
 8044dea:	2801      	cmp	r0, #1
 8044dec:	bf38      	it	cc
 8044dee:	2001      	movcc	r0, #1
 8044df0:	f7fb fb6c 	bl	80404cc <__aeabi_ui2d>
 8044df4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8044df6:	4680      	mov	r8, r0
 8044df8:	4689      	mov	r9, r1
 8044dfa:	bb13      	cbnz	r3, 8044e42 <_strtod_l+0xbaa>
 8044dfc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8044e00:	9014      	str	r0, [sp, #80]	; 0x50
 8044e02:	9315      	str	r3, [sp, #84]	; 0x54
 8044e04:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8044e08:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8044e0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8044e0e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8044e10:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8044e14:	1a9b      	subs	r3, r3, r2
 8044e16:	930d      	str	r3, [sp, #52]	; 0x34
 8044e18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8044e1c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8044e20:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8044e24:	f000 ff52 	bl	8045ccc <__ulp>
 8044e28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8044e2c:	ec53 2b10 	vmov	r2, r3, d0
 8044e30:	f7fb fbc6 	bl	80405c0 <__aeabi_dmul>
 8044e34:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8044e38:	f7fb fa0c 	bl	8040254 <__adddf3>
 8044e3c:	4682      	mov	sl, r0
 8044e3e:	468b      	mov	fp, r1
 8044e40:	e78f      	b.n	8044d62 <_strtod_l+0xaca>
 8044e42:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8044e46:	e7dd      	b.n	8044e04 <_strtod_l+0xb6c>
 8044e48:	a311      	add	r3, pc, #68	; (adr r3, 8044e90 <_strtod_l+0xbf8>)
 8044e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044e4e:	f7fb fe29 	bl	8040aa4 <__aeabi_dcmplt>
 8044e52:	e7b4      	b.n	8044dbe <_strtod_l+0xb26>
 8044e54:	2300      	movs	r3, #0
 8044e56:	930e      	str	r3, [sp, #56]	; 0x38
 8044e58:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8044e5a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8044e5c:	6013      	str	r3, [r2, #0]
 8044e5e:	f7ff ba61 	b.w	8044324 <_strtod_l+0x8c>
 8044e62:	2b65      	cmp	r3, #101	; 0x65
 8044e64:	f43f ab5a 	beq.w	804451c <_strtod_l+0x284>
 8044e68:	2b45      	cmp	r3, #69	; 0x45
 8044e6a:	f43f ab57 	beq.w	804451c <_strtod_l+0x284>
 8044e6e:	2201      	movs	r2, #1
 8044e70:	f7ff bb90 	b.w	8044594 <_strtod_l+0x2fc>
 8044e74:	f3af 8000 	nop.w
 8044e78:	94a03595 	.word	0x94a03595
 8044e7c:	3fdfffff 	.word	0x3fdfffff
 8044e80:	35afe535 	.word	0x35afe535
 8044e84:	3fe00000 	.word	0x3fe00000
 8044e88:	ffc00000 	.word	0xffc00000
 8044e8c:	41dfffff 	.word	0x41dfffff
 8044e90:	94a03595 	.word	0x94a03595
 8044e94:	3fcfffff 	.word	0x3fcfffff
 8044e98:	3ff00000 	.word	0x3ff00000
 8044e9c:	7ff00000 	.word	0x7ff00000
 8044ea0:	7fe00000 	.word	0x7fe00000
 8044ea4:	7c9fffff 	.word	0x7c9fffff
 8044ea8:	3fe00000 	.word	0x3fe00000
 8044eac:	bff00000 	.word	0xbff00000
 8044eb0:	7fefffff 	.word	0x7fefffff

08044eb4 <strtod>:
 8044eb4:	460a      	mov	r2, r1
 8044eb6:	4601      	mov	r1, r0
 8044eb8:	4802      	ldr	r0, [pc, #8]	; (8044ec4 <strtod+0x10>)
 8044eba:	4b03      	ldr	r3, [pc, #12]	; (8044ec8 <strtod+0x14>)
 8044ebc:	6800      	ldr	r0, [r0, #0]
 8044ebe:	f7ff b9eb 	b.w	8044298 <_strtod_l>
 8044ec2:	bf00      	nop
 8044ec4:	2001801c 	.word	0x2001801c
 8044ec8:	20018084 	.word	0x20018084

08044ecc <rshift>:
 8044ecc:	6903      	ldr	r3, [r0, #16]
 8044ece:	114a      	asrs	r2, r1, #5
 8044ed0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8044ed4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8044ed8:	f100 0414 	add.w	r4, r0, #20
 8044edc:	dd45      	ble.n	8044f6a <rshift+0x9e>
 8044ede:	f011 011f 	ands.w	r1, r1, #31
 8044ee2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8044ee6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8044eea:	d10c      	bne.n	8044f06 <rshift+0x3a>
 8044eec:	f100 0710 	add.w	r7, r0, #16
 8044ef0:	4629      	mov	r1, r5
 8044ef2:	42b1      	cmp	r1, r6
 8044ef4:	d334      	bcc.n	8044f60 <rshift+0x94>
 8044ef6:	1a9b      	subs	r3, r3, r2
 8044ef8:	1eea      	subs	r2, r5, #3
 8044efa:	009b      	lsls	r3, r3, #2
 8044efc:	4296      	cmp	r6, r2
 8044efe:	bf38      	it	cc
 8044f00:	2300      	movcc	r3, #0
 8044f02:	4423      	add	r3, r4
 8044f04:	e015      	b.n	8044f32 <rshift+0x66>
 8044f06:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8044f0a:	f1c1 0820 	rsb	r8, r1, #32
 8044f0e:	f105 0e04 	add.w	lr, r5, #4
 8044f12:	46a1      	mov	r9, r4
 8044f14:	40cf      	lsrs	r7, r1
 8044f16:	4576      	cmp	r6, lr
 8044f18:	46f4      	mov	ip, lr
 8044f1a:	d815      	bhi.n	8044f48 <rshift+0x7c>
 8044f1c:	1a9b      	subs	r3, r3, r2
 8044f1e:	3501      	adds	r5, #1
 8044f20:	009a      	lsls	r2, r3, #2
 8044f22:	3a04      	subs	r2, #4
 8044f24:	42ae      	cmp	r6, r5
 8044f26:	bf38      	it	cc
 8044f28:	2200      	movcc	r2, #0
 8044f2a:	18a3      	adds	r3, r4, r2
 8044f2c:	50a7      	str	r7, [r4, r2]
 8044f2e:	b107      	cbz	r7, 8044f32 <rshift+0x66>
 8044f30:	3304      	adds	r3, #4
 8044f32:	1b1a      	subs	r2, r3, r4
 8044f34:	42a3      	cmp	r3, r4
 8044f36:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8044f3a:	bf08      	it	eq
 8044f3c:	2300      	moveq	r3, #0
 8044f3e:	6102      	str	r2, [r0, #16]
 8044f40:	bf08      	it	eq
 8044f42:	6143      	streq	r3, [r0, #20]
 8044f44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8044f48:	f8dc c000 	ldr.w	ip, [ip]
 8044f4c:	fa0c fc08 	lsl.w	ip, ip, r8
 8044f50:	ea4c 0707 	orr.w	r7, ip, r7
 8044f54:	f849 7b04 	str.w	r7, [r9], #4
 8044f58:	f85e 7b04 	ldr.w	r7, [lr], #4
 8044f5c:	40cf      	lsrs	r7, r1
 8044f5e:	e7da      	b.n	8044f16 <rshift+0x4a>
 8044f60:	f851 cb04 	ldr.w	ip, [r1], #4
 8044f64:	f847 cf04 	str.w	ip, [r7, #4]!
 8044f68:	e7c3      	b.n	8044ef2 <rshift+0x26>
 8044f6a:	4623      	mov	r3, r4
 8044f6c:	e7e1      	b.n	8044f32 <rshift+0x66>

08044f6e <__hexdig_fun>:
 8044f6e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8044f72:	2b09      	cmp	r3, #9
 8044f74:	d802      	bhi.n	8044f7c <__hexdig_fun+0xe>
 8044f76:	3820      	subs	r0, #32
 8044f78:	b2c0      	uxtb	r0, r0
 8044f7a:	4770      	bx	lr
 8044f7c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8044f80:	2b05      	cmp	r3, #5
 8044f82:	d801      	bhi.n	8044f88 <__hexdig_fun+0x1a>
 8044f84:	3847      	subs	r0, #71	; 0x47
 8044f86:	e7f7      	b.n	8044f78 <__hexdig_fun+0xa>
 8044f88:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8044f8c:	2b05      	cmp	r3, #5
 8044f8e:	d801      	bhi.n	8044f94 <__hexdig_fun+0x26>
 8044f90:	3827      	subs	r0, #39	; 0x27
 8044f92:	e7f1      	b.n	8044f78 <__hexdig_fun+0xa>
 8044f94:	2000      	movs	r0, #0
 8044f96:	4770      	bx	lr

08044f98 <__gethex>:
 8044f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8044f9c:	ed2d 8b02 	vpush	{d8}
 8044fa0:	b089      	sub	sp, #36	; 0x24
 8044fa2:	ee08 0a10 	vmov	s16, r0
 8044fa6:	468b      	mov	fp, r1
 8044fa8:	4690      	mov	r8, r2
 8044faa:	9304      	str	r3, [sp, #16]
 8044fac:	4bbc      	ldr	r3, [pc, #752]	; (80452a0 <__gethex+0x308>)
 8044fae:	681b      	ldr	r3, [r3, #0]
 8044fb0:	4618      	mov	r0, r3
 8044fb2:	9301      	str	r3, [sp, #4]
 8044fb4:	f7fb f940 	bl	8040238 <strlen>
 8044fb8:	9b01      	ldr	r3, [sp, #4]
 8044fba:	f8db 2000 	ldr.w	r2, [fp]
 8044fbe:	4682      	mov	sl, r0
 8044fc0:	4403      	add	r3, r0
 8044fc2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8044fc6:	9305      	str	r3, [sp, #20]
 8044fc8:	1c93      	adds	r3, r2, #2
 8044fca:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8044fce:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8044fd2:	32fe      	adds	r2, #254	; 0xfe
 8044fd4:	18d1      	adds	r1, r2, r3
 8044fd6:	461f      	mov	r7, r3
 8044fd8:	f813 0b01 	ldrb.w	r0, [r3], #1
 8044fdc:	9100      	str	r1, [sp, #0]
 8044fde:	2830      	cmp	r0, #48	; 0x30
 8044fe0:	d0f8      	beq.n	8044fd4 <__gethex+0x3c>
 8044fe2:	f7ff ffc4 	bl	8044f6e <__hexdig_fun>
 8044fe6:	4604      	mov	r4, r0
 8044fe8:	2800      	cmp	r0, #0
 8044fea:	d139      	bne.n	8045060 <__gethex+0xc8>
 8044fec:	4652      	mov	r2, sl
 8044fee:	9901      	ldr	r1, [sp, #4]
 8044ff0:	4638      	mov	r0, r7
 8044ff2:	f001 fab1 	bl	8046558 <strncmp>
 8044ff6:	4605      	mov	r5, r0
 8044ff8:	2800      	cmp	r0, #0
 8044ffa:	d167      	bne.n	80450cc <__gethex+0x134>
 8044ffc:	f817 000a 	ldrb.w	r0, [r7, sl]
 8045000:	eb07 060a 	add.w	r6, r7, sl
 8045004:	f7ff ffb3 	bl	8044f6e <__hexdig_fun>
 8045008:	2800      	cmp	r0, #0
 804500a:	d061      	beq.n	80450d0 <__gethex+0x138>
 804500c:	4633      	mov	r3, r6
 804500e:	7818      	ldrb	r0, [r3, #0]
 8045010:	461f      	mov	r7, r3
 8045012:	3301      	adds	r3, #1
 8045014:	2830      	cmp	r0, #48	; 0x30
 8045016:	d0fa      	beq.n	804500e <__gethex+0x76>
 8045018:	f7ff ffa9 	bl	8044f6e <__hexdig_fun>
 804501c:	fab0 f480 	clz	r4, r0
 8045020:	2301      	movs	r3, #1
 8045022:	4635      	mov	r5, r6
 8045024:	0964      	lsrs	r4, r4, #5
 8045026:	9300      	str	r3, [sp, #0]
 8045028:	463a      	mov	r2, r7
 804502a:	4616      	mov	r6, r2
 804502c:	3201      	adds	r2, #1
 804502e:	7830      	ldrb	r0, [r6, #0]
 8045030:	f7ff ff9d 	bl	8044f6e <__hexdig_fun>
 8045034:	2800      	cmp	r0, #0
 8045036:	d1f8      	bne.n	804502a <__gethex+0x92>
 8045038:	4652      	mov	r2, sl
 804503a:	9901      	ldr	r1, [sp, #4]
 804503c:	4630      	mov	r0, r6
 804503e:	f001 fa8b 	bl	8046558 <strncmp>
 8045042:	b980      	cbnz	r0, 8045066 <__gethex+0xce>
 8045044:	b94d      	cbnz	r5, 804505a <__gethex+0xc2>
 8045046:	eb06 050a 	add.w	r5, r6, sl
 804504a:	462a      	mov	r2, r5
 804504c:	4616      	mov	r6, r2
 804504e:	3201      	adds	r2, #1
 8045050:	7830      	ldrb	r0, [r6, #0]
 8045052:	f7ff ff8c 	bl	8044f6e <__hexdig_fun>
 8045056:	2800      	cmp	r0, #0
 8045058:	d1f8      	bne.n	804504c <__gethex+0xb4>
 804505a:	1bad      	subs	r5, r5, r6
 804505c:	00ad      	lsls	r5, r5, #2
 804505e:	e004      	b.n	804506a <__gethex+0xd2>
 8045060:	2400      	movs	r4, #0
 8045062:	4625      	mov	r5, r4
 8045064:	e7e0      	b.n	8045028 <__gethex+0x90>
 8045066:	2d00      	cmp	r5, #0
 8045068:	d1f7      	bne.n	804505a <__gethex+0xc2>
 804506a:	7833      	ldrb	r3, [r6, #0]
 804506c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8045070:	2b50      	cmp	r3, #80	; 0x50
 8045072:	d13b      	bne.n	80450ec <__gethex+0x154>
 8045074:	7873      	ldrb	r3, [r6, #1]
 8045076:	2b2b      	cmp	r3, #43	; 0x2b
 8045078:	d02c      	beq.n	80450d4 <__gethex+0x13c>
 804507a:	2b2d      	cmp	r3, #45	; 0x2d
 804507c:	d02e      	beq.n	80450dc <__gethex+0x144>
 804507e:	1c71      	adds	r1, r6, #1
 8045080:	f04f 0900 	mov.w	r9, #0
 8045084:	7808      	ldrb	r0, [r1, #0]
 8045086:	f7ff ff72 	bl	8044f6e <__hexdig_fun>
 804508a:	1e43      	subs	r3, r0, #1
 804508c:	b2db      	uxtb	r3, r3
 804508e:	2b18      	cmp	r3, #24
 8045090:	d82c      	bhi.n	80450ec <__gethex+0x154>
 8045092:	f1a0 0210 	sub.w	r2, r0, #16
 8045096:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 804509a:	f7ff ff68 	bl	8044f6e <__hexdig_fun>
 804509e:	1e43      	subs	r3, r0, #1
 80450a0:	b2db      	uxtb	r3, r3
 80450a2:	2b18      	cmp	r3, #24
 80450a4:	d91d      	bls.n	80450e2 <__gethex+0x14a>
 80450a6:	f1b9 0f00 	cmp.w	r9, #0
 80450aa:	d000      	beq.n	80450ae <__gethex+0x116>
 80450ac:	4252      	negs	r2, r2
 80450ae:	4415      	add	r5, r2
 80450b0:	f8cb 1000 	str.w	r1, [fp]
 80450b4:	b1e4      	cbz	r4, 80450f0 <__gethex+0x158>
 80450b6:	9b00      	ldr	r3, [sp, #0]
 80450b8:	2b00      	cmp	r3, #0
 80450ba:	bf14      	ite	ne
 80450bc:	2700      	movne	r7, #0
 80450be:	2706      	moveq	r7, #6
 80450c0:	4638      	mov	r0, r7
 80450c2:	b009      	add	sp, #36	; 0x24
 80450c4:	ecbd 8b02 	vpop	{d8}
 80450c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80450cc:	463e      	mov	r6, r7
 80450ce:	4625      	mov	r5, r4
 80450d0:	2401      	movs	r4, #1
 80450d2:	e7ca      	b.n	804506a <__gethex+0xd2>
 80450d4:	f04f 0900 	mov.w	r9, #0
 80450d8:	1cb1      	adds	r1, r6, #2
 80450da:	e7d3      	b.n	8045084 <__gethex+0xec>
 80450dc:	f04f 0901 	mov.w	r9, #1
 80450e0:	e7fa      	b.n	80450d8 <__gethex+0x140>
 80450e2:	230a      	movs	r3, #10
 80450e4:	fb03 0202 	mla	r2, r3, r2, r0
 80450e8:	3a10      	subs	r2, #16
 80450ea:	e7d4      	b.n	8045096 <__gethex+0xfe>
 80450ec:	4631      	mov	r1, r6
 80450ee:	e7df      	b.n	80450b0 <__gethex+0x118>
 80450f0:	1bf3      	subs	r3, r6, r7
 80450f2:	4621      	mov	r1, r4
 80450f4:	3b01      	subs	r3, #1
 80450f6:	2b07      	cmp	r3, #7
 80450f8:	dc0b      	bgt.n	8045112 <__gethex+0x17a>
 80450fa:	ee18 0a10 	vmov	r0, s16
 80450fe:	f000 fa71 	bl	80455e4 <_Balloc>
 8045102:	4604      	mov	r4, r0
 8045104:	b940      	cbnz	r0, 8045118 <__gethex+0x180>
 8045106:	4b67      	ldr	r3, [pc, #412]	; (80452a4 <__gethex+0x30c>)
 8045108:	4602      	mov	r2, r0
 804510a:	21de      	movs	r1, #222	; 0xde
 804510c:	4866      	ldr	r0, [pc, #408]	; (80452a8 <__gethex+0x310>)
 804510e:	f001 fa43 	bl	8046598 <__assert_func>
 8045112:	3101      	adds	r1, #1
 8045114:	105b      	asrs	r3, r3, #1
 8045116:	e7ee      	b.n	80450f6 <__gethex+0x15e>
 8045118:	f100 0914 	add.w	r9, r0, #20
 804511c:	f04f 0b00 	mov.w	fp, #0
 8045120:	f1ca 0301 	rsb	r3, sl, #1
 8045124:	f8cd 9008 	str.w	r9, [sp, #8]
 8045128:	f8cd b000 	str.w	fp, [sp]
 804512c:	9306      	str	r3, [sp, #24]
 804512e:	42b7      	cmp	r7, r6
 8045130:	d340      	bcc.n	80451b4 <__gethex+0x21c>
 8045132:	9802      	ldr	r0, [sp, #8]
 8045134:	9b00      	ldr	r3, [sp, #0]
 8045136:	f840 3b04 	str.w	r3, [r0], #4
 804513a:	eba0 0009 	sub.w	r0, r0, r9
 804513e:	1080      	asrs	r0, r0, #2
 8045140:	0146      	lsls	r6, r0, #5
 8045142:	6120      	str	r0, [r4, #16]
 8045144:	4618      	mov	r0, r3
 8045146:	f000 fb43 	bl	80457d0 <__hi0bits>
 804514a:	1a30      	subs	r0, r6, r0
 804514c:	f8d8 6000 	ldr.w	r6, [r8]
 8045150:	42b0      	cmp	r0, r6
 8045152:	dd63      	ble.n	804521c <__gethex+0x284>
 8045154:	1b87      	subs	r7, r0, r6
 8045156:	4620      	mov	r0, r4
 8045158:	4639      	mov	r1, r7
 804515a:	f000 fee3 	bl	8045f24 <__any_on>
 804515e:	4682      	mov	sl, r0
 8045160:	b1a8      	cbz	r0, 804518e <__gethex+0x1f6>
 8045162:	1e7b      	subs	r3, r7, #1
 8045164:	f04f 0a01 	mov.w	sl, #1
 8045168:	1159      	asrs	r1, r3, #5
 804516a:	f003 021f 	and.w	r2, r3, #31
 804516e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8045172:	fa0a f202 	lsl.w	r2, sl, r2
 8045176:	420a      	tst	r2, r1
 8045178:	d009      	beq.n	804518e <__gethex+0x1f6>
 804517a:	4553      	cmp	r3, sl
 804517c:	dd05      	ble.n	804518a <__gethex+0x1f2>
 804517e:	1eb9      	subs	r1, r7, #2
 8045180:	4620      	mov	r0, r4
 8045182:	f000 fecf 	bl	8045f24 <__any_on>
 8045186:	2800      	cmp	r0, #0
 8045188:	d145      	bne.n	8045216 <__gethex+0x27e>
 804518a:	f04f 0a02 	mov.w	sl, #2
 804518e:	443d      	add	r5, r7
 8045190:	4639      	mov	r1, r7
 8045192:	4620      	mov	r0, r4
 8045194:	f7ff fe9a 	bl	8044ecc <rshift>
 8045198:	f8d8 3008 	ldr.w	r3, [r8, #8]
 804519c:	42ab      	cmp	r3, r5
 804519e:	da4c      	bge.n	804523a <__gethex+0x2a2>
 80451a0:	4621      	mov	r1, r4
 80451a2:	ee18 0a10 	vmov	r0, s16
 80451a6:	f000 fa5d 	bl	8045664 <_Bfree>
 80451aa:	2300      	movs	r3, #0
 80451ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80451ae:	27a3      	movs	r7, #163	; 0xa3
 80451b0:	6013      	str	r3, [r2, #0]
 80451b2:	e785      	b.n	80450c0 <__gethex+0x128>
 80451b4:	1e73      	subs	r3, r6, #1
 80451b6:	9a05      	ldr	r2, [sp, #20]
 80451b8:	9303      	str	r3, [sp, #12]
 80451ba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80451be:	4293      	cmp	r3, r2
 80451c0:	d019      	beq.n	80451f6 <__gethex+0x25e>
 80451c2:	f1bb 0f20 	cmp.w	fp, #32
 80451c6:	d107      	bne.n	80451d8 <__gethex+0x240>
 80451c8:	9b02      	ldr	r3, [sp, #8]
 80451ca:	9a00      	ldr	r2, [sp, #0]
 80451cc:	f843 2b04 	str.w	r2, [r3], #4
 80451d0:	9302      	str	r3, [sp, #8]
 80451d2:	2300      	movs	r3, #0
 80451d4:	469b      	mov	fp, r3
 80451d6:	9300      	str	r3, [sp, #0]
 80451d8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80451dc:	f7ff fec7 	bl	8044f6e <__hexdig_fun>
 80451e0:	f000 000f 	and.w	r0, r0, #15
 80451e4:	9b00      	ldr	r3, [sp, #0]
 80451e6:	fa00 f00b 	lsl.w	r0, r0, fp
 80451ea:	f10b 0b04 	add.w	fp, fp, #4
 80451ee:	4303      	orrs	r3, r0
 80451f0:	9300      	str	r3, [sp, #0]
 80451f2:	9b03      	ldr	r3, [sp, #12]
 80451f4:	e00d      	b.n	8045212 <__gethex+0x27a>
 80451f6:	9b03      	ldr	r3, [sp, #12]
 80451f8:	9a06      	ldr	r2, [sp, #24]
 80451fa:	4413      	add	r3, r2
 80451fc:	42bb      	cmp	r3, r7
 80451fe:	d3e0      	bcc.n	80451c2 <__gethex+0x22a>
 8045200:	4618      	mov	r0, r3
 8045202:	4652      	mov	r2, sl
 8045204:	9901      	ldr	r1, [sp, #4]
 8045206:	9307      	str	r3, [sp, #28]
 8045208:	f001 f9a6 	bl	8046558 <strncmp>
 804520c:	9b07      	ldr	r3, [sp, #28]
 804520e:	2800      	cmp	r0, #0
 8045210:	d1d7      	bne.n	80451c2 <__gethex+0x22a>
 8045212:	461e      	mov	r6, r3
 8045214:	e78b      	b.n	804512e <__gethex+0x196>
 8045216:	f04f 0a03 	mov.w	sl, #3
 804521a:	e7b8      	b.n	804518e <__gethex+0x1f6>
 804521c:	da0a      	bge.n	8045234 <__gethex+0x29c>
 804521e:	1a37      	subs	r7, r6, r0
 8045220:	4621      	mov	r1, r4
 8045222:	ee18 0a10 	vmov	r0, s16
 8045226:	463a      	mov	r2, r7
 8045228:	1bed      	subs	r5, r5, r7
 804522a:	f000 fc37 	bl	8045a9c <__lshift>
 804522e:	4604      	mov	r4, r0
 8045230:	f100 0914 	add.w	r9, r0, #20
 8045234:	f04f 0a00 	mov.w	sl, #0
 8045238:	e7ae      	b.n	8045198 <__gethex+0x200>
 804523a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 804523e:	42a8      	cmp	r0, r5
 8045240:	dd72      	ble.n	8045328 <__gethex+0x390>
 8045242:	1b45      	subs	r5, r0, r5
 8045244:	42ae      	cmp	r6, r5
 8045246:	dc35      	bgt.n	80452b4 <__gethex+0x31c>
 8045248:	f8d8 300c 	ldr.w	r3, [r8, #12]
 804524c:	2b02      	cmp	r3, #2
 804524e:	d023      	beq.n	8045298 <__gethex+0x300>
 8045250:	2b03      	cmp	r3, #3
 8045252:	d02b      	beq.n	80452ac <__gethex+0x314>
 8045254:	2b01      	cmp	r3, #1
 8045256:	d115      	bne.n	8045284 <__gethex+0x2ec>
 8045258:	42ae      	cmp	r6, r5
 804525a:	d113      	bne.n	8045284 <__gethex+0x2ec>
 804525c:	2e01      	cmp	r6, #1
 804525e:	d10b      	bne.n	8045278 <__gethex+0x2e0>
 8045260:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8045264:	2762      	movs	r7, #98	; 0x62
 8045266:	9a04      	ldr	r2, [sp, #16]
 8045268:	6013      	str	r3, [r2, #0]
 804526a:	2301      	movs	r3, #1
 804526c:	6123      	str	r3, [r4, #16]
 804526e:	f8c9 3000 	str.w	r3, [r9]
 8045272:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8045274:	601c      	str	r4, [r3, #0]
 8045276:	e723      	b.n	80450c0 <__gethex+0x128>
 8045278:	1e71      	subs	r1, r6, #1
 804527a:	4620      	mov	r0, r4
 804527c:	f000 fe52 	bl	8045f24 <__any_on>
 8045280:	2800      	cmp	r0, #0
 8045282:	d1ed      	bne.n	8045260 <__gethex+0x2c8>
 8045284:	4621      	mov	r1, r4
 8045286:	ee18 0a10 	vmov	r0, s16
 804528a:	f000 f9eb 	bl	8045664 <_Bfree>
 804528e:	2300      	movs	r3, #0
 8045290:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8045292:	2750      	movs	r7, #80	; 0x50
 8045294:	6013      	str	r3, [r2, #0]
 8045296:	e713      	b.n	80450c0 <__gethex+0x128>
 8045298:	9b15      	ldr	r3, [sp, #84]	; 0x54
 804529a:	2b00      	cmp	r3, #0
 804529c:	d1f2      	bne.n	8045284 <__gethex+0x2ec>
 804529e:	e7df      	b.n	8045260 <__gethex+0x2c8>
 80452a0:	0804730c 	.word	0x0804730c
 80452a4:	08047290 	.word	0x08047290
 80452a8:	080472a1 	.word	0x080472a1
 80452ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80452ae:	2b00      	cmp	r3, #0
 80452b0:	d1d6      	bne.n	8045260 <__gethex+0x2c8>
 80452b2:	e7e7      	b.n	8045284 <__gethex+0x2ec>
 80452b4:	1e6f      	subs	r7, r5, #1
 80452b6:	f1ba 0f00 	cmp.w	sl, #0
 80452ba:	d132      	bne.n	8045322 <__gethex+0x38a>
 80452bc:	b127      	cbz	r7, 80452c8 <__gethex+0x330>
 80452be:	4639      	mov	r1, r7
 80452c0:	4620      	mov	r0, r4
 80452c2:	f000 fe2f 	bl	8045f24 <__any_on>
 80452c6:	4682      	mov	sl, r0
 80452c8:	117b      	asrs	r3, r7, #5
 80452ca:	2101      	movs	r1, #1
 80452cc:	f007 071f 	and.w	r7, r7, #31
 80452d0:	4620      	mov	r0, r4
 80452d2:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80452d6:	1b76      	subs	r6, r6, r5
 80452d8:	fa01 f707 	lsl.w	r7, r1, r7
 80452dc:	4629      	mov	r1, r5
 80452de:	421f      	tst	r7, r3
 80452e0:	f04f 0702 	mov.w	r7, #2
 80452e4:	bf18      	it	ne
 80452e6:	f04a 0a02 	orrne.w	sl, sl, #2
 80452ea:	f7ff fdef 	bl	8044ecc <rshift>
 80452ee:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80452f2:	f1ba 0f00 	cmp.w	sl, #0
 80452f6:	d048      	beq.n	804538a <__gethex+0x3f2>
 80452f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80452fc:	2b02      	cmp	r3, #2
 80452fe:	d015      	beq.n	804532c <__gethex+0x394>
 8045300:	2b03      	cmp	r3, #3
 8045302:	d017      	beq.n	8045334 <__gethex+0x39c>
 8045304:	2b01      	cmp	r3, #1
 8045306:	d109      	bne.n	804531c <__gethex+0x384>
 8045308:	f01a 0f02 	tst.w	sl, #2
 804530c:	d006      	beq.n	804531c <__gethex+0x384>
 804530e:	f8d9 0000 	ldr.w	r0, [r9]
 8045312:	ea4a 0a00 	orr.w	sl, sl, r0
 8045316:	f01a 0f01 	tst.w	sl, #1
 804531a:	d10e      	bne.n	804533a <__gethex+0x3a2>
 804531c:	f047 0710 	orr.w	r7, r7, #16
 8045320:	e033      	b.n	804538a <__gethex+0x3f2>
 8045322:	f04f 0a01 	mov.w	sl, #1
 8045326:	e7cf      	b.n	80452c8 <__gethex+0x330>
 8045328:	2701      	movs	r7, #1
 804532a:	e7e2      	b.n	80452f2 <__gethex+0x35a>
 804532c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 804532e:	f1c3 0301 	rsb	r3, r3, #1
 8045332:	9315      	str	r3, [sp, #84]	; 0x54
 8045334:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8045336:	2b00      	cmp	r3, #0
 8045338:	d0f0      	beq.n	804531c <__gethex+0x384>
 804533a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 804533e:	f104 0314 	add.w	r3, r4, #20
 8045342:	f04f 0c00 	mov.w	ip, #0
 8045346:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 804534a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 804534e:	4618      	mov	r0, r3
 8045350:	f853 2b04 	ldr.w	r2, [r3], #4
 8045354:	f1b2 3fff 	cmp.w	r2, #4294967295
 8045358:	d01c      	beq.n	8045394 <__gethex+0x3fc>
 804535a:	3201      	adds	r2, #1
 804535c:	6002      	str	r2, [r0, #0]
 804535e:	2f02      	cmp	r7, #2
 8045360:	f104 0314 	add.w	r3, r4, #20
 8045364:	d13f      	bne.n	80453e6 <__gethex+0x44e>
 8045366:	f8d8 2000 	ldr.w	r2, [r8]
 804536a:	3a01      	subs	r2, #1
 804536c:	42b2      	cmp	r2, r6
 804536e:	d10a      	bne.n	8045386 <__gethex+0x3ee>
 8045370:	1171      	asrs	r1, r6, #5
 8045372:	2201      	movs	r2, #1
 8045374:	f006 061f 	and.w	r6, r6, #31
 8045378:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 804537c:	fa02 f606 	lsl.w	r6, r2, r6
 8045380:	421e      	tst	r6, r3
 8045382:	bf18      	it	ne
 8045384:	4617      	movne	r7, r2
 8045386:	f047 0720 	orr.w	r7, r7, #32
 804538a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 804538c:	601c      	str	r4, [r3, #0]
 804538e:	9b04      	ldr	r3, [sp, #16]
 8045390:	601d      	str	r5, [r3, #0]
 8045392:	e695      	b.n	80450c0 <__gethex+0x128>
 8045394:	4299      	cmp	r1, r3
 8045396:	f843 cc04 	str.w	ip, [r3, #-4]
 804539a:	d8d8      	bhi.n	804534e <__gethex+0x3b6>
 804539c:	68a3      	ldr	r3, [r4, #8]
 804539e:	459b      	cmp	fp, r3
 80453a0:	db19      	blt.n	80453d6 <__gethex+0x43e>
 80453a2:	6861      	ldr	r1, [r4, #4]
 80453a4:	ee18 0a10 	vmov	r0, s16
 80453a8:	3101      	adds	r1, #1
 80453aa:	f000 f91b 	bl	80455e4 <_Balloc>
 80453ae:	4681      	mov	r9, r0
 80453b0:	b918      	cbnz	r0, 80453ba <__gethex+0x422>
 80453b2:	4b1b      	ldr	r3, [pc, #108]	; (8045420 <__gethex+0x488>)
 80453b4:	4602      	mov	r2, r0
 80453b6:	2184      	movs	r1, #132	; 0x84
 80453b8:	e6a8      	b.n	804510c <__gethex+0x174>
 80453ba:	6922      	ldr	r2, [r4, #16]
 80453bc:	f104 010c 	add.w	r1, r4, #12
 80453c0:	300c      	adds	r0, #12
 80453c2:	3202      	adds	r2, #2
 80453c4:	0092      	lsls	r2, r2, #2
 80453c6:	f7fe fe31 	bl	804402c <memcpy>
 80453ca:	4621      	mov	r1, r4
 80453cc:	464c      	mov	r4, r9
 80453ce:	ee18 0a10 	vmov	r0, s16
 80453d2:	f000 f947 	bl	8045664 <_Bfree>
 80453d6:	6923      	ldr	r3, [r4, #16]
 80453d8:	1c5a      	adds	r2, r3, #1
 80453da:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80453de:	6122      	str	r2, [r4, #16]
 80453e0:	2201      	movs	r2, #1
 80453e2:	615a      	str	r2, [r3, #20]
 80453e4:	e7bb      	b.n	804535e <__gethex+0x3c6>
 80453e6:	6922      	ldr	r2, [r4, #16]
 80453e8:	455a      	cmp	r2, fp
 80453ea:	dd0b      	ble.n	8045404 <__gethex+0x46c>
 80453ec:	2101      	movs	r1, #1
 80453ee:	4620      	mov	r0, r4
 80453f0:	f7ff fd6c 	bl	8044ecc <rshift>
 80453f4:	3501      	adds	r5, #1
 80453f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80453fa:	42ab      	cmp	r3, r5
 80453fc:	f6ff aed0 	blt.w	80451a0 <__gethex+0x208>
 8045400:	2701      	movs	r7, #1
 8045402:	e7c0      	b.n	8045386 <__gethex+0x3ee>
 8045404:	f016 061f 	ands.w	r6, r6, #31
 8045408:	d0fa      	beq.n	8045400 <__gethex+0x468>
 804540a:	449a      	add	sl, r3
 804540c:	f1c6 0620 	rsb	r6, r6, #32
 8045410:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8045414:	f000 f9dc 	bl	80457d0 <__hi0bits>
 8045418:	42b0      	cmp	r0, r6
 804541a:	dbe7      	blt.n	80453ec <__gethex+0x454>
 804541c:	e7f0      	b.n	8045400 <__gethex+0x468>
 804541e:	bf00      	nop
 8045420:	08047290 	.word	0x08047290

08045424 <L_shift>:
 8045424:	f1c2 0208 	rsb	r2, r2, #8
 8045428:	0092      	lsls	r2, r2, #2
 804542a:	b570      	push	{r4, r5, r6, lr}
 804542c:	f1c2 0620 	rsb	r6, r2, #32
 8045430:	6843      	ldr	r3, [r0, #4]
 8045432:	6804      	ldr	r4, [r0, #0]
 8045434:	fa03 f506 	lsl.w	r5, r3, r6
 8045438:	40d3      	lsrs	r3, r2
 804543a:	432c      	orrs	r4, r5
 804543c:	6004      	str	r4, [r0, #0]
 804543e:	f840 3f04 	str.w	r3, [r0, #4]!
 8045442:	4288      	cmp	r0, r1
 8045444:	d3f4      	bcc.n	8045430 <L_shift+0xc>
 8045446:	bd70      	pop	{r4, r5, r6, pc}

08045448 <__match>:
 8045448:	6803      	ldr	r3, [r0, #0]
 804544a:	3301      	adds	r3, #1
 804544c:	b530      	push	{r4, r5, lr}
 804544e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8045452:	b914      	cbnz	r4, 804545a <__match+0x12>
 8045454:	6003      	str	r3, [r0, #0]
 8045456:	2001      	movs	r0, #1
 8045458:	bd30      	pop	{r4, r5, pc}
 804545a:	f813 2b01 	ldrb.w	r2, [r3], #1
 804545e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8045462:	2d19      	cmp	r5, #25
 8045464:	bf98      	it	ls
 8045466:	3220      	addls	r2, #32
 8045468:	42a2      	cmp	r2, r4
 804546a:	d0f0      	beq.n	804544e <__match+0x6>
 804546c:	2000      	movs	r0, #0
 804546e:	e7f3      	b.n	8045458 <__match+0x10>

08045470 <__hexnan>:
 8045470:	680b      	ldr	r3, [r1, #0]
 8045472:	6801      	ldr	r1, [r0, #0]
 8045474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8045478:	115e      	asrs	r6, r3, #5
 804547a:	f013 031f 	ands.w	r3, r3, #31
 804547e:	f04f 0500 	mov.w	r5, #0
 8045482:	b087      	sub	sp, #28
 8045484:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8045488:	4682      	mov	sl, r0
 804548a:	4690      	mov	r8, r2
 804548c:	46ab      	mov	fp, r5
 804548e:	bf18      	it	ne
 8045490:	3604      	addne	r6, #4
 8045492:	9301      	str	r3, [sp, #4]
 8045494:	9502      	str	r5, [sp, #8]
 8045496:	1f37      	subs	r7, r6, #4
 8045498:	f846 5c04 	str.w	r5, [r6, #-4]
 804549c:	46b9      	mov	r9, r7
 804549e:	463c      	mov	r4, r7
 80454a0:	1c4b      	adds	r3, r1, #1
 80454a2:	784a      	ldrb	r2, [r1, #1]
 80454a4:	9303      	str	r3, [sp, #12]
 80454a6:	b342      	cbz	r2, 80454fa <__hexnan+0x8a>
 80454a8:	4610      	mov	r0, r2
 80454aa:	9105      	str	r1, [sp, #20]
 80454ac:	9204      	str	r2, [sp, #16]
 80454ae:	f7ff fd5e 	bl	8044f6e <__hexdig_fun>
 80454b2:	2800      	cmp	r0, #0
 80454b4:	d14f      	bne.n	8045556 <__hexnan+0xe6>
 80454b6:	9a04      	ldr	r2, [sp, #16]
 80454b8:	9905      	ldr	r1, [sp, #20]
 80454ba:	2a20      	cmp	r2, #32
 80454bc:	d818      	bhi.n	80454f0 <__hexnan+0x80>
 80454be:	9b02      	ldr	r3, [sp, #8]
 80454c0:	459b      	cmp	fp, r3
 80454c2:	dd13      	ble.n	80454ec <__hexnan+0x7c>
 80454c4:	454c      	cmp	r4, r9
 80454c6:	d206      	bcs.n	80454d6 <__hexnan+0x66>
 80454c8:	2d07      	cmp	r5, #7
 80454ca:	dc04      	bgt.n	80454d6 <__hexnan+0x66>
 80454cc:	462a      	mov	r2, r5
 80454ce:	4649      	mov	r1, r9
 80454d0:	4620      	mov	r0, r4
 80454d2:	f7ff ffa7 	bl	8045424 <L_shift>
 80454d6:	4544      	cmp	r4, r8
 80454d8:	d94f      	bls.n	804557a <__hexnan+0x10a>
 80454da:	2300      	movs	r3, #0
 80454dc:	f1a4 0904 	sub.w	r9, r4, #4
 80454e0:	f8cd b008 	str.w	fp, [sp, #8]
 80454e4:	f844 3c04 	str.w	r3, [r4, #-4]
 80454e8:	461d      	mov	r5, r3
 80454ea:	464c      	mov	r4, r9
 80454ec:	9903      	ldr	r1, [sp, #12]
 80454ee:	e7d7      	b.n	80454a0 <__hexnan+0x30>
 80454f0:	2a29      	cmp	r2, #41	; 0x29
 80454f2:	d155      	bne.n	80455a0 <__hexnan+0x130>
 80454f4:	3102      	adds	r1, #2
 80454f6:	f8ca 1000 	str.w	r1, [sl]
 80454fa:	f1bb 0f00 	cmp.w	fp, #0
 80454fe:	d04f      	beq.n	80455a0 <__hexnan+0x130>
 8045500:	454c      	cmp	r4, r9
 8045502:	d206      	bcs.n	8045512 <__hexnan+0xa2>
 8045504:	2d07      	cmp	r5, #7
 8045506:	dc04      	bgt.n	8045512 <__hexnan+0xa2>
 8045508:	462a      	mov	r2, r5
 804550a:	4649      	mov	r1, r9
 804550c:	4620      	mov	r0, r4
 804550e:	f7ff ff89 	bl	8045424 <L_shift>
 8045512:	4544      	cmp	r4, r8
 8045514:	d933      	bls.n	804557e <__hexnan+0x10e>
 8045516:	f1a8 0204 	sub.w	r2, r8, #4
 804551a:	4623      	mov	r3, r4
 804551c:	f853 1b04 	ldr.w	r1, [r3], #4
 8045520:	429f      	cmp	r7, r3
 8045522:	f842 1f04 	str.w	r1, [r2, #4]!
 8045526:	d2f9      	bcs.n	804551c <__hexnan+0xac>
 8045528:	1b3b      	subs	r3, r7, r4
 804552a:	3e03      	subs	r6, #3
 804552c:	3401      	adds	r4, #1
 804552e:	2200      	movs	r2, #0
 8045530:	f023 0303 	bic.w	r3, r3, #3
 8045534:	3304      	adds	r3, #4
 8045536:	42b4      	cmp	r4, r6
 8045538:	bf88      	it	hi
 804553a:	2304      	movhi	r3, #4
 804553c:	4443      	add	r3, r8
 804553e:	f843 2b04 	str.w	r2, [r3], #4
 8045542:	429f      	cmp	r7, r3
 8045544:	d2fb      	bcs.n	804553e <__hexnan+0xce>
 8045546:	683b      	ldr	r3, [r7, #0]
 8045548:	b91b      	cbnz	r3, 8045552 <__hexnan+0xe2>
 804554a:	4547      	cmp	r7, r8
 804554c:	d126      	bne.n	804559c <__hexnan+0x12c>
 804554e:	2301      	movs	r3, #1
 8045550:	603b      	str	r3, [r7, #0]
 8045552:	2005      	movs	r0, #5
 8045554:	e025      	b.n	80455a2 <__hexnan+0x132>
 8045556:	3501      	adds	r5, #1
 8045558:	f10b 0b01 	add.w	fp, fp, #1
 804555c:	2d08      	cmp	r5, #8
 804555e:	dd05      	ble.n	804556c <__hexnan+0xfc>
 8045560:	4544      	cmp	r4, r8
 8045562:	d9c3      	bls.n	80454ec <__hexnan+0x7c>
 8045564:	2300      	movs	r3, #0
 8045566:	3c04      	subs	r4, #4
 8045568:	2501      	movs	r5, #1
 804556a:	6023      	str	r3, [r4, #0]
 804556c:	6822      	ldr	r2, [r4, #0]
 804556e:	f000 000f 	and.w	r0, r0, #15
 8045572:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8045576:	6022      	str	r2, [r4, #0]
 8045578:	e7b8      	b.n	80454ec <__hexnan+0x7c>
 804557a:	2508      	movs	r5, #8
 804557c:	e7b6      	b.n	80454ec <__hexnan+0x7c>
 804557e:	9b01      	ldr	r3, [sp, #4]
 8045580:	2b00      	cmp	r3, #0
 8045582:	d0e0      	beq.n	8045546 <__hexnan+0xd6>
 8045584:	f04f 32ff 	mov.w	r2, #4294967295
 8045588:	f1c3 0320 	rsb	r3, r3, #32
 804558c:	fa22 f303 	lsr.w	r3, r2, r3
 8045590:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8045594:	401a      	ands	r2, r3
 8045596:	f846 2c04 	str.w	r2, [r6, #-4]
 804559a:	e7d4      	b.n	8045546 <__hexnan+0xd6>
 804559c:	3f04      	subs	r7, #4
 804559e:	e7d2      	b.n	8045546 <__hexnan+0xd6>
 80455a0:	2004      	movs	r0, #4
 80455a2:	b007      	add	sp, #28
 80455a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080455a8 <__ascii_mbtowc>:
 80455a8:	b082      	sub	sp, #8
 80455aa:	b901      	cbnz	r1, 80455ae <__ascii_mbtowc+0x6>
 80455ac:	a901      	add	r1, sp, #4
 80455ae:	b142      	cbz	r2, 80455c2 <__ascii_mbtowc+0x1a>
 80455b0:	b14b      	cbz	r3, 80455c6 <__ascii_mbtowc+0x1e>
 80455b2:	7813      	ldrb	r3, [r2, #0]
 80455b4:	600b      	str	r3, [r1, #0]
 80455b6:	7812      	ldrb	r2, [r2, #0]
 80455b8:	1e10      	subs	r0, r2, #0
 80455ba:	bf18      	it	ne
 80455bc:	2001      	movne	r0, #1
 80455be:	b002      	add	sp, #8
 80455c0:	4770      	bx	lr
 80455c2:	4610      	mov	r0, r2
 80455c4:	e7fb      	b.n	80455be <__ascii_mbtowc+0x16>
 80455c6:	f06f 0001 	mvn.w	r0, #1
 80455ca:	e7f8      	b.n	80455be <__ascii_mbtowc+0x16>

080455cc <__malloc_lock>:
 80455cc:	4801      	ldr	r0, [pc, #4]	; (80455d4 <__malloc_lock+0x8>)
 80455ce:	f001 b814 	b.w	80465fa <__retarget_lock_acquire_recursive>
 80455d2:	bf00      	nop
 80455d4:	20018304 	.word	0x20018304

080455d8 <__malloc_unlock>:
 80455d8:	4801      	ldr	r0, [pc, #4]	; (80455e0 <__malloc_unlock+0x8>)
 80455da:	f001 b80f 	b.w	80465fc <__retarget_lock_release_recursive>
 80455de:	bf00      	nop
 80455e0:	20018304 	.word	0x20018304

080455e4 <_Balloc>:
 80455e4:	b570      	push	{r4, r5, r6, lr}
 80455e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80455e8:	4604      	mov	r4, r0
 80455ea:	460d      	mov	r5, r1
 80455ec:	b976      	cbnz	r6, 804560c <_Balloc+0x28>
 80455ee:	2010      	movs	r0, #16
 80455f0:	f7fe fd14 	bl	804401c <malloc>
 80455f4:	4602      	mov	r2, r0
 80455f6:	6260      	str	r0, [r4, #36]	; 0x24
 80455f8:	b920      	cbnz	r0, 8045604 <_Balloc+0x20>
 80455fa:	4b18      	ldr	r3, [pc, #96]	; (804565c <_Balloc+0x78>)
 80455fc:	2166      	movs	r1, #102	; 0x66
 80455fe:	4818      	ldr	r0, [pc, #96]	; (8045660 <_Balloc+0x7c>)
 8045600:	f000 ffca 	bl	8046598 <__assert_func>
 8045604:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8045608:	6006      	str	r6, [r0, #0]
 804560a:	60c6      	str	r6, [r0, #12]
 804560c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 804560e:	68f3      	ldr	r3, [r6, #12]
 8045610:	b183      	cbz	r3, 8045634 <_Balloc+0x50>
 8045612:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8045614:	68db      	ldr	r3, [r3, #12]
 8045616:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 804561a:	b9b8      	cbnz	r0, 804564c <_Balloc+0x68>
 804561c:	2101      	movs	r1, #1
 804561e:	4620      	mov	r0, r4
 8045620:	fa01 f605 	lsl.w	r6, r1, r5
 8045624:	1d72      	adds	r2, r6, #5
 8045626:	0092      	lsls	r2, r2, #2
 8045628:	f7fe fd2f 	bl	804408a <_calloc_r>
 804562c:	b160      	cbz	r0, 8045648 <_Balloc+0x64>
 804562e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8045632:	e00e      	b.n	8045652 <_Balloc+0x6e>
 8045634:	2221      	movs	r2, #33	; 0x21
 8045636:	2104      	movs	r1, #4
 8045638:	4620      	mov	r0, r4
 804563a:	f7fe fd26 	bl	804408a <_calloc_r>
 804563e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8045640:	60f0      	str	r0, [r6, #12]
 8045642:	68db      	ldr	r3, [r3, #12]
 8045644:	2b00      	cmp	r3, #0
 8045646:	d1e4      	bne.n	8045612 <_Balloc+0x2e>
 8045648:	2000      	movs	r0, #0
 804564a:	bd70      	pop	{r4, r5, r6, pc}
 804564c:	6802      	ldr	r2, [r0, #0]
 804564e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8045652:	2300      	movs	r3, #0
 8045654:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8045658:	e7f7      	b.n	804564a <_Balloc+0x66>
 804565a:	bf00      	nop
 804565c:	08047320 	.word	0x08047320
 8045660:	08047337 	.word	0x08047337

08045664 <_Bfree>:
 8045664:	b570      	push	{r4, r5, r6, lr}
 8045666:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8045668:	4605      	mov	r5, r0
 804566a:	460c      	mov	r4, r1
 804566c:	b976      	cbnz	r6, 804568c <_Bfree+0x28>
 804566e:	2010      	movs	r0, #16
 8045670:	f7fe fcd4 	bl	804401c <malloc>
 8045674:	4602      	mov	r2, r0
 8045676:	6268      	str	r0, [r5, #36]	; 0x24
 8045678:	b920      	cbnz	r0, 8045684 <_Bfree+0x20>
 804567a:	4b09      	ldr	r3, [pc, #36]	; (80456a0 <_Bfree+0x3c>)
 804567c:	218a      	movs	r1, #138	; 0x8a
 804567e:	4809      	ldr	r0, [pc, #36]	; (80456a4 <_Bfree+0x40>)
 8045680:	f000 ff8a 	bl	8046598 <__assert_func>
 8045684:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8045688:	6006      	str	r6, [r0, #0]
 804568a:	60c6      	str	r6, [r0, #12]
 804568c:	b13c      	cbz	r4, 804569e <_Bfree+0x3a>
 804568e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8045690:	6862      	ldr	r2, [r4, #4]
 8045692:	68db      	ldr	r3, [r3, #12]
 8045694:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8045698:	6021      	str	r1, [r4, #0]
 804569a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 804569e:	bd70      	pop	{r4, r5, r6, pc}
 80456a0:	08047320 	.word	0x08047320
 80456a4:	08047337 	.word	0x08047337

080456a8 <__multadd>:
 80456a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80456ac:	4607      	mov	r7, r0
 80456ae:	4698      	mov	r8, r3
 80456b0:	460c      	mov	r4, r1
 80456b2:	690e      	ldr	r6, [r1, #16]
 80456b4:	f101 0014 	add.w	r0, r1, #20
 80456b8:	2300      	movs	r3, #0
 80456ba:	6805      	ldr	r5, [r0, #0]
 80456bc:	3301      	adds	r3, #1
 80456be:	b2a9      	uxth	r1, r5
 80456c0:	429e      	cmp	r6, r3
 80456c2:	ea4f 4515 	mov.w	r5, r5, lsr #16
 80456c6:	fb02 8101 	mla	r1, r2, r1, r8
 80456ca:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80456ce:	b289      	uxth	r1, r1
 80456d0:	fb02 c505 	mla	r5, r2, r5, ip
 80456d4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80456d8:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80456dc:	f840 1b04 	str.w	r1, [r0], #4
 80456e0:	dceb      	bgt.n	80456ba <__multadd+0x12>
 80456e2:	f1b8 0f00 	cmp.w	r8, #0
 80456e6:	d022      	beq.n	804572e <__multadd+0x86>
 80456e8:	68a3      	ldr	r3, [r4, #8]
 80456ea:	42b3      	cmp	r3, r6
 80456ec:	dc19      	bgt.n	8045722 <__multadd+0x7a>
 80456ee:	6861      	ldr	r1, [r4, #4]
 80456f0:	4638      	mov	r0, r7
 80456f2:	3101      	adds	r1, #1
 80456f4:	f7ff ff76 	bl	80455e4 <_Balloc>
 80456f8:	4605      	mov	r5, r0
 80456fa:	b928      	cbnz	r0, 8045708 <__multadd+0x60>
 80456fc:	4602      	mov	r2, r0
 80456fe:	4b0d      	ldr	r3, [pc, #52]	; (8045734 <__multadd+0x8c>)
 8045700:	21b5      	movs	r1, #181	; 0xb5
 8045702:	480d      	ldr	r0, [pc, #52]	; (8045738 <__multadd+0x90>)
 8045704:	f000 ff48 	bl	8046598 <__assert_func>
 8045708:	6922      	ldr	r2, [r4, #16]
 804570a:	f104 010c 	add.w	r1, r4, #12
 804570e:	300c      	adds	r0, #12
 8045710:	3202      	adds	r2, #2
 8045712:	0092      	lsls	r2, r2, #2
 8045714:	f7fe fc8a 	bl	804402c <memcpy>
 8045718:	4621      	mov	r1, r4
 804571a:	462c      	mov	r4, r5
 804571c:	4638      	mov	r0, r7
 804571e:	f7ff ffa1 	bl	8045664 <_Bfree>
 8045722:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8045726:	3601      	adds	r6, #1
 8045728:	f8c3 8014 	str.w	r8, [r3, #20]
 804572c:	6126      	str	r6, [r4, #16]
 804572e:	4620      	mov	r0, r4
 8045730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8045734:	08047290 	.word	0x08047290
 8045738:	08047337 	.word	0x08047337

0804573c <__s2b>:
 804573c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8045740:	4615      	mov	r5, r2
 8045742:	461f      	mov	r7, r3
 8045744:	2209      	movs	r2, #9
 8045746:	3308      	adds	r3, #8
 8045748:	460c      	mov	r4, r1
 804574a:	4606      	mov	r6, r0
 804574c:	2100      	movs	r1, #0
 804574e:	fb93 f3f2 	sdiv	r3, r3, r2
 8045752:	2201      	movs	r2, #1
 8045754:	429a      	cmp	r2, r3
 8045756:	db09      	blt.n	804576c <__s2b+0x30>
 8045758:	4630      	mov	r0, r6
 804575a:	f7ff ff43 	bl	80455e4 <_Balloc>
 804575e:	b940      	cbnz	r0, 8045772 <__s2b+0x36>
 8045760:	4602      	mov	r2, r0
 8045762:	4b19      	ldr	r3, [pc, #100]	; (80457c8 <__s2b+0x8c>)
 8045764:	21ce      	movs	r1, #206	; 0xce
 8045766:	4819      	ldr	r0, [pc, #100]	; (80457cc <__s2b+0x90>)
 8045768:	f000 ff16 	bl	8046598 <__assert_func>
 804576c:	0052      	lsls	r2, r2, #1
 804576e:	3101      	adds	r1, #1
 8045770:	e7f0      	b.n	8045754 <__s2b+0x18>
 8045772:	9b08      	ldr	r3, [sp, #32]
 8045774:	2d09      	cmp	r5, #9
 8045776:	6143      	str	r3, [r0, #20]
 8045778:	f04f 0301 	mov.w	r3, #1
 804577c:	6103      	str	r3, [r0, #16]
 804577e:	dd16      	ble.n	80457ae <__s2b+0x72>
 8045780:	f104 0909 	add.w	r9, r4, #9
 8045784:	442c      	add	r4, r5
 8045786:	46c8      	mov	r8, r9
 8045788:	f818 3b01 	ldrb.w	r3, [r8], #1
 804578c:	4601      	mov	r1, r0
 804578e:	220a      	movs	r2, #10
 8045790:	4630      	mov	r0, r6
 8045792:	3b30      	subs	r3, #48	; 0x30
 8045794:	f7ff ff88 	bl	80456a8 <__multadd>
 8045798:	45a0      	cmp	r8, r4
 804579a:	d1f5      	bne.n	8045788 <__s2b+0x4c>
 804579c:	f1a5 0408 	sub.w	r4, r5, #8
 80457a0:	444c      	add	r4, r9
 80457a2:	1b2d      	subs	r5, r5, r4
 80457a4:	1963      	adds	r3, r4, r5
 80457a6:	42bb      	cmp	r3, r7
 80457a8:	db04      	blt.n	80457b4 <__s2b+0x78>
 80457aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80457ae:	340a      	adds	r4, #10
 80457b0:	2509      	movs	r5, #9
 80457b2:	e7f6      	b.n	80457a2 <__s2b+0x66>
 80457b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80457b8:	4601      	mov	r1, r0
 80457ba:	220a      	movs	r2, #10
 80457bc:	4630      	mov	r0, r6
 80457be:	3b30      	subs	r3, #48	; 0x30
 80457c0:	f7ff ff72 	bl	80456a8 <__multadd>
 80457c4:	e7ee      	b.n	80457a4 <__s2b+0x68>
 80457c6:	bf00      	nop
 80457c8:	08047290 	.word	0x08047290
 80457cc:	08047337 	.word	0x08047337

080457d0 <__hi0bits>:
 80457d0:	0c03      	lsrs	r3, r0, #16
 80457d2:	041b      	lsls	r3, r3, #16
 80457d4:	b9d3      	cbnz	r3, 804580c <__hi0bits+0x3c>
 80457d6:	0400      	lsls	r0, r0, #16
 80457d8:	2310      	movs	r3, #16
 80457da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80457de:	bf04      	itt	eq
 80457e0:	0200      	lsleq	r0, r0, #8
 80457e2:	3308      	addeq	r3, #8
 80457e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80457e8:	bf04      	itt	eq
 80457ea:	0100      	lsleq	r0, r0, #4
 80457ec:	3304      	addeq	r3, #4
 80457ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80457f2:	bf04      	itt	eq
 80457f4:	0080      	lsleq	r0, r0, #2
 80457f6:	3302      	addeq	r3, #2
 80457f8:	2800      	cmp	r0, #0
 80457fa:	db05      	blt.n	8045808 <__hi0bits+0x38>
 80457fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8045800:	f103 0301 	add.w	r3, r3, #1
 8045804:	bf08      	it	eq
 8045806:	2320      	moveq	r3, #32
 8045808:	4618      	mov	r0, r3
 804580a:	4770      	bx	lr
 804580c:	2300      	movs	r3, #0
 804580e:	e7e4      	b.n	80457da <__hi0bits+0xa>

08045810 <__lo0bits>:
 8045810:	6803      	ldr	r3, [r0, #0]
 8045812:	4601      	mov	r1, r0
 8045814:	f013 0207 	ands.w	r2, r3, #7
 8045818:	d00b      	beq.n	8045832 <__lo0bits+0x22>
 804581a:	07da      	lsls	r2, r3, #31
 804581c:	d424      	bmi.n	8045868 <__lo0bits+0x58>
 804581e:	0798      	lsls	r0, r3, #30
 8045820:	bf47      	ittee	mi
 8045822:	085b      	lsrmi	r3, r3, #1
 8045824:	2001      	movmi	r0, #1
 8045826:	089b      	lsrpl	r3, r3, #2
 8045828:	2002      	movpl	r0, #2
 804582a:	bf4c      	ite	mi
 804582c:	600b      	strmi	r3, [r1, #0]
 804582e:	600b      	strpl	r3, [r1, #0]
 8045830:	4770      	bx	lr
 8045832:	b298      	uxth	r0, r3
 8045834:	b9b0      	cbnz	r0, 8045864 <__lo0bits+0x54>
 8045836:	0c1b      	lsrs	r3, r3, #16
 8045838:	2010      	movs	r0, #16
 804583a:	f013 0fff 	tst.w	r3, #255	; 0xff
 804583e:	bf04      	itt	eq
 8045840:	0a1b      	lsreq	r3, r3, #8
 8045842:	3008      	addeq	r0, #8
 8045844:	071a      	lsls	r2, r3, #28
 8045846:	bf04      	itt	eq
 8045848:	091b      	lsreq	r3, r3, #4
 804584a:	3004      	addeq	r0, #4
 804584c:	079a      	lsls	r2, r3, #30
 804584e:	bf04      	itt	eq
 8045850:	089b      	lsreq	r3, r3, #2
 8045852:	3002      	addeq	r0, #2
 8045854:	07da      	lsls	r2, r3, #31
 8045856:	d403      	bmi.n	8045860 <__lo0bits+0x50>
 8045858:	085b      	lsrs	r3, r3, #1
 804585a:	f100 0001 	add.w	r0, r0, #1
 804585e:	d005      	beq.n	804586c <__lo0bits+0x5c>
 8045860:	600b      	str	r3, [r1, #0]
 8045862:	4770      	bx	lr
 8045864:	4610      	mov	r0, r2
 8045866:	e7e8      	b.n	804583a <__lo0bits+0x2a>
 8045868:	2000      	movs	r0, #0
 804586a:	4770      	bx	lr
 804586c:	2020      	movs	r0, #32
 804586e:	4770      	bx	lr

08045870 <__i2b>:
 8045870:	b510      	push	{r4, lr}
 8045872:	460c      	mov	r4, r1
 8045874:	2101      	movs	r1, #1
 8045876:	f7ff feb5 	bl	80455e4 <_Balloc>
 804587a:	4602      	mov	r2, r0
 804587c:	b928      	cbnz	r0, 804588a <__i2b+0x1a>
 804587e:	4b05      	ldr	r3, [pc, #20]	; (8045894 <__i2b+0x24>)
 8045880:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8045884:	4804      	ldr	r0, [pc, #16]	; (8045898 <__i2b+0x28>)
 8045886:	f000 fe87 	bl	8046598 <__assert_func>
 804588a:	2301      	movs	r3, #1
 804588c:	6144      	str	r4, [r0, #20]
 804588e:	6103      	str	r3, [r0, #16]
 8045890:	bd10      	pop	{r4, pc}
 8045892:	bf00      	nop
 8045894:	08047290 	.word	0x08047290
 8045898:	08047337 	.word	0x08047337

0804589c <__multiply>:
 804589c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80458a0:	4614      	mov	r4, r2
 80458a2:	690a      	ldr	r2, [r1, #16]
 80458a4:	460d      	mov	r5, r1
 80458a6:	b085      	sub	sp, #20
 80458a8:	6923      	ldr	r3, [r4, #16]
 80458aa:	429a      	cmp	r2, r3
 80458ac:	bfbe      	ittt	lt
 80458ae:	460b      	movlt	r3, r1
 80458b0:	4625      	movlt	r5, r4
 80458b2:	461c      	movlt	r4, r3
 80458b4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80458b8:	68ab      	ldr	r3, [r5, #8]
 80458ba:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80458be:	6869      	ldr	r1, [r5, #4]
 80458c0:	eb0a 0709 	add.w	r7, sl, r9
 80458c4:	42bb      	cmp	r3, r7
 80458c6:	bfb8      	it	lt
 80458c8:	3101      	addlt	r1, #1
 80458ca:	f7ff fe8b 	bl	80455e4 <_Balloc>
 80458ce:	b930      	cbnz	r0, 80458de <__multiply+0x42>
 80458d0:	4602      	mov	r2, r0
 80458d2:	4b43      	ldr	r3, [pc, #268]	; (80459e0 <__multiply+0x144>)
 80458d4:	f240 115d 	movw	r1, #349	; 0x15d
 80458d8:	4842      	ldr	r0, [pc, #264]	; (80459e4 <__multiply+0x148>)
 80458da:	f000 fe5d 	bl	8046598 <__assert_func>
 80458de:	f100 0614 	add.w	r6, r0, #20
 80458e2:	2200      	movs	r2, #0
 80458e4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80458e8:	4633      	mov	r3, r6
 80458ea:	4543      	cmp	r3, r8
 80458ec:	d31e      	bcc.n	804592c <__multiply+0x90>
 80458ee:	f105 0c14 	add.w	ip, r5, #20
 80458f2:	f104 0314 	add.w	r3, r4, #20
 80458f6:	f105 0115 	add.w	r1, r5, #21
 80458fa:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80458fe:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8045902:	9202      	str	r2, [sp, #8]
 8045904:	ebac 0205 	sub.w	r2, ip, r5
 8045908:	3a15      	subs	r2, #21
 804590a:	f022 0203 	bic.w	r2, r2, #3
 804590e:	3204      	adds	r2, #4
 8045910:	458c      	cmp	ip, r1
 8045912:	bf38      	it	cc
 8045914:	2204      	movcc	r2, #4
 8045916:	9201      	str	r2, [sp, #4]
 8045918:	9a02      	ldr	r2, [sp, #8]
 804591a:	9303      	str	r3, [sp, #12]
 804591c:	429a      	cmp	r2, r3
 804591e:	d808      	bhi.n	8045932 <__multiply+0x96>
 8045920:	2f00      	cmp	r7, #0
 8045922:	dc57      	bgt.n	80459d4 <__multiply+0x138>
 8045924:	6107      	str	r7, [r0, #16]
 8045926:	b005      	add	sp, #20
 8045928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804592c:	f843 2b04 	str.w	r2, [r3], #4
 8045930:	e7db      	b.n	80458ea <__multiply+0x4e>
 8045932:	f8b3 a000 	ldrh.w	sl, [r3]
 8045936:	f1ba 0f00 	cmp.w	sl, #0
 804593a:	d022      	beq.n	8045982 <__multiply+0xe6>
 804593c:	f105 0e14 	add.w	lr, r5, #20
 8045940:	46b1      	mov	r9, r6
 8045942:	2200      	movs	r2, #0
 8045944:	f85e 4b04 	ldr.w	r4, [lr], #4
 8045948:	f8d9 b000 	ldr.w	fp, [r9]
 804594c:	b2a1      	uxth	r1, r4
 804594e:	45f4      	cmp	ip, lr
 8045950:	fa1f fb8b 	uxth.w	fp, fp
 8045954:	ea4f 4414 	mov.w	r4, r4, lsr #16
 8045958:	fb0a b101 	mla	r1, sl, r1, fp
 804595c:	4411      	add	r1, r2
 804595e:	f8d9 2000 	ldr.w	r2, [r9]
 8045962:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8045966:	fb0a 2404 	mla	r4, sl, r4, r2
 804596a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 804596e:	b289      	uxth	r1, r1
 8045970:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8045974:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8045978:	f849 1b04 	str.w	r1, [r9], #4
 804597c:	d8e2      	bhi.n	8045944 <__multiply+0xa8>
 804597e:	9901      	ldr	r1, [sp, #4]
 8045980:	5072      	str	r2, [r6, r1]
 8045982:	9a03      	ldr	r2, [sp, #12]
 8045984:	3304      	adds	r3, #4
 8045986:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 804598a:	f1b9 0f00 	cmp.w	r9, #0
 804598e:	d01f      	beq.n	80459d0 <__multiply+0x134>
 8045990:	6834      	ldr	r4, [r6, #0]
 8045992:	f105 0114 	add.w	r1, r5, #20
 8045996:	46b6      	mov	lr, r6
 8045998:	f04f 0a00 	mov.w	sl, #0
 804599c:	880a      	ldrh	r2, [r1, #0]
 804599e:	b2a4      	uxth	r4, r4
 80459a0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80459a4:	fb09 b202 	mla	r2, r9, r2, fp
 80459a8:	4492      	add	sl, r2
 80459aa:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80459ae:	f84e 4b04 	str.w	r4, [lr], #4
 80459b2:	f851 4b04 	ldr.w	r4, [r1], #4
 80459b6:	f8be 2000 	ldrh.w	r2, [lr]
 80459ba:	0c24      	lsrs	r4, r4, #16
 80459bc:	458c      	cmp	ip, r1
 80459be:	fb09 2404 	mla	r4, r9, r4, r2
 80459c2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80459c6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80459ca:	d8e7      	bhi.n	804599c <__multiply+0x100>
 80459cc:	9a01      	ldr	r2, [sp, #4]
 80459ce:	50b4      	str	r4, [r6, r2]
 80459d0:	3604      	adds	r6, #4
 80459d2:	e7a1      	b.n	8045918 <__multiply+0x7c>
 80459d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80459d8:	2b00      	cmp	r3, #0
 80459da:	d1a3      	bne.n	8045924 <__multiply+0x88>
 80459dc:	3f01      	subs	r7, #1
 80459de:	e79f      	b.n	8045920 <__multiply+0x84>
 80459e0:	08047290 	.word	0x08047290
 80459e4:	08047337 	.word	0x08047337

080459e8 <__pow5mult>:
 80459e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80459ec:	4615      	mov	r5, r2
 80459ee:	f012 0203 	ands.w	r2, r2, #3
 80459f2:	4606      	mov	r6, r0
 80459f4:	460f      	mov	r7, r1
 80459f6:	d007      	beq.n	8045a08 <__pow5mult+0x20>
 80459f8:	3a01      	subs	r2, #1
 80459fa:	4c25      	ldr	r4, [pc, #148]	; (8045a90 <__pow5mult+0xa8>)
 80459fc:	2300      	movs	r3, #0
 80459fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8045a02:	f7ff fe51 	bl	80456a8 <__multadd>
 8045a06:	4607      	mov	r7, r0
 8045a08:	10ad      	asrs	r5, r5, #2
 8045a0a:	d03d      	beq.n	8045a88 <__pow5mult+0xa0>
 8045a0c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8045a0e:	b97c      	cbnz	r4, 8045a30 <__pow5mult+0x48>
 8045a10:	2010      	movs	r0, #16
 8045a12:	f7fe fb03 	bl	804401c <malloc>
 8045a16:	4602      	mov	r2, r0
 8045a18:	6270      	str	r0, [r6, #36]	; 0x24
 8045a1a:	b928      	cbnz	r0, 8045a28 <__pow5mult+0x40>
 8045a1c:	4b1d      	ldr	r3, [pc, #116]	; (8045a94 <__pow5mult+0xac>)
 8045a1e:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8045a22:	481d      	ldr	r0, [pc, #116]	; (8045a98 <__pow5mult+0xb0>)
 8045a24:	f000 fdb8 	bl	8046598 <__assert_func>
 8045a28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8045a2c:	6004      	str	r4, [r0, #0]
 8045a2e:	60c4      	str	r4, [r0, #12]
 8045a30:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8045a34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8045a38:	b94c      	cbnz	r4, 8045a4e <__pow5mult+0x66>
 8045a3a:	f240 2171 	movw	r1, #625	; 0x271
 8045a3e:	4630      	mov	r0, r6
 8045a40:	f7ff ff16 	bl	8045870 <__i2b>
 8045a44:	2300      	movs	r3, #0
 8045a46:	4604      	mov	r4, r0
 8045a48:	f8c8 0008 	str.w	r0, [r8, #8]
 8045a4c:	6003      	str	r3, [r0, #0]
 8045a4e:	f04f 0900 	mov.w	r9, #0
 8045a52:	07eb      	lsls	r3, r5, #31
 8045a54:	d50a      	bpl.n	8045a6c <__pow5mult+0x84>
 8045a56:	4639      	mov	r1, r7
 8045a58:	4622      	mov	r2, r4
 8045a5a:	4630      	mov	r0, r6
 8045a5c:	f7ff ff1e 	bl	804589c <__multiply>
 8045a60:	4680      	mov	r8, r0
 8045a62:	4639      	mov	r1, r7
 8045a64:	4630      	mov	r0, r6
 8045a66:	4647      	mov	r7, r8
 8045a68:	f7ff fdfc 	bl	8045664 <_Bfree>
 8045a6c:	106d      	asrs	r5, r5, #1
 8045a6e:	d00b      	beq.n	8045a88 <__pow5mult+0xa0>
 8045a70:	6820      	ldr	r0, [r4, #0]
 8045a72:	b938      	cbnz	r0, 8045a84 <__pow5mult+0x9c>
 8045a74:	4622      	mov	r2, r4
 8045a76:	4621      	mov	r1, r4
 8045a78:	4630      	mov	r0, r6
 8045a7a:	f7ff ff0f 	bl	804589c <__multiply>
 8045a7e:	6020      	str	r0, [r4, #0]
 8045a80:	f8c0 9000 	str.w	r9, [r0]
 8045a84:	4604      	mov	r4, r0
 8045a86:	e7e4      	b.n	8045a52 <__pow5mult+0x6a>
 8045a88:	4638      	mov	r0, r7
 8045a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8045a8e:	bf00      	nop
 8045a90:	08047488 	.word	0x08047488
 8045a94:	08047320 	.word	0x08047320
 8045a98:	08047337 	.word	0x08047337

08045a9c <__lshift>:
 8045a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8045aa0:	460c      	mov	r4, r1
 8045aa2:	4607      	mov	r7, r0
 8045aa4:	4691      	mov	r9, r2
 8045aa6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8045aaa:	6923      	ldr	r3, [r4, #16]
 8045aac:	6849      	ldr	r1, [r1, #4]
 8045aae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8045ab2:	68a3      	ldr	r3, [r4, #8]
 8045ab4:	f108 0601 	add.w	r6, r8, #1
 8045ab8:	42b3      	cmp	r3, r6
 8045aba:	db0b      	blt.n	8045ad4 <__lshift+0x38>
 8045abc:	4638      	mov	r0, r7
 8045abe:	f7ff fd91 	bl	80455e4 <_Balloc>
 8045ac2:	4605      	mov	r5, r0
 8045ac4:	b948      	cbnz	r0, 8045ada <__lshift+0x3e>
 8045ac6:	4602      	mov	r2, r0
 8045ac8:	4b28      	ldr	r3, [pc, #160]	; (8045b6c <__lshift+0xd0>)
 8045aca:	f240 11d9 	movw	r1, #473	; 0x1d9
 8045ace:	4828      	ldr	r0, [pc, #160]	; (8045b70 <__lshift+0xd4>)
 8045ad0:	f000 fd62 	bl	8046598 <__assert_func>
 8045ad4:	3101      	adds	r1, #1
 8045ad6:	005b      	lsls	r3, r3, #1
 8045ad8:	e7ee      	b.n	8045ab8 <__lshift+0x1c>
 8045ada:	2300      	movs	r3, #0
 8045adc:	f100 0114 	add.w	r1, r0, #20
 8045ae0:	f100 0210 	add.w	r2, r0, #16
 8045ae4:	4618      	mov	r0, r3
 8045ae6:	4553      	cmp	r3, sl
 8045ae8:	db33      	blt.n	8045b52 <__lshift+0xb6>
 8045aea:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8045aee:	f104 0314 	add.w	r3, r4, #20
 8045af2:	6920      	ldr	r0, [r4, #16]
 8045af4:	f019 091f 	ands.w	r9, r9, #31
 8045af8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8045afc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8045b00:	d02b      	beq.n	8045b5a <__lshift+0xbe>
 8045b02:	f1c9 0e20 	rsb	lr, r9, #32
 8045b06:	468a      	mov	sl, r1
 8045b08:	2200      	movs	r2, #0
 8045b0a:	6818      	ldr	r0, [r3, #0]
 8045b0c:	fa00 f009 	lsl.w	r0, r0, r9
 8045b10:	4302      	orrs	r2, r0
 8045b12:	f84a 2b04 	str.w	r2, [sl], #4
 8045b16:	f853 2b04 	ldr.w	r2, [r3], #4
 8045b1a:	459c      	cmp	ip, r3
 8045b1c:	fa22 f20e 	lsr.w	r2, r2, lr
 8045b20:	d8f3      	bhi.n	8045b0a <__lshift+0x6e>
 8045b22:	ebac 0304 	sub.w	r3, ip, r4
 8045b26:	f104 0015 	add.w	r0, r4, #21
 8045b2a:	3b15      	subs	r3, #21
 8045b2c:	f023 0303 	bic.w	r3, r3, #3
 8045b30:	3304      	adds	r3, #4
 8045b32:	4584      	cmp	ip, r0
 8045b34:	bf38      	it	cc
 8045b36:	2304      	movcc	r3, #4
 8045b38:	50ca      	str	r2, [r1, r3]
 8045b3a:	b10a      	cbz	r2, 8045b40 <__lshift+0xa4>
 8045b3c:	f108 0602 	add.w	r6, r8, #2
 8045b40:	3e01      	subs	r6, #1
 8045b42:	4638      	mov	r0, r7
 8045b44:	4621      	mov	r1, r4
 8045b46:	612e      	str	r6, [r5, #16]
 8045b48:	f7ff fd8c 	bl	8045664 <_Bfree>
 8045b4c:	4628      	mov	r0, r5
 8045b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8045b52:	3301      	adds	r3, #1
 8045b54:	f842 0f04 	str.w	r0, [r2, #4]!
 8045b58:	e7c5      	b.n	8045ae6 <__lshift+0x4a>
 8045b5a:	3904      	subs	r1, #4
 8045b5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8045b60:	459c      	cmp	ip, r3
 8045b62:	f841 2f04 	str.w	r2, [r1, #4]!
 8045b66:	d8f9      	bhi.n	8045b5c <__lshift+0xc0>
 8045b68:	e7ea      	b.n	8045b40 <__lshift+0xa4>
 8045b6a:	bf00      	nop
 8045b6c:	08047290 	.word	0x08047290
 8045b70:	08047337 	.word	0x08047337

08045b74 <__mcmp>:
 8045b74:	6902      	ldr	r2, [r0, #16]
 8045b76:	b530      	push	{r4, r5, lr}
 8045b78:	690c      	ldr	r4, [r1, #16]
 8045b7a:	1b12      	subs	r2, r2, r4
 8045b7c:	d10e      	bne.n	8045b9c <__mcmp+0x28>
 8045b7e:	f100 0314 	add.w	r3, r0, #20
 8045b82:	3114      	adds	r1, #20
 8045b84:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8045b88:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8045b8c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8045b90:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8045b94:	42a5      	cmp	r5, r4
 8045b96:	d003      	beq.n	8045ba0 <__mcmp+0x2c>
 8045b98:	d305      	bcc.n	8045ba6 <__mcmp+0x32>
 8045b9a:	2201      	movs	r2, #1
 8045b9c:	4610      	mov	r0, r2
 8045b9e:	bd30      	pop	{r4, r5, pc}
 8045ba0:	4283      	cmp	r3, r0
 8045ba2:	d3f3      	bcc.n	8045b8c <__mcmp+0x18>
 8045ba4:	e7fa      	b.n	8045b9c <__mcmp+0x28>
 8045ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8045baa:	e7f7      	b.n	8045b9c <__mcmp+0x28>

08045bac <__mdiff>:
 8045bac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8045bb0:	460c      	mov	r4, r1
 8045bb2:	4606      	mov	r6, r0
 8045bb4:	4611      	mov	r1, r2
 8045bb6:	4692      	mov	sl, r2
 8045bb8:	4620      	mov	r0, r4
 8045bba:	f7ff ffdb 	bl	8045b74 <__mcmp>
 8045bbe:	1e05      	subs	r5, r0, #0
 8045bc0:	d110      	bne.n	8045be4 <__mdiff+0x38>
 8045bc2:	4629      	mov	r1, r5
 8045bc4:	4630      	mov	r0, r6
 8045bc6:	f7ff fd0d 	bl	80455e4 <_Balloc>
 8045bca:	b930      	cbnz	r0, 8045bda <__mdiff+0x2e>
 8045bcc:	4b3d      	ldr	r3, [pc, #244]	; (8045cc4 <__mdiff+0x118>)
 8045bce:	4602      	mov	r2, r0
 8045bd0:	f240 2132 	movw	r1, #562	; 0x232
 8045bd4:	483c      	ldr	r0, [pc, #240]	; (8045cc8 <__mdiff+0x11c>)
 8045bd6:	f000 fcdf 	bl	8046598 <__assert_func>
 8045bda:	2301      	movs	r3, #1
 8045bdc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8045be0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8045be4:	bfa4      	itt	ge
 8045be6:	4653      	movge	r3, sl
 8045be8:	46a2      	movge	sl, r4
 8045bea:	4630      	mov	r0, r6
 8045bec:	bfa8      	it	ge
 8045bee:	2500      	movge	r5, #0
 8045bf0:	f8da 1004 	ldr.w	r1, [sl, #4]
 8045bf4:	bfac      	ite	ge
 8045bf6:	461c      	movge	r4, r3
 8045bf8:	2501      	movlt	r5, #1
 8045bfa:	f7ff fcf3 	bl	80455e4 <_Balloc>
 8045bfe:	b920      	cbnz	r0, 8045c0a <__mdiff+0x5e>
 8045c00:	4b30      	ldr	r3, [pc, #192]	; (8045cc4 <__mdiff+0x118>)
 8045c02:	4602      	mov	r2, r0
 8045c04:	f44f 7110 	mov.w	r1, #576	; 0x240
 8045c08:	e7e4      	b.n	8045bd4 <__mdiff+0x28>
 8045c0a:	f8da 7010 	ldr.w	r7, [sl, #16]
 8045c0e:	f104 0914 	add.w	r9, r4, #20
 8045c12:	6926      	ldr	r6, [r4, #16]
 8045c14:	f100 0814 	add.w	r8, r0, #20
 8045c18:	60c5      	str	r5, [r0, #12]
 8045c1a:	f10a 0514 	add.w	r5, sl, #20
 8045c1e:	f10a 0210 	add.w	r2, sl, #16
 8045c22:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8045c26:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8045c2a:	46c2      	mov	sl, r8
 8045c2c:	f04f 0c00 	mov.w	ip, #0
 8045c30:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8045c34:	f859 3b04 	ldr.w	r3, [r9], #4
 8045c38:	fa1f f18b 	uxth.w	r1, fp
 8045c3c:	454e      	cmp	r6, r9
 8045c3e:	4461      	add	r1, ip
 8045c40:	fa1f fc83 	uxth.w	ip, r3
 8045c44:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8045c48:	eba1 010c 	sub.w	r1, r1, ip
 8045c4c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8045c50:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8045c54:	b289      	uxth	r1, r1
 8045c56:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8045c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8045c5e:	f84a 3b04 	str.w	r3, [sl], #4
 8045c62:	d8e5      	bhi.n	8045c30 <__mdiff+0x84>
 8045c64:	1b33      	subs	r3, r6, r4
 8045c66:	3415      	adds	r4, #21
 8045c68:	3b15      	subs	r3, #21
 8045c6a:	f023 0303 	bic.w	r3, r3, #3
 8045c6e:	3304      	adds	r3, #4
 8045c70:	42a6      	cmp	r6, r4
 8045c72:	bf38      	it	cc
 8045c74:	2304      	movcc	r3, #4
 8045c76:	441d      	add	r5, r3
 8045c78:	4443      	add	r3, r8
 8045c7a:	462c      	mov	r4, r5
 8045c7c:	461e      	mov	r6, r3
 8045c7e:	4574      	cmp	r4, lr
 8045c80:	d30e      	bcc.n	8045ca0 <__mdiff+0xf4>
 8045c82:	f10e 0203 	add.w	r2, lr, #3
 8045c86:	1b52      	subs	r2, r2, r5
 8045c88:	3d03      	subs	r5, #3
 8045c8a:	f022 0203 	bic.w	r2, r2, #3
 8045c8e:	45ae      	cmp	lr, r5
 8045c90:	bf38      	it	cc
 8045c92:	2200      	movcc	r2, #0
 8045c94:	441a      	add	r2, r3
 8045c96:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8045c9a:	b18b      	cbz	r3, 8045cc0 <__mdiff+0x114>
 8045c9c:	6107      	str	r7, [r0, #16]
 8045c9e:	e79f      	b.n	8045be0 <__mdiff+0x34>
 8045ca0:	f854 8b04 	ldr.w	r8, [r4], #4
 8045ca4:	fa1f f288 	uxth.w	r2, r8
 8045ca8:	4462      	add	r2, ip
 8045caa:	1411      	asrs	r1, r2, #16
 8045cac:	b292      	uxth	r2, r2
 8045cae:	eb01 4118 	add.w	r1, r1, r8, lsr #16
 8045cb2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8045cb6:	ea4f 4c21 	mov.w	ip, r1, asr #16
 8045cba:	f846 2b04 	str.w	r2, [r6], #4
 8045cbe:	e7de      	b.n	8045c7e <__mdiff+0xd2>
 8045cc0:	3f01      	subs	r7, #1
 8045cc2:	e7e8      	b.n	8045c96 <__mdiff+0xea>
 8045cc4:	08047290 	.word	0x08047290
 8045cc8:	08047337 	.word	0x08047337

08045ccc <__ulp>:
 8045ccc:	b082      	sub	sp, #8
 8045cce:	4913      	ldr	r1, [pc, #76]	; (8045d1c <__ulp+0x50>)
 8045cd0:	ed8d 0b00 	vstr	d0, [sp]
 8045cd4:	9b01      	ldr	r3, [sp, #4]
 8045cd6:	4019      	ands	r1, r3
 8045cd8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8045cdc:	2900      	cmp	r1, #0
 8045cde:	dd05      	ble.n	8045cec <__ulp+0x20>
 8045ce0:	2200      	movs	r2, #0
 8045ce2:	460b      	mov	r3, r1
 8045ce4:	ec43 2b10 	vmov	d0, r2, r3
 8045ce8:	b002      	add	sp, #8
 8045cea:	4770      	bx	lr
 8045cec:	4249      	negs	r1, r1
 8045cee:	2200      	movs	r2, #0
 8045cf0:	2300      	movs	r3, #0
 8045cf2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8045cf6:	ea4f 5021 	mov.w	r0, r1, asr #20
 8045cfa:	da04      	bge.n	8045d06 <__ulp+0x3a>
 8045cfc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8045d00:	fa41 f300 	asr.w	r3, r1, r0
 8045d04:	e7ee      	b.n	8045ce4 <__ulp+0x18>
 8045d06:	f1a0 0114 	sub.w	r1, r0, #20
 8045d0a:	291e      	cmp	r1, #30
 8045d0c:	bfd6      	itet	le
 8045d0e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8045d12:	2101      	movgt	r1, #1
 8045d14:	fa20 f101 	lsrle.w	r1, r0, r1
 8045d18:	460a      	mov	r2, r1
 8045d1a:	e7e3      	b.n	8045ce4 <__ulp+0x18>
 8045d1c:	7ff00000 	.word	0x7ff00000

08045d20 <__b2d>:
 8045d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8045d22:	6905      	ldr	r5, [r0, #16]
 8045d24:	f100 0714 	add.w	r7, r0, #20
 8045d28:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8045d2c:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8045d30:	1f2e      	subs	r6, r5, #4
 8045d32:	4620      	mov	r0, r4
 8045d34:	f7ff fd4c 	bl	80457d0 <__hi0bits>
 8045d38:	f1c0 0320 	rsb	r3, r0, #32
 8045d3c:	280a      	cmp	r0, #10
 8045d3e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8045dbc <__b2d+0x9c>
 8045d42:	600b      	str	r3, [r1, #0]
 8045d44:	dc15      	bgt.n	8045d72 <__b2d+0x52>
 8045d46:	f1c0 0e0b 	rsb	lr, r0, #11
 8045d4a:	42b7      	cmp	r7, r6
 8045d4c:	f100 0015 	add.w	r0, r0, #21
 8045d50:	fa24 f10e 	lsr.w	r1, r4, lr
 8045d54:	fa04 f000 	lsl.w	r0, r4, r0
 8045d58:	ea41 030c 	orr.w	r3, r1, ip
 8045d5c:	bf34      	ite	cc
 8045d5e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8045d62:	2100      	movcs	r1, #0
 8045d64:	fa21 f10e 	lsr.w	r1, r1, lr
 8045d68:	ea40 0201 	orr.w	r2, r0, r1
 8045d6c:	ec43 2b10 	vmov	d0, r2, r3
 8045d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8045d72:	42b7      	cmp	r7, r6
 8045d74:	bf3a      	itte	cc
 8045d76:	f1a5 0608 	subcc.w	r6, r5, #8
 8045d7a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8045d7e:	2100      	movcs	r1, #0
 8045d80:	380b      	subs	r0, #11
 8045d82:	d017      	beq.n	8045db4 <__b2d+0x94>
 8045d84:	f1c0 0c20 	rsb	ip, r0, #32
 8045d88:	fa04 f500 	lsl.w	r5, r4, r0
 8045d8c:	42be      	cmp	r6, r7
 8045d8e:	fa01 f000 	lsl.w	r0, r1, r0
 8045d92:	fa21 f40c 	lsr.w	r4, r1, ip
 8045d96:	ea45 0504 	orr.w	r5, r5, r4
 8045d9a:	bf8c      	ite	hi
 8045d9c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8045da0:	2400      	movls	r4, #0
 8045da2:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8045da6:	fa24 f40c 	lsr.w	r4, r4, ip
 8045daa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8045dae:	ea40 0204 	orr.w	r2, r0, r4
 8045db2:	e7db      	b.n	8045d6c <__b2d+0x4c>
 8045db4:	ea44 030c 	orr.w	r3, r4, ip
 8045db8:	460a      	mov	r2, r1
 8045dba:	e7d7      	b.n	8045d6c <__b2d+0x4c>
 8045dbc:	3ff00000 	.word	0x3ff00000

08045dc0 <__d2b>:
 8045dc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8045dc4:	4689      	mov	r9, r1
 8045dc6:	2101      	movs	r1, #1
 8045dc8:	4690      	mov	r8, r2
 8045dca:	ec57 6b10 	vmov	r6, r7, d0
 8045dce:	f7ff fc09 	bl	80455e4 <_Balloc>
 8045dd2:	4604      	mov	r4, r0
 8045dd4:	b930      	cbnz	r0, 8045de4 <__d2b+0x24>
 8045dd6:	4602      	mov	r2, r0
 8045dd8:	4b25      	ldr	r3, [pc, #148]	; (8045e70 <__d2b+0xb0>)
 8045dda:	f240 310a 	movw	r1, #778	; 0x30a
 8045dde:	4825      	ldr	r0, [pc, #148]	; (8045e74 <__d2b+0xb4>)
 8045de0:	f000 fbda 	bl	8046598 <__assert_func>
 8045de4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8045de8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8045dec:	bb35      	cbnz	r5, 8045e3c <__d2b+0x7c>
 8045dee:	2e00      	cmp	r6, #0
 8045df0:	9301      	str	r3, [sp, #4]
 8045df2:	d028      	beq.n	8045e46 <__d2b+0x86>
 8045df4:	4668      	mov	r0, sp
 8045df6:	9600      	str	r6, [sp, #0]
 8045df8:	f7ff fd0a 	bl	8045810 <__lo0bits>
 8045dfc:	9900      	ldr	r1, [sp, #0]
 8045dfe:	b300      	cbz	r0, 8045e42 <__d2b+0x82>
 8045e00:	9a01      	ldr	r2, [sp, #4]
 8045e02:	f1c0 0320 	rsb	r3, r0, #32
 8045e06:	fa02 f303 	lsl.w	r3, r2, r3
 8045e0a:	40c2      	lsrs	r2, r0
 8045e0c:	430b      	orrs	r3, r1
 8045e0e:	9201      	str	r2, [sp, #4]
 8045e10:	6163      	str	r3, [r4, #20]
 8045e12:	9b01      	ldr	r3, [sp, #4]
 8045e14:	2b00      	cmp	r3, #0
 8045e16:	61a3      	str	r3, [r4, #24]
 8045e18:	bf14      	ite	ne
 8045e1a:	2202      	movne	r2, #2
 8045e1c:	2201      	moveq	r2, #1
 8045e1e:	6122      	str	r2, [r4, #16]
 8045e20:	b1d5      	cbz	r5, 8045e58 <__d2b+0x98>
 8045e22:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8045e26:	4405      	add	r5, r0
 8045e28:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8045e2c:	f8c9 5000 	str.w	r5, [r9]
 8045e30:	f8c8 0000 	str.w	r0, [r8]
 8045e34:	4620      	mov	r0, r4
 8045e36:	b003      	add	sp, #12
 8045e38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8045e3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8045e40:	e7d5      	b.n	8045dee <__d2b+0x2e>
 8045e42:	6161      	str	r1, [r4, #20]
 8045e44:	e7e5      	b.n	8045e12 <__d2b+0x52>
 8045e46:	a801      	add	r0, sp, #4
 8045e48:	f7ff fce2 	bl	8045810 <__lo0bits>
 8045e4c:	9b01      	ldr	r3, [sp, #4]
 8045e4e:	2201      	movs	r2, #1
 8045e50:	3020      	adds	r0, #32
 8045e52:	6163      	str	r3, [r4, #20]
 8045e54:	6122      	str	r2, [r4, #16]
 8045e56:	e7e3      	b.n	8045e20 <__d2b+0x60>
 8045e58:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8045e5c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8045e60:	f8c9 0000 	str.w	r0, [r9]
 8045e64:	6918      	ldr	r0, [r3, #16]
 8045e66:	f7ff fcb3 	bl	80457d0 <__hi0bits>
 8045e6a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8045e6e:	e7df      	b.n	8045e30 <__d2b+0x70>
 8045e70:	08047290 	.word	0x08047290
 8045e74:	08047337 	.word	0x08047337

08045e78 <__ratio>:
 8045e78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8045e7c:	4688      	mov	r8, r1
 8045e7e:	4681      	mov	r9, r0
 8045e80:	4669      	mov	r1, sp
 8045e82:	f7ff ff4d 	bl	8045d20 <__b2d>
 8045e86:	a901      	add	r1, sp, #4
 8045e88:	4640      	mov	r0, r8
 8045e8a:	ec55 4b10 	vmov	r4, r5, d0
 8045e8e:	f7ff ff47 	bl	8045d20 <__b2d>
 8045e92:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8045e96:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8045e9a:	462f      	mov	r7, r5
 8045e9c:	eba3 0c02 	sub.w	ip, r3, r2
 8045ea0:	e9dd 3200 	ldrd	r3, r2, [sp]
 8045ea4:	ec51 0b10 	vmov	r0, r1, d0
 8045ea8:	1a9b      	subs	r3, r3, r2
 8045eaa:	468b      	mov	fp, r1
 8045eac:	4620      	mov	r0, r4
 8045eae:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8045eb2:	2b00      	cmp	r3, #0
 8045eb4:	bfd5      	itete	le
 8045eb6:	460a      	movle	r2, r1
 8045eb8:	462a      	movgt	r2, r5
 8045eba:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8045ebe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8045ec2:	bfd8      	it	le
 8045ec4:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8045ec8:	ee10 2a10 	vmov	r2, s0
 8045ecc:	4639      	mov	r1, r7
 8045ece:	465b      	mov	r3, fp
 8045ed0:	f7fa fca0 	bl	8040814 <__aeabi_ddiv>
 8045ed4:	ec41 0b10 	vmov	d0, r0, r1
 8045ed8:	b003      	add	sp, #12
 8045eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08045ede <__copybits>:
 8045ede:	3901      	subs	r1, #1
 8045ee0:	f102 0314 	add.w	r3, r2, #20
 8045ee4:	1149      	asrs	r1, r1, #5
 8045ee6:	b570      	push	{r4, r5, r6, lr}
 8045ee8:	3101      	adds	r1, #1
 8045eea:	6914      	ldr	r4, [r2, #16]
 8045eec:	1f05      	subs	r5, r0, #4
 8045eee:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8045ef2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8045ef6:	42a3      	cmp	r3, r4
 8045ef8:	d30c      	bcc.n	8045f14 <__copybits+0x36>
 8045efa:	1aa3      	subs	r3, r4, r2
 8045efc:	3211      	adds	r2, #17
 8045efe:	3b11      	subs	r3, #17
 8045f00:	f023 0303 	bic.w	r3, r3, #3
 8045f04:	42a2      	cmp	r2, r4
 8045f06:	bf88      	it	hi
 8045f08:	2300      	movhi	r3, #0
 8045f0a:	4418      	add	r0, r3
 8045f0c:	2300      	movs	r3, #0
 8045f0e:	4288      	cmp	r0, r1
 8045f10:	d305      	bcc.n	8045f1e <__copybits+0x40>
 8045f12:	bd70      	pop	{r4, r5, r6, pc}
 8045f14:	f853 6b04 	ldr.w	r6, [r3], #4
 8045f18:	f845 6f04 	str.w	r6, [r5, #4]!
 8045f1c:	e7eb      	b.n	8045ef6 <__copybits+0x18>
 8045f1e:	f840 3b04 	str.w	r3, [r0], #4
 8045f22:	e7f4      	b.n	8045f0e <__copybits+0x30>

08045f24 <__any_on>:
 8045f24:	f100 0214 	add.w	r2, r0, #20
 8045f28:	114b      	asrs	r3, r1, #5
 8045f2a:	6900      	ldr	r0, [r0, #16]
 8045f2c:	4298      	cmp	r0, r3
 8045f2e:	b510      	push	{r4, lr}
 8045f30:	db11      	blt.n	8045f56 <__any_on+0x32>
 8045f32:	dd0a      	ble.n	8045f4a <__any_on+0x26>
 8045f34:	f011 011f 	ands.w	r1, r1, #31
 8045f38:	d007      	beq.n	8045f4a <__any_on+0x26>
 8045f3a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8045f3e:	fa24 f001 	lsr.w	r0, r4, r1
 8045f42:	fa00 f101 	lsl.w	r1, r0, r1
 8045f46:	428c      	cmp	r4, r1
 8045f48:	d10b      	bne.n	8045f62 <__any_on+0x3e>
 8045f4a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8045f4e:	4293      	cmp	r3, r2
 8045f50:	d803      	bhi.n	8045f5a <__any_on+0x36>
 8045f52:	2000      	movs	r0, #0
 8045f54:	bd10      	pop	{r4, pc}
 8045f56:	4603      	mov	r3, r0
 8045f58:	e7f7      	b.n	8045f4a <__any_on+0x26>
 8045f5a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8045f5e:	2900      	cmp	r1, #0
 8045f60:	d0f5      	beq.n	8045f4e <__any_on+0x2a>
 8045f62:	2001      	movs	r0, #1
 8045f64:	e7f6      	b.n	8045f54 <__any_on+0x30>

08045f66 <__ssputs_r>:
 8045f66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8045f6a:	688e      	ldr	r6, [r1, #8]
 8045f6c:	4682      	mov	sl, r0
 8045f6e:	460c      	mov	r4, r1
 8045f70:	4690      	mov	r8, r2
 8045f72:	429e      	cmp	r6, r3
 8045f74:	461f      	mov	r7, r3
 8045f76:	d838      	bhi.n	8045fea <__ssputs_r+0x84>
 8045f78:	898a      	ldrh	r2, [r1, #12]
 8045f7a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8045f7e:	d032      	beq.n	8045fe6 <__ssputs_r+0x80>
 8045f80:	6825      	ldr	r5, [r4, #0]
 8045f82:	3301      	adds	r3, #1
 8045f84:	6909      	ldr	r1, [r1, #16]
 8045f86:	eba5 0901 	sub.w	r9, r5, r1
 8045f8a:	6965      	ldr	r5, [r4, #20]
 8045f8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8045f90:	444b      	add	r3, r9
 8045f92:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8045f96:	106d      	asrs	r5, r5, #1
 8045f98:	429d      	cmp	r5, r3
 8045f9a:	bf38      	it	cc
 8045f9c:	461d      	movcc	r5, r3
 8045f9e:	0553      	lsls	r3, r2, #21
 8045fa0:	d531      	bpl.n	8046006 <__ssputs_r+0xa0>
 8045fa2:	4629      	mov	r1, r5
 8045fa4:	f7fe f8d0 	bl	8044148 <_malloc_r>
 8045fa8:	4606      	mov	r6, r0
 8045faa:	b950      	cbnz	r0, 8045fc2 <__ssputs_r+0x5c>
 8045fac:	230c      	movs	r3, #12
 8045fae:	f04f 30ff 	mov.w	r0, #4294967295
 8045fb2:	f8ca 3000 	str.w	r3, [sl]
 8045fb6:	89a3      	ldrh	r3, [r4, #12]
 8045fb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8045fbc:	81a3      	strh	r3, [r4, #12]
 8045fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8045fc2:	464a      	mov	r2, r9
 8045fc4:	6921      	ldr	r1, [r4, #16]
 8045fc6:	f7fe f831 	bl	804402c <memcpy>
 8045fca:	89a3      	ldrh	r3, [r4, #12]
 8045fcc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8045fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8045fd4:	81a3      	strh	r3, [r4, #12]
 8045fd6:	6126      	str	r6, [r4, #16]
 8045fd8:	444e      	add	r6, r9
 8045fda:	6165      	str	r5, [r4, #20]
 8045fdc:	eba5 0509 	sub.w	r5, r5, r9
 8045fe0:	6026      	str	r6, [r4, #0]
 8045fe2:	463e      	mov	r6, r7
 8045fe4:	60a5      	str	r5, [r4, #8]
 8045fe6:	42be      	cmp	r6, r7
 8045fe8:	d900      	bls.n	8045fec <__ssputs_r+0x86>
 8045fea:	463e      	mov	r6, r7
 8045fec:	4632      	mov	r2, r6
 8045fee:	4641      	mov	r1, r8
 8045ff0:	6820      	ldr	r0, [r4, #0]
 8045ff2:	f7fe f828 	bl	8044046 <memmove>
 8045ff6:	68a3      	ldr	r3, [r4, #8]
 8045ff8:	6822      	ldr	r2, [r4, #0]
 8045ffa:	2000      	movs	r0, #0
 8045ffc:	1b9b      	subs	r3, r3, r6
 8045ffe:	4432      	add	r2, r6
 8046000:	60a3      	str	r3, [r4, #8]
 8046002:	6022      	str	r2, [r4, #0]
 8046004:	e7db      	b.n	8045fbe <__ssputs_r+0x58>
 8046006:	462a      	mov	r2, r5
 8046008:	f000 fb07 	bl	804661a <_realloc_r>
 804600c:	4606      	mov	r6, r0
 804600e:	2800      	cmp	r0, #0
 8046010:	d1e1      	bne.n	8045fd6 <__ssputs_r+0x70>
 8046012:	6921      	ldr	r1, [r4, #16]
 8046014:	4650      	mov	r0, sl
 8046016:	f7fe f847 	bl	80440a8 <_free_r>
 804601a:	e7c7      	b.n	8045fac <__ssputs_r+0x46>

0804601c <_svfiprintf_r>:
 804601c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8046020:	4698      	mov	r8, r3
 8046022:	898b      	ldrh	r3, [r1, #12]
 8046024:	b09d      	sub	sp, #116	; 0x74
 8046026:	4607      	mov	r7, r0
 8046028:	061b      	lsls	r3, r3, #24
 804602a:	460d      	mov	r5, r1
 804602c:	4614      	mov	r4, r2
 804602e:	d50e      	bpl.n	804604e <_svfiprintf_r+0x32>
 8046030:	690b      	ldr	r3, [r1, #16]
 8046032:	b963      	cbnz	r3, 804604e <_svfiprintf_r+0x32>
 8046034:	2140      	movs	r1, #64	; 0x40
 8046036:	f7fe f887 	bl	8044148 <_malloc_r>
 804603a:	6028      	str	r0, [r5, #0]
 804603c:	6128      	str	r0, [r5, #16]
 804603e:	b920      	cbnz	r0, 804604a <_svfiprintf_r+0x2e>
 8046040:	230c      	movs	r3, #12
 8046042:	603b      	str	r3, [r7, #0]
 8046044:	f04f 30ff 	mov.w	r0, #4294967295
 8046048:	e0d1      	b.n	80461ee <_svfiprintf_r+0x1d2>
 804604a:	2340      	movs	r3, #64	; 0x40
 804604c:	616b      	str	r3, [r5, #20]
 804604e:	2300      	movs	r3, #0
 8046050:	f8cd 800c 	str.w	r8, [sp, #12]
 8046054:	f04f 0901 	mov.w	r9, #1
 8046058:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8046208 <_svfiprintf_r+0x1ec>
 804605c:	9309      	str	r3, [sp, #36]	; 0x24
 804605e:	2320      	movs	r3, #32
 8046060:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8046064:	2330      	movs	r3, #48	; 0x30
 8046066:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 804606a:	4623      	mov	r3, r4
 804606c:	469a      	mov	sl, r3
 804606e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8046072:	b10a      	cbz	r2, 8046078 <_svfiprintf_r+0x5c>
 8046074:	2a25      	cmp	r2, #37	; 0x25
 8046076:	d1f9      	bne.n	804606c <_svfiprintf_r+0x50>
 8046078:	ebba 0b04 	subs.w	fp, sl, r4
 804607c:	d00b      	beq.n	8046096 <_svfiprintf_r+0x7a>
 804607e:	465b      	mov	r3, fp
 8046080:	4622      	mov	r2, r4
 8046082:	4629      	mov	r1, r5
 8046084:	4638      	mov	r0, r7
 8046086:	f7ff ff6e 	bl	8045f66 <__ssputs_r>
 804608a:	3001      	adds	r0, #1
 804608c:	f000 80aa 	beq.w	80461e4 <_svfiprintf_r+0x1c8>
 8046090:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8046092:	445a      	add	r2, fp
 8046094:	9209      	str	r2, [sp, #36]	; 0x24
 8046096:	f89a 3000 	ldrb.w	r3, [sl]
 804609a:	2b00      	cmp	r3, #0
 804609c:	f000 80a2 	beq.w	80461e4 <_svfiprintf_r+0x1c8>
 80460a0:	2300      	movs	r3, #0
 80460a2:	f04f 32ff 	mov.w	r2, #4294967295
 80460a6:	f10a 0a01 	add.w	sl, sl, #1
 80460aa:	9304      	str	r3, [sp, #16]
 80460ac:	9307      	str	r3, [sp, #28]
 80460ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80460b2:	931a      	str	r3, [sp, #104]	; 0x68
 80460b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80460b8:	4654      	mov	r4, sl
 80460ba:	2205      	movs	r2, #5
 80460bc:	4852      	ldr	r0, [pc, #328]	; (8046208 <_svfiprintf_r+0x1ec>)
 80460be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80460c2:	f000 fa9c 	bl	80465fe <memchr>
 80460c6:	9a04      	ldr	r2, [sp, #16]
 80460c8:	b9d8      	cbnz	r0, 8046102 <_svfiprintf_r+0xe6>
 80460ca:	06d0      	lsls	r0, r2, #27
 80460cc:	bf44      	itt	mi
 80460ce:	2320      	movmi	r3, #32
 80460d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80460d4:	0711      	lsls	r1, r2, #28
 80460d6:	bf44      	itt	mi
 80460d8:	232b      	movmi	r3, #43	; 0x2b
 80460da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80460de:	f89a 3000 	ldrb.w	r3, [sl]
 80460e2:	2b2a      	cmp	r3, #42	; 0x2a
 80460e4:	d015      	beq.n	8046112 <_svfiprintf_r+0xf6>
 80460e6:	9a07      	ldr	r2, [sp, #28]
 80460e8:	4654      	mov	r4, sl
 80460ea:	2000      	movs	r0, #0
 80460ec:	f04f 0c0a 	mov.w	ip, #10
 80460f0:	4621      	mov	r1, r4
 80460f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80460f6:	3b30      	subs	r3, #48	; 0x30
 80460f8:	2b09      	cmp	r3, #9
 80460fa:	d94e      	bls.n	804619a <_svfiprintf_r+0x17e>
 80460fc:	b1b0      	cbz	r0, 804612c <_svfiprintf_r+0x110>
 80460fe:	9207      	str	r2, [sp, #28]
 8046100:	e014      	b.n	804612c <_svfiprintf_r+0x110>
 8046102:	eba0 0308 	sub.w	r3, r0, r8
 8046106:	46a2      	mov	sl, r4
 8046108:	fa09 f303 	lsl.w	r3, r9, r3
 804610c:	4313      	orrs	r3, r2
 804610e:	9304      	str	r3, [sp, #16]
 8046110:	e7d2      	b.n	80460b8 <_svfiprintf_r+0x9c>
 8046112:	9b03      	ldr	r3, [sp, #12]
 8046114:	1d19      	adds	r1, r3, #4
 8046116:	681b      	ldr	r3, [r3, #0]
 8046118:	2b00      	cmp	r3, #0
 804611a:	9103      	str	r1, [sp, #12]
 804611c:	bfbb      	ittet	lt
 804611e:	425b      	neglt	r3, r3
 8046120:	f042 0202 	orrlt.w	r2, r2, #2
 8046124:	9307      	strge	r3, [sp, #28]
 8046126:	9307      	strlt	r3, [sp, #28]
 8046128:	bfb8      	it	lt
 804612a:	9204      	strlt	r2, [sp, #16]
 804612c:	7823      	ldrb	r3, [r4, #0]
 804612e:	2b2e      	cmp	r3, #46	; 0x2e
 8046130:	d10c      	bne.n	804614c <_svfiprintf_r+0x130>
 8046132:	7863      	ldrb	r3, [r4, #1]
 8046134:	2b2a      	cmp	r3, #42	; 0x2a
 8046136:	d135      	bne.n	80461a4 <_svfiprintf_r+0x188>
 8046138:	9b03      	ldr	r3, [sp, #12]
 804613a:	3402      	adds	r4, #2
 804613c:	1d1a      	adds	r2, r3, #4
 804613e:	681b      	ldr	r3, [r3, #0]
 8046140:	2b00      	cmp	r3, #0
 8046142:	9203      	str	r2, [sp, #12]
 8046144:	bfb8      	it	lt
 8046146:	f04f 33ff 	movlt.w	r3, #4294967295
 804614a:	9305      	str	r3, [sp, #20]
 804614c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8046218 <_svfiprintf_r+0x1fc>
 8046150:	2203      	movs	r2, #3
 8046152:	7821      	ldrb	r1, [r4, #0]
 8046154:	4650      	mov	r0, sl
 8046156:	f000 fa52 	bl	80465fe <memchr>
 804615a:	b140      	cbz	r0, 804616e <_svfiprintf_r+0x152>
 804615c:	2340      	movs	r3, #64	; 0x40
 804615e:	eba0 000a 	sub.w	r0, r0, sl
 8046162:	3401      	adds	r4, #1
 8046164:	fa03 f000 	lsl.w	r0, r3, r0
 8046168:	9b04      	ldr	r3, [sp, #16]
 804616a:	4303      	orrs	r3, r0
 804616c:	9304      	str	r3, [sp, #16]
 804616e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8046172:	2206      	movs	r2, #6
 8046174:	4825      	ldr	r0, [pc, #148]	; (804620c <_svfiprintf_r+0x1f0>)
 8046176:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 804617a:	f000 fa40 	bl	80465fe <memchr>
 804617e:	2800      	cmp	r0, #0
 8046180:	d038      	beq.n	80461f4 <_svfiprintf_r+0x1d8>
 8046182:	4b23      	ldr	r3, [pc, #140]	; (8046210 <_svfiprintf_r+0x1f4>)
 8046184:	bb1b      	cbnz	r3, 80461ce <_svfiprintf_r+0x1b2>
 8046186:	9b03      	ldr	r3, [sp, #12]
 8046188:	3307      	adds	r3, #7
 804618a:	f023 0307 	bic.w	r3, r3, #7
 804618e:	3308      	adds	r3, #8
 8046190:	9303      	str	r3, [sp, #12]
 8046192:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8046194:	4433      	add	r3, r6
 8046196:	9309      	str	r3, [sp, #36]	; 0x24
 8046198:	e767      	b.n	804606a <_svfiprintf_r+0x4e>
 804619a:	fb0c 3202 	mla	r2, ip, r2, r3
 804619e:	460c      	mov	r4, r1
 80461a0:	2001      	movs	r0, #1
 80461a2:	e7a5      	b.n	80460f0 <_svfiprintf_r+0xd4>
 80461a4:	2300      	movs	r3, #0
 80461a6:	3401      	adds	r4, #1
 80461a8:	f04f 0c0a 	mov.w	ip, #10
 80461ac:	4619      	mov	r1, r3
 80461ae:	9305      	str	r3, [sp, #20]
 80461b0:	4620      	mov	r0, r4
 80461b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80461b6:	3a30      	subs	r2, #48	; 0x30
 80461b8:	2a09      	cmp	r2, #9
 80461ba:	d903      	bls.n	80461c4 <_svfiprintf_r+0x1a8>
 80461bc:	2b00      	cmp	r3, #0
 80461be:	d0c5      	beq.n	804614c <_svfiprintf_r+0x130>
 80461c0:	9105      	str	r1, [sp, #20]
 80461c2:	e7c3      	b.n	804614c <_svfiprintf_r+0x130>
 80461c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80461c8:	4604      	mov	r4, r0
 80461ca:	2301      	movs	r3, #1
 80461cc:	e7f0      	b.n	80461b0 <_svfiprintf_r+0x194>
 80461ce:	ab03      	add	r3, sp, #12
 80461d0:	462a      	mov	r2, r5
 80461d2:	a904      	add	r1, sp, #16
 80461d4:	4638      	mov	r0, r7
 80461d6:	9300      	str	r3, [sp, #0]
 80461d8:	4b0e      	ldr	r3, [pc, #56]	; (8046214 <_svfiprintf_r+0x1f8>)
 80461da:	e000      	b.n	80461de <_svfiprintf_r+0x1c2>
 80461dc:	bf00      	nop
 80461de:	1c42      	adds	r2, r0, #1
 80461e0:	4606      	mov	r6, r0
 80461e2:	d1d6      	bne.n	8046192 <_svfiprintf_r+0x176>
 80461e4:	89ab      	ldrh	r3, [r5, #12]
 80461e6:	065b      	lsls	r3, r3, #25
 80461e8:	f53f af2c 	bmi.w	8046044 <_svfiprintf_r+0x28>
 80461ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80461ee:	b01d      	add	sp, #116	; 0x74
 80461f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80461f4:	ab03      	add	r3, sp, #12
 80461f6:	462a      	mov	r2, r5
 80461f8:	a904      	add	r1, sp, #16
 80461fa:	4638      	mov	r0, r7
 80461fc:	9300      	str	r3, [sp, #0]
 80461fe:	4b05      	ldr	r3, [pc, #20]	; (8046214 <_svfiprintf_r+0x1f8>)
 8046200:	f000 f87c 	bl	80462fc <_printf_i>
 8046204:	e7eb      	b.n	80461de <_svfiprintf_r+0x1c2>
 8046206:	bf00      	nop
 8046208:	08047494 	.word	0x08047494
 804620c:	0804749e 	.word	0x0804749e
 8046210:	00000000 	.word	0x00000000
 8046214:	08045f67 	.word	0x08045f67
 8046218:	0804749a 	.word	0x0804749a

0804621c <_printf_common>:
 804621c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8046220:	4616      	mov	r6, r2
 8046222:	4699      	mov	r9, r3
 8046224:	688a      	ldr	r2, [r1, #8]
 8046226:	4607      	mov	r7, r0
 8046228:	690b      	ldr	r3, [r1, #16]
 804622a:	460c      	mov	r4, r1
 804622c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8046230:	4293      	cmp	r3, r2
 8046232:	bfb8      	it	lt
 8046234:	4613      	movlt	r3, r2
 8046236:	6033      	str	r3, [r6, #0]
 8046238:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 804623c:	b10a      	cbz	r2, 8046242 <_printf_common+0x26>
 804623e:	3301      	adds	r3, #1
 8046240:	6033      	str	r3, [r6, #0]
 8046242:	6823      	ldr	r3, [r4, #0]
 8046244:	0699      	lsls	r1, r3, #26
 8046246:	bf42      	ittt	mi
 8046248:	6833      	ldrmi	r3, [r6, #0]
 804624a:	3302      	addmi	r3, #2
 804624c:	6033      	strmi	r3, [r6, #0]
 804624e:	6825      	ldr	r5, [r4, #0]
 8046250:	f015 0506 	ands.w	r5, r5, #6
 8046254:	d106      	bne.n	8046264 <_printf_common+0x48>
 8046256:	f104 0a19 	add.w	sl, r4, #25
 804625a:	68e3      	ldr	r3, [r4, #12]
 804625c:	6832      	ldr	r2, [r6, #0]
 804625e:	1a9b      	subs	r3, r3, r2
 8046260:	42ab      	cmp	r3, r5
 8046262:	dc29      	bgt.n	80462b8 <_printf_common+0x9c>
 8046264:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8046268:	1e13      	subs	r3, r2, #0
 804626a:	6822      	ldr	r2, [r4, #0]
 804626c:	bf18      	it	ne
 804626e:	2301      	movne	r3, #1
 8046270:	0692      	lsls	r2, r2, #26
 8046272:	d42e      	bmi.n	80462d2 <_printf_common+0xb6>
 8046274:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8046278:	4649      	mov	r1, r9
 804627a:	4638      	mov	r0, r7
 804627c:	47c0      	blx	r8
 804627e:	3001      	adds	r0, #1
 8046280:	d021      	beq.n	80462c6 <_printf_common+0xaa>
 8046282:	6823      	ldr	r3, [r4, #0]
 8046284:	341a      	adds	r4, #26
 8046286:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 804628a:	f003 0306 	and.w	r3, r3, #6
 804628e:	6832      	ldr	r2, [r6, #0]
 8046290:	2600      	movs	r6, #0
 8046292:	2b04      	cmp	r3, #4
 8046294:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8046298:	bf08      	it	eq
 804629a:	1aad      	subeq	r5, r5, r2
 804629c:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 80462a0:	bf14      	ite	ne
 80462a2:	2500      	movne	r5, #0
 80462a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80462a8:	4293      	cmp	r3, r2
 80462aa:	bfc4      	itt	gt
 80462ac:	1a9b      	subgt	r3, r3, r2
 80462ae:	18ed      	addgt	r5, r5, r3
 80462b0:	42b5      	cmp	r5, r6
 80462b2:	d11a      	bne.n	80462ea <_printf_common+0xce>
 80462b4:	2000      	movs	r0, #0
 80462b6:	e008      	b.n	80462ca <_printf_common+0xae>
 80462b8:	2301      	movs	r3, #1
 80462ba:	4652      	mov	r2, sl
 80462bc:	4649      	mov	r1, r9
 80462be:	4638      	mov	r0, r7
 80462c0:	47c0      	blx	r8
 80462c2:	3001      	adds	r0, #1
 80462c4:	d103      	bne.n	80462ce <_printf_common+0xb2>
 80462c6:	f04f 30ff 	mov.w	r0, #4294967295
 80462ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80462ce:	3501      	adds	r5, #1
 80462d0:	e7c3      	b.n	804625a <_printf_common+0x3e>
 80462d2:	18e1      	adds	r1, r4, r3
 80462d4:	1c5a      	adds	r2, r3, #1
 80462d6:	2030      	movs	r0, #48	; 0x30
 80462d8:	3302      	adds	r3, #2
 80462da:	4422      	add	r2, r4
 80462dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80462e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80462e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80462e8:	e7c4      	b.n	8046274 <_printf_common+0x58>
 80462ea:	2301      	movs	r3, #1
 80462ec:	4622      	mov	r2, r4
 80462ee:	4649      	mov	r1, r9
 80462f0:	4638      	mov	r0, r7
 80462f2:	47c0      	blx	r8
 80462f4:	3001      	adds	r0, #1
 80462f6:	d0e6      	beq.n	80462c6 <_printf_common+0xaa>
 80462f8:	3601      	adds	r6, #1
 80462fa:	e7d9      	b.n	80462b0 <_printf_common+0x94>

080462fc <_printf_i>:
 80462fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8046300:	460c      	mov	r4, r1
 8046302:	4691      	mov	r9, r2
 8046304:	4680      	mov	r8, r0
 8046306:	469a      	mov	sl, r3
 8046308:	7e27      	ldrb	r7, [r4, #24]
 804630a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 804630e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8046310:	2f78      	cmp	r7, #120	; 0x78
 8046312:	d807      	bhi.n	8046324 <_printf_i+0x28>
 8046314:	2f62      	cmp	r7, #98	; 0x62
 8046316:	d80a      	bhi.n	804632e <_printf_i+0x32>
 8046318:	2f00      	cmp	r7, #0
 804631a:	f000 80d8 	beq.w	80464ce <_printf_i+0x1d2>
 804631e:	2f58      	cmp	r7, #88	; 0x58
 8046320:	f000 80a3 	beq.w	804646a <_printf_i+0x16e>
 8046324:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8046328:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 804632c:	e03a      	b.n	80463a4 <_printf_i+0xa8>
 804632e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8046332:	2b15      	cmp	r3, #21
 8046334:	d8f6      	bhi.n	8046324 <_printf_i+0x28>
 8046336:	a001      	add	r0, pc, #4	; (adr r0, 804633c <_printf_i+0x40>)
 8046338:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 804633c:	08046395 	.word	0x08046395
 8046340:	080463a9 	.word	0x080463a9
 8046344:	08046325 	.word	0x08046325
 8046348:	08046325 	.word	0x08046325
 804634c:	08046325 	.word	0x08046325
 8046350:	08046325 	.word	0x08046325
 8046354:	080463a9 	.word	0x080463a9
 8046358:	08046325 	.word	0x08046325
 804635c:	08046325 	.word	0x08046325
 8046360:	08046325 	.word	0x08046325
 8046364:	08046325 	.word	0x08046325
 8046368:	080464b5 	.word	0x080464b5
 804636c:	080463d9 	.word	0x080463d9
 8046370:	08046497 	.word	0x08046497
 8046374:	08046325 	.word	0x08046325
 8046378:	08046325 	.word	0x08046325
 804637c:	080464d7 	.word	0x080464d7
 8046380:	08046325 	.word	0x08046325
 8046384:	080463d9 	.word	0x080463d9
 8046388:	08046325 	.word	0x08046325
 804638c:	08046325 	.word	0x08046325
 8046390:	0804649f 	.word	0x0804649f
 8046394:	680b      	ldr	r3, [r1, #0]
 8046396:	f104 0642 	add.w	r6, r4, #66	; 0x42
 804639a:	1d1a      	adds	r2, r3, #4
 804639c:	681b      	ldr	r3, [r3, #0]
 804639e:	600a      	str	r2, [r1, #0]
 80463a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80463a4:	2301      	movs	r3, #1
 80463a6:	e0a3      	b.n	80464f0 <_printf_i+0x1f4>
 80463a8:	6825      	ldr	r5, [r4, #0]
 80463aa:	6808      	ldr	r0, [r1, #0]
 80463ac:	062e      	lsls	r6, r5, #24
 80463ae:	f100 0304 	add.w	r3, r0, #4
 80463b2:	d50a      	bpl.n	80463ca <_printf_i+0xce>
 80463b4:	6805      	ldr	r5, [r0, #0]
 80463b6:	600b      	str	r3, [r1, #0]
 80463b8:	2d00      	cmp	r5, #0
 80463ba:	da03      	bge.n	80463c4 <_printf_i+0xc8>
 80463bc:	232d      	movs	r3, #45	; 0x2d
 80463be:	426d      	negs	r5, r5
 80463c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80463c4:	485e      	ldr	r0, [pc, #376]	; (8046540 <_printf_i+0x244>)
 80463c6:	230a      	movs	r3, #10
 80463c8:	e019      	b.n	80463fe <_printf_i+0x102>
 80463ca:	f015 0f40 	tst.w	r5, #64	; 0x40
 80463ce:	6805      	ldr	r5, [r0, #0]
 80463d0:	600b      	str	r3, [r1, #0]
 80463d2:	bf18      	it	ne
 80463d4:	b22d      	sxthne	r5, r5
 80463d6:	e7ef      	b.n	80463b8 <_printf_i+0xbc>
 80463d8:	680b      	ldr	r3, [r1, #0]
 80463da:	6825      	ldr	r5, [r4, #0]
 80463dc:	1d18      	adds	r0, r3, #4
 80463de:	6008      	str	r0, [r1, #0]
 80463e0:	0628      	lsls	r0, r5, #24
 80463e2:	d501      	bpl.n	80463e8 <_printf_i+0xec>
 80463e4:	681d      	ldr	r5, [r3, #0]
 80463e6:	e002      	b.n	80463ee <_printf_i+0xf2>
 80463e8:	0669      	lsls	r1, r5, #25
 80463ea:	d5fb      	bpl.n	80463e4 <_printf_i+0xe8>
 80463ec:	881d      	ldrh	r5, [r3, #0]
 80463ee:	2f6f      	cmp	r7, #111	; 0x6f
 80463f0:	4853      	ldr	r0, [pc, #332]	; (8046540 <_printf_i+0x244>)
 80463f2:	bf0c      	ite	eq
 80463f4:	2308      	moveq	r3, #8
 80463f6:	230a      	movne	r3, #10
 80463f8:	2100      	movs	r1, #0
 80463fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80463fe:	6866      	ldr	r6, [r4, #4]
 8046400:	2e00      	cmp	r6, #0
 8046402:	60a6      	str	r6, [r4, #8]
 8046404:	bfa2      	ittt	ge
 8046406:	6821      	ldrge	r1, [r4, #0]
 8046408:	f021 0104 	bicge.w	r1, r1, #4
 804640c:	6021      	strge	r1, [r4, #0]
 804640e:	b90d      	cbnz	r5, 8046414 <_printf_i+0x118>
 8046410:	2e00      	cmp	r6, #0
 8046412:	d04d      	beq.n	80464b0 <_printf_i+0x1b4>
 8046414:	4616      	mov	r6, r2
 8046416:	fbb5 f1f3 	udiv	r1, r5, r3
 804641a:	fb03 5711 	mls	r7, r3, r1, r5
 804641e:	5dc7      	ldrb	r7, [r0, r7]
 8046420:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8046424:	462f      	mov	r7, r5
 8046426:	460d      	mov	r5, r1
 8046428:	42bb      	cmp	r3, r7
 804642a:	d9f4      	bls.n	8046416 <_printf_i+0x11a>
 804642c:	2b08      	cmp	r3, #8
 804642e:	d10b      	bne.n	8046448 <_printf_i+0x14c>
 8046430:	6823      	ldr	r3, [r4, #0]
 8046432:	07df      	lsls	r7, r3, #31
 8046434:	d508      	bpl.n	8046448 <_printf_i+0x14c>
 8046436:	6923      	ldr	r3, [r4, #16]
 8046438:	6861      	ldr	r1, [r4, #4]
 804643a:	4299      	cmp	r1, r3
 804643c:	bfde      	ittt	le
 804643e:	2330      	movle	r3, #48	; 0x30
 8046440:	f806 3c01 	strble.w	r3, [r6, #-1]
 8046444:	f106 36ff 	addle.w	r6, r6, #4294967295
 8046448:	1b92      	subs	r2, r2, r6
 804644a:	6122      	str	r2, [r4, #16]
 804644c:	464b      	mov	r3, r9
 804644e:	aa03      	add	r2, sp, #12
 8046450:	4621      	mov	r1, r4
 8046452:	4640      	mov	r0, r8
 8046454:	f8cd a000 	str.w	sl, [sp]
 8046458:	f7ff fee0 	bl	804621c <_printf_common>
 804645c:	3001      	adds	r0, #1
 804645e:	d14c      	bne.n	80464fa <_printf_i+0x1fe>
 8046460:	f04f 30ff 	mov.w	r0, #4294967295
 8046464:	b004      	add	sp, #16
 8046466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804646a:	4835      	ldr	r0, [pc, #212]	; (8046540 <_printf_i+0x244>)
 804646c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8046470:	6823      	ldr	r3, [r4, #0]
 8046472:	680e      	ldr	r6, [r1, #0]
 8046474:	061f      	lsls	r7, r3, #24
 8046476:	f856 5b04 	ldr.w	r5, [r6], #4
 804647a:	600e      	str	r6, [r1, #0]
 804647c:	d514      	bpl.n	80464a8 <_printf_i+0x1ac>
 804647e:	07d9      	lsls	r1, r3, #31
 8046480:	bf44      	itt	mi
 8046482:	f043 0320 	orrmi.w	r3, r3, #32
 8046486:	6023      	strmi	r3, [r4, #0]
 8046488:	b91d      	cbnz	r5, 8046492 <_printf_i+0x196>
 804648a:	6823      	ldr	r3, [r4, #0]
 804648c:	f023 0320 	bic.w	r3, r3, #32
 8046490:	6023      	str	r3, [r4, #0]
 8046492:	2310      	movs	r3, #16
 8046494:	e7b0      	b.n	80463f8 <_printf_i+0xfc>
 8046496:	6823      	ldr	r3, [r4, #0]
 8046498:	f043 0320 	orr.w	r3, r3, #32
 804649c:	6023      	str	r3, [r4, #0]
 804649e:	2378      	movs	r3, #120	; 0x78
 80464a0:	4828      	ldr	r0, [pc, #160]	; (8046544 <_printf_i+0x248>)
 80464a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80464a6:	e7e3      	b.n	8046470 <_printf_i+0x174>
 80464a8:	065e      	lsls	r6, r3, #25
 80464aa:	bf48      	it	mi
 80464ac:	b2ad      	uxthmi	r5, r5
 80464ae:	e7e6      	b.n	804647e <_printf_i+0x182>
 80464b0:	4616      	mov	r6, r2
 80464b2:	e7bb      	b.n	804642c <_printf_i+0x130>
 80464b4:	680b      	ldr	r3, [r1, #0]
 80464b6:	6826      	ldr	r6, [r4, #0]
 80464b8:	1d1d      	adds	r5, r3, #4
 80464ba:	6960      	ldr	r0, [r4, #20]
 80464bc:	600d      	str	r5, [r1, #0]
 80464be:	0635      	lsls	r5, r6, #24
 80464c0:	681b      	ldr	r3, [r3, #0]
 80464c2:	d501      	bpl.n	80464c8 <_printf_i+0x1cc>
 80464c4:	6018      	str	r0, [r3, #0]
 80464c6:	e002      	b.n	80464ce <_printf_i+0x1d2>
 80464c8:	0671      	lsls	r1, r6, #25
 80464ca:	d5fb      	bpl.n	80464c4 <_printf_i+0x1c8>
 80464cc:	8018      	strh	r0, [r3, #0]
 80464ce:	2300      	movs	r3, #0
 80464d0:	4616      	mov	r6, r2
 80464d2:	6123      	str	r3, [r4, #16]
 80464d4:	e7ba      	b.n	804644c <_printf_i+0x150>
 80464d6:	680b      	ldr	r3, [r1, #0]
 80464d8:	1d1a      	adds	r2, r3, #4
 80464da:	600a      	str	r2, [r1, #0]
 80464dc:	2100      	movs	r1, #0
 80464de:	681e      	ldr	r6, [r3, #0]
 80464e0:	6862      	ldr	r2, [r4, #4]
 80464e2:	4630      	mov	r0, r6
 80464e4:	f000 f88b 	bl	80465fe <memchr>
 80464e8:	b108      	cbz	r0, 80464ee <_printf_i+0x1f2>
 80464ea:	1b80      	subs	r0, r0, r6
 80464ec:	6060      	str	r0, [r4, #4]
 80464ee:	6863      	ldr	r3, [r4, #4]
 80464f0:	6123      	str	r3, [r4, #16]
 80464f2:	2300      	movs	r3, #0
 80464f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80464f8:	e7a8      	b.n	804644c <_printf_i+0x150>
 80464fa:	6923      	ldr	r3, [r4, #16]
 80464fc:	4632      	mov	r2, r6
 80464fe:	4649      	mov	r1, r9
 8046500:	4640      	mov	r0, r8
 8046502:	47d0      	blx	sl
 8046504:	3001      	adds	r0, #1
 8046506:	d0ab      	beq.n	8046460 <_printf_i+0x164>
 8046508:	6823      	ldr	r3, [r4, #0]
 804650a:	079b      	lsls	r3, r3, #30
 804650c:	d413      	bmi.n	8046536 <_printf_i+0x23a>
 804650e:	68e0      	ldr	r0, [r4, #12]
 8046510:	9b03      	ldr	r3, [sp, #12]
 8046512:	4298      	cmp	r0, r3
 8046514:	bfb8      	it	lt
 8046516:	4618      	movlt	r0, r3
 8046518:	e7a4      	b.n	8046464 <_printf_i+0x168>
 804651a:	2301      	movs	r3, #1
 804651c:	4632      	mov	r2, r6
 804651e:	4649      	mov	r1, r9
 8046520:	4640      	mov	r0, r8
 8046522:	47d0      	blx	sl
 8046524:	3001      	adds	r0, #1
 8046526:	d09b      	beq.n	8046460 <_printf_i+0x164>
 8046528:	3501      	adds	r5, #1
 804652a:	68e3      	ldr	r3, [r4, #12]
 804652c:	9903      	ldr	r1, [sp, #12]
 804652e:	1a5b      	subs	r3, r3, r1
 8046530:	42ab      	cmp	r3, r5
 8046532:	dcf2      	bgt.n	804651a <_printf_i+0x21e>
 8046534:	e7eb      	b.n	804650e <_printf_i+0x212>
 8046536:	2500      	movs	r5, #0
 8046538:	f104 0619 	add.w	r6, r4, #25
 804653c:	e7f5      	b.n	804652a <_printf_i+0x22e>
 804653e:	bf00      	nop
 8046540:	080474a5 	.word	0x080474a5
 8046544:	080474b6 	.word	0x080474b6

08046548 <nan>:
 8046548:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8046550 <nan+0x8>
 804654c:	4770      	bx	lr
 804654e:	bf00      	nop
 8046550:	00000000 	.word	0x00000000
 8046554:	7ff80000 	.word	0x7ff80000

08046558 <strncmp>:
 8046558:	b510      	push	{r4, lr}
 804655a:	b16a      	cbz	r2, 8046578 <strncmp+0x20>
 804655c:	3901      	subs	r1, #1
 804655e:	1884      	adds	r4, r0, r2
 8046560:	f810 3b01 	ldrb.w	r3, [r0], #1
 8046564:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8046568:	4293      	cmp	r3, r2
 804656a:	d103      	bne.n	8046574 <strncmp+0x1c>
 804656c:	42a0      	cmp	r0, r4
 804656e:	d001      	beq.n	8046574 <strncmp+0x1c>
 8046570:	2b00      	cmp	r3, #0
 8046572:	d1f5      	bne.n	8046560 <strncmp+0x8>
 8046574:	1a98      	subs	r0, r3, r2
 8046576:	bd10      	pop	{r4, pc}
 8046578:	4610      	mov	r0, r2
 804657a:	e7fc      	b.n	8046576 <strncmp+0x1e>

0804657c <__ascii_wctomb>:
 804657c:	b149      	cbz	r1, 8046592 <__ascii_wctomb+0x16>
 804657e:	2aff      	cmp	r2, #255	; 0xff
 8046580:	bf8d      	iteet	hi
 8046582:	238a      	movhi	r3, #138	; 0x8a
 8046584:	2001      	movls	r0, #1
 8046586:	700a      	strbls	r2, [r1, #0]
 8046588:	6003      	strhi	r3, [r0, #0]
 804658a:	bf88      	it	hi
 804658c:	f04f 30ff 	movhi.w	r0, #4294967295
 8046590:	4770      	bx	lr
 8046592:	4608      	mov	r0, r1
 8046594:	4770      	bx	lr
	...

08046598 <__assert_func>:
 8046598:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 804659a:	4614      	mov	r4, r2
 804659c:	461a      	mov	r2, r3
 804659e:	4b09      	ldr	r3, [pc, #36]	; (80465c4 <__assert_func+0x2c>)
 80465a0:	4605      	mov	r5, r0
 80465a2:	681b      	ldr	r3, [r3, #0]
 80465a4:	68d8      	ldr	r0, [r3, #12]
 80465a6:	b14c      	cbz	r4, 80465bc <__assert_func+0x24>
 80465a8:	4b07      	ldr	r3, [pc, #28]	; (80465c8 <__assert_func+0x30>)
 80465aa:	9100      	str	r1, [sp, #0]
 80465ac:	4907      	ldr	r1, [pc, #28]	; (80465cc <__assert_func+0x34>)
 80465ae:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80465b2:	462b      	mov	r3, r5
 80465b4:	f000 f80e 	bl	80465d4 <fiprintf>
 80465b8:	f000 fa6e 	bl	8046a98 <abort>
 80465bc:	4b04      	ldr	r3, [pc, #16]	; (80465d0 <__assert_func+0x38>)
 80465be:	461c      	mov	r4, r3
 80465c0:	e7f3      	b.n	80465aa <__assert_func+0x12>
 80465c2:	bf00      	nop
 80465c4:	2001801c 	.word	0x2001801c
 80465c8:	080474c7 	.word	0x080474c7
 80465cc:	080474d4 	.word	0x080474d4
 80465d0:	08047502 	.word	0x08047502

080465d4 <fiprintf>:
 80465d4:	b40e      	push	{r1, r2, r3}
 80465d6:	b503      	push	{r0, r1, lr}
 80465d8:	ab03      	add	r3, sp, #12
 80465da:	4601      	mov	r1, r0
 80465dc:	4805      	ldr	r0, [pc, #20]	; (80465f4 <fiprintf+0x20>)
 80465de:	f853 2b04 	ldr.w	r2, [r3], #4
 80465e2:	6800      	ldr	r0, [r0, #0]
 80465e4:	9301      	str	r3, [sp, #4]
 80465e6:	f000 f867 	bl	80466b8 <_vfiprintf_r>
 80465ea:	b002      	add	sp, #8
 80465ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80465f0:	b003      	add	sp, #12
 80465f2:	4770      	bx	lr
 80465f4:	2001801c 	.word	0x2001801c

080465f8 <__retarget_lock_init_recursive>:
 80465f8:	4770      	bx	lr

080465fa <__retarget_lock_acquire_recursive>:
 80465fa:	4770      	bx	lr

080465fc <__retarget_lock_release_recursive>:
 80465fc:	4770      	bx	lr

080465fe <memchr>:
 80465fe:	b2c9      	uxtb	r1, r1
 8046600:	4402      	add	r2, r0
 8046602:	b510      	push	{r4, lr}
 8046604:	4290      	cmp	r0, r2
 8046606:	4603      	mov	r3, r0
 8046608:	d101      	bne.n	804660e <memchr+0x10>
 804660a:	2300      	movs	r3, #0
 804660c:	e003      	b.n	8046616 <memchr+0x18>
 804660e:	781c      	ldrb	r4, [r3, #0]
 8046610:	3001      	adds	r0, #1
 8046612:	428c      	cmp	r4, r1
 8046614:	d1f6      	bne.n	8046604 <memchr+0x6>
 8046616:	4618      	mov	r0, r3
 8046618:	bd10      	pop	{r4, pc}

0804661a <_realloc_r>:
 804661a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804661c:	4607      	mov	r7, r0
 804661e:	4614      	mov	r4, r2
 8046620:	460e      	mov	r6, r1
 8046622:	b921      	cbnz	r1, 804662e <_realloc_r+0x14>
 8046624:	4611      	mov	r1, r2
 8046626:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 804662a:	f7fd bd8d 	b.w	8044148 <_malloc_r>
 804662e:	b922      	cbnz	r2, 804663a <_realloc_r+0x20>
 8046630:	4625      	mov	r5, r4
 8046632:	f7fd fd39 	bl	80440a8 <_free_r>
 8046636:	4628      	mov	r0, r5
 8046638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804663a:	f000 fc4f 	bl	8046edc <_malloc_usable_size_r>
 804663e:	42a0      	cmp	r0, r4
 8046640:	d20f      	bcs.n	8046662 <_realloc_r+0x48>
 8046642:	4621      	mov	r1, r4
 8046644:	4638      	mov	r0, r7
 8046646:	f7fd fd7f 	bl	8044148 <_malloc_r>
 804664a:	4605      	mov	r5, r0
 804664c:	2800      	cmp	r0, #0
 804664e:	d0f2      	beq.n	8046636 <_realloc_r+0x1c>
 8046650:	4631      	mov	r1, r6
 8046652:	4622      	mov	r2, r4
 8046654:	f7fd fcea 	bl	804402c <memcpy>
 8046658:	4631      	mov	r1, r6
 804665a:	4638      	mov	r0, r7
 804665c:	f7fd fd24 	bl	80440a8 <_free_r>
 8046660:	e7e9      	b.n	8046636 <_realloc_r+0x1c>
 8046662:	4635      	mov	r5, r6
 8046664:	e7e7      	b.n	8046636 <_realloc_r+0x1c>

08046666 <__sfputc_r>:
 8046666:	6893      	ldr	r3, [r2, #8]
 8046668:	3b01      	subs	r3, #1
 804666a:	2b00      	cmp	r3, #0
 804666c:	6093      	str	r3, [r2, #8]
 804666e:	b410      	push	{r4}
 8046670:	da08      	bge.n	8046684 <__sfputc_r+0x1e>
 8046672:	6994      	ldr	r4, [r2, #24]
 8046674:	42a3      	cmp	r3, r4
 8046676:	db01      	blt.n	804667c <__sfputc_r+0x16>
 8046678:	290a      	cmp	r1, #10
 804667a:	d103      	bne.n	8046684 <__sfputc_r+0x1e>
 804667c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8046680:	f000 b94a 	b.w	8046918 <__swbuf_r>
 8046684:	6813      	ldr	r3, [r2, #0]
 8046686:	1c58      	adds	r0, r3, #1
 8046688:	6010      	str	r0, [r2, #0]
 804668a:	4608      	mov	r0, r1
 804668c:	7019      	strb	r1, [r3, #0]
 804668e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8046692:	4770      	bx	lr

08046694 <__sfputs_r>:
 8046694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8046696:	4606      	mov	r6, r0
 8046698:	460f      	mov	r7, r1
 804669a:	4614      	mov	r4, r2
 804669c:	18d5      	adds	r5, r2, r3
 804669e:	42ac      	cmp	r4, r5
 80466a0:	d101      	bne.n	80466a6 <__sfputs_r+0x12>
 80466a2:	2000      	movs	r0, #0
 80466a4:	e007      	b.n	80466b6 <__sfputs_r+0x22>
 80466a6:	463a      	mov	r2, r7
 80466a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80466ac:	4630      	mov	r0, r6
 80466ae:	f7ff ffda 	bl	8046666 <__sfputc_r>
 80466b2:	1c43      	adds	r3, r0, #1
 80466b4:	d1f3      	bne.n	804669e <__sfputs_r+0xa>
 80466b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080466b8 <_vfiprintf_r>:
 80466b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80466bc:	460d      	mov	r5, r1
 80466be:	b09d      	sub	sp, #116	; 0x74
 80466c0:	4614      	mov	r4, r2
 80466c2:	4698      	mov	r8, r3
 80466c4:	4606      	mov	r6, r0
 80466c6:	b118      	cbz	r0, 80466d0 <_vfiprintf_r+0x18>
 80466c8:	6983      	ldr	r3, [r0, #24]
 80466ca:	b90b      	cbnz	r3, 80466d0 <_vfiprintf_r+0x18>
 80466cc:	f000 fb04 	bl	8046cd8 <__sinit>
 80466d0:	4b89      	ldr	r3, [pc, #548]	; (80468f8 <_vfiprintf_r+0x240>)
 80466d2:	429d      	cmp	r5, r3
 80466d4:	d11b      	bne.n	804670e <_vfiprintf_r+0x56>
 80466d6:	6875      	ldr	r5, [r6, #4]
 80466d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80466da:	07d9      	lsls	r1, r3, #31
 80466dc:	d405      	bmi.n	80466ea <_vfiprintf_r+0x32>
 80466de:	89ab      	ldrh	r3, [r5, #12]
 80466e0:	059a      	lsls	r2, r3, #22
 80466e2:	d402      	bmi.n	80466ea <_vfiprintf_r+0x32>
 80466e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80466e6:	f7ff ff88 	bl	80465fa <__retarget_lock_acquire_recursive>
 80466ea:	89ab      	ldrh	r3, [r5, #12]
 80466ec:	071b      	lsls	r3, r3, #28
 80466ee:	d501      	bpl.n	80466f4 <_vfiprintf_r+0x3c>
 80466f0:	692b      	ldr	r3, [r5, #16]
 80466f2:	b9eb      	cbnz	r3, 8046730 <_vfiprintf_r+0x78>
 80466f4:	4629      	mov	r1, r5
 80466f6:	4630      	mov	r0, r6
 80466f8:	f000 f960 	bl	80469bc <__swsetup_r>
 80466fc:	b1c0      	cbz	r0, 8046730 <_vfiprintf_r+0x78>
 80466fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8046700:	07dc      	lsls	r4, r3, #31
 8046702:	d50e      	bpl.n	8046722 <_vfiprintf_r+0x6a>
 8046704:	f04f 30ff 	mov.w	r0, #4294967295
 8046708:	b01d      	add	sp, #116	; 0x74
 804670a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804670e:	4b7b      	ldr	r3, [pc, #492]	; (80468fc <_vfiprintf_r+0x244>)
 8046710:	429d      	cmp	r5, r3
 8046712:	d101      	bne.n	8046718 <_vfiprintf_r+0x60>
 8046714:	68b5      	ldr	r5, [r6, #8]
 8046716:	e7df      	b.n	80466d8 <_vfiprintf_r+0x20>
 8046718:	4b79      	ldr	r3, [pc, #484]	; (8046900 <_vfiprintf_r+0x248>)
 804671a:	429d      	cmp	r5, r3
 804671c:	bf08      	it	eq
 804671e:	68f5      	ldreq	r5, [r6, #12]
 8046720:	e7da      	b.n	80466d8 <_vfiprintf_r+0x20>
 8046722:	89ab      	ldrh	r3, [r5, #12]
 8046724:	0598      	lsls	r0, r3, #22
 8046726:	d4ed      	bmi.n	8046704 <_vfiprintf_r+0x4c>
 8046728:	6da8      	ldr	r0, [r5, #88]	; 0x58
 804672a:	f7ff ff67 	bl	80465fc <__retarget_lock_release_recursive>
 804672e:	e7e9      	b.n	8046704 <_vfiprintf_r+0x4c>
 8046730:	2300      	movs	r3, #0
 8046732:	f8cd 800c 	str.w	r8, [sp, #12]
 8046736:	f04f 0901 	mov.w	r9, #1
 804673a:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8046904 <_vfiprintf_r+0x24c>
 804673e:	9309      	str	r3, [sp, #36]	; 0x24
 8046740:	2320      	movs	r3, #32
 8046742:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8046746:	2330      	movs	r3, #48	; 0x30
 8046748:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 804674c:	4623      	mov	r3, r4
 804674e:	469a      	mov	sl, r3
 8046750:	f813 2b01 	ldrb.w	r2, [r3], #1
 8046754:	b10a      	cbz	r2, 804675a <_vfiprintf_r+0xa2>
 8046756:	2a25      	cmp	r2, #37	; 0x25
 8046758:	d1f9      	bne.n	804674e <_vfiprintf_r+0x96>
 804675a:	ebba 0b04 	subs.w	fp, sl, r4
 804675e:	d00b      	beq.n	8046778 <_vfiprintf_r+0xc0>
 8046760:	465b      	mov	r3, fp
 8046762:	4622      	mov	r2, r4
 8046764:	4629      	mov	r1, r5
 8046766:	4630      	mov	r0, r6
 8046768:	f7ff ff94 	bl	8046694 <__sfputs_r>
 804676c:	3001      	adds	r0, #1
 804676e:	f000 80aa 	beq.w	80468c6 <_vfiprintf_r+0x20e>
 8046772:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8046774:	445a      	add	r2, fp
 8046776:	9209      	str	r2, [sp, #36]	; 0x24
 8046778:	f89a 3000 	ldrb.w	r3, [sl]
 804677c:	2b00      	cmp	r3, #0
 804677e:	f000 80a2 	beq.w	80468c6 <_vfiprintf_r+0x20e>
 8046782:	2300      	movs	r3, #0
 8046784:	f04f 32ff 	mov.w	r2, #4294967295
 8046788:	f10a 0a01 	add.w	sl, sl, #1
 804678c:	9304      	str	r3, [sp, #16]
 804678e:	9307      	str	r3, [sp, #28]
 8046790:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8046794:	931a      	str	r3, [sp, #104]	; 0x68
 8046796:	e9cd 2305 	strd	r2, r3, [sp, #20]
 804679a:	4654      	mov	r4, sl
 804679c:	2205      	movs	r2, #5
 804679e:	4859      	ldr	r0, [pc, #356]	; (8046904 <_vfiprintf_r+0x24c>)
 80467a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80467a4:	f7ff ff2b 	bl	80465fe <memchr>
 80467a8:	9a04      	ldr	r2, [sp, #16]
 80467aa:	b9d8      	cbnz	r0, 80467e4 <_vfiprintf_r+0x12c>
 80467ac:	06d1      	lsls	r1, r2, #27
 80467ae:	bf44      	itt	mi
 80467b0:	2320      	movmi	r3, #32
 80467b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80467b6:	0713      	lsls	r3, r2, #28
 80467b8:	bf44      	itt	mi
 80467ba:	232b      	movmi	r3, #43	; 0x2b
 80467bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80467c0:	f89a 3000 	ldrb.w	r3, [sl]
 80467c4:	2b2a      	cmp	r3, #42	; 0x2a
 80467c6:	d015      	beq.n	80467f4 <_vfiprintf_r+0x13c>
 80467c8:	9a07      	ldr	r2, [sp, #28]
 80467ca:	4654      	mov	r4, sl
 80467cc:	2000      	movs	r0, #0
 80467ce:	f04f 0c0a 	mov.w	ip, #10
 80467d2:	4621      	mov	r1, r4
 80467d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80467d8:	3b30      	subs	r3, #48	; 0x30
 80467da:	2b09      	cmp	r3, #9
 80467dc:	d94e      	bls.n	804687c <_vfiprintf_r+0x1c4>
 80467de:	b1b0      	cbz	r0, 804680e <_vfiprintf_r+0x156>
 80467e0:	9207      	str	r2, [sp, #28]
 80467e2:	e014      	b.n	804680e <_vfiprintf_r+0x156>
 80467e4:	eba0 0308 	sub.w	r3, r0, r8
 80467e8:	46a2      	mov	sl, r4
 80467ea:	fa09 f303 	lsl.w	r3, r9, r3
 80467ee:	4313      	orrs	r3, r2
 80467f0:	9304      	str	r3, [sp, #16]
 80467f2:	e7d2      	b.n	804679a <_vfiprintf_r+0xe2>
 80467f4:	9b03      	ldr	r3, [sp, #12]
 80467f6:	1d19      	adds	r1, r3, #4
 80467f8:	681b      	ldr	r3, [r3, #0]
 80467fa:	2b00      	cmp	r3, #0
 80467fc:	9103      	str	r1, [sp, #12]
 80467fe:	bfbb      	ittet	lt
 8046800:	425b      	neglt	r3, r3
 8046802:	f042 0202 	orrlt.w	r2, r2, #2
 8046806:	9307      	strge	r3, [sp, #28]
 8046808:	9307      	strlt	r3, [sp, #28]
 804680a:	bfb8      	it	lt
 804680c:	9204      	strlt	r2, [sp, #16]
 804680e:	7823      	ldrb	r3, [r4, #0]
 8046810:	2b2e      	cmp	r3, #46	; 0x2e
 8046812:	d10c      	bne.n	804682e <_vfiprintf_r+0x176>
 8046814:	7863      	ldrb	r3, [r4, #1]
 8046816:	2b2a      	cmp	r3, #42	; 0x2a
 8046818:	d135      	bne.n	8046886 <_vfiprintf_r+0x1ce>
 804681a:	9b03      	ldr	r3, [sp, #12]
 804681c:	3402      	adds	r4, #2
 804681e:	1d1a      	adds	r2, r3, #4
 8046820:	681b      	ldr	r3, [r3, #0]
 8046822:	2b00      	cmp	r3, #0
 8046824:	9203      	str	r2, [sp, #12]
 8046826:	bfb8      	it	lt
 8046828:	f04f 33ff 	movlt.w	r3, #4294967295
 804682c:	9305      	str	r3, [sp, #20]
 804682e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8046914 <_vfiprintf_r+0x25c>
 8046832:	2203      	movs	r2, #3
 8046834:	7821      	ldrb	r1, [r4, #0]
 8046836:	4650      	mov	r0, sl
 8046838:	f7ff fee1 	bl	80465fe <memchr>
 804683c:	b140      	cbz	r0, 8046850 <_vfiprintf_r+0x198>
 804683e:	2340      	movs	r3, #64	; 0x40
 8046840:	eba0 000a 	sub.w	r0, r0, sl
 8046844:	3401      	adds	r4, #1
 8046846:	fa03 f000 	lsl.w	r0, r3, r0
 804684a:	9b04      	ldr	r3, [sp, #16]
 804684c:	4303      	orrs	r3, r0
 804684e:	9304      	str	r3, [sp, #16]
 8046850:	f814 1b01 	ldrb.w	r1, [r4], #1
 8046854:	2206      	movs	r2, #6
 8046856:	482c      	ldr	r0, [pc, #176]	; (8046908 <_vfiprintf_r+0x250>)
 8046858:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 804685c:	f7ff fecf 	bl	80465fe <memchr>
 8046860:	2800      	cmp	r0, #0
 8046862:	d03f      	beq.n	80468e4 <_vfiprintf_r+0x22c>
 8046864:	4b29      	ldr	r3, [pc, #164]	; (804690c <_vfiprintf_r+0x254>)
 8046866:	bb1b      	cbnz	r3, 80468b0 <_vfiprintf_r+0x1f8>
 8046868:	9b03      	ldr	r3, [sp, #12]
 804686a:	3307      	adds	r3, #7
 804686c:	f023 0307 	bic.w	r3, r3, #7
 8046870:	3308      	adds	r3, #8
 8046872:	9303      	str	r3, [sp, #12]
 8046874:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8046876:	443b      	add	r3, r7
 8046878:	9309      	str	r3, [sp, #36]	; 0x24
 804687a:	e767      	b.n	804674c <_vfiprintf_r+0x94>
 804687c:	fb0c 3202 	mla	r2, ip, r2, r3
 8046880:	460c      	mov	r4, r1
 8046882:	2001      	movs	r0, #1
 8046884:	e7a5      	b.n	80467d2 <_vfiprintf_r+0x11a>
 8046886:	2300      	movs	r3, #0
 8046888:	3401      	adds	r4, #1
 804688a:	f04f 0c0a 	mov.w	ip, #10
 804688e:	4619      	mov	r1, r3
 8046890:	9305      	str	r3, [sp, #20]
 8046892:	4620      	mov	r0, r4
 8046894:	f810 2b01 	ldrb.w	r2, [r0], #1
 8046898:	3a30      	subs	r2, #48	; 0x30
 804689a:	2a09      	cmp	r2, #9
 804689c:	d903      	bls.n	80468a6 <_vfiprintf_r+0x1ee>
 804689e:	2b00      	cmp	r3, #0
 80468a0:	d0c5      	beq.n	804682e <_vfiprintf_r+0x176>
 80468a2:	9105      	str	r1, [sp, #20]
 80468a4:	e7c3      	b.n	804682e <_vfiprintf_r+0x176>
 80468a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80468aa:	4604      	mov	r4, r0
 80468ac:	2301      	movs	r3, #1
 80468ae:	e7f0      	b.n	8046892 <_vfiprintf_r+0x1da>
 80468b0:	ab03      	add	r3, sp, #12
 80468b2:	462a      	mov	r2, r5
 80468b4:	a904      	add	r1, sp, #16
 80468b6:	4630      	mov	r0, r6
 80468b8:	9300      	str	r3, [sp, #0]
 80468ba:	4b15      	ldr	r3, [pc, #84]	; (8046910 <_vfiprintf_r+0x258>)
 80468bc:	e000      	b.n	80468c0 <_vfiprintf_r+0x208>
 80468be:	bf00      	nop
 80468c0:	4607      	mov	r7, r0
 80468c2:	1c78      	adds	r0, r7, #1
 80468c4:	d1d6      	bne.n	8046874 <_vfiprintf_r+0x1bc>
 80468c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80468c8:	07d9      	lsls	r1, r3, #31
 80468ca:	d405      	bmi.n	80468d8 <_vfiprintf_r+0x220>
 80468cc:	89ab      	ldrh	r3, [r5, #12]
 80468ce:	059a      	lsls	r2, r3, #22
 80468d0:	d402      	bmi.n	80468d8 <_vfiprintf_r+0x220>
 80468d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80468d4:	f7ff fe92 	bl	80465fc <__retarget_lock_release_recursive>
 80468d8:	89ab      	ldrh	r3, [r5, #12]
 80468da:	065b      	lsls	r3, r3, #25
 80468dc:	f53f af12 	bmi.w	8046704 <_vfiprintf_r+0x4c>
 80468e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80468e2:	e711      	b.n	8046708 <_vfiprintf_r+0x50>
 80468e4:	ab03      	add	r3, sp, #12
 80468e6:	462a      	mov	r2, r5
 80468e8:	a904      	add	r1, sp, #16
 80468ea:	4630      	mov	r0, r6
 80468ec:	9300      	str	r3, [sp, #0]
 80468ee:	4b08      	ldr	r3, [pc, #32]	; (8046910 <_vfiprintf_r+0x258>)
 80468f0:	f7ff fd04 	bl	80462fc <_printf_i>
 80468f4:	e7e4      	b.n	80468c0 <_vfiprintf_r+0x208>
 80468f6:	bf00      	nop
 80468f8:	08047624 	.word	0x08047624
 80468fc:	08047644 	.word	0x08047644
 8046900:	08047604 	.word	0x08047604
 8046904:	08047494 	.word	0x08047494
 8046908:	0804749e 	.word	0x0804749e
 804690c:	00000000 	.word	0x00000000
 8046910:	08046695 	.word	0x08046695
 8046914:	0804749a 	.word	0x0804749a

08046918 <__swbuf_r>:
 8046918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804691a:	460e      	mov	r6, r1
 804691c:	4614      	mov	r4, r2
 804691e:	4605      	mov	r5, r0
 8046920:	b118      	cbz	r0, 804692a <__swbuf_r+0x12>
 8046922:	6983      	ldr	r3, [r0, #24]
 8046924:	b90b      	cbnz	r3, 804692a <__swbuf_r+0x12>
 8046926:	f000 f9d7 	bl	8046cd8 <__sinit>
 804692a:	4b21      	ldr	r3, [pc, #132]	; (80469b0 <__swbuf_r+0x98>)
 804692c:	429c      	cmp	r4, r3
 804692e:	d12b      	bne.n	8046988 <__swbuf_r+0x70>
 8046930:	686c      	ldr	r4, [r5, #4]
 8046932:	69a3      	ldr	r3, [r4, #24]
 8046934:	60a3      	str	r3, [r4, #8]
 8046936:	89a3      	ldrh	r3, [r4, #12]
 8046938:	071a      	lsls	r2, r3, #28
 804693a:	d52f      	bpl.n	804699c <__swbuf_r+0x84>
 804693c:	6923      	ldr	r3, [r4, #16]
 804693e:	b36b      	cbz	r3, 804699c <__swbuf_r+0x84>
 8046940:	6923      	ldr	r3, [r4, #16]
 8046942:	b2f6      	uxtb	r6, r6
 8046944:	6820      	ldr	r0, [r4, #0]
 8046946:	4637      	mov	r7, r6
 8046948:	1ac0      	subs	r0, r0, r3
 804694a:	6963      	ldr	r3, [r4, #20]
 804694c:	4283      	cmp	r3, r0
 804694e:	dc04      	bgt.n	804695a <__swbuf_r+0x42>
 8046950:	4621      	mov	r1, r4
 8046952:	4628      	mov	r0, r5
 8046954:	f000 f92c 	bl	8046bb0 <_fflush_r>
 8046958:	bb30      	cbnz	r0, 80469a8 <__swbuf_r+0x90>
 804695a:	68a3      	ldr	r3, [r4, #8]
 804695c:	3001      	adds	r0, #1
 804695e:	3b01      	subs	r3, #1
 8046960:	60a3      	str	r3, [r4, #8]
 8046962:	6823      	ldr	r3, [r4, #0]
 8046964:	1c5a      	adds	r2, r3, #1
 8046966:	6022      	str	r2, [r4, #0]
 8046968:	701e      	strb	r6, [r3, #0]
 804696a:	6963      	ldr	r3, [r4, #20]
 804696c:	4283      	cmp	r3, r0
 804696e:	d004      	beq.n	804697a <__swbuf_r+0x62>
 8046970:	89a3      	ldrh	r3, [r4, #12]
 8046972:	07db      	lsls	r3, r3, #31
 8046974:	d506      	bpl.n	8046984 <__swbuf_r+0x6c>
 8046976:	2e0a      	cmp	r6, #10
 8046978:	d104      	bne.n	8046984 <__swbuf_r+0x6c>
 804697a:	4621      	mov	r1, r4
 804697c:	4628      	mov	r0, r5
 804697e:	f000 f917 	bl	8046bb0 <_fflush_r>
 8046982:	b988      	cbnz	r0, 80469a8 <__swbuf_r+0x90>
 8046984:	4638      	mov	r0, r7
 8046986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8046988:	4b0a      	ldr	r3, [pc, #40]	; (80469b4 <__swbuf_r+0x9c>)
 804698a:	429c      	cmp	r4, r3
 804698c:	d101      	bne.n	8046992 <__swbuf_r+0x7a>
 804698e:	68ac      	ldr	r4, [r5, #8]
 8046990:	e7cf      	b.n	8046932 <__swbuf_r+0x1a>
 8046992:	4b09      	ldr	r3, [pc, #36]	; (80469b8 <__swbuf_r+0xa0>)
 8046994:	429c      	cmp	r4, r3
 8046996:	bf08      	it	eq
 8046998:	68ec      	ldreq	r4, [r5, #12]
 804699a:	e7ca      	b.n	8046932 <__swbuf_r+0x1a>
 804699c:	4621      	mov	r1, r4
 804699e:	4628      	mov	r0, r5
 80469a0:	f000 f80c 	bl	80469bc <__swsetup_r>
 80469a4:	2800      	cmp	r0, #0
 80469a6:	d0cb      	beq.n	8046940 <__swbuf_r+0x28>
 80469a8:	f04f 37ff 	mov.w	r7, #4294967295
 80469ac:	e7ea      	b.n	8046984 <__swbuf_r+0x6c>
 80469ae:	bf00      	nop
 80469b0:	08047624 	.word	0x08047624
 80469b4:	08047644 	.word	0x08047644
 80469b8:	08047604 	.word	0x08047604

080469bc <__swsetup_r>:
 80469bc:	4b32      	ldr	r3, [pc, #200]	; (8046a88 <__swsetup_r+0xcc>)
 80469be:	b570      	push	{r4, r5, r6, lr}
 80469c0:	681d      	ldr	r5, [r3, #0]
 80469c2:	4606      	mov	r6, r0
 80469c4:	460c      	mov	r4, r1
 80469c6:	b125      	cbz	r5, 80469d2 <__swsetup_r+0x16>
 80469c8:	69ab      	ldr	r3, [r5, #24]
 80469ca:	b913      	cbnz	r3, 80469d2 <__swsetup_r+0x16>
 80469cc:	4628      	mov	r0, r5
 80469ce:	f000 f983 	bl	8046cd8 <__sinit>
 80469d2:	4b2e      	ldr	r3, [pc, #184]	; (8046a8c <__swsetup_r+0xd0>)
 80469d4:	429c      	cmp	r4, r3
 80469d6:	d10f      	bne.n	80469f8 <__swsetup_r+0x3c>
 80469d8:	686c      	ldr	r4, [r5, #4]
 80469da:	89a3      	ldrh	r3, [r4, #12]
 80469dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80469e0:	0719      	lsls	r1, r3, #28
 80469e2:	d42c      	bmi.n	8046a3e <__swsetup_r+0x82>
 80469e4:	06dd      	lsls	r5, r3, #27
 80469e6:	d411      	bmi.n	8046a0c <__swsetup_r+0x50>
 80469e8:	2309      	movs	r3, #9
 80469ea:	6033      	str	r3, [r6, #0]
 80469ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80469f0:	f04f 30ff 	mov.w	r0, #4294967295
 80469f4:	81a3      	strh	r3, [r4, #12]
 80469f6:	e03e      	b.n	8046a76 <__swsetup_r+0xba>
 80469f8:	4b25      	ldr	r3, [pc, #148]	; (8046a90 <__swsetup_r+0xd4>)
 80469fa:	429c      	cmp	r4, r3
 80469fc:	d101      	bne.n	8046a02 <__swsetup_r+0x46>
 80469fe:	68ac      	ldr	r4, [r5, #8]
 8046a00:	e7eb      	b.n	80469da <__swsetup_r+0x1e>
 8046a02:	4b24      	ldr	r3, [pc, #144]	; (8046a94 <__swsetup_r+0xd8>)
 8046a04:	429c      	cmp	r4, r3
 8046a06:	bf08      	it	eq
 8046a08:	68ec      	ldreq	r4, [r5, #12]
 8046a0a:	e7e6      	b.n	80469da <__swsetup_r+0x1e>
 8046a0c:	0758      	lsls	r0, r3, #29
 8046a0e:	d512      	bpl.n	8046a36 <__swsetup_r+0x7a>
 8046a10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8046a12:	b141      	cbz	r1, 8046a26 <__swsetup_r+0x6a>
 8046a14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8046a18:	4299      	cmp	r1, r3
 8046a1a:	d002      	beq.n	8046a22 <__swsetup_r+0x66>
 8046a1c:	4630      	mov	r0, r6
 8046a1e:	f7fd fb43 	bl	80440a8 <_free_r>
 8046a22:	2300      	movs	r3, #0
 8046a24:	6363      	str	r3, [r4, #52]	; 0x34
 8046a26:	89a3      	ldrh	r3, [r4, #12]
 8046a28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8046a2c:	81a3      	strh	r3, [r4, #12]
 8046a2e:	2300      	movs	r3, #0
 8046a30:	6063      	str	r3, [r4, #4]
 8046a32:	6923      	ldr	r3, [r4, #16]
 8046a34:	6023      	str	r3, [r4, #0]
 8046a36:	89a3      	ldrh	r3, [r4, #12]
 8046a38:	f043 0308 	orr.w	r3, r3, #8
 8046a3c:	81a3      	strh	r3, [r4, #12]
 8046a3e:	6923      	ldr	r3, [r4, #16]
 8046a40:	b94b      	cbnz	r3, 8046a56 <__swsetup_r+0x9a>
 8046a42:	89a3      	ldrh	r3, [r4, #12]
 8046a44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8046a48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8046a4c:	d003      	beq.n	8046a56 <__swsetup_r+0x9a>
 8046a4e:	4621      	mov	r1, r4
 8046a50:	4630      	mov	r0, r6
 8046a52:	f000 fa03 	bl	8046e5c <__smakebuf_r>
 8046a56:	89a0      	ldrh	r0, [r4, #12]
 8046a58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8046a5c:	f010 0301 	ands.w	r3, r0, #1
 8046a60:	d00a      	beq.n	8046a78 <__swsetup_r+0xbc>
 8046a62:	2300      	movs	r3, #0
 8046a64:	60a3      	str	r3, [r4, #8]
 8046a66:	6963      	ldr	r3, [r4, #20]
 8046a68:	425b      	negs	r3, r3
 8046a6a:	61a3      	str	r3, [r4, #24]
 8046a6c:	6923      	ldr	r3, [r4, #16]
 8046a6e:	b943      	cbnz	r3, 8046a82 <__swsetup_r+0xc6>
 8046a70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8046a74:	d1ba      	bne.n	80469ec <__swsetup_r+0x30>
 8046a76:	bd70      	pop	{r4, r5, r6, pc}
 8046a78:	0781      	lsls	r1, r0, #30
 8046a7a:	bf58      	it	pl
 8046a7c:	6963      	ldrpl	r3, [r4, #20]
 8046a7e:	60a3      	str	r3, [r4, #8]
 8046a80:	e7f4      	b.n	8046a6c <__swsetup_r+0xb0>
 8046a82:	2000      	movs	r0, #0
 8046a84:	e7f7      	b.n	8046a76 <__swsetup_r+0xba>
 8046a86:	bf00      	nop
 8046a88:	2001801c 	.word	0x2001801c
 8046a8c:	08047624 	.word	0x08047624
 8046a90:	08047644 	.word	0x08047644
 8046a94:	08047604 	.word	0x08047604

08046a98 <abort>:
 8046a98:	2006      	movs	r0, #6
 8046a9a:	b508      	push	{r3, lr}
 8046a9c:	f000 fa4e 	bl	8046f3c <raise>
 8046aa0:	2001      	movs	r0, #1
 8046aa2:	f7fa fd3d 	bl	8041520 <_exit>
	...

08046aa8 <__sflush_r>:
 8046aa8:	898a      	ldrh	r2, [r1, #12]
 8046aaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8046aae:	4605      	mov	r5, r0
 8046ab0:	0710      	lsls	r0, r2, #28
 8046ab2:	460c      	mov	r4, r1
 8046ab4:	d458      	bmi.n	8046b68 <__sflush_r+0xc0>
 8046ab6:	684b      	ldr	r3, [r1, #4]
 8046ab8:	2b00      	cmp	r3, #0
 8046aba:	dc05      	bgt.n	8046ac8 <__sflush_r+0x20>
 8046abc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8046abe:	2b00      	cmp	r3, #0
 8046ac0:	dc02      	bgt.n	8046ac8 <__sflush_r+0x20>
 8046ac2:	2000      	movs	r0, #0
 8046ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8046ac8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8046aca:	2e00      	cmp	r6, #0
 8046acc:	d0f9      	beq.n	8046ac2 <__sflush_r+0x1a>
 8046ace:	2300      	movs	r3, #0
 8046ad0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8046ad4:	682f      	ldr	r7, [r5, #0]
 8046ad6:	602b      	str	r3, [r5, #0]
 8046ad8:	d032      	beq.n	8046b40 <__sflush_r+0x98>
 8046ada:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8046adc:	89a3      	ldrh	r3, [r4, #12]
 8046ade:	075a      	lsls	r2, r3, #29
 8046ae0:	d505      	bpl.n	8046aee <__sflush_r+0x46>
 8046ae2:	6863      	ldr	r3, [r4, #4]
 8046ae4:	1ac0      	subs	r0, r0, r3
 8046ae6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8046ae8:	b10b      	cbz	r3, 8046aee <__sflush_r+0x46>
 8046aea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8046aec:	1ac0      	subs	r0, r0, r3
 8046aee:	2300      	movs	r3, #0
 8046af0:	4602      	mov	r2, r0
 8046af2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8046af4:	4628      	mov	r0, r5
 8046af6:	6a21      	ldr	r1, [r4, #32]
 8046af8:	47b0      	blx	r6
 8046afa:	1c43      	adds	r3, r0, #1
 8046afc:	89a3      	ldrh	r3, [r4, #12]
 8046afe:	d106      	bne.n	8046b0e <__sflush_r+0x66>
 8046b00:	6829      	ldr	r1, [r5, #0]
 8046b02:	291d      	cmp	r1, #29
 8046b04:	d82c      	bhi.n	8046b60 <__sflush_r+0xb8>
 8046b06:	4a29      	ldr	r2, [pc, #164]	; (8046bac <__sflush_r+0x104>)
 8046b08:	40ca      	lsrs	r2, r1
 8046b0a:	07d6      	lsls	r6, r2, #31
 8046b0c:	d528      	bpl.n	8046b60 <__sflush_r+0xb8>
 8046b0e:	2200      	movs	r2, #0
 8046b10:	04d9      	lsls	r1, r3, #19
 8046b12:	6062      	str	r2, [r4, #4]
 8046b14:	6922      	ldr	r2, [r4, #16]
 8046b16:	6022      	str	r2, [r4, #0]
 8046b18:	d504      	bpl.n	8046b24 <__sflush_r+0x7c>
 8046b1a:	1c42      	adds	r2, r0, #1
 8046b1c:	d101      	bne.n	8046b22 <__sflush_r+0x7a>
 8046b1e:	682b      	ldr	r3, [r5, #0]
 8046b20:	b903      	cbnz	r3, 8046b24 <__sflush_r+0x7c>
 8046b22:	6560      	str	r0, [r4, #84]	; 0x54
 8046b24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8046b26:	602f      	str	r7, [r5, #0]
 8046b28:	2900      	cmp	r1, #0
 8046b2a:	d0ca      	beq.n	8046ac2 <__sflush_r+0x1a>
 8046b2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8046b30:	4299      	cmp	r1, r3
 8046b32:	d002      	beq.n	8046b3a <__sflush_r+0x92>
 8046b34:	4628      	mov	r0, r5
 8046b36:	f7fd fab7 	bl	80440a8 <_free_r>
 8046b3a:	2000      	movs	r0, #0
 8046b3c:	6360      	str	r0, [r4, #52]	; 0x34
 8046b3e:	e7c1      	b.n	8046ac4 <__sflush_r+0x1c>
 8046b40:	6a21      	ldr	r1, [r4, #32]
 8046b42:	2301      	movs	r3, #1
 8046b44:	4628      	mov	r0, r5
 8046b46:	47b0      	blx	r6
 8046b48:	1c41      	adds	r1, r0, #1
 8046b4a:	d1c7      	bne.n	8046adc <__sflush_r+0x34>
 8046b4c:	682b      	ldr	r3, [r5, #0]
 8046b4e:	2b00      	cmp	r3, #0
 8046b50:	d0c4      	beq.n	8046adc <__sflush_r+0x34>
 8046b52:	2b1d      	cmp	r3, #29
 8046b54:	d001      	beq.n	8046b5a <__sflush_r+0xb2>
 8046b56:	2b16      	cmp	r3, #22
 8046b58:	d101      	bne.n	8046b5e <__sflush_r+0xb6>
 8046b5a:	602f      	str	r7, [r5, #0]
 8046b5c:	e7b1      	b.n	8046ac2 <__sflush_r+0x1a>
 8046b5e:	89a3      	ldrh	r3, [r4, #12]
 8046b60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8046b64:	81a3      	strh	r3, [r4, #12]
 8046b66:	e7ad      	b.n	8046ac4 <__sflush_r+0x1c>
 8046b68:	690f      	ldr	r7, [r1, #16]
 8046b6a:	2f00      	cmp	r7, #0
 8046b6c:	d0a9      	beq.n	8046ac2 <__sflush_r+0x1a>
 8046b6e:	0793      	lsls	r3, r2, #30
 8046b70:	680e      	ldr	r6, [r1, #0]
 8046b72:	600f      	str	r7, [r1, #0]
 8046b74:	bf0c      	ite	eq
 8046b76:	694b      	ldreq	r3, [r1, #20]
 8046b78:	2300      	movne	r3, #0
 8046b7a:	eba6 0807 	sub.w	r8, r6, r7
 8046b7e:	608b      	str	r3, [r1, #8]
 8046b80:	f1b8 0f00 	cmp.w	r8, #0
 8046b84:	dd9d      	ble.n	8046ac2 <__sflush_r+0x1a>
 8046b86:	4643      	mov	r3, r8
 8046b88:	463a      	mov	r2, r7
 8046b8a:	6a21      	ldr	r1, [r4, #32]
 8046b8c:	4628      	mov	r0, r5
 8046b8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8046b90:	47b0      	blx	r6
 8046b92:	2800      	cmp	r0, #0
 8046b94:	dc06      	bgt.n	8046ba4 <__sflush_r+0xfc>
 8046b96:	89a3      	ldrh	r3, [r4, #12]
 8046b98:	f04f 30ff 	mov.w	r0, #4294967295
 8046b9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8046ba0:	81a3      	strh	r3, [r4, #12]
 8046ba2:	e78f      	b.n	8046ac4 <__sflush_r+0x1c>
 8046ba4:	4407      	add	r7, r0
 8046ba6:	eba8 0800 	sub.w	r8, r8, r0
 8046baa:	e7e9      	b.n	8046b80 <__sflush_r+0xd8>
 8046bac:	20400001 	.word	0x20400001

08046bb0 <_fflush_r>:
 8046bb0:	b538      	push	{r3, r4, r5, lr}
 8046bb2:	690b      	ldr	r3, [r1, #16]
 8046bb4:	4605      	mov	r5, r0
 8046bb6:	460c      	mov	r4, r1
 8046bb8:	b913      	cbnz	r3, 8046bc0 <_fflush_r+0x10>
 8046bba:	2500      	movs	r5, #0
 8046bbc:	4628      	mov	r0, r5
 8046bbe:	bd38      	pop	{r3, r4, r5, pc}
 8046bc0:	b118      	cbz	r0, 8046bca <_fflush_r+0x1a>
 8046bc2:	6983      	ldr	r3, [r0, #24]
 8046bc4:	b90b      	cbnz	r3, 8046bca <_fflush_r+0x1a>
 8046bc6:	f000 f887 	bl	8046cd8 <__sinit>
 8046bca:	4b14      	ldr	r3, [pc, #80]	; (8046c1c <_fflush_r+0x6c>)
 8046bcc:	429c      	cmp	r4, r3
 8046bce:	d11b      	bne.n	8046c08 <_fflush_r+0x58>
 8046bd0:	686c      	ldr	r4, [r5, #4]
 8046bd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8046bd6:	2b00      	cmp	r3, #0
 8046bd8:	d0ef      	beq.n	8046bba <_fflush_r+0xa>
 8046bda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8046bdc:	07d0      	lsls	r0, r2, #31
 8046bde:	d404      	bmi.n	8046bea <_fflush_r+0x3a>
 8046be0:	0599      	lsls	r1, r3, #22
 8046be2:	d402      	bmi.n	8046bea <_fflush_r+0x3a>
 8046be4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8046be6:	f7ff fd08 	bl	80465fa <__retarget_lock_acquire_recursive>
 8046bea:	4628      	mov	r0, r5
 8046bec:	4621      	mov	r1, r4
 8046bee:	f7ff ff5b 	bl	8046aa8 <__sflush_r>
 8046bf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8046bf4:	4605      	mov	r5, r0
 8046bf6:	07da      	lsls	r2, r3, #31
 8046bf8:	d4e0      	bmi.n	8046bbc <_fflush_r+0xc>
 8046bfa:	89a3      	ldrh	r3, [r4, #12]
 8046bfc:	059b      	lsls	r3, r3, #22
 8046bfe:	d4dd      	bmi.n	8046bbc <_fflush_r+0xc>
 8046c00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8046c02:	f7ff fcfb 	bl	80465fc <__retarget_lock_release_recursive>
 8046c06:	e7d9      	b.n	8046bbc <_fflush_r+0xc>
 8046c08:	4b05      	ldr	r3, [pc, #20]	; (8046c20 <_fflush_r+0x70>)
 8046c0a:	429c      	cmp	r4, r3
 8046c0c:	d101      	bne.n	8046c12 <_fflush_r+0x62>
 8046c0e:	68ac      	ldr	r4, [r5, #8]
 8046c10:	e7df      	b.n	8046bd2 <_fflush_r+0x22>
 8046c12:	4b04      	ldr	r3, [pc, #16]	; (8046c24 <_fflush_r+0x74>)
 8046c14:	429c      	cmp	r4, r3
 8046c16:	bf08      	it	eq
 8046c18:	68ec      	ldreq	r4, [r5, #12]
 8046c1a:	e7da      	b.n	8046bd2 <_fflush_r+0x22>
 8046c1c:	08047624 	.word	0x08047624
 8046c20:	08047644 	.word	0x08047644
 8046c24:	08047604 	.word	0x08047604

08046c28 <std>:
 8046c28:	2300      	movs	r3, #0
 8046c2a:	b510      	push	{r4, lr}
 8046c2c:	4604      	mov	r4, r0
 8046c2e:	6083      	str	r3, [r0, #8]
 8046c30:	8181      	strh	r1, [r0, #12]
 8046c32:	4619      	mov	r1, r3
 8046c34:	6643      	str	r3, [r0, #100]	; 0x64
 8046c36:	81c2      	strh	r2, [r0, #14]
 8046c38:	2208      	movs	r2, #8
 8046c3a:	6183      	str	r3, [r0, #24]
 8046c3c:	e9c0 3300 	strd	r3, r3, [r0]
 8046c40:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8046c44:	305c      	adds	r0, #92	; 0x5c
 8046c46:	f7fd fa18 	bl	804407a <memset>
 8046c4a:	4b05      	ldr	r3, [pc, #20]	; (8046c60 <std+0x38>)
 8046c4c:	6224      	str	r4, [r4, #32]
 8046c4e:	6263      	str	r3, [r4, #36]	; 0x24
 8046c50:	4b04      	ldr	r3, [pc, #16]	; (8046c64 <std+0x3c>)
 8046c52:	62a3      	str	r3, [r4, #40]	; 0x28
 8046c54:	4b04      	ldr	r3, [pc, #16]	; (8046c68 <std+0x40>)
 8046c56:	62e3      	str	r3, [r4, #44]	; 0x2c
 8046c58:	4b04      	ldr	r3, [pc, #16]	; (8046c6c <std+0x44>)
 8046c5a:	6323      	str	r3, [r4, #48]	; 0x30
 8046c5c:	bd10      	pop	{r4, pc}
 8046c5e:	bf00      	nop
 8046c60:	08046f75 	.word	0x08046f75
 8046c64:	08046f97 	.word	0x08046f97
 8046c68:	08046fcf 	.word	0x08046fcf
 8046c6c:	08046ff3 	.word	0x08046ff3

08046c70 <_cleanup_r>:
 8046c70:	4901      	ldr	r1, [pc, #4]	; (8046c78 <_cleanup_r+0x8>)
 8046c72:	f000 b8af 	b.w	8046dd4 <_fwalk_reent>
 8046c76:	bf00      	nop
 8046c78:	08046bb1 	.word	0x08046bb1

08046c7c <__sfmoreglue>:
 8046c7c:	b570      	push	{r4, r5, r6, lr}
 8046c7e:	1e4a      	subs	r2, r1, #1
 8046c80:	2568      	movs	r5, #104	; 0x68
 8046c82:	460e      	mov	r6, r1
 8046c84:	4355      	muls	r5, r2
 8046c86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8046c8a:	f7fd fa5d 	bl	8044148 <_malloc_r>
 8046c8e:	4604      	mov	r4, r0
 8046c90:	b140      	cbz	r0, 8046ca4 <__sfmoreglue+0x28>
 8046c92:	2100      	movs	r1, #0
 8046c94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8046c98:	e9c0 1600 	strd	r1, r6, [r0]
 8046c9c:	300c      	adds	r0, #12
 8046c9e:	60a0      	str	r0, [r4, #8]
 8046ca0:	f7fd f9eb 	bl	804407a <memset>
 8046ca4:	4620      	mov	r0, r4
 8046ca6:	bd70      	pop	{r4, r5, r6, pc}

08046ca8 <__sfp_lock_acquire>:
 8046ca8:	4801      	ldr	r0, [pc, #4]	; (8046cb0 <__sfp_lock_acquire+0x8>)
 8046caa:	f7ff bca6 	b.w	80465fa <__retarget_lock_acquire_recursive>
 8046cae:	bf00      	nop
 8046cb0:	20018308 	.word	0x20018308

08046cb4 <__sfp_lock_release>:
 8046cb4:	4801      	ldr	r0, [pc, #4]	; (8046cbc <__sfp_lock_release+0x8>)
 8046cb6:	f7ff bca1 	b.w	80465fc <__retarget_lock_release_recursive>
 8046cba:	bf00      	nop
 8046cbc:	20018308 	.word	0x20018308

08046cc0 <__sinit_lock_acquire>:
 8046cc0:	4801      	ldr	r0, [pc, #4]	; (8046cc8 <__sinit_lock_acquire+0x8>)
 8046cc2:	f7ff bc9a 	b.w	80465fa <__retarget_lock_acquire_recursive>
 8046cc6:	bf00      	nop
 8046cc8:	20018303 	.word	0x20018303

08046ccc <__sinit_lock_release>:
 8046ccc:	4801      	ldr	r0, [pc, #4]	; (8046cd4 <__sinit_lock_release+0x8>)
 8046cce:	f7ff bc95 	b.w	80465fc <__retarget_lock_release_recursive>
 8046cd2:	bf00      	nop
 8046cd4:	20018303 	.word	0x20018303

08046cd8 <__sinit>:
 8046cd8:	b510      	push	{r4, lr}
 8046cda:	4604      	mov	r4, r0
 8046cdc:	f7ff fff0 	bl	8046cc0 <__sinit_lock_acquire>
 8046ce0:	69a3      	ldr	r3, [r4, #24]
 8046ce2:	b11b      	cbz	r3, 8046cec <__sinit+0x14>
 8046ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8046ce8:	f7ff bff0 	b.w	8046ccc <__sinit_lock_release>
 8046cec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8046cf0:	6523      	str	r3, [r4, #80]	; 0x50
 8046cf2:	4620      	mov	r0, r4
 8046cf4:	4b12      	ldr	r3, [pc, #72]	; (8046d40 <__sinit+0x68>)
 8046cf6:	4a13      	ldr	r2, [pc, #76]	; (8046d44 <__sinit+0x6c>)
 8046cf8:	681b      	ldr	r3, [r3, #0]
 8046cfa:	62a2      	str	r2, [r4, #40]	; 0x28
 8046cfc:	42a3      	cmp	r3, r4
 8046cfe:	bf04      	itt	eq
 8046d00:	2301      	moveq	r3, #1
 8046d02:	61a3      	streq	r3, [r4, #24]
 8046d04:	f000 f820 	bl	8046d48 <__sfp>
 8046d08:	6060      	str	r0, [r4, #4]
 8046d0a:	4620      	mov	r0, r4
 8046d0c:	f000 f81c 	bl	8046d48 <__sfp>
 8046d10:	60a0      	str	r0, [r4, #8]
 8046d12:	4620      	mov	r0, r4
 8046d14:	f000 f818 	bl	8046d48 <__sfp>
 8046d18:	2200      	movs	r2, #0
 8046d1a:	2104      	movs	r1, #4
 8046d1c:	60e0      	str	r0, [r4, #12]
 8046d1e:	6860      	ldr	r0, [r4, #4]
 8046d20:	f7ff ff82 	bl	8046c28 <std>
 8046d24:	2201      	movs	r2, #1
 8046d26:	2109      	movs	r1, #9
 8046d28:	68a0      	ldr	r0, [r4, #8]
 8046d2a:	f7ff ff7d 	bl	8046c28 <std>
 8046d2e:	2202      	movs	r2, #2
 8046d30:	2112      	movs	r1, #18
 8046d32:	68e0      	ldr	r0, [r4, #12]
 8046d34:	f7ff ff78 	bl	8046c28 <std>
 8046d38:	2301      	movs	r3, #1
 8046d3a:	61a3      	str	r3, [r4, #24]
 8046d3c:	e7d2      	b.n	8046ce4 <__sinit+0xc>
 8046d3e:	bf00      	nop
 8046d40:	0804722c 	.word	0x0804722c
 8046d44:	08046c71 	.word	0x08046c71

08046d48 <__sfp>:
 8046d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8046d4a:	4607      	mov	r7, r0
 8046d4c:	f7ff ffac 	bl	8046ca8 <__sfp_lock_acquire>
 8046d50:	4b1e      	ldr	r3, [pc, #120]	; (8046dcc <__sfp+0x84>)
 8046d52:	681e      	ldr	r6, [r3, #0]
 8046d54:	69b3      	ldr	r3, [r6, #24]
 8046d56:	b913      	cbnz	r3, 8046d5e <__sfp+0x16>
 8046d58:	4630      	mov	r0, r6
 8046d5a:	f7ff ffbd 	bl	8046cd8 <__sinit>
 8046d5e:	3648      	adds	r6, #72	; 0x48
 8046d60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8046d64:	3b01      	subs	r3, #1
 8046d66:	d503      	bpl.n	8046d70 <__sfp+0x28>
 8046d68:	6833      	ldr	r3, [r6, #0]
 8046d6a:	b30b      	cbz	r3, 8046db0 <__sfp+0x68>
 8046d6c:	6836      	ldr	r6, [r6, #0]
 8046d6e:	e7f7      	b.n	8046d60 <__sfp+0x18>
 8046d70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8046d74:	b9d5      	cbnz	r5, 8046dac <__sfp+0x64>
 8046d76:	4b16      	ldr	r3, [pc, #88]	; (8046dd0 <__sfp+0x88>)
 8046d78:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8046d7c:	6665      	str	r5, [r4, #100]	; 0x64
 8046d7e:	60e3      	str	r3, [r4, #12]
 8046d80:	f7ff fc3a 	bl	80465f8 <__retarget_lock_init_recursive>
 8046d84:	f7ff ff96 	bl	8046cb4 <__sfp_lock_release>
 8046d88:	2208      	movs	r2, #8
 8046d8a:	4629      	mov	r1, r5
 8046d8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8046d90:	6025      	str	r5, [r4, #0]
 8046d92:	61a5      	str	r5, [r4, #24]
 8046d94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8046d98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8046d9c:	f7fd f96d 	bl	804407a <memset>
 8046da0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8046da4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8046da8:	4620      	mov	r0, r4
 8046daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8046dac:	3468      	adds	r4, #104	; 0x68
 8046dae:	e7d9      	b.n	8046d64 <__sfp+0x1c>
 8046db0:	2104      	movs	r1, #4
 8046db2:	4638      	mov	r0, r7
 8046db4:	f7ff ff62 	bl	8046c7c <__sfmoreglue>
 8046db8:	4604      	mov	r4, r0
 8046dba:	6030      	str	r0, [r6, #0]
 8046dbc:	2800      	cmp	r0, #0
 8046dbe:	d1d5      	bne.n	8046d6c <__sfp+0x24>
 8046dc0:	f7ff ff78 	bl	8046cb4 <__sfp_lock_release>
 8046dc4:	230c      	movs	r3, #12
 8046dc6:	603b      	str	r3, [r7, #0]
 8046dc8:	e7ee      	b.n	8046da8 <__sfp+0x60>
 8046dca:	bf00      	nop
 8046dcc:	0804722c 	.word	0x0804722c
 8046dd0:	ffff0001 	.word	0xffff0001

08046dd4 <_fwalk_reent>:
 8046dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8046dd8:	4606      	mov	r6, r0
 8046dda:	4688      	mov	r8, r1
 8046ddc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8046de0:	2700      	movs	r7, #0
 8046de2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8046de6:	f1b9 0901 	subs.w	r9, r9, #1
 8046dea:	d505      	bpl.n	8046df8 <_fwalk_reent+0x24>
 8046dec:	6824      	ldr	r4, [r4, #0]
 8046dee:	2c00      	cmp	r4, #0
 8046df0:	d1f7      	bne.n	8046de2 <_fwalk_reent+0xe>
 8046df2:	4638      	mov	r0, r7
 8046df4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8046df8:	89ab      	ldrh	r3, [r5, #12]
 8046dfa:	2b01      	cmp	r3, #1
 8046dfc:	d907      	bls.n	8046e0e <_fwalk_reent+0x3a>
 8046dfe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8046e02:	3301      	adds	r3, #1
 8046e04:	d003      	beq.n	8046e0e <_fwalk_reent+0x3a>
 8046e06:	4629      	mov	r1, r5
 8046e08:	4630      	mov	r0, r6
 8046e0a:	47c0      	blx	r8
 8046e0c:	4307      	orrs	r7, r0
 8046e0e:	3568      	adds	r5, #104	; 0x68
 8046e10:	e7e9      	b.n	8046de6 <_fwalk_reent+0x12>

08046e12 <__swhatbuf_r>:
 8046e12:	b570      	push	{r4, r5, r6, lr}
 8046e14:	460e      	mov	r6, r1
 8046e16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8046e1a:	b096      	sub	sp, #88	; 0x58
 8046e1c:	4614      	mov	r4, r2
 8046e1e:	2900      	cmp	r1, #0
 8046e20:	461d      	mov	r5, r3
 8046e22:	da07      	bge.n	8046e34 <__swhatbuf_r+0x22>
 8046e24:	2300      	movs	r3, #0
 8046e26:	602b      	str	r3, [r5, #0]
 8046e28:	89b3      	ldrh	r3, [r6, #12]
 8046e2a:	061a      	lsls	r2, r3, #24
 8046e2c:	d410      	bmi.n	8046e50 <__swhatbuf_r+0x3e>
 8046e2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8046e32:	e00e      	b.n	8046e52 <__swhatbuf_r+0x40>
 8046e34:	466a      	mov	r2, sp
 8046e36:	f000 f903 	bl	8047040 <_fstat_r>
 8046e3a:	2800      	cmp	r0, #0
 8046e3c:	dbf2      	blt.n	8046e24 <__swhatbuf_r+0x12>
 8046e3e:	9a01      	ldr	r2, [sp, #4]
 8046e40:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8046e44:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8046e48:	425a      	negs	r2, r3
 8046e4a:	415a      	adcs	r2, r3
 8046e4c:	602a      	str	r2, [r5, #0]
 8046e4e:	e7ee      	b.n	8046e2e <__swhatbuf_r+0x1c>
 8046e50:	2340      	movs	r3, #64	; 0x40
 8046e52:	2000      	movs	r0, #0
 8046e54:	6023      	str	r3, [r4, #0]
 8046e56:	b016      	add	sp, #88	; 0x58
 8046e58:	bd70      	pop	{r4, r5, r6, pc}
	...

08046e5c <__smakebuf_r>:
 8046e5c:	898b      	ldrh	r3, [r1, #12]
 8046e5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8046e60:	079d      	lsls	r5, r3, #30
 8046e62:	4606      	mov	r6, r0
 8046e64:	460c      	mov	r4, r1
 8046e66:	d507      	bpl.n	8046e78 <__smakebuf_r+0x1c>
 8046e68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8046e6c:	6023      	str	r3, [r4, #0]
 8046e6e:	6123      	str	r3, [r4, #16]
 8046e70:	2301      	movs	r3, #1
 8046e72:	6163      	str	r3, [r4, #20]
 8046e74:	b002      	add	sp, #8
 8046e76:	bd70      	pop	{r4, r5, r6, pc}
 8046e78:	ab01      	add	r3, sp, #4
 8046e7a:	466a      	mov	r2, sp
 8046e7c:	f7ff ffc9 	bl	8046e12 <__swhatbuf_r>
 8046e80:	9900      	ldr	r1, [sp, #0]
 8046e82:	4605      	mov	r5, r0
 8046e84:	4630      	mov	r0, r6
 8046e86:	f7fd f95f 	bl	8044148 <_malloc_r>
 8046e8a:	b948      	cbnz	r0, 8046ea0 <__smakebuf_r+0x44>
 8046e8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8046e90:	059a      	lsls	r2, r3, #22
 8046e92:	d4ef      	bmi.n	8046e74 <__smakebuf_r+0x18>
 8046e94:	f023 0303 	bic.w	r3, r3, #3
 8046e98:	f043 0302 	orr.w	r3, r3, #2
 8046e9c:	81a3      	strh	r3, [r4, #12]
 8046e9e:	e7e3      	b.n	8046e68 <__smakebuf_r+0xc>
 8046ea0:	4b0d      	ldr	r3, [pc, #52]	; (8046ed8 <__smakebuf_r+0x7c>)
 8046ea2:	62b3      	str	r3, [r6, #40]	; 0x28
 8046ea4:	89a3      	ldrh	r3, [r4, #12]
 8046ea6:	6020      	str	r0, [r4, #0]
 8046ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8046eac:	6120      	str	r0, [r4, #16]
 8046eae:	81a3      	strh	r3, [r4, #12]
 8046eb0:	9b00      	ldr	r3, [sp, #0]
 8046eb2:	6163      	str	r3, [r4, #20]
 8046eb4:	9b01      	ldr	r3, [sp, #4]
 8046eb6:	b15b      	cbz	r3, 8046ed0 <__smakebuf_r+0x74>
 8046eb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8046ebc:	4630      	mov	r0, r6
 8046ebe:	f000 f8d1 	bl	8047064 <_isatty_r>
 8046ec2:	b128      	cbz	r0, 8046ed0 <__smakebuf_r+0x74>
 8046ec4:	89a3      	ldrh	r3, [r4, #12]
 8046ec6:	f023 0303 	bic.w	r3, r3, #3
 8046eca:	f043 0301 	orr.w	r3, r3, #1
 8046ece:	81a3      	strh	r3, [r4, #12]
 8046ed0:	89a0      	ldrh	r0, [r4, #12]
 8046ed2:	4305      	orrs	r5, r0
 8046ed4:	81a5      	strh	r5, [r4, #12]
 8046ed6:	e7cd      	b.n	8046e74 <__smakebuf_r+0x18>
 8046ed8:	08046c71 	.word	0x08046c71

08046edc <_malloc_usable_size_r>:
 8046edc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8046ee0:	1f18      	subs	r0, r3, #4
 8046ee2:	2b00      	cmp	r3, #0
 8046ee4:	bfbc      	itt	lt
 8046ee6:	580b      	ldrlt	r3, [r1, r0]
 8046ee8:	18c0      	addlt	r0, r0, r3
 8046eea:	4770      	bx	lr

08046eec <_raise_r>:
 8046eec:	291f      	cmp	r1, #31
 8046eee:	b538      	push	{r3, r4, r5, lr}
 8046ef0:	4604      	mov	r4, r0
 8046ef2:	460d      	mov	r5, r1
 8046ef4:	d904      	bls.n	8046f00 <_raise_r+0x14>
 8046ef6:	2316      	movs	r3, #22
 8046ef8:	6003      	str	r3, [r0, #0]
 8046efa:	f04f 30ff 	mov.w	r0, #4294967295
 8046efe:	bd38      	pop	{r3, r4, r5, pc}
 8046f00:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8046f02:	b112      	cbz	r2, 8046f0a <_raise_r+0x1e>
 8046f04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8046f08:	b94b      	cbnz	r3, 8046f1e <_raise_r+0x32>
 8046f0a:	4620      	mov	r0, r4
 8046f0c:	f000 f830 	bl	8046f70 <_getpid_r>
 8046f10:	462a      	mov	r2, r5
 8046f12:	4601      	mov	r1, r0
 8046f14:	4620      	mov	r0, r4
 8046f16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8046f1a:	f000 b817 	b.w	8046f4c <_kill_r>
 8046f1e:	2b01      	cmp	r3, #1
 8046f20:	d00a      	beq.n	8046f38 <_raise_r+0x4c>
 8046f22:	1c59      	adds	r1, r3, #1
 8046f24:	d103      	bne.n	8046f2e <_raise_r+0x42>
 8046f26:	2316      	movs	r3, #22
 8046f28:	6003      	str	r3, [r0, #0]
 8046f2a:	2001      	movs	r0, #1
 8046f2c:	e7e7      	b.n	8046efe <_raise_r+0x12>
 8046f2e:	2400      	movs	r4, #0
 8046f30:	4628      	mov	r0, r5
 8046f32:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8046f36:	4798      	blx	r3
 8046f38:	2000      	movs	r0, #0
 8046f3a:	e7e0      	b.n	8046efe <_raise_r+0x12>

08046f3c <raise>:
 8046f3c:	4b02      	ldr	r3, [pc, #8]	; (8046f48 <raise+0xc>)
 8046f3e:	4601      	mov	r1, r0
 8046f40:	6818      	ldr	r0, [r3, #0]
 8046f42:	f7ff bfd3 	b.w	8046eec <_raise_r>
 8046f46:	bf00      	nop
 8046f48:	2001801c 	.word	0x2001801c

08046f4c <_kill_r>:
 8046f4c:	b538      	push	{r3, r4, r5, lr}
 8046f4e:	2300      	movs	r3, #0
 8046f50:	4d06      	ldr	r5, [pc, #24]	; (8046f6c <_kill_r+0x20>)
 8046f52:	4604      	mov	r4, r0
 8046f54:	4608      	mov	r0, r1
 8046f56:	4611      	mov	r1, r2
 8046f58:	602b      	str	r3, [r5, #0]
 8046f5a:	f7fa fad1 	bl	8041500 <_kill>
 8046f5e:	1c43      	adds	r3, r0, #1
 8046f60:	d102      	bne.n	8046f68 <_kill_r+0x1c>
 8046f62:	682b      	ldr	r3, [r5, #0]
 8046f64:	b103      	cbz	r3, 8046f68 <_kill_r+0x1c>
 8046f66:	6023      	str	r3, [r4, #0]
 8046f68:	bd38      	pop	{r3, r4, r5, pc}
 8046f6a:	bf00      	nop
 8046f6c:	200182fc 	.word	0x200182fc

08046f70 <_getpid_r>:
 8046f70:	f7fa babe 	b.w	80414f0 <_getpid>

08046f74 <__sread>:
 8046f74:	b510      	push	{r4, lr}
 8046f76:	460c      	mov	r4, r1
 8046f78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8046f7c:	f000 f894 	bl	80470a8 <_read_r>
 8046f80:	2800      	cmp	r0, #0
 8046f82:	bfab      	itete	ge
 8046f84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8046f86:	89a3      	ldrhlt	r3, [r4, #12]
 8046f88:	181b      	addge	r3, r3, r0
 8046f8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8046f8e:	bfac      	ite	ge
 8046f90:	6563      	strge	r3, [r4, #84]	; 0x54
 8046f92:	81a3      	strhlt	r3, [r4, #12]
 8046f94:	bd10      	pop	{r4, pc}

08046f96 <__swrite>:
 8046f96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8046f9a:	461f      	mov	r7, r3
 8046f9c:	898b      	ldrh	r3, [r1, #12]
 8046f9e:	4605      	mov	r5, r0
 8046fa0:	460c      	mov	r4, r1
 8046fa2:	05db      	lsls	r3, r3, #23
 8046fa4:	4616      	mov	r6, r2
 8046fa6:	d505      	bpl.n	8046fb4 <__swrite+0x1e>
 8046fa8:	2302      	movs	r3, #2
 8046faa:	2200      	movs	r2, #0
 8046fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8046fb0:	f000 f868 	bl	8047084 <_lseek_r>
 8046fb4:	89a3      	ldrh	r3, [r4, #12]
 8046fb6:	4632      	mov	r2, r6
 8046fb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8046fbc:	4628      	mov	r0, r5
 8046fbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8046fc2:	81a3      	strh	r3, [r4, #12]
 8046fc4:	463b      	mov	r3, r7
 8046fc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8046fca:	f000 b817 	b.w	8046ffc <_write_r>

08046fce <__sseek>:
 8046fce:	b510      	push	{r4, lr}
 8046fd0:	460c      	mov	r4, r1
 8046fd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8046fd6:	f000 f855 	bl	8047084 <_lseek_r>
 8046fda:	1c43      	adds	r3, r0, #1
 8046fdc:	89a3      	ldrh	r3, [r4, #12]
 8046fde:	bf15      	itete	ne
 8046fe0:	6560      	strne	r0, [r4, #84]	; 0x54
 8046fe2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8046fe6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8046fea:	81a3      	strheq	r3, [r4, #12]
 8046fec:	bf18      	it	ne
 8046fee:	81a3      	strhne	r3, [r4, #12]
 8046ff0:	bd10      	pop	{r4, pc}

08046ff2 <__sclose>:
 8046ff2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8046ff6:	f000 b813 	b.w	8047020 <_close_r>
	...

08046ffc <_write_r>:
 8046ffc:	b538      	push	{r3, r4, r5, lr}
 8046ffe:	4604      	mov	r4, r0
 8047000:	4d06      	ldr	r5, [pc, #24]	; (804701c <_write_r+0x20>)
 8047002:	4608      	mov	r0, r1
 8047004:	4611      	mov	r1, r2
 8047006:	2200      	movs	r2, #0
 8047008:	602a      	str	r2, [r5, #0]
 804700a:	461a      	mov	r2, r3
 804700c:	f7fa faaf 	bl	804156e <_write>
 8047010:	1c43      	adds	r3, r0, #1
 8047012:	d102      	bne.n	804701a <_write_r+0x1e>
 8047014:	682b      	ldr	r3, [r5, #0]
 8047016:	b103      	cbz	r3, 804701a <_write_r+0x1e>
 8047018:	6023      	str	r3, [r4, #0]
 804701a:	bd38      	pop	{r3, r4, r5, pc}
 804701c:	200182fc 	.word	0x200182fc

08047020 <_close_r>:
 8047020:	b538      	push	{r3, r4, r5, lr}
 8047022:	2300      	movs	r3, #0
 8047024:	4d05      	ldr	r5, [pc, #20]	; (804703c <_close_r+0x1c>)
 8047026:	4604      	mov	r4, r0
 8047028:	4608      	mov	r0, r1
 804702a:	602b      	str	r3, [r5, #0]
 804702c:	f7fa fabb 	bl	80415a6 <_close>
 8047030:	1c43      	adds	r3, r0, #1
 8047032:	d102      	bne.n	804703a <_close_r+0x1a>
 8047034:	682b      	ldr	r3, [r5, #0]
 8047036:	b103      	cbz	r3, 804703a <_close_r+0x1a>
 8047038:	6023      	str	r3, [r4, #0]
 804703a:	bd38      	pop	{r3, r4, r5, pc}
 804703c:	200182fc 	.word	0x200182fc

08047040 <_fstat_r>:
 8047040:	b538      	push	{r3, r4, r5, lr}
 8047042:	2300      	movs	r3, #0
 8047044:	4d06      	ldr	r5, [pc, #24]	; (8047060 <_fstat_r+0x20>)
 8047046:	4604      	mov	r4, r0
 8047048:	4608      	mov	r0, r1
 804704a:	4611      	mov	r1, r2
 804704c:	602b      	str	r3, [r5, #0]
 804704e:	f7fa fab6 	bl	80415be <_fstat>
 8047052:	1c43      	adds	r3, r0, #1
 8047054:	d102      	bne.n	804705c <_fstat_r+0x1c>
 8047056:	682b      	ldr	r3, [r5, #0]
 8047058:	b103      	cbz	r3, 804705c <_fstat_r+0x1c>
 804705a:	6023      	str	r3, [r4, #0]
 804705c:	bd38      	pop	{r3, r4, r5, pc}
 804705e:	bf00      	nop
 8047060:	200182fc 	.word	0x200182fc

08047064 <_isatty_r>:
 8047064:	b538      	push	{r3, r4, r5, lr}
 8047066:	2300      	movs	r3, #0
 8047068:	4d05      	ldr	r5, [pc, #20]	; (8047080 <_isatty_r+0x1c>)
 804706a:	4604      	mov	r4, r0
 804706c:	4608      	mov	r0, r1
 804706e:	602b      	str	r3, [r5, #0]
 8047070:	f7fa fab5 	bl	80415de <_isatty>
 8047074:	1c43      	adds	r3, r0, #1
 8047076:	d102      	bne.n	804707e <_isatty_r+0x1a>
 8047078:	682b      	ldr	r3, [r5, #0]
 804707a:	b103      	cbz	r3, 804707e <_isatty_r+0x1a>
 804707c:	6023      	str	r3, [r4, #0]
 804707e:	bd38      	pop	{r3, r4, r5, pc}
 8047080:	200182fc 	.word	0x200182fc

08047084 <_lseek_r>:
 8047084:	b538      	push	{r3, r4, r5, lr}
 8047086:	4604      	mov	r4, r0
 8047088:	4d06      	ldr	r5, [pc, #24]	; (80470a4 <_lseek_r+0x20>)
 804708a:	4608      	mov	r0, r1
 804708c:	4611      	mov	r1, r2
 804708e:	2200      	movs	r2, #0
 8047090:	602a      	str	r2, [r5, #0]
 8047092:	461a      	mov	r2, r3
 8047094:	f7fa faae 	bl	80415f4 <_lseek>
 8047098:	1c43      	adds	r3, r0, #1
 804709a:	d102      	bne.n	80470a2 <_lseek_r+0x1e>
 804709c:	682b      	ldr	r3, [r5, #0]
 804709e:	b103      	cbz	r3, 80470a2 <_lseek_r+0x1e>
 80470a0:	6023      	str	r3, [r4, #0]
 80470a2:	bd38      	pop	{r3, r4, r5, pc}
 80470a4:	200182fc 	.word	0x200182fc

080470a8 <_read_r>:
 80470a8:	b538      	push	{r3, r4, r5, lr}
 80470aa:	4604      	mov	r4, r0
 80470ac:	4d06      	ldr	r5, [pc, #24]	; (80470c8 <_read_r+0x20>)
 80470ae:	4608      	mov	r0, r1
 80470b0:	4611      	mov	r1, r2
 80470b2:	2200      	movs	r2, #0
 80470b4:	602a      	str	r2, [r5, #0]
 80470b6:	461a      	mov	r2, r3
 80470b8:	f7fa fa3c 	bl	8041534 <_read>
 80470bc:	1c43      	adds	r3, r0, #1
 80470be:	d102      	bne.n	80470c6 <_read_r+0x1e>
 80470c0:	682b      	ldr	r3, [r5, #0]
 80470c2:	b103      	cbz	r3, 80470c6 <_read_r+0x1e>
 80470c4:	6023      	str	r3, [r4, #0]
 80470c6:	bd38      	pop	{r3, r4, r5, pc}
 80470c8:	200182fc 	.word	0x200182fc

080470cc <_init>:
 80470cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80470ce:	bf00      	nop
 80470d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80470d2:	bc08      	pop	{r3}
 80470d4:	469e      	mov	lr, r3
 80470d6:	4770      	bx	lr

080470d8 <_fini>:
 80470d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80470da:	bf00      	nop
 80470dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80470de:	bc08      	pop	{r3}
 80470e0:	469e      	mov	lr, r3
 80470e2:	4770      	bx	lr
 80470e4:	0000      	movs	r0, r0
	...

080470e8 <__SECURE_SystemCoreClockUpdate_veneer>:
 80470e8:	b401      	push	{r0}
 80470ea:	4802      	ldr	r0, [pc, #8]	; (80470f4 <__SECURE_SystemCoreClockUpdate_veneer+0xc>)
 80470ec:	4684      	mov	ip, r0
 80470ee:	bc01      	pop	{r0}
 80470f0:	4760      	bx	ip
 80470f2:	bf00      	nop
 80470f4:	0c03e001 	.word	0x0c03e001
